{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/constants/constants.ts","webpack://mk-ui-frontend/./src/app/components/EmptyState/EmptyState.tsx","webpack://mk-ui-frontend/./src/openapi/base.ts","webpack://mk-ui-frontend/./src/openapi/api.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/common/app-config.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/InstanceListToolbar.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://mk-ui-frontend/./src/app/models/models.ts","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/auth/AuthContext.tsx"],"names":["InstanceStatus","EmptyState","createStreamsInstance","setCreateStreamsInstance","t","useTranslation","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","onClick","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","name","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequest","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","undefined","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","createServiceAccount","deleteKafkaById","id","localVarPath","encodeURIComponent","String","getKafkaById","listKafkas","page","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI","StatusColumn","status","statusDisplayName","ACCEPTED","Flex","FlexItem","spacer","default","toLowerCase","COMPLETED","CheckCircleIcon","className","FAILED","ExclamationCircleIcon","PROVISIONING","Spinner","IconSize","PendingIcon","getStatusIcon","InstanceListToolbar","apiService","DefaultApi","getInstance","Services","singleton","filterSelected","namesSelected","setNamesSelected","useState","isFilterExpanded","setIsFilterExpanded","inputValue","setInputValue","toggleGroupItems","ToolbarGroup","ToolbarFilter","chips","deleteChip","category","chip","toString","index","findIndex","prevState","Object","assign","splice","deleteChipGroup","categoryName","Select","SelectVariant","onToggle","selections","isOpen","value","disabled","map","option","SelectOption","isDisabled","key","InputGroup","TextInput","type","placeholder","onChange","input","ButtonVariant","trim","SearchIcon","items","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItem","Toolbar","collapseListedFiltersBreakpoint","clearAllFilters","ToolbarContent","StreamsTableView","tableRow","mainToggle","kafkaInstanceItems","onConnectToInstance","token","useContext","AuthContext","apisService","onDeleteInstance","event","res","console","info","log","Card","Table","cells","rows","forEach","row","cloud_provider","region","cloudProviderDisplayName","regionDisplayName","push","title","originalData","actionResolver","rowData","onDelete","onConnect","getActionResolver","TableHeader","TableBody","multi_az","cloudRegionsAvailable","label","CreateInstanceModal","newKafka","NewKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","addAlert","handleModalToggle","isFormValid","getTileIcon","provider","AwsIcon","color","Modal","ModalVariant","onClose","actions","isValid","message","test","AlertVariant","Form","FormAlert","Alert","isInline","FormGroup","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","Tile","isSelected","FormSelect","FormSelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","OpenshiftStreams","setKafkaInstanceItems","kafkaDataLoaded","setKafkaDataLoaded","setMainToggle","fetchKafkas","kafkaInstances","setTimeout","useEffect","PageSection","PageSectionVariants","Level","LevelItem","Switch","labelOff","isChecked","length"],"mappings":"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","file":"122.72a31e712267b7f25800.js","sourcesContent":["  enum InstanceStatus{\n     COMPLETED=\"complete\",\n     ACCEPTED=\"accepted\",\n     PROVISIONING=\"provisioning\",\n     FAILED=\"failed\"\n  }\n\n  export{\n    InstanceStatus\n  }","import React from 'react';\nimport { Title, Button, EmptyState as PFEmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\ntype EmptyStateProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst EmptyState = ({ createStreamsInstance, setCreateStreamsInstance, mainToggle }: EmptyStateProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PFEmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t(\"You don't have any Streams instances yet\")}\n        </Title>\n        <EmptyStateBody>{t('Create a Streams instance to get started')}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n          {t('Create a Streams Instance')}\n        </Button>\n      </PFEmptyState>\n    </>\n  );\n};\n\nexport { EmptyState };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:8000\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface TokenResponse\n */\nexport interface TokenResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface TokenResponseAllOf\n */\nexport interface TokenResponseAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponseAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponseAllOf\n     */\n    clientSecret?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequest: KafkaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequest' is not null or undefined\n            if (kafkaRequest === null || kafkaRequest === undefined) {\n                throw new RequiredError('kafkaRequest','Required parameter kafkaRequest was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequest !== undefined ? kafkaRequest : {}) : (kafkaRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceAccount`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(options?: any): AxiosPromise<TokenResponse> {\n            return DefaultApiFp(configuration).createServiceAccount(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequest} kafkaRequest Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a kafka service account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(options?: any): AxiosPromise<TokenResponse>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequest} kafkaRequest Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a kafka service account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { InstanceStatus } from '@app/constants';\nimport { capitalize } from '@app/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n};\n\nconst StatusColumn = ({ status }: StatusColumnProps) => {\n  const statusDisplayName = status === InstanceStatus.ACCEPTED ? 'pending case' : status;\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case InstanceStatus.COMPLETED:\n        return <CheckCircleIcon className=\"check-circle-icon-color\" />;\n      case InstanceStatus.FAILED:\n        return <ExclamationCircleIcon className=\"exclamation-circle-icon-color\" />;\n      case InstanceStatus.PROVISIONING:\n        return <Spinner size={IconSize.md} />;\n      case InstanceStatus.ACCEPTED:\n        return <PendingIcon />;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>{getStatusIcon()}</FlexItem>\n      <FlexItem>{capitalize(statusDisplayName)}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { DefaultApi } from  '../../openapi/api';\n\n// Initialize services.\n\nexport const BASE_PATH = 'https://api.stage.openshift.com';\n\nexport class Services {\n  static getInstance() {\n    if (Services.singleton === undefined) {\n      Services.singleton = new Services();\n    }\n\n    return Services.singleton;\n  }\n\n  private static singleton: Services;\n  public apiService = new DefaultApi();\n}\n","import React, { useState } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarToggleGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarFilter,\n  ToolbarChipGroup,\n  ToolbarChip,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport './InstanceListToolbar.css';\n\ntype InstanceListToolbarProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  filterSelected?: string;\n  namesSelected: string[];\n  setNamesSelected: (value: string[]) => void;\n};\n\nconst InstanceListToolbar: React.FunctionComponent<InstanceListToolbarProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  filterSelected,\n  namesSelected,\n  setNamesSelected,\n}) => {\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string | undefined>();\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  // options for filter dropdown\n  const filterOptions = [{ value: 'Name', disabled: false }];\n\n  const onInputChange = (input?: string) => {\n    setInputValue(input);\n  };\n\n  const onClear = () => {\n    setNamesSelected([]);\n  };\n\n  const onDeleteGroup = (category: string | ToolbarChipGroup) => {\n    if (category.toString().toLowerCase() === 'name') {\n      setNamesSelected([]);\n    }\n  };\n  const onDelete = (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => {\n    if (category.toString().toLowerCase() === 'name') {\n      const index = namesSelected.findIndex((name) => name === chip.toString().toLowerCase());\n      if (index >= 0) {\n        const prevState = Object.assign([], namesSelected);\n        prevState.splice(index, 1);\n        setNamesSelected(prevState);\n      }\n    }\n  };\n\n  const onSearch = () => {\n    if (inputValue && inputValue.trim() !== '') {\n      const index = namesSelected.findIndex((name) => name === inputValue.trim().toLowerCase());\n      if (index < 0) {\n        setNamesSelected([...namesSelected, inputValue.trim()]);\n        setInputValue('');\n      }\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter chips={namesSelected} deleteChip={onDelete} deleteChipGroup={onDeleteGroup} categoryName=\"Name\">\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n          >\n            {filterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n            ))}\n          </Select>\n          <InputGroup className=\"filter-text-input\">\n            <TextInput\n              name=\"filter text input\"\n              id=\"filterText\"\n              type=\"search\"\n              aria-label=\"Search filter input\"\n              placeholder={`Filter by ${filterSelected?.toLowerCase()}`}\n              onChange={onInputChange}\n              value={inputValue}\n            />\n            <Button variant={ButtonVariant.control} onClick={onSearch} aria-label=\"Search instances\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const items = (\n    <>\n      <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"lg\">\n        {toggleGroupItems}\n      </ToolbarToggleGroup>\n\n      <ToolbarItem>\n        <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n          Create Streams instance\n        </Button>\n      </ToolbarItem>\n    </>\n  );\n\n  return (\n    <Toolbar id=\"instance-toolbar\" collapseListedFiltersBreakpoint=\"lg\" clearAllFilters={onClear}>\n      <ToolbarContent>{items}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport { InstanceListToolbar };\n","import React, { useState, useContext } from 'react';\nimport { Table, TableHeader, TableBody, IRowData } from '@patternfly/react-table';\nimport { Card } from '@patternfly/react-core';\nimport { DefaultApi, KafkaRequest, KafkaRequestAllOf } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { InstanceStatus } from '@app/constants';\nimport { BASE_PATH, Services } from '../../common/app-config';\nimport { getCloudProviderDisplayName, getCloudRegionDisplayName } from '@app/utils';\nimport { InstanceListToolbar } from './InstanceListToolbar';\nimport { useHistory } from 'react-router';\nimport { AuthContext } from '@app/auth/AuthContext';\n\ntype TableProps = {\n  kafkaInstanceItems: KafkaRequestAllOf[];\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  onConnectToInstance: (data: KafkaRequest) => void;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  kafkaInstanceItems,\n  onConnectToInstance\n}: TableProps) => {\n\n  const tableColumns = ['Name', 'Cloud provider', 'Region', 'Status'];\n  const [filterSelected, setFilterSelected] = useState('Name');\n  const [namesSelected, setNamesSelected] = useState<string[]>([]);\n\n  const getActionResolver = (rowData: IRowData, onDelete: (data: KafkaRequest) => void, onConnect: (data: KafkaRequest) => void) => {\n    const { originalData } = rowData;\n    const title = originalData?.status === InstanceStatus.ACCEPTED ? 'Cancel instance' : 'Delete instance';\n    return [\n      {\n        title,\n        id: 'delete-instance',\n        onClick: () => onDelete(originalData),\n      },\n      {\n        title: 'Connect to instance',\n        id: 'connect-instance',\n        onClick: () => onConnect(originalData)\n      }\n    ];\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (string[] | IRowData)[] | undefined = [];\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, status } = row;\n      const cloudProviderDisplayName = getCloudProviderDisplayName(cloud_provider);\n      const regionDisplayName = getCloudRegionDisplayName(region);\n      tableRow.push({\n        cells: [\n          name,\n          cloudProviderDisplayName,\n          regionDisplayName,\n          {\n            title: <StatusColumn status={status} />,\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData) => {\n    return getActionResolver(rowData, onDeleteInstance, onConnectToInstance);\n  };\n\n  const { token } = useContext(AuthContext);\n\n  // Api Service\n  const apisService = new DefaultApi({\n    accessToken: token,\n    basePath: BASE_PATH\n  });\n\n  const onDeleteInstance = async (event: KafkaRequest) => {\n    if (event.id === undefined) {\n      throw new Error(\"kafka id is not set\")\n    }\n    try {\n      await apisService.deleteKafkaById(event.id)\n      .then((res) => {\n        console.info('Kafka successfully deleted');\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Card>\n      <InstanceListToolbar\n        mainToggle={mainToggle}\n        createStreamsInstance={createStreamsInstance}\n        setCreateStreamsInstance={setCreateStreamsInstance}\n        filterSelected={filterSelected}\n        namesSelected={namesSelected}\n        setNamesSelected={setNamesSelected}\n      />\n      <Table\n        cells={tableColumns}\n        rows={preparedTableCells()}\n        aria-label=\"cluster instance list\"\n        actionResolver={actionResolver}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Card>\n  );\n};\n\nexport { StreamsTableView };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n  Form,\n  FormGroup,\n  TextInput,\n  Tile,\n  FormSelect,\n  FormSelectOption,\n  FormAlert,\n  Alert,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { NewKafka, FormDataValidationState } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi } from '../../../openapi';\nimport { BASE_PATH } from '@app/common/app-config';\nimport { cloudProviderOptions, cloudRegionOptions } from '../../utils/utils';\n\ntype CreateInstanceModalProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst cloudRegionsAvailable = [{ value: '', label: 'Please select ', disabled: false }, ...cloudRegionOptions];\n\nconst CreateInstanceModal: React.FunctionComponent<CreateInstanceModalProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n}: CreateInstanceModalProps) => {\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = 'aws';\n  newKafka.region = 'us-east-1';\n  newKafka.multi_az = true;\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n\n  const { token } = useContext(AuthContext);\n\n  // Api Service\n  const apisService = new DefaultApi({\n    accessToken: token,\n    basePath: BASE_PATH\n  });\n\n  const { addAlert } = useAlerts();\n\n  const onCreateInstance = async (event) => {\n    let isValid = true;\n\n    if (kafkaFormData.name === undefined || kafkaFormData.name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: 'This is a required field' });\n    } else if (!/^[a-zA-Z0-9][a-zA-Z0-9 ]*$/.test(kafkaFormData.name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: 'Valid characters for instance name are letters from a to z and numbers from 0 to 9.',\n      });\n    }\n\n    if (kafkaFormData.region === undefined || kafkaFormData.region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: 'This is a required field' });\n    }\n\n    if (isValid) {\n      try {\n        await apisService.createKafka(true, kafkaFormData).then((res) => {\n          addAlert('Kafka successfully created', AlertVariant.success);\n          handleModalToggle();\n        });\n      } catch (error) {\n        addAlert(error, AlertVariant.danger);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    setNameValidated(\n      name === undefined || name.trim() === ''\n        ? { fieldState: 'error', message: 'This is a required field' }\n        : /^[a-zA-Z0-9][a-zA-Z0-9 ]*$/.test(name.trim())\n        ? { fieldState: 'success', message: '' }\n        : {\n            fieldState: 'error',\n            message: 'Valid characters for instance name are letters from a to z and numbers from 0 to 9.',\n          }\n    );\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    setCloudRegionValidated(\n      region === undefined || region === ''\n        ? { fieldState: 'error', message: 'This is a required field' }\n        : { fieldState: 'default', message: '' }\n    );\n    setKafkaFormData({ ...kafkaFormData, region: region });\n  };\n\n  const isFormValid = nameValidated.fieldState !== 'error' && cloudRegionValidated.fieldState !== 'error';\n  const getTileIcon = (provider: string) => {\n    switch (provider.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"cloud-region-icon\" />;\n      default:\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"cloud-region-icon\" />;\n    }\n  };\n  return (\n    <>\n      <Modal\n        variant={ModalVariant.medium}\n        title=\"Create a Streams instance\"\n        isOpen={createStreamsInstance}\n        onClose={handleModalToggle}\n        actions={[\n          <Button key=\"create\" variant=\"primary\" onClick={onCreateInstance} isDisabled={!isFormValid}>\n            Create instance\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            Cancel\n          </Button>,\n        ]}\n      >\n        <Form>\n          {(nameValidated.fieldState === 'error' || cloudRegionValidated.fieldState === 'error') && (\n            <FormAlert>\n              <Alert\n                variant=\"danger\"\n                title=\"You must fill out all required fields before you can proceed.\"\n                aria-live=\"polite\"\n                isInline\n              />\n            </FormAlert>\n          )}\n          <FormGroup\n            label=\"Instance name\"\n            helperTextInvalid={nameValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            isRequired\n            validated={nameValidated.fieldState}\n            fieldId=\"form-instance-name\"\n          >\n            <TextInput\n              isRequired\n              validated={nameValidated.fieldState}\n              type=\"text\"\n              id=\"form-instance-name\"\n              name=\"instance-name\"\n              value={kafkaFormData?.name}\n              onChange={handleInstanceNameChange}\n            />\n          </FormGroup>\n          <FormGroup label=\"Cloud provider\" fieldId=\"form-cloud-provider-name\">\n            {cloudProviderOptions.map((provider) => (\n              <Tile\n                key={`tile-${provider.value}`}\n                title={provider.label}\n                icon={getTileIcon(provider.value)}\n                isSelected={kafkaFormData.cloud_provider === provider.value}\n                onClick={() => setKafkaFormData({ ...kafkaFormData, cloud_provider: provider.value })}\n              />\n            ))}\n          </FormGroup>\n          <FormGroup\n            label=\"Cloud region\"\n            helperTextInvalid={cloudRegionValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            validated={cloudRegionValidated.fieldState}\n            fieldId=\"form-cloud-region-option\"\n          >\n            <FormSelect\n              validated={cloudRegionValidated.fieldState}\n              value={kafkaFormData.region}\n              onChange={handleCloudRegionChange}\n              id=\"cloud-region-select\"\n              name=\"cloud-region\"\n              aria-label=\"Cloud region\"\n            >\n              {cloudRegionsAvailable.map((option, index) => (\n                <FormSelectOption key={index} value={option.value} label={option.label} />\n              ))}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup label=\"Availabilty zones\" fieldId=\"availability-zones\">\n            <ToggleGroup aria-label=\"Availability zone selection\">\n              <ToggleGroupItem\n                text=\"Single\"\n                buttonId=\"single\"\n                isDisabled={true}\n                isSelected={kafkaFormData.multi_az === false}\n              />\n              <ToggleGroupItem text=\"Multi\" buttonId=\"multi\" isSelected={kafkaFormData.multi_az === true} />\n            </ToggleGroup>\n          </FormGroup>\n        </Form>\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Level, LevelItem, PageSection, PageSectionVariants, Spinner, Switch, Title } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { EmptyState } from '../components/EmptyState/EmptyState';\nimport { StreamsTableView } from '../components/StreamsTableView/StreamsTableView';\nimport { CreateInstanceModal } from '../components/CreateInstanceModal/CreateInstanceModal';\nimport { DefaultApi, KafkaRequest, KafkaRequestList } from '../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { BASE_PATH } from '@app/common/app-config';\n\ntype OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n}\n\nconst OpenshiftStreams = ({ onConnectToInstance }: OpenShiftStreamsProps) => {\n  const { token } = useContext(AuthContext);\n\n  // Api Service\n  const apisService = new DefaultApi({\n    accessToken: token,\n    basePath: BASE_PATH\n  });\n\n  const { t } = useTranslation();\n\n  // States\n  const [createStreamsInstance, setCreateStreamsInstance] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [mainToggle, setMainToggle] = useState(false);\n\n  // Functions\n  const fetchKafkas = async () => {\n    try {\n      await apisService.listKafkas().then((res) => {\n        const kafkaInstances = res.data;\n        console.log('what is res' + JSON.stringify(kafkaInstances));\n        // setKafkaInstancesList(kafkaInstances);\n        setKafkaInstanceItems(kafkaInstances.items);\n      }).then(() => setTimeout(fetchKafkas, 2000));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (token !== '') {\n      setKafkaDataLoaded(false);\n      fetchKafkas().then(() => setKafkaDataLoaded(true));\n\n    }\n  }, [token]);\n\n  if (token === '') {\n    return <Spinner />;\n  }\n\n  if (!kafkaDataLoaded) {\n    return <Spinner />;\n  }\n\n  const handleSwitchChange = () => {\n    setMainToggle(!mainToggle);\n  };\n\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <LevelItem>\n            <Title headingLevel=\"h1\" size=\"lg\">\n              {t('OpenshiftStreams')}\n            </Title>\n          </LevelItem>\n          <LevelItem>\n            <Switch\n              id=\"simple-switch\"\n              label={t('Mock UI')}\n              labelOff={t('Currently supported UI')}\n              isChecked={mainToggle}\n              onChange={() => handleSwitchChange()}\n            />\n          </LevelItem>\n        </Level>\n      </PageSection>\n      <PageSection>\n        {kafkaInstanceItems.length > 0 ? (\n          <StreamsTableView\n            kafkaInstanceItems={kafkaInstanceItems}\n            mainToggle={mainToggle}\n            onConnectToInstance={onConnectToInstance}\n            createStreamsInstance={createStreamsInstance}\n            setCreateStreamsInstance={setCreateStreamsInstance}\n            />\n        ) : (\n          <EmptyState\n            createStreamsInstance={createStreamsInstance}\n            setCreateStreamsInstance={setCreateStreamsInstance}\n            mainToggle={mainToggle}\n          />\n        )}\n        {createStreamsInstance && (\n          <CreateInstanceModal\n            createStreamsInstance={createStreamsInstance}\n            setCreateStreamsInstance={setCreateStreamsInstance}\n            mainToggle={mainToggle}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import React from 'react';\n\nexport interface IAuthContext {\n  token: string | undefined;\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n  token: undefined\n});\n"],"sourceRoot":""}