{"version":3,"sources":["webpack://kas-ui/./node_modules/byte-size/index.mjs"],"names":["defaultOptions","_options","WeakMap","referenceTables","metric","from","to","unit","long","metric_octet","iec","Math","pow","iec_octet","ByteSize","bytes","options","Object","assign","units","precision","locale","undefined","set","this","customUnits","prefix","abs","table","Error","find","u","defaultFormat","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","value","format","get","toStringFn","bind","byteSize"],"mappings":"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","file":"1662.73f7f97b.js","sourcesContent":["/**\n * @module byte-size\n */\n\nlet defaultOptions = {}\nconst _options = new WeakMap()\n\nconst referenceTables = {\n  metric: [\n    { from: 0, to: 1e3, unit: 'B', long: 'bytes' },\n    { from: 1e3, to: 1e6, unit: 'kB', long: 'kilobytes' },\n    { from: 1e6, to: 1e9, unit: 'MB', long: 'megabytes' },\n    { from: 1e9, to: 1e12, unit: 'GB', long: 'gigabytes' },\n    { from: 1e12, to: 1e15, unit: 'TB', long: 'terabytes' },\n    { from: 1e15, to: 1e18, unit: 'PB', long: 'petabytes' },\n    { from: 1e18, to: 1e21, unit: 'EB', long: 'exabytes' },\n    { from: 1e21, to: 1e24, unit: 'ZB', long: 'zettabytes' },\n    { from: 1e24, to: 1e27, unit: 'YB', long: 'yottabytes' }\n  ],\n  metric_octet: [\n    { from: 0, to: 1e3, unit: 'o', long: 'octets' },\n    { from: 1e3, to: 1e6, unit: 'ko', long: 'kilooctets' },\n    { from: 1e6, to: 1e9, unit: 'Mo', long: 'megaoctets' },\n    { from: 1e9, to: 1e12, unit: 'Go', long: 'gigaoctets' },\n    { from: 1e12, to: 1e15, unit: 'To', long: 'teraoctets' },\n    { from: 1e15, to: 1e18, unit: 'Po', long: 'petaoctets' },\n    { from: 1e18, to: 1e21, unit: 'Eo', long: 'exaoctets' },\n    { from: 1e21, to: 1e24, unit: 'Zo', long: 'zettaoctets' },\n    { from: 1e24, to: 1e27, unit: 'Yo', long: 'yottaoctets' }\n  ],\n  iec: [\n    { from: 0, to: Math.pow(1024, 1), unit: 'B', long: 'bytes' },\n    { from: Math.pow(1024, 1), to: Math.pow(1024, 2), unit: 'KiB', long: 'kibibytes' },\n    { from: Math.pow(1024, 2), to: Math.pow(1024, 3), unit: 'MiB', long: 'mebibytes' },\n    { from: Math.pow(1024, 3), to: Math.pow(1024, 4), unit: 'GiB', long: 'gibibytes' },\n    { from: Math.pow(1024, 4), to: Math.pow(1024, 5), unit: 'TiB', long: 'tebibytes' },\n    { from: Math.pow(1024, 5), to: Math.pow(1024, 6), unit: 'PiB', long: 'pebibytes' },\n    { from: Math.pow(1024, 6), to: Math.pow(1024, 7), unit: 'EiB', long: 'exbibytes' },\n    { from: Math.pow(1024, 7), to: Math.pow(1024, 8), unit: 'ZiB', long: 'zebibytes' },\n    { from: Math.pow(1024, 8), to: Math.pow(1024, 9), unit: 'YiB', long: 'yobibytes' }\n  ],\n  iec_octet: [\n    { from: 0, to: Math.pow(1024, 1), unit: 'o', long: 'octets' },\n    { from: Math.pow(1024, 1), to: Math.pow(1024, 2), unit: 'Kio', long: 'kibioctets' },\n    { from: Math.pow(1024, 2), to: Math.pow(1024, 3), unit: 'Mio', long: 'mebioctets' },\n    { from: Math.pow(1024, 3), to: Math.pow(1024, 4), unit: 'Gio', long: 'gibioctets' },\n    { from: Math.pow(1024, 4), to: Math.pow(1024, 5), unit: 'Tio', long: 'tebioctets' },\n    { from: Math.pow(1024, 5), to: Math.pow(1024, 6), unit: 'Pio', long: 'pebioctets' },\n    { from: Math.pow(1024, 6), to: Math.pow(1024, 7), unit: 'Eio', long: 'exbioctets' },\n    { from: Math.pow(1024, 7), to: Math.pow(1024, 8), unit: 'Zio', long: 'zebioctets' },\n    { from: Math.pow(1024, 8), to: Math.pow(1024, 9), unit: 'Yio', long: 'yobioctets' }\n  ]\n}\n\nclass ByteSize {\n  constructor (bytes, options) {\n    options = Object.assign({\n      units: 'metric',\n      precision: 1,\n      locale: undefined // Default to the user's system locale\n    }, defaultOptions, options)\n    _options.set(this, options)\n\n    Object.assign(referenceTables, options.customUnits)\n\n    const prefix = bytes < 0 ? '-' : ''\n    bytes = Math.abs(bytes)\n    const table = referenceTables[options.units]\n    if (table) {\n      const units = table.find(u => bytes >= u.from && bytes < u.to)\n      if (units) {\n        const defaultFormat = new Intl.NumberFormat(options.locale, {\n          style: 'decimal',\n          minimumFractionDigits: options.precision,\n          maximumFractionDigits: options.precision\n        })\n        const value = units.from === 0\n          ? prefix + bytes\n          : prefix + defaultFormat.format(bytes / units.from)\n        this.value = value\n        this.unit = units.unit\n        this.long = units.long\n      } else {\n        this.value = prefix + bytes\n        this.unit = ''\n        this.long = ''\n      }\n    } else {\n      throw new Error(`Invalid units specified: ${options.units}`)\n    }\n  }\n\n  toString () {\n    const options = _options.get(this)\n    return options.toStringFn ? options.toStringFn.bind(this)() : `${this.value} ${this.unit}`\n  }\n}\n\n/**\n * Returns an object with the spec `{ value: string, unit: string, long: string }`. The returned object defines a `toString` method meaning it can be used in any string context.\n * @param {number} - The bytes value to convert.\n * @param [options] {object} - Optional config.\n * @param [options.precision] {number} - Number of decimal places. Defaults to `1`.\n * @param [options.units] {string} - Specify `'metric'`, `'iec'`, `'metric_octet'`, `'iec_octet'` or the name of a property from the custom units table in `options.customUnits`. Defaults to `metric`.\n * @param [options.customUnits] {object} - An object containing one or more custom unit lookup tables.\n * @param [options.toStringFn] {function} - A `toString` function to override the default.\n * @param [options.locale] {string|string[]} - The locale to use for number formatting (e.g. `'de-DE'`). Defaults to your system locale. Passed directed into [Intl.NumberFormat()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat).\n * @returns {object}\n * @alias module:byte-size\n */\nfunction byteSize (bytes, options) {\n  return new ByteSize(bytes, options)\n}\n\n/**\n * Set the default `byteSize` options for the duration of the process.\n * @param options {object} - A `byteSize` options object.\n */\nbyteSize.defaultOptions = function (options) {\n  defaultOptions = options\n}\n\nexport default byteSize\n"],"sourceRoot":""}