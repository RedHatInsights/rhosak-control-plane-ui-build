{"version":3,"file":"3906.6ef22208.js","mappings":"iGAEAA,EAAQ,GAAwB,CAC9BC,KAAM,kBACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,uWACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAkB,oBAAoCA,EAAQ,IACtEA,EAAA,GAAqBA,EAAQ,I,6BCT7BA,EAAQ,GAAoB,CAC1BC,KAAM,cACNC,OAAQ,KACRC,MAAO,KACPC,QAAS,svBACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAc,oBAAoCA,EAAQ,IAClEA,EAAA,GAAqBA,EAAQ,I,kBCXuCO,EAAOP,QAAyJ,WAAY,aAAa,IAAIQ,EAAE,CAACC,IAAI,YAAYC,GAAG,SAASC,EAAE,aAAaC,GAAG,eAAeC,IAAI,sBAAsBC,KAAK,6BAA6B,OAAO,SAASC,EAAEC,EAAEC,GAAG,IAAIC,EAAEF,EAAEG,UAAUC,EAAEF,EAAEG,OAAOJ,EAAEK,GAAGC,QAAQf,EAAEU,EAAEG,OAAO,SAASN,QAAG,IAASA,IAAIA,EAAE,wBAAwB,IAAIC,EAAEQ,KAAKC,UAAUF,QAAQN,EAAE,SAASF,EAAEC,GAAG,OAAOD,EAAEW,QAAQ,qCAAoC,SAAUX,EAAEE,EAAEC,GAAG,IAAIE,EAAEF,GAAGA,EAAES,cAAc,OAAOV,GAAGD,EAAEE,IAAIV,EAAEU,IAAIF,EAAEI,GAAGM,QAAQ,kCAAiC,SAAUlB,EAAEO,EAAEC,GAAG,OAAOD,GAAGC,EAAEY,MAAM,SAApN,CAA8Nb,OAAE,IAASC,EAAE,GAAGA,GAAG,OAAOI,EAAES,KAAKL,KAAKP,KAA5sBF,I,qGC8B5E,SAASe,IACd,OAAQC,UAXFC,EAAiBD,cACG,IAAfC,EAAIC,OACN,cAC0B,IAAjBD,EAAIE,SACb,gBAC8B,IAArBF,EAAIG,aACb,eAEF,KATF,IACCH,EAcD,SAASI,IAIR,OAA4B,IAAAC,UAASP,KAApCQ,EAAS,KAAEC,EAAY,KACxBC,EAAqB,WAAM,OAAAD,EAAaT,MAQ9C,OAPA,IAAAW,YAAU,WACR,IAjCIT,EAiCEU,OAhCkB,KADpBV,EAAiBD,UACRE,OAEN,wBAC0B,IAAjBD,EAAIE,SACb,0BAC8B,IAArBF,EAAIG,aACb,yBAEF,GA0BL,OADAJ,SAASY,iBAAiBD,EAAkBF,GAAoB,GACzD,WACLT,SAASa,oBAAoBF,EAAkBF,MAEhD,IACI,CAAEF,UAAS,EAAEC,aAAY,K,4FC8CrBM,EAA0C,WAC7C,I,EA7EA9B,EAgFR,OADA+B,GAF2B,IAAAC,YAAU,iBA7E7BhC,GAAM,IAAAiC,kBAAgB,GACvB,EAAP,IACG,EAAAC,UAAA,mBAA8B,CAC7BC,cAAe,UACb,WACE,8FAMJC,QAAS,SACTC,MAAOrC,EAAE,4BAEX,EAAC,EAAAkC,UAAA,mBAA8B,CAC7BC,cAAe,UACb,WACE,wIAMJC,QAAS,SAEX,EAAC,EAAAF,UAAA,sBAAiC,CAChCC,cAAe,UACb,WACE,4EAMJC,QAAS,SACTC,MAAOrC,EAAE,iBAEX,EAAC,EAAAkC,UAAA,yBAAoC,CACnCC,cAAe,UACb,WACE,wIAMJC,QAAS,SACTC,MAAOrC,EAAE,4CAEX,EAAC,EAAAkC,UAAA,yBAAoC,CACnCC,cAAe,UACb,WACE,wIAMJE,MAAOrC,EAAE,yCAA2C,IACpDoC,QAAS,SAEX,EAAC,EAAAF,UAAA,mCAA8C,CAC7CC,cAAe,UACb,WACE,wIAMJE,MAAO,UAAGrC,EAAE,oDAAmD,KAC/DoC,QAAS,U,IASN,uC,kMCxFIE,EAAe,UAAW,WAAM,0CAChCC,EAAa,UAAW,WAAM,0CAO9BC,EACX,SAAC,G,IAeWC,EAfTC,EAAgB,mBACT1C,GAAM,IAAAiC,kBAAgB,EAExB,GACJ,UADMU,EAAiB,oBAAEC,EAAoB,uBAAEC,EAAsB,yBAkBjEC,GACJD,MAAAA,OAAsB,EAAtBA,EAAwBE,UAAW,gBACnCF,MAAAA,OAAsB,EAAtBA,EAAwBE,UAAW,eAErC,OACE,kBAAC,aAAc,CAACC,SAAU,kBAAC,KAAU,OACnC,kBAAC,EAAAC,KAAI,CACHC,UAAWP,EAAkBQ,WAC7BC,SAAU,SAACC,EAAGC,GAAQ,OAvBV,SAACA,GACbA,IAAQ,eACVV,EAAqB,gBAErBA,EAAqB,aAmBGW,CAAUD,KAEhC,kBAAC,EAAAE,IAAG,CACFC,SAAU,uBACVpB,MAAO,kBAAC,EAAAqB,aAAY,KAAE1D,EAAE,aAExB,kBAACuC,EAAU,OAEb,kBAAC,EAAAiB,IAAG,CACFC,SAAU,0BACVpB,MAAO,kBAAC,EAAAqB,aAAY,KAAE1D,EAAE,eAA6B,cACzC,4BAEZ,kBAACsC,EAAY,CACXqB,gBA5BAlB,GAA0BI,GAA0B,IAAE,uBACvDJ,MAAAA,OAAqB,EAArBA,EAAuBmB,SAAS,SACnCnB,EACA,UAAGA,EAAqB,SA0BpBK,eAAgBA,EAChBJ,iBAAkBA,EAClBmB,WAAYhB,MAAAA,OAAsB,EAAtBA,EAAwBiB,SCtC5CC,EAA+D,SAAC,G,IACpEC,EAAQ,WACYC,EAAa,sBACjCvB,EAAgB,mBAEhB,WAAa,KACL,IAAA1C,GAAM,IAAAiC,kBAAgB,EACxB,GAKF,UAJFiC,EAAoB,uBACpBrB,EAAsB,yBACtBsB,EAAmB,sBACnBC,EAAW,cAGb,OACE,kBAAC,KAAS,CACRC,WAAYH,EACZI,eAAsCC,IAA3B1B,EACX2B,QAASL,EACTM,iBACE,kBAACjC,EAAqB,CAACE,iBAAkBA,IAE3CgC,kBAAmB,CACjBC,KAAM,CAAEC,MAAO5E,EAAE,kBACjBqC,MAAO,CAAEwC,MAAOhC,MAAAA,OAAsB,EAAtBA,EAAwB3D,KAAM4F,aAAc,OAC7D,mBACiBb,EAClBc,mCAAoCX,GAEnCJ,K,2FCvCMgB,EAAwB,uBAEnCT,GAEWU,EAAoB,WAC/B,IAAMC,GAAS,IAAAC,YAAWH,GAC1B,QAAeT,IAAXW,EACF,MAAM,IAAIE,MAAM,wDAElB,OAAOF,GASIG,EACX,SAAC,G,IAAEC,EAAU,aAAEC,EAAe,kBAAE,IAAAC,mBAAAA,OAAkB,IAAG,GAAK,EAAExB,EAAQ,WAC5DyB,EAAa,YACb,GAA4C,IAAAnE,UAEhDgE,GAFK3C,EAAiB,KAAEC,EAAoB,KAGxC,GAAsD,IAAAtB,UAE1DiE,GAFK1C,EAAsB,KAAE6C,EAAyB,KAGlD,GAAgC,IAAApE,UAAkBkE,GAAjDpB,EAAW,KAAEuB,EAAc,KAClC,OACE,kBAACX,EAAsBY,SAAQ,CAC7Bf,MAAO,CACLX,0BAA4CK,IAAtB5B,EACtBA,uBACwB4B,IAAtB5B,EAAkC8C,EAAa9C,EACjDC,qBAAoB,EACpBC,uBAAsB,EACtB6C,0BAAyB,EACzBC,eAAc,EACdvB,YAAW,EACXyB,mBAAoB,SAACvC,GAEjBV,EADEU,GAGmBmC,IAGzBtB,oBAAqB,WACnBvB,OAAqB2B,GACrBmB,OAA0BnB,MAI7BP,K,6BCpET,IAAY8B,E,iBAAZ,SAAYA,GACV,oBACA,0BAFF,CAAYA,IAAAA,EAAiB,M,8JCWhBC,EAAuD,SAAC,G,IACnEC,EAAK,QACLC,EAAI,OACJC,EAAO,UAEClG,GAAM,IAAAiC,kBAAgB,EAC9B,OAAI+D,EAAQ,EAER,kBAAC,KAAa,CACZG,SAAS,8CACTC,UAAWJ,EACX5D,QAAS,EAAAiE,kBAAA,OACTJ,KAAMA,EACNC,QAASA,EACTI,OAAQ,CACNC,gBAAiBvG,EAAE,mBACnBwG,cAAexG,EAAE,mBACjByG,YAAazG,EAAE,iBACf0G,eAAgB1G,EAAE,oBAClB2G,WAAY3G,EAAE,gBACd4G,WAAY5G,EAAE,gBACd6G,cAAe7G,EAAE,kBACjB8G,SAAU9G,EAAE,gBAKb,sCC9BI+G,EAA+D,SAAC,G,IAC3EC,EAAK,QACLC,EAAU,aAEFjH,GAAM,IAAAiC,kBAAgB,EAE9B,OAAI+E,EAAQ,GAAKC,EAEb,kBAAC,KAAa,CACZC,gBAAiB,CACf9E,QAAS,eAEX+E,WAAY,CACV9E,MAAOrC,EAAE,qBAEXoH,oBAAqB,CACnBC,KAAMrH,EAAE,wCAKT,sC,WC2BIsH,EAA2D,SAAC,G,IACvEC,EAAgB,mBAChBC,EAAa,gBACbC,EAAc,iBACdC,EAAgB,mBAChBC,EAAY,eACZ1B,EAAI,OACJC,EAAO,UACPF,EAAK,QACL4B,EAAa,gBACbC,EAAe,kBACfC,EAAkB,qBAClBC,EAAU,aACVC,EAAU,aACVC,EAAO,UACPC,EAAc,iBACdC,EAAiB,oBACjBC,EAAa,gBACbC,EAAgB,mBAChBC,EAAQ,WACRC,EAAO,UACPC,EAAyB,4BAEjBxI,GAAM,IAAAiC,kBAAgB,EACtBY,GAA2B,UAAmB,uBAEhD4F,EAAQ,CACZ,CAAEpG,MAAOrC,EAAE,QAAS0I,WAAY,CAAC,EAAAC,WACjC,CAAEtG,MAAOrC,EAAE,kBAAmB0I,WAAY,CAAC,EAAAC,WAC3C,CAAEtG,MAAOrC,EAAE,UAAW0I,WAAY,CAAC,EAAAC,WACnC,CAAEtG,MAAOrC,EAAE,SAAU0I,WAAY,CAAC,EAAAC,WAClC,CAAEtG,MAAOrC,EAAE,UAAW0I,WAAY,CAAC,EAAAC,WACnC,CAAEtG,MAAOrC,EAAE,gBAAiB0I,WAAY,CAAC,EAAAC,YAGrCC,GAAS,IAAAC,UAAQ,WACrB,IAmBMC,GAAiBb,MAAAA,OAAO,EAAPA,EAASc,MAAM,OAAQ,GAC9C,GAAID,EAAKE,OAAS,EAChB,MAAO,CACLC,MAtB6B,SAACC,GAChC,OAAQA,EAAUC,eAChB,IAAK,OACH,OAAO,EACT,IAAK,iBACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,aACH,OAAO,EACT,QACE,QAOKC,CAAyBN,EAAK,IACrCO,UACEP,EAAK,KAAO,EAAAQ,gBAAA,IACR,EAAAA,gBAAA,IACA,EAAAA,gBAAA,QAIT,CAACrB,IAEEsB,GAAO,IAAAV,UAAQ,WACnB,IAAMW,EAAgD,GAChDC,GAAuB,QAC3BxD,EACAC,EACA0B,GAEF,OAAKC,GAOLC,MAAAA,GAAAA,EAAoB4B,SAAQ,SAACC,GAEzB,IAAAzK,EAOEyK,EAAG,KANLC,EAMED,EAAG,eALLE,EAKEF,EAAG,OAJLG,EAIEH,EAAG,WAHL5G,EAGE4G,EAAG,OAFLI,EAEEJ,EAAG,MADLK,EACEL,EAAG,cACDM,EAA2BjK,EAAE4J,GAC7BM,EAAoBlK,EAAE6J,GAC5BL,EAASW,KAAK,CACZ1B,MAAO,CACL,CACEpG,MACEU,IAAW,kBACXA,IAAW,WAAuB,EAGhC,kBAAC,EAAAqH,KAAI,CAACC,GAAI,iBAAUV,MAAAA,OAAG,EAAHA,EAAK7F,KAAO5E,IAGtC+K,EACAC,EACAH,EACA,CACE1H,MAAO,kBAAC,KAAY,CAACU,OAAQA,EAAQuH,aAAcpL,KAErD,CACEmD,MACE,qCACG,QAAiByH,EAAY9J,EAAE,QAChC,6BACCgK,KAA8B,OAAZ,WAAY,IAAZ,UAAY,EAAZ,YAAsB,uBAKjDO,aAAcZ,OAGXH,IAhDE,QAAmB,CACxBC,aAAY,EACZe,SAAU,kBAAC,EAAAC,SAAQ,MACnBzB,OAAQP,EAAMO,WA8CjB,CAAC/C,EAAMC,EAAS0B,EAAeC,EAAiBC,IA6F7C4C,EAA8B,SAClCC,EACAJ,EACAK,G,UAEuB,gCAAnBA,EACFnD,EAAe8C,GAEa,mCAAnBK,EACTlD,EAAiB6C,GACW,iBAAnBK,EACTpD,EAAc+C,GACc,kCAAnBK,GACTC,EAAeN,GAGjB,IAAMO,EACuC,QAA3C,EAA4B,QAA5B,EAAa,QAAb,EAAAH,MAAAA,OAAK,EAALA,EAAOI,cAAM,eAAEC,qBAAa,eAAEA,qBAAa,eAAEC,gBAC3CH,MAAAA,GACDA,EAA6BI,SAI5BL,EAAiB,SAAOM,GAAmB,uD,iEAC/C,SAAM5D,EAAiB4D,I,cAAvB,S,YA+CF,OACE,oCACE,kBAAC,KAAc,CACbjD,eAAgBA,EAChBC,kBAAmBA,EACnBnC,MAAOA,EACPC,KAAMA,EACNC,QAASA,EACTkC,cAAeA,EACfC,iBAAkBA,EAClBC,SAAUA,EACVC,QAASA,EACTC,0BAA2BA,IAE7B,kBAAC,KAAQ,CACP4C,WAAY,CACV3C,MAAK,EACLc,KAAI,EACJ,aAAcvJ,EAAE,yBAChBqL,eArLe,SAACC,G,YACtB,IAAKzD,EACH,MAAO,GAET,IAAM0C,EAA6Be,EAAQf,aAC3C,GACEA,EAAaxH,SAAW,kBACxBwH,EAAaxH,SAAW,aAExB,MAAO,GAET,IAEIwI,EAFEC,EACJjB,EAAaR,QAAUpC,GAAgBI,EA4EzC,OA1EKyD,IACHD,EAAkB,CAChBE,SAAS,EACTC,YAAY,EACZC,MAAO,CACLC,cAAe,OACfC,OAAQ,aAI6B,E,iCAEvCxJ,MAAOrC,EAAE,gBACT8D,GAAI,+BAA6B,EAChC,eAAgB,6BACjB,EAAAgI,QAAS,SAACnB,GACR,OAAAD,EACEC,EACAJ,EACA,gCACD,GACAgB,GAAe,CAClBQ,aAAc,CACZC,SAAU,OACVC,QAASjM,EAAE,mC,iCAIbqC,MAAOrC,EAAE,+BACT8D,GAAI,kCAAgC,EACnC,eAAgB,gCACjB,EAAAgI,QAAS,SAACnB,GACR,OAAAD,EACEC,EACAJ,EACA,mCACD,GACAgB,GAAe,CAClBQ,aAAc,CACZC,SAAU,OACVC,QAASjM,EAAE,sC,iCAIbqC,MAAOrC,EAAE,gBACT8D,GAAI,gBAAc,EACjB,eAAgB,iCACjB,EAAAgI,QAAS,SAACnB,GACR,OAAAa,GACAd,EAA4BC,EAAOJ,EAAc,iBAAe,GAC/DgB,GAAe,CAClBQ,aAAc,CACZC,SAAU,OACVC,QAASjM,EAAE,qC,iCAIbqC,MAAOrC,EAAE,mBACT8D,GAAI,iCAA+B,EAClC,eAAgB,4BACjB,EAAAgI,QAAS,SAACnB,GACR,OAAAa,GACAd,EACEC,EACAJ,EACA,kCACD,GACAgB,GAAe,CAClBQ,aAAc,CACZC,SAAU,OACVC,QAASjM,EAAE,sCAkGXkM,OAhEe,SAACC,EAAQlD,EAAOI,EAAW+C,GAChD,IAmBIC,EAAchD,GACdT,MAAAA,OAAM,EAANA,EAAQK,SAAUA,GAAgC,iBAAvBmD,EAAUE,WAGvCD,EAAc,EAAA/C,gBAAA,MAEhBtB,EAAW,UAzBsB,SAACiB,GAChC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,iBACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,aACT,QACE,MAAO,IAUCsD,CAAyBtD,GAAM,YAAIoD,KAuC3CzD,OAAM,EACN4D,4BAA4B,GAE9BC,UAAW5J,MAAAA,OAAsB,EAAtBA,EAAwB3D,KACnCwN,WAxCa,SACjB/B,EACAgC,EACAhD,GAEA,GAAIgB,EAAMI,kBAAkB6B,YAAa,CACvC,IAAMC,EAAUlC,EAAMI,OAAO8B,QAAQ1D,cAErC,GAAgB,WAAZ0D,GAAoC,MAAZA,EAC1B,OAGJpF,EAAekC,MAAAA,OAAG,EAAHA,EAAKY,eA6BhBuC,cAAc,mBACdnF,aAAcA,IAEhB,kBAACZ,EAAc,CACbC,OAAOc,MAAAA,OAAkB,EAAlBA,EAAoBkB,SAAU,EACrC/B,WAAYY,IAEd,kBAAC9B,EAAU,CAACC,MAAOA,EAAOC,KAAMA,EAAMC,QAASA,O,qKCxX9C,SAAS6G,EAAcC,EAAaC,GACzC,IAAMC,GAAgB,IAAAC,WAEtB,IAAAzL,YAAU,WACRwL,EAAcE,QAAUJ,IACvB,CAACA,KAEJ,IAAAtL,YAAU,WAIR,GAAc,OAAVuL,EAAgB,CAClB,IAAM,EAAKI,YAJb,WACEH,EAAcE,YAGcH,GAC5B,OAAO,WACLK,cAAc,OAIjB,CAACN,EAAUC,I,kHCHHM,EAA6C,WAChD,IAAAvN,GAAM,IAAAiC,kBAAgB,EACtBuL,IAAa,IAAAC,aAAc,IAAE,SAC/BC,GAAO,IAAAC,WAEP,GAAoC,IAAArM,UAAmB,IAAtDsM,EAAa,KAAEC,EAAgB,KAChC,GAA4C,IAAAvM,YAA3CwM,EAAiB,KAAEC,EAAoB,KAGxC,GAAoB,IAAAzM,UAA8B,IAAjD0M,EAAK,KAAEC,EAAQ,KAChB,GAAkC,IAAA3M,eACtCiD,GADKoD,EAAY,KAAEuG,EAAe,KAG5B3M,GAAc,EAAAF,EAAA,MAAmB,UACpB8M,GAAaC,KAAO,IAAE,aAE3C,IAAA1M,YAAU,W,MACU,QAAlB,EAAAgM,EAAKW,qBAAa,SAAEC,MAAK,SAACC,GAAa,OAAAL,EAAgBK,QACtD,CAACb,IAEJ,IAaMc,EAAyB,kE,yEACT,SAAMd,MAAAA,OAAI,EAAJA,EAAMU,IAAIK,Y,UAA9BC,EAAc,SACdC,EAAS,kBAAWhH,IACtB+G,IAAenN,EAAf,Y,iBAQA,O,sBAAA,GANoB,IAAI,EAAAqN,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXP,SAAQ,KAGMW,UAAU,GAAI,GAAI,GAAIH,GAAQL,MAAK,SAACS,GACpD,IAAMC,EAAiBD,EAAIE,KAC3BlB,EAAqBiB,EAAehB,W,cAFtC,S,oBAxBoB,SAACkB,G,MACrBC,GAEA,QAAkBD,KACpBC,EAAuB,QAAd,EAAAD,EAAME,gBAAQ,eAAEH,KAAKE,QAEhC3B,EAAS,CACPpL,QAAS,EAAAiN,aAAA,OACThN,MAAOrC,EAAE,+BACTsP,YAAaH,IAoBXI,C,0CAKN,IAAA7N,YAAU,WACRiG,GAAgB6G,MACf,CAAC7G,IAEJoF,GAAW,WAAM,OAAAyB,MAA0B,MAE3C,IAAMgB,EAA+B,WAUnC,GAAI1B,EAAmB,CAErB,IAOM2B,EAPqC3B,EAAkBa,QAC3D,SAACe,GACC,OAAAA,EAAE3M,SAAW,kBACb2M,EAAE3M,SAAW,gBAKd4L,QAAO,SAACe,GAAM,OAAA9B,EAAc+B,WAAU,SAACC,GAAO,OAAAA,IAAOF,EAAExQ,QAAQ,KAC/D2Q,KAAI,SAACH,GAAM,OAAAA,EAAExQ,MAAQ,MAElB4Q,GAAgB,0CACjBlC,GAAa,GACb6B,GAAgB,GAGrB5B,EAAiBiC,GAGjBA,EAAiBpG,SAAQ,SAACgG,IACL5B,MAAAA,OAAiB,EAAjBA,EAAmB6B,WACpC,SAACI,GAAS,OAAAA,EAAK7Q,OAASwQ,MAET,KAlCU,SAACxQ,GAC9B,IAAM+J,EAAQ2E,EAAc+B,WAAU,SAACD,GAAM,OAAAA,IAAMxQ,KACnD,GAAI+J,GAAS,EAAG,CACd,IAAM+G,EAAOC,OAAOC,OAAO,GAAItC,GAC/BoC,EAAKG,OAAOlH,EAAO,GACnB4E,EAAiBmC,IA8BfI,CAAuBV,GACvBlC,GACEA,EAAS,CACPnL,MAAOrC,EAAE,6BAA8B,CAAEd,KAAMwQ,IAC/CtN,QAAS,EAAAiN,aAAA,gBA8ErB,OAPA,IAAA3N,YAAU,WAER8N,IAlEmC,WACnC,IAAMa,EAAiCC,KAAKC,MAAMD,KAAKE,UAAUxC,IACjE,GAAIA,GAASA,EAAMhF,OAAS,EAAG,CAC7B,IAAM,EAAyBiH,OAAOC,OACpC,GACApC,GACAa,QACA,SAACoB,GACC,OAAAA,EAAKhN,SAAW,YAChBgN,EAAKhN,SAAW,eAEpBsN,EAAe3G,SAAQ,SAACqG,G,QAChBU,EAA4B,EAAuB9B,QACvD,SAAC+B,GAAyB,OAAAX,EAAKjM,KAAO4M,EAAO5M,MAE3C2M,GAAaA,EAAUzH,OAAS,IAC9ByH,EAAU,GAAG1N,SAAW,WAC1ByK,GACEA,EAAS,CACPnL,MAAOrC,EAAE,8BACToC,QAAS,EAAAiN,aAAA,QACTC,YACE,0BACEqB,wBAAyB,CACvBC,OAAQ5Q,EAAE,wBAAyB,CACjCd,KAAkB,QAAZ,EAAAuR,EAAU,UAAE,eAAEvR,UAK5B2R,WAAY,6BAEPJ,EAAU,GAAG1N,SAAW,aACjCyK,GACEA,EAAS,CACPnL,MAAOrC,EAAE,qBACToC,QAAS,EAAAiN,aAAA,OACTC,YACE,0BACEqB,wBAAyB,CACvBC,OAAQ5Q,EAAE,uBAAwB,CAChCd,KAAkB,QAAZ,EAAAuR,EAAU,UAAE,eAAEvR,UAK5B2R,WAAY,gCAMxB,IAAMC,EAAmBb,OAAOC,OAC9B,GACApC,MAAAA,OAAiB,EAAjBA,EAAmBa,QACjB,SAACoB,GACC,OAAAA,EAAKhN,SAAW,mBAChBgN,EAAKhN,SAAW,kBAGtBkL,EAAS6C,GAQTC,KACC,CAACjD,IAEG,sCCjJIkD,EACX,SAAC,G,IAAEC,EAAiB,oBAClB,WAAa,KACL,IAAAC,IAA0B,UAAkB,IAAE,sBAEhDxD,GAAO,IAAAC,WAEQQ,KADL,IAAAgD,cAAe,IAAE,KACQ,IAAE,YACnC5P,GAAc,EAAAF,EAAA,MAAmB,UACnC+P,GAAW,IAAAC,eACXC,EAAe,IAAIC,gBAAgBH,EAASI,QAC5C,GAA6B,WAAmB,GAA9C,IAAAvL,KAAAA,OAAI,IAAG,IAAC,EAAE,IAAAC,QAAAA,OAAO,IAAG,KAAE,EACtBlG,GAAM,IAAAiC,kBAAgB,EACtBuL,IAAa,IAAAC,aAAc,IAAE,SAClBgE,GACjB,IAAAzP,YAAuC,UACtB0P,GACjB,IAAA1P,YAA0C,UACtC,GACJ,IAAAA,YADiB2P,EAAe,YAAaC,EAAe,YAExD,GAKF,UAJFhP,EAAoB,uBACpB8C,EAAyB,4BACzB7C,EAAsB,yBACtB8C,EAAc,iBAEVkM,GAAU,IAAAC,cAGV,GAA8C,IAAAxQ,YAA7CyQ,EAAkB,KAAEC,EAAqB,KAG1C,GAAwC,IAAA1Q,WAAS,GAAhDuG,EAAe,KAAEoK,EAAkB,KACpC,GAAoC,IAAA3Q,UAAiB,GAApDsG,EAAa,KAAEsK,GAAgB,KAGhC,IAAwB,IAAA5Q,UAAiB,mBAAxC2G,GAAO,MAAED,GAAU,MACpB,IAAsC,IAAA1G,UAAS,QAA9C4G,GAAc,MAAEC,GAAiB,MAClC,IAAoC,IAAA7G,UAAuB,IAA1D8G,GAAa,MAAEC,GAAgB,MAGhC,IACJ,IAAA/G,WAAkB,GADb6Q,GAAkB,MAAEC,GAAqB,MAE1C,IAAkC,IAAA9Q,eACtCiD,GADKoD,GAAY,MAAEuG,GAAe,MAG9B,IAA8B,IAAA5M,YAA7ByG,GAAU,MAAEsK,GAAa,MAG1B,IAA0C,IAAA/Q,WAAkB,GAA3DgR,GAAgB,MAAEC,GAAmB,OAE5C,IAAA7Q,YAAU,YACU,gD,8EAEd,EAAAwP,GAA0B,GAAMA,KAAhC,M,OAAyB,EAAC,S,wBADZ,GAGdsB,K,aAIH,CAACtB,IAEJ,IAAMsB,GAAkB,WACtBf,EAAgB,EAAAvP,UAAA,kBAA6B,CAC3CoG,SAAU,WACRA,KACAmK,SAKAjK,GAA4B,kE,8EAE5ByI,EAGK,GAAMA,GAAkB,IAH7B,M,OAGFyB,EAAO,S,wBAGLA,GACFF,K,YAiEEG,GAAc,kE,yEAEE,OApDdC,EAAoB,GAC1BxK,GAAcsB,SAAQ,SAACiF,GACb,IAAAkE,EAA2BlE,EAAM,UAAtBmE,EAAgBnE,EAAM,YACzC,GAAImE,GAAeA,EAAY9J,OAAS,EAAG,CACzC,IAAI+J,EAAc,IAClBA,GAAeD,EACZjD,KAAI,SAACmD,GACJ,IAAMnO,EAAQmO,EAAInO,MAAMoO,OACxB,OAAIpO,IAAU,kBACL,UAAGgO,EAAS,cAAM,eAAwB,eAAOA,EAAS,cAAM,mBAErEhO,IAAU,iBACL,UAAGgO,EAAS,cAAM,iBAA0B,eAAOA,EAAS,cAAM,cAE1D,KAAVhO,EACH,UAAGgO,EAAS,aACM,IAAhBG,EAAIE,QAAmB,YAAKrO,GAAU,gBAASA,EAAK,MAEtD,MAELsO,KAAK,QACRJ,GAAe,IAEfH,EAAQzI,KAAK4I,OA4BXA,EAzBCH,EAAQO,KAAK,SA0BA,GAAMzF,MAAAA,OAAI,EAAJA,EAAMU,IAAIK,Y,YAA9BC,EAAc,YAEDnN,EAAf,Y,iBASA,O,sBAAA,GAPoB,IAAI,EAAAqN,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXP,SAAQ,KAKTW,UACC7I,MAAAA,OAAI,EAAJA,EAAM9C,WACN+C,MAAAA,OAAO,EAAPA,EAAS/C,WACT8E,GACA8K,GAEDzE,MAAK,SAACS,GACL,IAAMC,EAAiBD,EAAIE,KACrBmE,GAAapE,MAAAA,OAAc,EAAdA,EAAgBhB,QAAS,GAC5CgE,EAAsBhD,QAGUzK,KAA9BwN,MAAAA,OAAkB,EAAlBA,EAAoB/L,QACpB+L,EAAmB/L,MAAQ4B,GAE3BsK,GAAiBH,EAAmB/L,OAIpCsM,IACAlK,GAAcY,OAAS,GACD,IAAtBoK,MAAAA,OAAU,EAAVA,EAAYpK,SAEZuJ,IAAoB,GAGtBN,GAAmB,O,cA3BvB,S,oBAlCoB,SAAC/C,G,UACrBC,EACAkE,GACA,QAAkBnE,KACpBC,EAAuB,QAAd,EAAAD,EAAME,gBAAQ,eAAEH,KAAKE,OAC9BkE,EAAgC,QAApB,EAAc,QAAd,EAAAnE,EAAME,gBAAQ,eAAEH,YAAI,eAAEqE,MAGhCD,IAAc,uBAChBjB,IAAsB,GAEtB5E,GACEA,EAAS,CACPpL,QAAS,EAAAiN,aAAA,OACThN,MAAOrC,EAAE,+BACTsP,YAAaH,IAiDfI,C,iCA9FiB,IACfqD,UAkGR,IAAAlR,YAAU,WACRuQ,GAAmB,GACnBU,OACC,CAACjF,EAAMzH,EAAMC,EAASkC,GAAeH,MAExC,IAAAvG,YAAU,W,MACR,QAA2B6C,IAAvBwN,IAAoCA,MAAAA,OAAkB,EAAlBA,EAAoBwB,MAAO,EAAG,CACpE,IAAMC,EAA4C,QAAxB,EAAAzB,EAAmB/D,aAAK,eAAEyF,MAClD,SAACtI,GAAU,OAAAA,MAAAA,OAAK,EAALA,EAAOrH,OAAOjB,MAAAA,OAAsB,EAAtBA,EAAwBiB,YAEzBS,IAAtBiP,GACF9N,EAA0B8N,MAG7B,CAACzB,MAAAA,OAAkB,EAAlBA,EAAoB/D,SAExB,IAAAtM,YAAU,WACRiE,EAA4C,KAA7BoM,MAAAA,OAAkB,EAAlBA,EAAoBwB,SAClC,CAACxB,MAAAA,OAAkB,EAAlBA,EAAoBwB,QAExB,IAAA7R,YAAU,W,QACU,QAAlB,EAAAgM,EAAKW,qBAAa,SAAEC,MAAK,SAACC,GAAa,OAAAL,GAAgBK,MACtC,QAAjB,EAAAb,EAAK3F,oBAAY,SAAEuG,MAAK,SAACvG,GAAe,OAAAsK,GAActK,QACrD,CAAC2F,IAEJX,GAAW,WAAM,OAAA4F,OAAe,MAEhC,IAAMF,GAA2B,WAEE,KAA7BV,MAAAA,OAAkB,EAAlBA,EAAoBwB,MACtBtB,GAAmB,GAEnBA,GAAmB,GAErBU,MAIIrK,GAAW,WACf4J,SAC0B3N,IAAvBwN,EAAmC,EAAIA,EAAmB/L,OAAS,IAKlE0N,GAAW,WACfzB,GAAmB,GACnBC,SAC0B3N,IAAvBwN,EAAmC,EAAIA,EAAmB/L,OAAS,IAIlE2N,IAAiB,IAAAC,cACrB,SAAC1U,EAAc2F,GACbyM,EAAauC,IAAI3U,EAAM2F,EAAM1B,cAE/B,CAACmO,KAIH,IAAA5P,YAAU,WACJuE,EAAO,QAEuB1B,KAA9BwN,MAAAA,OAAkB,EAAlBA,EAAoB/D,QACQ,IAA5B+D,EAAmBwB,OAEnBI,GAAe,QAAS1N,EAAO,GAAG9C,YAClCwQ,GAAe,UAAWzN,EAAQ/C,YAClC0O,EAAQ1H,KAAK,CACXqH,OAAQF,EAAanO,gBAI1B,CAAC8C,EAAMC,EAAS6L,MAAAA,OAAkB,EAAlBA,EAAoB/D,QAEvC,IAsBMnD,GAAiB,SAAOiJ,GAAsB,uD,+EAKlD,QAAoBvP,IAAhBuP,EAAShQ,GACX,MAAM,IAAIsB,MAAM,8CAEE,SAAMsI,MAAAA,OAAI,EAAJA,EAAMU,IAAIK,Y,OAA9BC,EAAc,SACdqF,EAAc,IAAI,EAAAnF,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXP,SAAQ,KAGZuF,KACA/B,I,iBAGE,O,sBAAA,GAAMoC,EAAYC,gBAAgBF,EAAShQ,IAAI,GAAMwK,MAAK,WACxDiE,IAAoB,GACpBE,S,cAFF,S,+BAKItD,OAAM,GACN,QAAkB,KACpBA,EAAuB,QAAd,IAAMC,gBAAQ,eAAEH,KAAKE,QAOhC3B,GACEA,EAAS,CACPnL,MAAOrC,EAAE,+BACToC,QAAS,EAAAiN,aAAA,OACTC,YAAaH,I,+BAKrB,GAAIgD,GACF,OAAO,kBAAC,KAAY,MAGtB,IAAM8B,GACJpM,GACAO,GAAcY,OAAS,QACAzE,IAAvBwN,IACAA,MAAAA,OAAkB,EAAlBA,EAAoB/L,OAAQ,EAE9B,OAAIiO,GAEA,kBAAC,KAAe,CACdzL,0BAA2BA,UAGOjE,IAA7B0P,GAEP,kBAAC,EAAAC,YAAW,CACVC,UAAU,wDACV/R,QAAS,EAAAgS,oBAAA,QACTC,QAAS,CAAEC,QAAS,cAEpB,kBAAC,EAAAC,KAAI,KACH,kBAACjN,EAAA,EAAY,CACXC,iBAlFe,SAAO4D,GAAmB,uD,8EAC3CqJ,EAAW,kE,iEACf,SAAM3J,GAAeM,I,cAArB,SACAuI,K,YAEEvI,EAAMpI,SAAW,YAAjB,MACF,GAAMyR,K,cAAN,S,aAEA5C,EAAgB,EAAA1P,UAAA,kBAA6B,CAC3CwR,SAAUc,EACVrJ,MAAK,I,mCAyED1D,eAlRa,SAACqM,GACtBpO,EAA0BoO,GAC1BlR,EAAqB,cAiRb8E,iBA9Qe,SAACoM,GACxBpO,EAA0BoO,GAC1BlR,EAAqB,iBA6Qb4E,cA5FY,SAAOsM,GAAsB,uD,iDACjDpC,EAA2B,EAAAxP,UAAA,qBAAgC,CACzDiJ,MAAO2I,EACPW,cAAehC,K,WA0FT9K,aAAcA,GACd1B,KAAMA,EACNC,QAASA,EACTF,MAAO4B,EACPG,WAAYA,GACZH,cAAeA,EACfC,gBAAiBA,EACjBC,mBAAoBiK,MAAAA,OAAkB,EAAlBA,EAAoB/D,MACxChG,WAAYA,GACZG,kBAAmBA,GACnBE,iBAAkBA,GAClBD,cAAeA,GACfI,0BAA2BA,GAC3BP,QAASA,GACTC,eAAgBA,GAChBI,SAAUA,GACVC,QAASkK,MAGb,kBAAClF,EAAiB,OAIjB,uC,sLCpaLmH,EAA2D,SAAC,G,IAChE3R,EAAM,SACNuH,EAAY,eAEJtK,GAAM,IAAAiC,kBAAgB,EAqBxB0S,EAAgB,WACpB,OAAQ5R,MAAAA,OAAM,EAANA,EAAQoG,eACd,KAAK,cACH,OACE,kBAAC,KAAe,CAACgL,UAAU,0CAE/B,KAAK,cACH,OACE,kBAAC,KAAqB,CAACA,UAAU,uCAErC,KAAK,cACH,OAAO,kBAAC,KAAW,MACrB,KAAK,cACL,KAAK,cACH,OACE,kBAAC,EAAAS,QAAO,CACNrB,KAAK,KAAI,aACGjJ,EAAY,iBACT,yBAGrB,KAAK,cACL,KAAK,cACH,OACF,QACE,OAAO,kBAAC,KAAW,QAIzB,OACE,kBAAC,EAAAuK,KAAI,KACH,mBAvCwC,WAC1C,IAAMC,EAAaH,IACnB,OAAIG,EACK,kBAAC,EAAAC,SAAQ,CAACC,OAAQ,CAAEV,QAAS,aAAeQ,GAE9C,uCAkCM,MACX,kBAAC,EAAAC,SAAQ,KACP,mBApDkC,WACtC,IAAME,EAAiB,aACrB,SAACC,GAAO,OAAAA,EAAGrQ,SAAU9B,MAAAA,OAAM,EAANA,EAAQoG,kBAE/B,OAA8B,IAA1B8L,EAAejM,OACVhJ,EAAEiV,EAAe,GAAGpQ,OAEpB7E,EAAE,sBA6CA,S,gCCrEFmV,EAAoB,SAC/BC,EACAC,GAEQ,IAAArV,GAAM,IAAAiC,kBAAgB,EAC9B,OAAImT,EACK,6BAAMpV,EAAE,uBAEC,UAAdqV,EACK,6BAAMrV,EAAE,8BAA+B,CAAEd,KAAMmW,KAEjD,6BAAMrV,EAAE,8BAA+B,CAAEd,KAAMmW,MCE3CC,EACX,SAAC,G,MACCC,EAAqB,wBACrBrN,EAAc,iBACdsN,EAAiB,oBACjBC,EAAY,eACZC,EAAY,eACZN,EAAW,cACXO,EAAiB,oBACjBC,EAAsB,yBAEd5V,GAAM,IAAAiC,kBAAgB,EAExB4T,EAA6B,UACjC,SAACC,GACC,MAAO,CACLlR,MAAO5E,EAAE8V,EAAcjR,OACvBA,MAAOiR,EAAcjR,MACrBkR,UAAU,MAKhB,OACE,kBAAC,EAAAC,cAAa,CACZC,MAA8C,QAAvC,EAAAV,EAAsB,yBAAiB,eAAE1F,KAAI,SAACmD,GAAQ,OAAAhT,EAAEgT,MAC/DkD,WAAY,SAACC,EAAWC,GACtB,OAAAX,GAAgBA,EAAa,iBAAkBW,EAAMP,IAEvDQ,gBAAiB,WACf,OAAAb,GAAqBA,EAAkB,mBAEzCc,aAActW,EAAE,kBAChBuW,gBAAoC,mBAAnBrO,GAEjB,kBAACsO,EAAmB,CAClBd,aAAcA,EACdN,YAAaA,EACbO,kBAAmBA,EACnBC,uBAAwBA,EACxBC,QAASA,EACTN,sBAAuBA,EACvBrN,eAAgBA,MAkBpBsO,EACJ,SAAC,G,IACCd,EAAY,eACZN,EAAW,cACXO,EAAiB,oBACjBC,EAAsB,yBACtBC,EAAO,UACPN,EAAqB,wBACrBrN,EAAc,iBAENlI,GAAM,IAAAiC,kBAAgB,EACxBwU,GAAY,IAAAtJ,QAAe,MAC3BuJ,EAAiBvB,EAAkBC,GAEnCuB,EAAyC,WAC7C,OAAIvB,EAEA,kBAAC,EAAAwB,QAAO,CACNrV,UAAW6T,EACXnJ,QAASyK,EACTG,UAAWJ,IAIV,sCAGH,GAA0B,IAAAnV,WAAS,GAAlCwV,EAAQ,KAAEC,EAAW,KAsBtBC,EAAQ,WACZrB,GAAqBA,EAAkB,kBACvCoB,GAAY,IAGd,MAAuB,mBAAnB7O,EAEA,kBAAC,EAAA+O,OAAM,CACLnT,GAAG,wBACH1B,QAAS,EAAA8U,cAAA,SAAsB,aACpB,wBACXC,SA/BW,WACfJ,GAAY,SAACK,GAAc,OAACA,MA+BxBC,WAAY9B,EAAsB,kBAClC+B,OAAQR,EACR1T,SA9BW,SACf+I,EAGAoL,EACAC,GAEIA,GAAeR,IACnBtB,EACE,iBACA,CAAE7Q,MAAO0S,EAAUpU,WAAY+P,SAAS,IACxC,GAEF2C,EAAQ7M,OAAS,GAAK+N,GAAY,IAkB9BU,gBAAiBzX,EAAE,4BACnBmU,UAAU,sBACVuD,IAAKjB,GAEJZ,EAAQhG,KAAI,SAAC8H,EAAQ1O,GAWpB,OACE,kBAAC,EAAA2O,aAAY,CACXlM,aAXEiM,EAAO5B,UAITX,GACAQ,EAAuB,iBAAkB+B,EAAO9S,OAOhDgT,IAAK5O,EACLpE,MAAO8S,EAAO9S,OAEd,kBAAC8R,EAAa,MACbgB,EAAO/S,WAOb,sC,WCxJEkT,EAAuD,SAAC,G,IA2C3DC,EA1CRxC,EAAqB,wBACrBE,EAAY,eACZD,EAAiB,oBACjBtN,EAAc,iBACdkN,EAAW,cACXM,EAAY,eAEJ1V,GAAM,IAAAiC,kBAAgB,EACxB,GAAoB,IAAAX,WAAkB,GAArC0W,EAAK,KAAEC,EAAQ,KAChB,GAAoB,IAAA3W,YAAnBuD,EAAK,KAAEqT,EAAQ,KAChBC,GAAW,IAAAhL,QAAyB,MACpCuJ,EAAiBvB,EAAkBC,EAAa,QAEhDgD,EAAS,SAACC,GACdH,EAASG,IACRL,GAASC,GAAS,IASfK,EAAa,SAAC3N,GACA,UAAdA,EAAMkN,KAAoBzC,GAC5BmD,KAIEA,EAAW,WACX1T,GAAyB,IAAhBA,EAAMoO,UAbJ,SAACpO,GAChB,OAAOA,GACH,qCAAqC2T,KAAK3T,EAAMoO,QAY9CwF,CAAS5T,GAIXoT,GAAS,IAHTvC,EAAa,OAAQ,CAAE7Q,MAAOA,EAAOqO,SAAS,IAAS,GACvDgF,EAAS,OAoDf,OACE,kBAAC,EAAAlC,cAAa,CACZC,MAAOV,EAAsB,QAC7BW,WAAY,SAACC,EAAWC,GAAS,OAAAX,EAAa,OAAQW,IACtDC,gBAAiB,WAAM,OAAAb,EAAkB,SACzCc,aAActW,EAAE,QAChBuW,gBAAmD,UAAlCrO,MAAAA,OAAc,EAAdA,EAAgBiB,iBAlD7B4O,GAAKC,GAAS5C,EAckB,UAAlClN,MAAAA,OAAc,EAAdA,EAAgBiB,eAEhB,kBAAC,EAAAuP,WAAU,KACT,kBAAC,EAAAC,UAAS,CACRzZ,KAAK,OACL4E,GAAG,aACH8U,KAAK,SAAQ,aACF,sBACXC,UAAWd,EAAI,EAAAe,iBAAA,MAAyB,EAAAA,iBAAA,QACxCC,YAAa/Y,EAAE,wBACfgZ,SAAUZ,EACVE,WAAYA,EACZzT,MAAOA,EACP6S,IAAKS,IAEP,kBAAC,EAAAc,OAAM,CACL7W,QAAS,EAAA8W,cAAA,QACTxN,YAAasM,GAAS5C,EACtBtJ,QAAS,WAAM,OAAAyM,KAAU,aACd,oBAEX,kBAAC,KAAU,OAEb,mBApCyC,WAC7C,OAAIR,EAEA,kBAAC,EAAAnB,QAAO,CACNrV,UAAW6T,IAAgB4C,EAC3B/L,QAASyK,EACTG,UAAWsB,IAIV,uCA0BW,OAIb,wCCrFEgB,EAAyD,SAAC,G,IACrE5D,EAAqB,wBACrBC,EAAiB,oBACjBC,EAAY,eACZvN,EAAc,iBACdkN,EAAW,cACXM,EAAY,eAEJ1V,GAAM,IAAAiC,kBAAgB,EACxBkW,GAAW,IAAAhL,QAAyB,MACpCuJ,EAAiBvB,EAAkBC,EAAa,SAEhD,GAAoB,IAAA9T,YAAnBuD,EAAK,KAAEqT,EAAQ,KAChB,GAAoB,IAAA5W,WAAkB,GAArC0W,EAAK,KAAEC,EAAQ,KAMhBM,EAAW,WACX1T,GAAyB,IAAhBA,EAAMoO,UALJ,SAACpO,GAChB,OAAOA,IAAS,yBAAyB2T,KAAK3T,EAAMoO,QAK9CwF,CAAS5T,GAIXoT,GAAS,IAHTvC,EAAa,QAAS,CAAE7Q,MAAOA,EAAOqO,SAAS,IAAS,GACxDgF,EAAS,OAOTI,EAAa,SAAC3N,GACA,UAAdA,EAAMkN,KAAoBzC,GAC5BmD,KAIES,EAAW,SAACX,GAChBH,EAASG,IACRL,GAASC,GAAS,IAiDrB,OACE,kBAAC,EAAAjC,cAAa,CACZC,MAAOV,EAAsB,SAC7BW,WAAY,SAACC,EAAWC,GAAS,OAAAX,EAAa,QAASW,IACvDC,gBAAiB,WAAM,OAAAb,EAAkB,UACzCc,aAActW,EAAE,SAChBuW,gBAAmD,WAAlCrO,MAAAA,OAAc,EAAdA,EAAgBiB,gBApDZ,WACvB,GAAsC,WAAlCjB,MAAAA,OAAc,EAAdA,EAAgBiB,eAA2B,CAC7C,IAAM,GAAK6O,GAAS5C,EAepB,OACE,kBAAC,EAAAsD,WAAU,KACT,kBAAC,EAAAC,UAAS,CACRzZ,KAAK,QACL4E,GAAG,eACH8U,KAAK,SAAQ,aACF,sBACXG,YAAa/Y,EAAE,mBACf6Y,UAAW,EAAI,EAAAC,iBAAA,MAAyB,EAAAA,iBAAA,QACxCE,SAAUA,EACVV,WAAYA,EACZzT,MAAOA,EACP6S,IAAKS,IAEP,kBAAC,EAAAc,OAAM,CACLvN,WAAY,EACZtJ,QAAS,EAAA8W,cAAA,QACTpN,QAASyM,EAAQ,aACN,iBAEX,kBAAC,KAAU,OAEb,mBAnC2C,WAC7C,OAAI,EAEA,kBAAC,EAAA3B,QAAO,CACNrV,UAAW6T,IAAgB4C,EAC3B/L,QAASyK,EACTG,UAAWsB,IAIV,uCAyBS,OAIpB,OAAO,qCAWJiB,KC/FMC,EAA2D,SAAC,G,MACvE9D,EAAqB,wBACrBE,EAAY,eACZD,EAAiB,oBACjBG,EAAiB,oBACjBC,EAAsB,yBACtBR,EAAW,cACXlN,EAAc,iBACdwN,EAAY,eAEJ1V,GAAM,IAAAiC,kBAAgB,EACxB4T,EAAU,UAAuB,SAAChM,GACtC,MAAO,CAAEjF,MAAO5E,EAAE6J,EAAOhF,OAAQA,MAAOgF,EAAOhF,MAAOkR,UAAU,MAGlE,OACE,kBAAC,EAAAC,cAAa,CACZC,MAAsC,QAA/B,EAAAV,EAAsB,iBAAS,eAAE1F,KAAI,SAACmD,GAAQ,OAAAhT,EAAEgT,MACvDkD,WAAY,SAACC,EAAWC,GAAS,OAAAX,EAAa,SAAUW,EAAMP,IAC9DQ,gBAAiB,WAAM,OAAAb,EAAkB,WACzCc,aAActW,EAAE,UAChBuW,gBAAoC,WAAnBrO,GAEjB,kBAACoR,EAAY,CACX5D,aAAcA,EACdN,YAAaA,EACbO,kBAAmBA,EACnBC,uBAAwBA,EACxBC,QAASA,EACTN,sBAAuBA,EACvBrN,eAAgBA,MAkBlBoR,EAA2D,SAAC,G,IAChE5D,EAAY,eACZN,EAAW,cACXO,EAAiB,oBACjBC,EAAsB,yBACtBC,EAAO,UACPN,EAAqB,wBACrBrN,EAAc,iBAENlI,GAAM,IAAAiC,kBAAgB,EACxBwU,GAAY,IAAAtJ,QAAe,MAC3BuJ,EAAiBvB,EAAkBC,GACnC,GAA0B,IAAA9T,WAAS,GAAlCwV,EAAQ,KAAEC,EAAW,KAEtBJ,EAAyC,WAC7C,OAAIvB,EAEA,kBAAC,EAAAwB,QAAO,CACNrV,UAAW6T,EACXnJ,QAASyK,EACTG,UAAWJ,IAIV,sCAqBHO,EAAQ,WACZrB,EAAkB,UAClBoB,GAAY,IAGd,MAAuB,WAAnB7O,EAEA,kBAAC,EAAA+O,OAAM,CACLnT,GAAG,gBACH1B,QAAS,EAAA8U,cAAA,SAAsB,aACpB,gBACXC,SA7BW,WACfJ,GAAaD,IA6BTO,WAAY9B,EAAsB,UAClC+B,OAAQR,EACR1T,SA5BW,SACf+I,EACAoL,EACAC,GAEIA,GAAeR,IACnBtB,EACE,SACA,CAAE7Q,MAAO0S,EAAUpU,WAAY+P,SAAS,IACxC,GAEF2C,EAAQ7M,OAAS,GAAK+N,GAAY,IAkB9BU,gBAAiBzX,EAAE,oBACnBmU,UAAU,sBACVuD,IAAKjB,GAEJZ,EAAQhG,KAAI,SAAC8H,EAAQ1O,GASpB,OACE,kBAAC,EAAA2O,aAAY,CACXlM,aATEiM,EAAO5B,UAITX,GAAeQ,EAAuB,SAAU+B,EAAO9S,OAMvDgT,IAAK5O,EACLpE,MAAO8S,EAAO9S,OAEd,kBAAC8R,EAAa,MACbgB,EAAO/S,WAOb,sCCxII2U,EAA2D,SAAC,G,IACvEpR,EAAiB,oBACjBD,EAAc,iBAENlI,GAAM,IAAAiC,kBAAgB,EACxB,GAA0C,IAAAX,WAAS,GAAlDkY,EAAgB,KAAEC,EAAmB,KActC5D,EAAU,CACd,CAAEjR,MAAO5E,EAAE,QAAS6E,MAAO,OAAQkR,UAAU,GAC7C,CAAEnR,MAAO5E,EAAE,kBAAmB6E,MAAO,iBAAkBkR,UAAU,GACjE,CAAEnR,MAAO5E,EAAE,UAAW6E,MAAO,SAAUkR,UAAU,GACjD,CAAEnR,MAAO5E,EAAE,SAAU6E,MAAO,QAASkR,UAAU,GAC/C,CAAEnR,MAAO5E,EAAE,UAAW6E,MAAO,SAAUkR,UAAU,IAGnD,OACE,kBAAC,EAAA2D,YAAW,KACV,kBAAC,EAAAzC,OAAM,CACL7U,QAAS,EAAA8U,cAAA,OAAoB,aAClB,gBACXC,SAzBW,WACfsC,GAAqBD,IAyBjBnC,WAAYnP,EACZoP,OAAQkC,EACRpW,SAxBW,SACf+I,EACAoL,GAEAkC,GAAqBD,GACrBrR,EAAkBoP,MAAAA,OAAS,EAATA,EAAWpU,cAqBxB0S,EAAQhG,KAAI,SAAC8H,EAAQ1O,GAAU,OAC9B,kBAAC,EAAA2O,aAAY,CACXlM,WAAYiM,EAAO5B,SACnB8B,IAAK5O,EACLpE,MAAO8S,EAAO9S,OAEb8S,EAAO/S,aC1CP+U,EAAsD,SAAC,G,MAClEpE,EAAqB,wBACrBE,EAAY,eACZD,EAAiB,oBACjBJ,EAAW,cACXlN,EAAc,iBACdwN,EAAY,eACZC,EAAiB,oBACjBC,EAAsB,yBAEd5V,GAAM,IAAAiC,kBAAgB,EAExB2X,EAAsB,aAExB,SAACC,GACC,OAAAA,EAAEhV,QAAU,gBACZgV,EAAEhV,QAAU,gBAEfgL,KAAI,SAAC9M,GACJ,MAAO,CAAE6B,MAAO5E,EAAE+C,EAAO8B,OAAQA,MAAO9B,EAAO8B,MAAOkR,UAAU,MAGpE,OACE,kBAAC,EAAAC,cAAa,CACZC,MAAsC,QAA/B,EAAAV,EAAsB,iBAAS,eAAE1F,KAAI,SAACmD,GAAQ,OAAAhT,EAAEgT,MACvDkD,WAAY,SAACC,EAAWC,GACtB,OAAAX,EAAa,SAAUW,EAAMwD,IAE/BvD,gBAAiB,WAAM,OAAAb,EAAkB,WACzCc,aAActW,EAAE,UAChBuW,gBAAoC,WAAnBrO,GAEjB,kBAAC4R,EAAY,CACXpE,aAAcA,EACdN,YAAaA,EACbO,kBAAmBA,EACnBC,uBAAwBA,EACxBgE,oBAAqBA,EACrBrE,sBAAuBA,EACvBrN,eAAgBA,MAkBlB4R,EAA2D,SAAC,G,IAChEpE,EAAY,eACZN,EAAW,cACXO,EAAiB,oBACjBC,EAAsB,yBACtBgE,EAAmB,sBACnBrE,EAAqB,wBACrBrN,EAAc,iBAENlI,GAAM,IAAAiC,kBAAgB,EACxByU,EAAiBvB,EAAkBC,GACnCqB,GAAY,IAAAtJ,QAAe,MAE3B,GAA0B,IAAA7L,WAAS,GAAlCwV,EAAQ,KAAEC,EAAW,KAEtBJ,EAAyC,WAC7C,OAAIvB,EAEA,kBAAC,EAAAwB,QAAO,CACNrV,UAAW6T,EACXnJ,QAASyK,EACTG,UAAWJ,IAIV,sCAoBHO,EAAQ,WACZrB,EAAkB,UAClBoB,GAAY,IAEd,MAAuB,WAAnB7O,EAEA,kBAAC,EAAA+O,OAAM,CACLnT,GAAG,gBACH1B,QAAS,EAAA8U,cAAA,SAAsB,aACpB,gBACXC,SA3BW,WACfJ,GAAaD,IA2BTO,WAAY9B,EAAsB,UAClC+B,OAAQR,EACR1T,SA1BW,SACf+I,EACAoL,EACAC,GAEIA,GAAeR,IACnBtB,EACE,SACA,CAAE7Q,MAAO0S,EAAUpU,WAAY+P,SAAS,IACxC,IAkBEuE,gBAAiBzX,EAAE,oBACnBmU,UAAU,sBACVuD,IAAKjB,GAEJmD,EAAoB/J,KAAI,SAAC8H,EAAQ1O,GAUhC,OACE,kBAAC,EAAA2O,aAAY,CACXlM,aAVEiM,EAAO5B,UAITX,GAAeQ,EAAuB,SAAU+B,EAAO9S,OAOvDgT,IAAK5O,EACLpE,MAAO8S,EAAO9S,OAEd,kBAAC8R,EAAa,MACbgB,EAAO/S,WAOb,sCC1IImV,EACX,SAAC,G,IACC3E,EAAW,cACXhN,EAAa,gBACbC,EAAgB,mBAChBH,EAAc,iBACdC,EAAiB,oBAEXyN,EAAyB,SAACiC,EAAamC,GAC3C,IAAIC,EACEC,EAAmB9R,MAAAA,OAAa,EAAbA,EAAeuG,QACtC,SAAC,GAAkB,OAAP,cAAqBkJ,KAEnC,GAAIqC,IAAoBA,MAAAA,OAAgB,EAAhBA,EAAkBlR,QAAS,EAAG,CAC5C,IAAA8J,EAAgBoH,EAAiB,GAAE,YAC3CD,EAAiBnH,MAAAA,OAAW,EAAXA,EAAaW,MAC5B,SAAC,GAAc,OAAP,UAAiBuG,KAG7B,OAAKC,GAMDvE,EAAe,SACnBmC,EACAlJ,EACAwL,GAEA,IAAMF,EAA+BhK,OAAOC,OAAO,GAAI9H,GACjDgS,EAAcH,EAAetK,WAAU,SAAC0K,GAAM,OAAAA,EAAExH,YAAcgF,KACpE,GAAIuC,GAAe,EAAG,CAEpB,IAAMtH,EAAcmH,EAAeG,GACnC,GAAItH,EAAYA,aAAeA,EAAYA,YAAY9J,OAAS,EAAG,CAEjE,IAAMsR,EAAmBxH,EAAYA,YAAYnD,WAC/C,SAAC0K,GAAM,OAAAA,EAAExV,QAAU8J,EAAO9J,SAE5B,GAAIyV,GAAoB,EAAG,CAEzB,IAAIH,EAGF,OAFArH,EAAYA,YAAY3C,OAAOmK,EAAkB,QAMnDL,EAAeG,GAAatH,YAAY3I,KAAKwE,QAI/CsL,EAAeG,GAAatH,YAAc,CAACnE,QAI7CsL,EAAe9P,KAAK,CAAE0I,UAAWgF,EAAK/E,YAAa,CAACnE,KAEtDtG,EAAiB4R,IAGb1E,EAAwB,SAACsC,GAC7B,IAAM0C,EAAkBnS,EAAcuG,QACpC,SAACA,GAAW,OAAAA,EAAOkE,YAAcgF,KAEnC,GAAI0C,EAAgBvR,OAAS,EAC3B,OAAOuR,EAAgB,GAAGzH,YAAYjD,KAAI,SAACmD,GAAQ,OAAAA,EAAInO,UAKrD4Q,EAAe,SACnB+E,EACApE,EACAqE,G,QAEMP,EAAiCjK,OAAOC,OAAO,GAAI9H,GACnDgS,EAAcF,EAAiBvK,WACnC,SAAChB,GAAW,OAAAA,EAAOkE,YAAc2H,KAE7BE,EAAiCzK,OAAOC,OAC5C,GAC6B,QAA7B,EAAAgK,EAAiBE,UAAY,eAAEtH,aAE7B6H,EAAiCvE,EAAKjT,WAItCsX,IAAiBA,MAAAA,OAAa,EAAbA,EAAezR,QAAS,IAC3C2R,EAEC,QAFY,EAAAF,MAAAA,OAAa,EAAbA,EAAehH,MAC1B,SAACkE,GAAW,OAAAA,EAAO/S,QAAUwR,EAAKjT,qBACnC,eAAE0B,OAKL,IAAM+V,EAAYF,EAAgB/K,WAChC,SAACqD,GAAQ,OAAAA,EAAInO,QAAU8V,KAErBC,GAAa,IACfV,EAAiBE,GAAatH,YAAY3C,OAAOyK,EAAW,GAC5DvS,EAAiB6R,KAIf1E,EAAoB,SAACgF,GACzB,IAAMN,EAAiCjK,OAAOC,OAAO,GAAI9H,GACnDgS,EAAcF,EAAiBvK,WACnC,SAAChB,GAAW,OAAAA,EAAOkE,YAAc2H,KAE/BJ,GAAe,IACjBF,EAAiB/J,OAAOiK,EAAa,GACrC/R,EAAiB6R,KAIfW,EAAsB,SAAChW,GAC3B,IAAMiW,EAAkC7K,OAAOC,OAAO,GAAI9H,GACpDgS,EAAcU,EAAkBnL,WACpC,SAAChB,GAAW,OAAAA,EAAOkE,YAAchO,KAE/BuV,GAAe,GACjBU,EAAkB3K,OAAOiK,EAAa,GAExC/R,EAAiByS,IAGnB,OACE,oCACE,kBAAC,EAAAC,aAAY,CAAC3Y,QAAQ,gBACpB,kBAACmX,EAAY,CACXpR,kBAAmBA,EACnBD,eAAgBA,IAElB,kBAAC4P,EAAU,CACT1C,YAAaA,EACblN,eAAgBA,EAChBqN,sBAAuBA,EACvBG,aAAcA,EACdD,aAAcA,EACdD,kBAAmBA,EACnBG,kBAAmBkF,EACnBjF,uBAAwBA,IAE1B,kBAACN,EAAmB,CAClBF,YAAaA,EACblN,eAAgBA,EAChBqN,sBAAuBA,EACvBG,aAAcA,EACdD,aAAcA,EACdD,kBAAmBA,EACnBG,kBAAmBkF,EACnBjF,uBAAwBA,IAE1B,kBAACyD,EAAY,CACXjE,YAAaA,EACblN,eAAgBA,EAChBqN,sBAAuBA,EACvBG,aAAcA,EACdD,aAAcA,EACdD,kBAAmBA,EACnBG,kBAAmBkF,EACnBjF,uBAAwBA,IAE1B,kBAACuD,EAAW,CACV/D,YAAaA,EACblN,eAAgBA,EAChBqN,sBAAuBA,EACvBG,aAAcA,EACdD,aAAcA,EACdD,kBAAmBA,EACnBG,kBAAmBkF,EACnBjF,uBAAwBA,IAE1B,kBAAC+D,EAAY,CACXvE,YAAaA,EACblN,eAAgBA,EAChBqN,sBAAuBA,EACvBG,aAAcA,EACdD,aAAcA,EACdD,kBAAmBA,EACnBG,kBAAmBkF,EACnBjF,uBAAwBA,OCtL9BoF,EAA+D,SAAC,G,IACpE7S,EAAiB,oBACjB,IAAAD,eAAAA,OAAc,IAAG,SAAM,EACvBlC,EAAK,QACLC,EAAI,OACJC,EAAO,UACPkC,EAAa,gBACbC,EAAgB,mBAChBG,EAAyB,4BAEjBxI,GAAM,IAAAiC,kBAAgB,EACxB,GAAgC,IAAAX,WAAkB,GAAjD8T,EAAW,KAAE6F,EAAc,MAElC,IAAAvZ,YAAU,WACRwZ,MACC,CAAC9S,IAEJ,IAKM8S,EAAmB,WACvB,IAAIC,EAAiB,EACrB/S,MAAAA,GAAAA,EAAesB,SAAQ,SAACiF,GACd,IAAAmE,EAA2BnE,EAAM,YAApBkE,EAAclE,EAAM,UACnCyM,EACU,WAAdvI,EACIC,MAAAA,OAAW,EAAXA,EAAanE,QACX,SAAC,GAAc,OAAP,UAAiB,qBAE3B,GACA0M,EACU,WAAdxI,EACIC,MAAAA,OAAW,EAAXA,EAAanE,QACX,SAAC,GAAc,OAAP,UAAiB,oBAE3B,IAEFyM,MAAAA,OAAkB,EAAlBA,EAAoBpS,QAAS,IAAKqS,MAAAA,OAAiB,EAAjBA,EAAmBrS,QAAS,EAChEmS,IAAkBrI,MAAAA,OAAW,EAAXA,EAAa9J,QAAS,GAExCoS,MAAAA,OAAkB,EAAlBA,EAAoBpS,QAAS,IAC7BqS,MAAAA,OAAiB,EAAjBA,EAAmBrS,QAAS,EAE5BmS,IAAkBrI,MAAAA,OAAW,EAAXA,EAAa9J,QAAS,EAExCmS,GAAkBrI,MAAAA,OAAW,EAAXA,EAAa9J,UAI/BmS,GAAkB,KACpBF,GAAe,GAEfA,GAAe,IAIbK,EAAmC,CACvC,CACEvL,KACE,kBAAC,EAAAkJ,OAAM,CACL7W,QAAQ,UACR0J,QAAStD,EAAyB,cACrB,kCAEZxI,EAAE,4BAgCX,OA1BIgG,GAASA,EAAQ,GACnBsV,EAAanR,KAAK,CAChB4F,KACE,kBAAC,KAAa,CACZ5J,SAAS,2CACTC,UAAWJ,EACXC,KAAMA,EACNC,QAASA,EACTqV,WAAW,EACXjV,OAAQ,CACNC,gBAAiBvG,EAAE,sBACnBwG,cAAexG,EAAE,mBACjByG,YAAazG,EAAE,iBACf0G,eAAgB1G,EAAE,oBAClB2G,WAAY3G,EAAE,gBACd4G,WAAY5G,EAAE,gBACd6G,cAAe7G,EAAE,kBACjB8G,SAAU9G,EAAE,gBAIlBoC,QAAS,aACToZ,UAAW,CAAElH,QAAS,gBAKxB,kBAAC,KAAU,CACTmH,aAAc,CACZ3X,GAAI,iCACJ4X,gBArFU,WACdrT,EAAiB,IACjB4S,GAAe,IAoFXU,gCAAiC,KACjCC,MAAO,CAAEC,GAAI,YAEfC,iBAAkB,CAAEC,WAAY,kBAAC,KAAU,MAAKC,WAAY,MAC5DC,iBACE,kBAAClC,EAAkB,CACjB3E,YAAaA,EACbhN,cAAeA,EACfC,iBAAkBA,EAClBF,kBAAmBA,EACnBD,eAAgBA,IAGpBoT,aAAcA,K,UCrIPY,EAAwC,WAC3C,IAAAlc,GAAM,IAAAiC,kBAAgB,EAC9B,OACE,kBAAC,EAAAiS,YAAW,CACV9R,QAAS,EAAAgS,oBAAA,QACTC,QAAS,CAAEC,QAAS,aACpB6H,UAAQ,GAER,kBAAC,KAAa,CACZhV,WAAY,CACV9E,MAAOrC,EAAE,6BACT8E,aAAc,MAEhBsX,oBAAqB,CACnBC,KAAM,MAERjV,oBAAqB,CACnBC,KAAMrH,EACJ,2E,WCZCsc,EAAiE,SAAC,G,IAC7E9T,EAAyB,4BAEjBxI,GAAM,IAAAiC,kBAAgB,EACxBsa,EACJ,eAAiB,EAAAC,mBACnB,OACE,kBAAC,EAAAtI,YAAW,CAACG,QAAS,CAAEC,QAAS,aAAe6H,UAAQ,GACtD,kBAAC,KAAa,CACZjV,gBAAiB,CACf9E,QAAS,cAEXgF,oBAAqB,CACnBC,KACE,oCACE,kBAAC,EAAAoV,MAAK,CACJC,QAAQ,yCACRC,WAAY,CACV,kBAAC,EAAA1D,OAAM,CACL7W,QAAS,EAAA8W,cAAA,KACT0D,SAAO,EACPC,UAAQ,EACRhF,IAAI,kBACJ/L,QAAS,WACP,OAAAyQ,EAAUO,qBACVP,EAAUO,oBAAoB,2BAQ5C3V,WAAY,CAAE9E,MAAOrC,EAAE,4BAEvB,kBAAC,EAAAiZ,OAAM,eACO,sCACZ7W,QAAS,EAAA8W,cAAA,QACTpN,QAAS,WACP,OAAAtD,GAA6BA,MAG9BxI,EAAE,6B,SCjCA+c,EAAqD,SAAC,G,IACjE/Y,EAAQ,WACRtB,EAAgB,mBAER1C,GAAM,IAAAiC,kBAAgB,EACxB,GAA4C,IAAAX,WAAkB,GAA7D0b,EAAiB,KAAEC,EAAoB,MAE9C,IAAAvb,YAAU,WACR,IAAI,UAAkB,CACpB,IAAMwb,EAAeC,OAAOD,aAC5B,GAAIA,EAAc,CAChB,IAAMlW,EAAQoW,SAASF,EAAaG,QAAQ,iBAAmB,KACzDC,EAAWtW,EAAQ,EACrBA,EAAQ,IACVkW,EAAaK,QAAQ,eAAgB,UAAGD,IACxCL,GAAqB,QAI1B,IAEH,IAAMO,EAAoB,WACxBP,GAAsBD,IAGxB,OACE,oCACE,kBAACjZ,EAAA,EAAc,oBACI,uBACjBrB,iBAAkBA,GAElB,0BAAMyR,UAAU,mBACd,kBAAC,EAAAD,YAAW,CAAC9R,QAAS,EAAAgS,oBAAA,OACpB,kBAAC,EAAAqJ,MAAK,KACJ,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAU,MAAM7d,EAAE,wBAK/BgE,IAGL,kBAAC,EAAA8Z,MAAK,CACJ1b,QAAS,EAAA2b,aAAA,MACT1b,MAAM,oBACNiV,OAAQ0F,EACRxY,QAAS,WAAM,OAAAgZ,KACfQ,QAAS,CACP,kBAAC,EAAA/E,OAAM,CACLpB,IAAI,UACJzV,QAAQ,UACR0J,QAAS,WAAM,OAAA0R,MAAmB,QAIrC","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/pending-icon.js","webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerContent.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/contexts/InstanceDrawerContext.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/Pagination.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/StreamsTableConnected.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StatusColumn/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/hooks.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/NameFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/RegionFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/FilterSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StatusFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsToolbar/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/Unauthorized/Unauthorized.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KafkaEmptyState/KafkaEmptyState.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KasLayout/KasLayout.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PendingIconConfig = {\n  name: 'PendingIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,895.9 C300.3,895.9 128.1,723.8 128.1,511.9 C128.1,300.2 300.3,127.9 512.1,127.9 C723.8,127.9 896,300.2 896.1,511.9 C896.1,723.7 723.8,895.9 512.1,895.9 M512.1,0 C229.7,0 0,229.7 0,512 C0,794.3 229.7,1024 512.1,1024 C794.3,1024 1024,794.3 1024,512 C1024,229.7 794.3,0 512.1,0 M704,288 L704,272 C704,263.2 696.8,256 688,256 L336,256 C327.2,256 320,263.2 320,272 L320,288 C320,447 480,449 480,512 C480,575 320,575 320,736 L320,752 C320,760.8 327.2,768 336,768 L688,768 C696.8,768 704,760.8 704,752 L704,736 C704,576 544,577 544,512 C544,447 704,448 704,288 M603.9,704 L420.3,704 C417.3,704 418.2,695 419.4,686.8 C426.8,634.5 480.1,617.4 495.2,612.3 C512.3,606.6 512.3,606.6 528.9,612.3 C544,617.6 597.6,635.4 604.8,687 C605.9,695.2 606.9,704 603.9,704',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PendingIcon = require('../createIcon').createIcon(exports.PendingIconConfig);\nexports[\"default\"] = exports.PendingIcon;","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_localizedFormat=t()}(this,(function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,o,n){var r=o.prototype,i=r.format;n.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var o=this.$locale().formats,n=function(t,o){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var i=r&&r.toUpperCase();return n||o[r]||e[r]||o[i].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,o){return t||o.slice(1)}))}))}(t,void 0===o?{}:o);return i.call(this,n)}}}));","import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","// A map of modal components to their lazy loaded implementations\nimport React from 'react';\n\nimport { useTranslation } from 'react-i18next';\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from '@rhoas/app-services-ui-shared';\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation();\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<CreateInstanceProps>\n      >,\n      variant: 'medium',\n      title: t('create_a_kafka_instance'),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<DeleteInstanceProps>\n      >,\n      variant: 'small',\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<TransferOwnershipProps>\n      >,\n      variant: 'medium',\n      title: t('change_owner'),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<CreateServiceAccountProps>\n      >,\n      variant: 'medium',\n      title: t('serviceAccount.create_a_service_account'),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<DeleteServiceAccountProps>\n      >,\n      title: t('serviceAccount.delete_service_account') + '?',\n      variant: 'small',\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t('serviceAccount.reset_service_account_credentials')}?`,\n      variant: 'medium',\n    },\n  };\n};\n\nexport const KasModalLoader: React.FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/utils';\nimport { MASLoading } from '@app/common';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { ConnectionTabProps } from '@app/modules/InstanceDrawer/ConnectionTab';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\n\nexport const ResourcesTab = React.lazy(() => import('./ConnectionTab'));\nexport const DetailsTab = React.lazy(() => import('./DetailsTab'));\n\nexport type InstanceDrawerContentProps = Pick<\n  ConnectionTabProps,\n  'tokenEndPointUrl'\n>;\n\nexport const InstanceDrawerContent: React.FunctionComponent<InstanceDrawerContentProps> =\n  ({ tokenEndPointUrl }) => {\n    const { t } = useTranslation();\n\n    const { instanceDrawerTab, setInstanceDrawerTab, instanceDrawerInstance } =\n      useInstanceDrawer();\n\n    const selectTab = (tab: string | number) => {\n      if (tab === InstanceDrawerTab.CONNECTION) {\n        setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n      } else {\n        setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n      }\n    };\n\n    const getExternalServer = () => {\n      const { bootstrap_server_host } = instanceDrawerInstance || {};\n      return bootstrap_server_host?.endsWith(':443')\n        ? bootstrap_server_host\n        : `${bootstrap_server_host}:443`;\n    };\n\n    const isKafkaPending =\n      instanceDrawerInstance?.status === InstanceStatus.ACCEPTED ||\n      instanceDrawerInstance?.status === InstanceStatus.PREPARING;\n\n    return (\n      <React.Suspense fallback={<MASLoading />}>\n        <Tabs\n          activeKey={instanceDrawerTab.toString()}\n          onSelect={(_, tab) => selectTab(tab)}\n        >\n          <Tab\n            eventKey={InstanceDrawerTab.DETAILS.toString()}\n            title={<TabTitleText>{t('details')}</TabTitleText>}\n          >\n            <DetailsTab />\n          </Tab>\n          <Tab\n            eventKey={InstanceDrawerTab.CONNECTION.toString()}\n            title={<TabTitleText>{t('connection')}</TabTitleText>}\n            data-testid='drawerStreams-tabConnect'\n          >\n            <ResourcesTab\n              externalServer={getExternalServer()}\n              isKafkaPending={isKafkaPending}\n              tokenEndPointUrl={tokenEndPointUrl}\n              instanceId={instanceDrawerInstance?.id}\n            />\n          </Tab>\n        </Tabs>\n      </React.Suspense>\n    );\n  };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport './InstanceDrawer.css';\nimport {\n  InstanceDrawerContent,\n  InstanceDrawerContentProps,\n} from '@app/modules/InstanceDrawer/InstanceDrawerContent';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  | 'drawerHeaderProps'\n  | 'panelBodyContent'\n  | '[data-ouia-app-id]'\n  | 'isExpanded'\n  | 'isLoading'\n  | 'onClose'\n  | 'notRequiredDrawerContentBackground'\n> &\n  InstanceDrawerContentProps;\n\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  tokenEndPointUrl,\n}) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n  const {\n    isInstanceDrawerOpen,\n    instanceDrawerInstance,\n    closeInstanceDrawer,\n    noInstances,\n  } = useInstanceDrawer();\n\n  return (\n    <MASDrawer\n      isExpanded={isInstanceDrawerOpen}\n      isLoading={instanceDrawerInstance === undefined}\n      onClose={closeInstanceDrawer}\n      panelBodyContent={\n        <InstanceDrawerContent tokenEndPointUrl={tokenEndPointUrl} />\n      }\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: instanceDrawerInstance?.name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={noInstances}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useState } from 'react';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\nimport { KafkaInstance } from '@rhoas/app-services-ui-shared';\n\nexport type InstanceDrawerContextProps = {\n  isInstanceDrawerOpen: boolean;\n  instanceDrawerTab: InstanceDrawerTab;\n  setInstanceDrawerTab: (tab: InstanceDrawerTab) => void;\n  openInstanceDrawer: (tab?: InstanceDrawerTab) => void;\n  closeInstanceDrawer: () => void;\n  instanceDrawerInstance: KafkaInstance | undefined;\n  setInstanceDrawerInstance: (instance: KafkaInstance) => void;\n  setNoInstances: (noInstances: boolean) => void;\n  noInstances: boolean;\n};\n\nexport const InstanceDrawerContext = React.createContext<\n  InstanceDrawerContextProps | undefined\n>(undefined);\n\nexport const useInstanceDrawer = (): InstanceDrawerContextProps => {\n  const answer = useContext(InstanceDrawerContext);\n  if (answer === undefined) {\n    throw new Error('must be used inside a InstanceDrawerContext provider');\n  }\n  return answer;\n};\n\nexport type InstanceDrawerContextProviderProps = {\n  initialTab?: InstanceDrawerTab;\n  initialInstance?: KafkaInstance;\n  initialNoInstances?: boolean;\n};\n\nexport const InstanceDrawerContextProvider: React.FunctionComponent<InstanceDrawerContextProviderProps> =\n  ({ initialTab, initialInstance, initialNoInstances = false, children }) => {\n    const defaultTab = InstanceDrawerTab.DETAILS;\n    const [instanceDrawerTab, setInstanceDrawerTab] = useState<\n      InstanceDrawerTab | undefined\n    >(initialTab);\n    const [instanceDrawerInstance, setInstanceDrawerInstance] = useState<\n      KafkaInstance | undefined\n    >(initialInstance);\n    const [noInstances, setNoInstances] = useState<boolean>(initialNoInstances);\n    return (\n      <InstanceDrawerContext.Provider\n        value={{\n          isInstanceDrawerOpen: instanceDrawerTab !== undefined,\n          instanceDrawerTab:\n            instanceDrawerTab === undefined ? defaultTab : instanceDrawerTab,\n          setInstanceDrawerTab,\n          instanceDrawerInstance,\n          setInstanceDrawerInstance,\n          setNoInstances,\n          noInstances,\n          openInstanceDrawer: (tab) => {\n            if (tab) {\n              setInstanceDrawerTab(tab);\n            } else {\n              setInstanceDrawerTab(defaultTab);\n            }\n          },\n          closeInstanceDrawer: () => {\n            setInstanceDrawerTab(undefined);\n            setInstanceDrawerInstance(undefined);\n          },\n        }}\n      >\n        {children}\n      </InstanceDrawerContext.Provider>\n    );\n  };\n","export enum InstanceDrawerTab {\n  DETAILS = 'details',\n  CONNECTION = 'connection',\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASPagination } from '@app/common';\nimport { PaginationVariant } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nexport const Pagination: React.FunctionComponent<PaginationProps> = ({\n  total,\n  page,\n  perPage,\n}) => {\n  const { t } = useTranslation();\n  if (total > 0) {\n    return (\n      <MASPagination\n        widgetId='pagination-cloudProviderOptions-menu-bottom'\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        titles={{\n          paginationTitle: t('full_pagination'),\n          perPageSuffix: t('per_page_suffix'),\n          toFirstPage: t('to_first_page'),\n          toPreviousPage: t('to_previous_page'),\n          toLastPage: t('to_last_page'),\n          toNextPage: t('to_next_page'),\n          optionsToggle: t('options_toggle'),\n          currPage: t('curr_page'),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import React from 'react';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { useTranslation } from 'react-i18next';\n\nexport type NoResultsFoundProps = {\n  count: number;\n  dataLoaded: boolean;\n};\nexport const NoResultsFound: React.FunctionComponent<NoResultsFoundProps> = ({\n  count,\n  dataLoaded,\n}) => {\n  const { t } = useTranslation();\n\n  if (count < 1 && dataLoaded) {\n    return (\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t('no_results_found'),\n        }}\n        emptyStateBodyProps={{\n          body: t('adjust_your_filters_and_try_again'),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n} from '@app/utils';\nimport { Skeleton } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport {\n  StatusColumn,\n  StreamsToolbar,\n  StreamsToolbarProps,\n} from '@app/modules/OpenshiftStreams/components';\nimport { MASTable } from '@app/common';\nimport { Pagination } from '@app/modules/OpenshiftStreams/components/StreamsTable/Pagination';\nimport { NoResultsFound } from '@app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\n\nexport type StreamsTableProps = Pick<\n  StreamsToolbarProps,\n  | 'page'\n  | 'perPage'\n  | 'total'\n  | 'filterSelected'\n  | 'setFilterSelected'\n  | 'filteredValue'\n  | 'setFilteredValue'\n  | 'onCreate'\n  | 'refresh'\n  | 'handleCreateInstanceModal'\n> & {\n  onDeleteInstance: (instance: KafkaRequest) => Promise<void>;\n  onChangeOwner: (instance: KafkaRequest) => Promise<void>;\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  loggedInUser: string | undefined;\n  expectedTotal: number;\n  kafkaDataLoaded: boolean;\n  kafkaInstanceItems?: KafkaRequest[];\n  isOrgAdmin?: boolean;\n  setOrderBy: (order: string) => void;\n  orderBy: string;\n};\nexport const StreamsTable: React.FunctionComponent<StreamsTableProps> = ({\n  onDeleteInstance,\n  onChangeOwner,\n  onViewInstance,\n  onViewConnection,\n  loggedInUser,\n  page,\n  perPage,\n  total,\n  expectedTotal,\n  kafkaDataLoaded,\n  kafkaInstanceItems,\n  isOrgAdmin,\n  setOrderBy,\n  orderBy,\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  onCreate,\n  refresh,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const { instanceDrawerInstance } = useInstanceDrawer();\n\n  const cells = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  const sortBy = useMemo((): ISortBy | undefined => {\n    const getIndexForSortParameter = (parameter: string) => {\n      switch (parameter.toLowerCase()) {\n        case 'name':\n          return 0;\n        case 'cloud_provider':\n          return 1;\n        case 'region':\n          return 2;\n        case 'owner':\n          return 3;\n        case 'status':\n          return 4;\n        case 'created_at':\n          return 5;\n        default:\n          return undefined;\n      }\n    };\n\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getIndexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  }, [orderBy]);\n\n  const rows = useMemo(() => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: cells.length,\n      });\n    }\n    kafkaInstanceItems?.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link to={`kafkas/${row?.id}`}>{name}</Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t('ago'))}\n                <br />\n                {instance_type === InstanceType?.eval && '48 hours duration'}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  }, [page, perPage, expectedTotal, kafkaDataLoaded, kafkaInstanceItems]);\n\n  const actionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'view-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'connect-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('change_owner'),\n        id: 'change-owner',\n        ['data-testid']: 'tableStreams-actionChangeOwner',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'change-owner'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_change_owner'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'delete-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const onSelectKebabDropdownOption = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === 'view-instanceDrawerInstance') {\n      onViewInstance(originalData);\n      //set selected row for view instanceDrawerInstance and connect instanceDrawerInstance\n    } else if (selectedOption === 'connect-instanceDrawerInstance') {\n      onViewConnection(originalData);\n    } else if (selectedOption === 'change-owner') {\n      onChangeOwner(originalData);\n    } else if (selectedOption === 'delete-instanceDrawerInstance') {\n      deleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    const previousNode =\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const deleteInstance = async (kafka: KafkaRequest) => {\n    await onDeleteInstance(kafka);\n  };\n\n  const onSort: OnSort = (_event, index, direction, extraData) => {\n    const getParameterForSortIndex = (index: number) => {\n      switch (index) {\n        case 0:\n          return 'name';\n        case 1:\n          return 'cloud_provider';\n        case 2:\n          return 'region';\n        case 3:\n          return 'owner';\n        case 4:\n          return 'status';\n        case 5:\n          return 'created_at';\n        default:\n          return '';\n      }\n    };\n\n    let myDirection = direction;\n    if (sortBy?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = SortByDirection.desc;\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const onRowClick = (\n    event: React.MouseEvent<HTMLTableRowElement | HTMLButtonElement>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => {\n    if (event.target instanceof HTMLElement) {\n      const tagName = event.target.tagName.toLowerCase();\n      // Open instance drawer on row click except kebab button click or opening the kafka instance\n      if (tagName === 'button' || tagName === 'a') {\n        return;\n      }\n    }\n    onViewInstance(row?.originalData);\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable<HTMLTableRowElement | HTMLButtonElement>\n        tableProps={{\n          cells,\n          rows,\n          'aria-label': t('cluster_instance_list'),\n          actionResolver,\n          onSort,\n          sortBy,\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={instanceDrawerInstance?.name}\n        onRowClick={onRowClick}\n        rowDataTestId='tableStreams-row'\n        loggedInUser={loggedInUser}\n      />\n      <NoResultsFound\n        count={kafkaInstanceItems?.length || 0}\n        dataLoaded={kafkaDataLoaded}\n      />\n      <Pagination total={total} page={page} perPage={perPage} />\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAlert, useAuth } from '@rhoas/app-services-ui-shared';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n} from '@rhoas/kafka-management-sdk';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { useTimeout } from '@app/hooks/useTimeout';\n\nexport const KafkaStatusAlerts: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlert() || {};\n  const auth = useAuth();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const { isVisible } = usePageVisibility();\n  const { apiBasePath: basePath } = kas || {};\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert({\n      variant: AlertVariant.danger,\n      title: t('common.something_went_wrong'),\n      description: reason,\n    });\n  };\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getKafkas('', '', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setCurrentUserKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  const addAlertAfterSuccessDeletion = () => {\n    const removeKafkaFromDeleted = (name: string) => {\n      const index = deletedKafkas.findIndex((k) => k === name);\n      if (index > -1) {\n        const prev = Object.assign([], deletedKafkas);\n        prev.splice(index, 1);\n        setDeletedKafkas(prev);\n      }\n    };\n\n    if (currentUserKafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserKafkas.filter(\n        (k) =>\n          k.status === InstanceStatus.DEPROVISION ||\n          k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [\n        ...deletedKafkas,\n        ...notPresentKafkas,\n      ];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserKafkas?.findIndex(\n          (item) => item.name === k\n        );\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t('kafka_successfully_deleted', { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign(\n        [],\n        currentUserKafkas\n      ).filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.READY ||\n          item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_successfully_created'),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_success_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-success',\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_not_created'),\n                variant: AlertVariant.danger,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_failed_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      currentUserKafkas?.filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.PROVISIONING ||\n          item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [currentUserKafkas]);\n\n  return <></>;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  AlertVariant,\n  Card,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { usePagination } from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from '@rhoas/kafka-management-sdk';\nimport './StreamsTableConnected.css';\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\nimport { useFederated } from '@app/contexts';\nimport '@app/modules/styles.css';\nimport {\n  FilterType,\n  KafkaEmptyState,\n  Unauthorized,\n} from '@app/modules/OpenshiftStreams/components';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\nimport { StreamsTable } from '@app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable';\nimport { KafkaStatusAlerts } from '@app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts';\n\nexport type StreamsTableProps = {\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n};\n\nexport const StreamsTableConnected: React.FunctionComponent<StreamsTableProps> =\n  ({ preCreateInstance }: StreamsTableProps) => {\n    dayjs.extend(localizedFormat);\n    const { shouldOpenCreateModal } = useFederated() || {};\n\n    const auth = useAuth();\n    const { kas } = useConfig() || {};\n    const { apiBasePath: basePath } = kas || {};\n    const { isVisible } = usePageVisibility();\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    const { page = 1, perPage = 10 } = usePagination() || {};\n    const { t } = useTranslation();\n    const { addAlert } = useAlert() || {};\n    const { showModal: showCreateModal } =\n      useModal<ModalType.KasCreateInstance>();\n    const { showModal: showTransferOwnershipModal } =\n      useModal<ModalType.KasTransferOwnership>();\n    const { hideModal: hideDeleteModal, showModal: showDeleteModal } =\n      useModal<ModalType.KasDeleteInstance>();\n    const {\n      setInstanceDrawerTab,\n      setInstanceDrawerInstance,\n      instanceDrawerInstance,\n      setNoInstances,\n    } = useInstanceDrawer();\n    const history = useHistory();\n\n    // Kafka list state\n    const [kafkaInstancesList, setKafkaInstancesList] = useState<\n      KafkaRequestList | undefined\n    >();\n    const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n    const [expectedTotal, setExpectedTotal] = useState<number>(3);\n\n    // filter and sort state\n    const [orderBy, setOrderBy] = useState<string>('created_at desc');\n    const [filterSelected, setFilterSelected] = useState('name');\n    const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n    // user state\n    const [isUserUnauthorized, setIsUserUnauthorized] =\n      useState<boolean>(false);\n    const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n      undefined\n    );\n    const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n    // States to sort out\n    const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n\n    useEffect(() => {\n      const openModal = async () => {\n        const shouldOpen =\n          shouldOpenCreateModal && (await shouldOpenCreateModal());\n        if (shouldOpen) {\n          openCreateModal();\n        }\n      };\n      openModal();\n    }, [shouldOpenCreateModal]);\n\n    const openCreateModal = () => {\n      showCreateModal(ModalType.KasCreateInstance, {\n        onCreate: () => {\n          onCreate();\n          refreshKafkasAfterAction();\n        },\n      });\n    };\n\n    const handleCreateInstanceModal = async () => {\n      let open;\n      if (preCreateInstance) {\n        // Callback before opening create dialog\n        // The callback can override the new state of opening\n        open = await preCreateInstance(true);\n      }\n\n      if (open) {\n        openCreateModal();\n      }\n    };\n\n    const onViewInstance = (instance: KafkaRequest) => {\n      setInstanceDrawerInstance(instance);\n      setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n    };\n\n    const onViewConnection = (instance: KafkaRequest) => {\n      setInstanceDrawerInstance(instance);\n      setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n    };\n\n    const getFilterQuery = () => {\n      const filters: string[] = [];\n      filteredValue.forEach((filter) => {\n        const { filterKey, filterValue } = filter;\n        if (filterValue && filterValue.length > 0) {\n          let filterQuery = '(';\n          filterQuery += filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === InstanceStatus.PROVISIONING) {\n                return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n              }\n              if (value === InstanceStatus.DEPROVISION) {\n                return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n              }\n              return value !== ''\n                ? `${filterKey} ${\n                    val.isExact === true ? `= ${value}` : `like %${value}%`\n                  }`\n                : '';\n            })\n            .join(' or ');\n          filterQuery += ')';\n\n          filters.push(filterQuery);\n        }\n      });\n      return filters.join(' and ');\n    };\n\n    const handleServerError = (error: unknown) => {\n      let reason: string | undefined;\n      let errorCode: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n        errorCode = error.response?.data?.code;\n      }\n      //check unauthorize user\n      if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n        setIsUserUnauthorized(true);\n      } else {\n        addAlert &&\n          addAlert({\n            variant: AlertVariant.danger,\n            title: t('common.something_went_wrong'),\n            description: reason,\n          });\n      }\n    };\n\n    // Functions\n    const fetchKafkas = async () => {\n      const filterQuery = getFilterQuery();\n      const accessToken = await auth?.kas.getToken();\n\n      if (accessToken && isVisible) {\n        try {\n          const apisService = new DefaultApi(\n            new Configuration({\n              accessToken,\n              basePath,\n            })\n          );\n\n          await apisService\n            .getKafkas(\n              page?.toString(),\n              perPage?.toString(),\n              orderBy,\n              filterQuery\n            )\n            .then((res) => {\n              const kafkaInstances = res.data;\n              const kafkaItems = kafkaInstances?.items || [];\n              setKafkaInstancesList(kafkaInstances);\n\n              if (\n                kafkaInstancesList?.total !== undefined &&\n                kafkaInstancesList.total > expectedTotal\n              ) {\n                setExpectedTotal(kafkaInstancesList.total);\n              }\n\n              if (\n                waitingForDelete &&\n                filteredValue.length < 1 &&\n                kafkaItems?.length == 0\n              ) {\n                setWaitingForDelete(false);\n              }\n\n              setKafkaDataLoaded(true);\n            });\n        } catch (error) {\n          handleServerError(error);\n        }\n      }\n    };\n\n    useEffect(() => {\n      setKafkaDataLoaded(false);\n      fetchKafkas();\n    }, [auth, page, perPage, filteredValue, orderBy]);\n\n    useEffect(() => {\n      if (kafkaInstancesList !== undefined && kafkaInstancesList?.size > 0) {\n        const selectedKafkaItem = kafkaInstancesList.items?.find(\n          (kafka) => kafka?.id === instanceDrawerInstance?.id\n        );\n        if (selectedKafkaItem !== undefined) {\n          setInstanceDrawerInstance(selectedKafkaItem);\n        }\n      }\n    }, [kafkaInstancesList?.items]);\n\n    useEffect(() => {\n      setNoInstances(kafkaInstancesList?.size === 0);\n    }, [kafkaInstancesList?.size]);\n\n    useEffect(() => {\n      auth.getUsername()?.then((username) => setLoggedInUser(username));\n      auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n    }, [auth]);\n\n    useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n    const refreshKafkasAfterAction = () => {\n      //set the page to laoding state\n      if (kafkaInstancesList?.size === 1) {\n        setKafkaDataLoaded(true);\n      } else {\n        setKafkaDataLoaded(false);\n      }\n      fetchKafkas();\n    };\n\n    // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n    const onCreate = () => {\n      setExpectedTotal(\n        (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) + 1\n      );\n    };\n\n    // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n    const onDelete = () => {\n      setKafkaDataLoaded(false);\n      setExpectedTotal(\n        (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) - 1\n      );\n    };\n\n    const setSearchParam = useCallback(\n      (name: string, value: string) => {\n        searchParams.set(name, value.toString());\n      },\n      [searchParams]\n    );\n\n    // Redirect the user to a previous page if there are no kafka instances for a page number / size\n    useEffect(() => {\n      if (page > 1) {\n        if (\n          kafkaInstancesList?.items !== undefined &&\n          kafkaInstancesList.size === 0\n        ) {\n          setSearchParam('page', (page - 1).toString());\n          setSearchParam('perPage', perPage.toString());\n          history.push({\n            search: searchParams.toString(),\n          });\n        }\n      }\n    }, [page, perPage, kafkaInstancesList?.items]);\n\n    const onChangeOwner = async (instance: KafkaRequest) => {\n      showTransferOwnershipModal(ModalType.KasTransferOwnership, {\n        kafka: instance,\n        refreshKafkas: refreshKafkasAfterAction,\n      });\n    };\n\n    const onDeleteInstance = async (kafka: KafkaRequest) => {\n      const doDelete = async () => {\n        await deleteInstance(kafka);\n        onDelete();\n      };\n      if (kafka.status === InstanceStatus.FAILED) {\n        await doDelete();\n      } else {\n        showDeleteModal(ModalType.KasDeleteInstance, {\n          onDelete: doDelete,\n          kafka,\n        });\n      }\n    };\n\n    const deleteInstance = async (instance: KafkaRequest) => {\n      /**\n       * Throw an error if kafka id is not set\n       * and avoid delete instanceDrawerInstance api call\n       */\n      if (instance.id === undefined) {\n        throw new Error('kafka instanceDrawerInstance id is not set');\n      }\n      const accessToken = await auth?.kas.getToken();\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      onDelete();\n      hideDeleteModal();\n\n      try {\n        await apisService.deleteKafkaById(instance.id, true).then(() => {\n          setWaitingForDelete(true);\n          refreshKafkasAfterAction();\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert &&\n          addAlert({\n            title: t('common.something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    };\n\n    if (isUserUnauthorized) {\n      return <Unauthorized />;\n    }\n\n    const isDisplayKafkaEmptyState =\n      kafkaDataLoaded &&\n      filteredValue.length < 1 &&\n      kafkaInstancesList !== undefined &&\n      kafkaInstancesList?.total < 1;\n\n    if (isDisplayKafkaEmptyState) {\n      return (\n        <KafkaEmptyState\n          handleCreateInstanceModal={handleCreateInstanceModal}\n        />\n      );\n    } else if (isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className='mk--main-page__page-section--table pf-m-padding-on-xl'\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card>\n            <StreamsTable\n              onDeleteInstance={onDeleteInstance}\n              onViewInstance={onViewInstance}\n              onViewConnection={onViewConnection}\n              onChangeOwner={onChangeOwner}\n              loggedInUser={loggedInUser}\n              page={page}\n              perPage={perPage}\n              total={expectedTotal}\n              isOrgAdmin={isOrgAdmin}\n              expectedTotal={expectedTotal}\n              kafkaDataLoaded={kafkaDataLoaded}\n              kafkaInstanceItems={kafkaInstancesList?.items}\n              setOrderBy={setOrderBy}\n              setFilterSelected={setFilterSelected}\n              setFilteredValue={setFilteredValue}\n              filteredValue={filteredValue}\n              handleCreateInstanceModal={handleCreateInstanceModal}\n              orderBy={orderBy}\n              filterSelected={filterSelected}\n              onCreate={onCreate}\n              refresh={refreshKafkasAfterAction}\n            />\n          </Card>\n          <KafkaStatusAlerts />\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: React.FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation();\n\n  const Status: React.FunctionComponent = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const StatusIcon: React.FunctionComponent = () => {\n    const statusIcon = getStatusIcon();\n    if (statusIcon) {\n      return <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>;\n    }\n    return <></>;\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className='mk--instances__table--icon--completed' />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className='mk--instances__table--icon--failed' />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size='md'\n            aria-label={instanceName}\n            aria-valuetext='Creation in progress'\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <StatusIcon />\n      <FlexItem>\n        <Status />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { useTranslation } from 'react-i18next';\nimport React from 'react';\n\nexport const useTooltipContent = (\n  isMaxFilter: boolean,\n  fieldName?: string\n): React.ReactElement => {\n  const { t } = useTranslation();\n  if (isMaxFilter) {\n    return <div>{t('max_filter_message')}</div>;\n  }\n  if (fieldName === 'owner') {\n    return <div>{t('owner_field_invalid_message', { name: fieldName })}</div>;\n  }\n  return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n};\n","import React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport { cloudProviderOptions, KeyValueOptions } from '@app/utils';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\n\nexport type CloudProviderFilterProps = FilterProps;\n\nexport const CloudProviderFilter: React.FunctionComponent<CloudProviderFilterProps> =\n  ({\n    getSelectionForFilter,\n    filterSelected,\n    onDeleteChipGroup,\n    onDeleteChip,\n    updateFilter,\n    isMaxFilter,\n    removeFilterValue,\n    isDisabledSelectOption,\n  }) => {\n    const { t } = useTranslation();\n\n    const options: KeyValueOptions[] = cloudProviderOptions.map(\n      (cloudProvider) => {\n        return {\n          label: t(cloudProvider.value),\n          value: cloudProvider.value,\n          disabled: false,\n        };\n      }\n    );\n\n    return (\n      <ToolbarFilter\n        chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n        deleteChip={(_category, chip) =>\n          onDeleteChip && onDeleteChip('cloud_provider', chip, options)\n        }\n        deleteChipGroup={() =>\n          onDeleteChipGroup && onDeleteChipGroup('cloud_provider')\n        }\n        categoryName={t('cloud_provider')}\n        showToolbarItem={filterSelected === 'cloud_provider'}\n      >\n        <CloudProviderSelect\n          updateFilter={updateFilter}\n          isMaxFilter={isMaxFilter}\n          removeFilterValue={removeFilterValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n          options={options}\n          getSelectionForFilter={getSelectionForFilter}\n          filterSelected={filterSelected}\n        />\n      </ToolbarFilter>\n    );\n  };\n\ntype CloudProviderSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  options: KeyValueOptions[];\n};\n\nconst CloudProviderSelect: React.FunctionComponent<CloudProviderSelectProps> =\n  ({\n    updateFilter,\n    isMaxFilter,\n    removeFilterValue,\n    isDisabledSelectOption,\n    options,\n    getSelectionForFilter,\n    filterSelected,\n  }) => {\n    const { t } = useTranslation();\n    const selectRef = useRef<Select>(null);\n    const tooltipContent = useTooltipContent(isMaxFilter);\n\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (isMaxFilter) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter}\n            content={tooltipContent}\n            reference={selectRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggle = () => {\n      setExpanded((prevState) => !prevState);\n    };\n\n    const onSelect = (\n      _event:\n        | React.MouseEvent<Element, MouseEvent>\n        | React.ChangeEvent<Element>,\n      selection: string | SelectOptionObject,\n      isPlaceholder?: boolean | undefined\n    ) => {\n      if (isPlaceholder) clear();\n      updateFilter(\n        'cloud_provider',\n        { value: selection.toString(), isExact: true },\n        true\n      );\n      options.length < 2 && setExpanded(false);\n    };\n\n    const clear = () => {\n      removeFilterValue && removeFilterValue('cloud_provider');\n      setExpanded(false);\n    };\n\n    if (filterSelected === 'cloud_provider') {\n      return (\n        <Select\n          id='cloud-provider-select'\n          variant={SelectVariant.checkbox}\n          aria-label='Select cloud provider'\n          onToggle={onToggle}\n          selections={getSelectionForFilter('cloud_provider')}\n          isOpen={expanded}\n          onSelect={onSelect}\n          placeholderText={t('filter_by_cloud_provider')}\n          className='select-custom-width'\n          ref={selectRef}\n        >\n          {options.map((option, index) => {\n            const isDisabled = () => {\n              if (option.disabled) {\n                return true;\n              }\n              return (\n                isMaxFilter &&\n                isDisabledSelectOption('cloud_provider', option.value)\n              );\n            };\n\n            return (\n              <SelectOption\n                isDisabled={isDisabled()}\n                key={index}\n                value={option.value}\n              >\n                <FilterTooltip />\n                {option.label}\n              </SelectOption>\n            );\n          })}\n        </Select>\n      );\n    }\n    return <></>;\n  };\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type NameFilterProps = FilterProps;\n\nexport const NameFilter: React.FunctionComponent<NameFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const [valid, setValid] = useState<boolean>(true);\n  const [value, setValue] = useState<string | undefined>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'name');\n\n  const change = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('name', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const renderNameInput = () => {\n    const v = !valid || isMaxFilter;\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (v) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter || !valid}\n            content={tooltipContent}\n            reference={inputRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    if (filterSelected?.toLowerCase() === 'name') {\n      return (\n        <InputGroup>\n          <TextInput\n            name='name'\n            id='filterText'\n            type='search'\n            aria-label='Search filter input'\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            placeholder={t('filter_by_name_lower')}\n            onChange={change}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={!valid || isMaxFilter}\n            onClick={() => onFilter()}\n            aria-label='Search instances'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('name')}\n      deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('name')}\n      categoryName={t('name')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n    >\n      {renderNameInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type OwnerFilterProps = FilterProps;\nexport const OwnerFilter: React.FunctionComponent<OwnerFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChipGroup,\n  onDeleteChip,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'owner');\n\n  const [value, setValue] = useState<string | undefined>();\n  const [valid, setValid] = useState<boolean>(true);\n\n  const validate = (value?: string) => {\n    return value ? !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value.trim()) : true;\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('owner', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onChange = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const renderOwnerInput = () => {\n    if (filterSelected?.toLowerCase() === 'owner') {\n      const v = !valid || isMaxFilter;\n\n      const FilterTooltip: React.FunctionComponent = () => {\n        if (v) {\n          return (\n            <Tooltip\n              isVisible={isMaxFilter || !valid}\n              content={tooltipContent}\n              reference={inputRef}\n            />\n          );\n        }\n        return <></>;\n      };\n\n      return (\n        <InputGroup>\n          <TextInput\n            name='owner'\n            id='filterOwners'\n            type='search'\n            aria-label='Search filter input'\n            placeholder={t('filter_by_owner')}\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            isDisabled={v}\n            variant={ButtonVariant.control}\n            onClick={onFilter}\n            aria-label='Search owners'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('owner')}\n      deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('owner')}\n      categoryName={t('owner')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n    >\n      {renderOwnerInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { cloudRegionOptions, KeyValueOptions } from '@app/utils';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\n\nexport type RegionFilterProps = FilterProps;\n\nexport const RegionFilter: React.FunctionComponent<RegionFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  removeFilterValue,\n  isDisabledSelectOption,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const options = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('region')?.map((val) => t(val))}\n      deleteChip={(_category, chip) => onDeleteChip('region', chip, options)}\n      deleteChipGroup={() => onDeleteChipGroup('region')}\n      categoryName={t('region')}\n      showToolbarItem={filterSelected === 'region'}\n    >\n      <RegionSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype RegionSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  options: KeyValueOptions[];\n};\n\nconst RegionSelect: React.FunctionComponent<RegionSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation();\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      'region',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue('region');\n    setExpanded(false);\n  };\n\n  if (filterSelected === 'region') {\n    return (\n      <Select\n        id='region-select'\n        variant={SelectVariant.checkbox}\n        aria-label='Select region'\n        onToggle={onToggle}\n        selections={getSelectionForFilter('region')}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t('filter_by_region')}\n        className='select-custom-width'\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption('region', option.value)\n            );\n          };\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\nexport type FilterSelectProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const FilterSelect: React.FunctionComponent<FilterSelectProps> = ({\n  setFilterSelected,\n  filterSelected,\n}) => {\n  const { t } = useTranslation();\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const onToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent | React.ChangeEvent,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const options = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label='Select filter'\n        onToggle={onToggle}\n        selections={filterSelected}\n        isOpen={isFilterExpanded}\n        onSelect={onSelect}\n      >\n        {options.map((option, index) => (\n          <SelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n          >\n            {option.label}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { InstanceStatus, statusOptions, KeyValueOptions } from '@app/utils';\n\nexport type StatusFilter = FilterProps;\n\nexport const StatusFilter: React.FunctionComponent<StatusFilter> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation();\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('status')?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip('status', chip, statusFilterOptions)\n      }\n      deleteChipGroup={() => onDeleteChipGroup('status')}\n      categoryName={t('status')}\n      showToolbarItem={filterSelected === 'status'}\n    >\n      <StatusSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        statusFilterOptions={statusFilterOptions}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype StatusSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  statusFilterOptions: KeyValueOptions[];\n};\n\nconst StatusSelect: React.FunctionComponent<StatusSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  statusFilterOptions,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation();\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const selectRef = useRef<Select>(null);\n\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      'status',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n  };\n\n  const clear = () => {\n    removeFilterValue('status');\n    setExpanded(false);\n  };\n  if (filterSelected === 'status') {\n    return (\n      <Select\n        id='status-select'\n        variant={SelectVariant.checkbox}\n        aria-label='Select status'\n        onToggle={onToggle}\n        selections={getSelectionForFilter('status')}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t('filter_by_status')}\n        className='select-custom-width'\n        ref={selectRef}\n      >\n        {statusFilterOptions.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption('status', option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import React from 'react';\nimport { ToolbarChip, ToolbarGroup } from '@patternfly/react-core';\nimport { CloudProviderFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter';\nimport { NameFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/NameFilter';\nimport { OwnerFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter';\nimport { RegionFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/RegionFilter';\nimport { FilterSelect } from '@app/modules/OpenshiftStreams/components/TableFilters/FilterSelect';\nimport { StatusFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/StatusFilter';\nimport { KeyValueOptions } from '@app/utils';\nimport {\n  FilterType,\n  FilterValue,\n} from '@app/modules/OpenshiftStreams/components';\n\nexport type StreamsFilterGroupProps = {\n  isMaxFilter: boolean;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const StreamsFilterGroup: React.FunctionComponent<StreamsFilterGroupProps> =\n  ({\n    isMaxFilter,\n    filteredValue,\n    setFilteredValue,\n    filterSelected,\n    setFilterSelected,\n  }) => {\n    const isDisabledSelectOption = (key: string, optionValue: string) => {\n      let newFilterValue: FilterValue | undefined;\n      const newFilteredValue = filteredValue?.filter(\n        ({ filterKey }) => filterKey === key\n      );\n      if (newFilteredValue && newFilteredValue?.length > 0) {\n        const { filterValue } = newFilteredValue[0];\n        newFilterValue = filterValue?.find(\n          ({ value }) => value === optionValue\n        );\n      }\n      if (!newFilterValue) {\n        return true;\n      }\n      return false;\n    };\n\n    const updateFilter = (\n      key: string,\n      filter: FilterValue,\n      removeIfPresent: boolean\n    ) => {\n      const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n      const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n      if (filterIndex > -1) {\n        // if filter is present with the current key\n        const filterValue = newFilterValue[filterIndex];\n        if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n          // if some filters are already there in applied filter for same key\n          const filterValueIndex = filterValue.filterValue.findIndex(\n            (f) => f.value === filter.value\n          ); // index of current filter value in applied filter\n          if (filterValueIndex > -1) {\n            // filter value is already present\n            if (removeIfPresent) {\n              filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n            } else {\n              return; // skip the duplicate values\n            }\n          } else {\n            // add the filter value to the current applied filter\n            newFilterValue[filterIndex].filterValue.push(filter);\n          }\n        } else {\n          // add the filter value to current applied filter\n          newFilterValue[filterIndex].filterValue = [filter];\n        }\n      } else {\n        // add filter with key and value to the applied filter\n        newFilterValue.push({ filterKey: key, filterValue: [filter] });\n      }\n      setFilteredValue(newFilterValue);\n    };\n\n    const getSelectionForFilter = (key: string) => {\n      const selectedFilters = filteredValue.filter(\n        (filter) => filter.filterKey === key\n      );\n      if (selectedFilters.length > 0) {\n        return selectedFilters[0].filterValue.map((val) => val.value);\n      }\n      return;\n    };\n\n    const onDeleteChip = (\n      category: string,\n      chip: string | ToolbarChip,\n      filterOptions?: KeyValueOptions[]\n    ) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      const prevFilterValue: FilterValue[] = Object.assign(\n        [],\n        newFilteredValue[filterIndex]?.filterValue\n      );\n      let filterChip: string | undefined = chip.toString();\n      /**\n       * Filter chip from filter cloudProviderOptions\n       */\n      if (filterOptions && filterOptions?.length > 0) {\n        filterChip = filterOptions?.find(\n          (option) => option.label === chip.toString()\n        )?.value;\n      }\n      /**\n       * Delete selected chip from filter cloudProviderOptions\n       */\n      const chipIndex = prevFilterValue.findIndex(\n        (val) => val.value === filterChip\n      );\n      if (chipIndex >= 0) {\n        newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const onDeleteChipGroup = (category: string) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      if (filterIndex >= 0) {\n        newFilteredValue.splice(filterIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const removeFilteredValue = (value: string) => {\n      const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = copyFilteredValue.findIndex(\n        (filter) => filter.filterKey === value\n      );\n      if (filterIndex >= 0) {\n        copyFilteredValue.splice(filterIndex, 1);\n      }\n      setFilteredValue(copyFilteredValue);\n    };\n\n    return (\n      <>\n        <ToolbarGroup variant='filter-group'>\n          <FilterSelect\n            setFilterSelected={setFilterSelected}\n            filterSelected={filterSelected}\n          />\n          <NameFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <CloudProviderFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <RegionFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <OwnerFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <StatusFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n        </ToolbarGroup>\n      </>\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { InstanceStatus, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { StreamsFilterGroup } from '@app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup';\nimport { FilterType } from '@app/modules/OpenshiftStreams/components';\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: FilterType) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.PROVISIONING\n            )\n          : [];\n      const deprovisionStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.DEPROVISION\n            )\n          : [];\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant='primary'\n          onClick={handleCreateInstanceModal}\n          data-testid={'tableStreams-buttonCreateKafka'}\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='pagination-cloudProviderOptions-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instanceDrawerInstance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={\n        <StreamsFilterGroup\n          isMaxFilter={isMaxFilter}\n          filteredValue={filteredValue}\n          setFilteredValue={setFilteredValue}\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n      }\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { MASEmptyState } from '@app/common';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\n\nexport const Unauthorized: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: 'noPadding' }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t('access_permissions_needed'),\n          headingLevel: 'h2',\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            'to_access_kafka_instances_contact_your_organization_administrators'\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Button, ButtonVariant, PageSection } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\n\nexport type KafkaEmptyStateProps = {\n  handleCreateInstanceModal: () => void;\n};\nexport const KafkaEmptyState: React.FunctionComponent<KafkaEmptyStateProps> = ({\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n  return (\n    <PageSection padding={{ default: 'noPadding' }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        emptyStateBodyProps={{\n          body: (\n            <>\n              <Trans\n                i18nKey='create_a_kafka_instance_to_get_started'\n                components={[\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    key='btn-quick-start'\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart('getting-started')\n                    }\n                  />,\n                ]}\n              />\n            </>\n          ),\n        }}\n        titleProps={{ title: t('no_kafka_instances_yet') }}\n      >\n        <Button\n          data-testid='emptyStateStreams-buttonCreateKafka'\n          variant={ButtonVariant.primary}\n          onClick={() =>\n            handleCreateInstanceModal && handleCreateInstanceModal()\n          }\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n","import {\n  InstanceDrawer,\n  InstanceDrawerProps,\n} from '@app/modules/InstanceDrawer';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { isMobileTablet } from '@app/utils';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\n\nexport type KasLayoutProps = Pick<InstanceDrawerProps, 'tokenEndPointUrl'>;\n\nexport const KasLayout: React.FunctionComponent<KasLayoutProps> = ({\n  children,\n  tokenEndPointUrl,\n}) => {\n  const { t } = useTranslation();\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      const localStorage = window.localStorage;\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem('openSessions') || '0');\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        data-ouia-app-id='controlPlane-streams'\n        tokenEndPointUrl={tokenEndPointUrl}\n      >\n        <main className='pf-c-page__main'>\n          <PageSection variant={PageSectionVariants.light}>\n            <Level>\n              <LevelItem>\n                <TextContent>\n                  <Text component='h1'>{t('kafka_instances')}</Text>\n                </TextContent>\n              </LevelItem>\n            </Level>\n          </PageSection>\n          {children}\n        </main>\n      </InstanceDrawer>\n      <Modal\n        variant={ModalVariant.small}\n        title='Mobile experience'\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","module","e","LTS","LT","L","LL","LLL","LLLL","t","o","n","r","prototype","i","format","en","formats","this","$locale","replace","toUpperCase","slice","call","getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","KasModalLoader","registerModals","useModal","useTranslation","ModalType","lazyComponent","variant","title","ResourcesTab","DetailsTab","InstanceDrawerContent","bootstrap_server_host","tokenEndPointUrl","instanceDrawerTab","setInstanceDrawerTab","instanceDrawerInstance","isKafkaPending","status","fallback","Tabs","activeKey","toString","onSelect","_","tab","selectTab","Tab","eventKey","TabTitleText","externalServer","endsWith","instanceId","id","InstanceDrawer","children","dataOuiaAppId","isInstanceDrawerOpen","closeInstanceDrawer","noInstances","isExpanded","isLoading","undefined","onClose","panelBodyContent","drawerHeaderProps","text","label","value","headingLevel","notRequiredDrawerContentBackground","InstanceDrawerContext","useInstanceDrawer","answer","useContext","Error","InstanceDrawerContextProvider","initialTab","initialInstance","initialNoInstances","defaultTab","setInstanceDrawerInstance","setNoInstances","Provider","openInstanceDrawer","InstanceDrawerTab","Pagination","total","page","perPage","widgetId","itemCount","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","NoResultsFound","count","dataLoaded","emptyStateProps","titleProps","emptyStateBodyProps","body","StreamsTable","onDeleteInstance","onChangeOwner","onViewInstance","onViewConnection","loggedInUser","expectedTotal","kafkaDataLoaded","kafkaInstanceItems","isOrgAdmin","setOrderBy","orderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","onCreate","refresh","handleCreateInstanceModal","cells","transforms","sortable","sortBy","useMemo","sort","split","length","index","parameter","toLowerCase","getIndexForSortParameter","direction","SortByDirection","rows","tableRow","loadingCount","forEach","row","cloud_provider","region","created_at","owner","instance_type","cloudProviderDisplayName","regionDisplayName","push","Link","to","instanceName","originalData","skeleton","Skeleton","onSelectKebabDropdownOption","event","selectedOption","deleteInstance","previousNode","target","parentElement","previousSibling","focus","kafka","tableProps","actionResolver","rowData","additionalProps","isUserSameAsLoggedIn","tooltip","isDisabled","style","pointerEvents","cursor","onClick","tooltipProps","position","content","onSort","_event","extraData","myDirection","property","getParameterForSortIndex","hasDefaultCustomRowWrapper","activeRow","onRowClick","rowIndex","HTMLElement","tagName","rowDataTestId","useTimeout","callback","delay","savedCallback","useRef","current","setTimeout","clearInterval","KafkaStatusAlerts","addAlert","useAlert","auth","useAuth","deletedKafkas","setDeletedKafkas","currentUserKafkas","setCurrentUserKafkas","items","setItems","setLoggedInUser","basePath","kas","getUsername","then","username","fetchCurrentUserKafkas","getToken","accessToken","filter","DefaultApi","Configuration","getKafkas","res","kafkaInstances","data","error","reason","response","AlertVariant","description","handleServerError","addAlertAfterSuccessDeletion","notPresentKafkas","k","findIndex","dk","map","allDeletedKafkas","item","prev","Object","assign","splice","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","addAlertAfterSuccessCreation","StreamsTableConnected","preCreateInstance","shouldOpenCreateModal","useConfig","location","useLocation","searchParams","URLSearchParams","search","showCreateModal","showTransferOwnershipModal","hideDeleteModal","showDeleteModal","history","useHistory","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","isUserUnauthorized","setIsUserUnauthorized","setIsOrgAdmin","waitingForDelete","setWaitingForDelete","openCreateModal","refreshKafkasAfterAction","open","fetchKafkas","filters","filterKey","filterValue","filterQuery","val","trim","isExact","join","kafkaItems","errorCode","code","size","selectedKafkaItem","find","onDelete","setSearchParam","useCallback","set","instance","apisService","deleteKafkaById","isDisplayKafkaEmptyState","PageSection","className","PageSectionVariants","padding","default","Card","doDelete","refreshKafkas","StatusColumn","getStatusIcon","Spinner","Flex","statusIcon","FlexItem","spacer","filteredstatus","st","useTooltipContent","isMaxFilter","fieldName","CloudProviderFilter","getSelectionForFilter","onDeleteChipGroup","onDeleteChip","updateFilter","removeFilterValue","isDisabledSelectOption","options","cloudProvider","disabled","ToolbarFilter","chips","deleteChip","_category","chip","deleteChipGroup","categoryName","showToolbarItem","CloudProviderSelect","selectRef","tooltipContent","FilterTooltip","Tooltip","reference","expanded","setExpanded","clear","Select","SelectVariant","onToggle","prevState","selections","isOpen","selection","isPlaceholder","placeholderText","ref","option","SelectOption","key","NameFilter","v","valid","setValid","setValue","inputRef","change","input","onKeyPress","onFilter","test","validate","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","Button","ButtonVariant","OwnerFilter","renderOwnerInput","RegionFilter","RegionSelect","FilterSelect","isFilterExpanded","setIsFilterExpanded","ToolbarItem","StatusFilter","statusFilterOptions","s","StatusSelect","StreamsFilterGroup","optionValue","newFilterValue","newFilteredValue","removeIfPresent","filterIndex","f","filterValueIndex","selectedFilters","category","filterOptions","prevFilterValue","filterChip","chipIndex","removeFilteredValue","copyFilteredValue","ToolbarGroup","StreamsToolbar","setIsMaxFilter","handleMaxFilters","maxFilterCount","provisioningStatus","deprovisionStatus","toolbarItems","isCompact","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","toggleGroupItems","Unauthorized","isFilled","emptyStateIconProps","icon","KafkaEmptyState","qsContext","QuickStartContext","Trans","i18nKey","components","isSmall","isInline","setActiveQuickStart","KasLayout","isMobileModalOpen","setIsMobileModalOpen","localStorage","window","parseInt","getItem","newCount","setItem","handleMobileModal","Level","LevelItem","TextContent","Text","component","Modal","ModalVariant","actions"],"sourceRoot":""}