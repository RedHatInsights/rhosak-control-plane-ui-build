{"version":3,"sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/components/CreateServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/DeleteServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ResetServiceAccountModal/ResetServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx"],"names":["CreateServiceAccountModal","message","fieldState","isOpen","setIsOpen","fetchServiceAccounts","newServiceAccount","N","useState","nameValidated","setNameValidated","textInputNameValue","setTextInputNameValue","textInputDescriptionValue","setTextInputDescriptionValue","serviceAccountFormData","setServiceAccountFormData","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","t","useTranslation","authContext","useContext","basePath","addAlert","resetForm","handleTextInputName","name","isValid","undefined","trim","handleTextInputDescription","value","description","createServiceAccount","validateCreateForm","getToken","accessToken","apisService","then","response","status","AlertVariant","error","reason","data","handleServerError","onFormSubmit","event","preventDefault","isModalOpen","title","handleModalToggle","onCreate","primaryButtonTitle","Form","onSubmit","FormAlert","Alert","variant","isInline","FormGroup","label","isRequired","fieldId","helperTextInvalid","helperTextInvalidIcon","validated","TextInput","type","id","onChange","DeleteServiceAccountModal","serviceAccountToDelete","confirmButtonProps","onClick","serviceAccount","serviceAccountId","Error","deleteServiceAccount","ResetServiceAccountModal","serviceAccountToReset","isModalLoading","setIsModalLoading","resetServiceAccount","resetServiceAccountCreds","Modal","ModalVariant","onClose","actions","Button","key","spinnerAriaValueText","isLoading","dangerouslySetInnerHTML","__html","ServiceAccountsToolbar","filterSelected","setFilterSelected","total","page","perPage","filteredValue","setFilteredValue","handleCreateModal","nameInputRef","useRef","ownerInputRef","isFilterExpanded","setIsFilterExpanded","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","disabled","isInputValid","test","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","push","onFilter","filterType","isExact","onInputPress","fieldName","target","tooltipContent","getSelectionForFilter","selectedFilters","map","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","toggleGroupItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","onSelect","_","selection","index","SelectOption","isDisabled","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","toLowerCase","InputGroup","className","ValidatedOptions","placeholder","input","onKeyPress","ref","ButtonVariant","Tooltip","isVisible","content","reference","toolbarItems","item","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","default","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","lg","toggleGroupProps","toggleIcon","breakpoint","ServiceAccountsTableView","expectedTotal","serviceAccountsDataLoaded","serviceAccountItems","onResetCredentials","onDeleteServiceAccount","orderBy","setOrderBy","tableColumns","transforms","sortable","cellWidth","onSelectKebabDropdownOption","originalData","selectedOption","parentElement","previousSibling","focus","getindexForSortParameter","parameter","tableProps","cells","rows","tableRow","loadingCount","i","Skeleton","forEach","row","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","getActionResolver","onSort","_event","columnIndex","sortByDirection","getParameterForSortIndex","sortBy","sort","split","direction","SortByDirection","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","titleProps","headingLevel","size","TitleSizes","emptyStateBodyProps","body","PaginationVariant"],"mappings":"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","file":"866.1699cd7b.js","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Alert, Form, FormAlert, FormGroup, TextInput } from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi } from './../../../../openapi/api';\nimport { NewServiceAccount, FormDataValidationState } from './../../../models';\nimport { isValidToken } from '@app/utils';\nimport { MASCreateModal } from '@app/common/MASCreateModal/MASCreateModal';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError } from '@app/utils/error';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { AlertVariant } from '@patternfly/react-core';\n\nexport type CreateServiceAccountModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  fetchServiceAccounts: () => void;\n};\n\nconst CreateServiceAccountModal: React.FunctionComponent<CreateServiceAccountModalProps> = ({\n  isOpen,\n  setIsOpen,\n  fetchServiceAccounts,\n}: CreateServiceAccountModalProps) => {\n  const newServiceAccount: NewServiceAccount = new NewServiceAccount();\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [textInputNameValue, setTextInputNameValue] = useState('');\n  const [textInputDescriptionValue, setTextInputDescriptionValue] = useState('');\n  const [serviceAccountFormData, setServiceAccountFormData] = useState<NewServiceAccount>(newServiceAccount);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const resetForm = () => {\n    setTextInputNameValue('');\n    setTextInputDescriptionValue('');\n    setServiceAccountFormData(newServiceAccount);\n    setIsFormValid(true);\n  };\n\n  const handleTextInputName = (name) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n      setNameValidated({ fieldState: 'default', message: '' });\n    }\n    if (isValid) {\n      if (nameValidated.fieldState === 'error') {\n        setNameValidated({ fieldState: 'default', message: '' });\n      }\n    } else {\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n\n    setIsFormValid(true);\n    setTextInputNameValue(name);\n    setServiceAccountFormData({ ...serviceAccountFormData, name: name || '' });\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const handleTextInputDescription = (value) => {\n    setTextInputDescriptionValue(value);\n    setServiceAccountFormData({ ...serviceAccountFormData, description: value });\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name } = serviceAccountFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const createServiceAccount = async () => {\n    let isValid = validateCreateForm();\n    const accessToken = await authContext?.getToken();\n\n    if (!isValid) {\n      setIsFormValid(false);\n    } else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n          });\n          setCreationInProgress(true);\n          await apisService.createServiceAccount(serviceAccountFormData).then((response) => {\n            if (response.status >= 200) {\n              resetForm();\n              setIsOpen(false);\n              addAlert(t('serviceAccount.service_account_creation_success_message'), AlertVariant.success);\n              fetchServiceAccounts();\n            }\n          });\n        } catch (error) {\n          handleServerError(error);\n        }\n      }\n      setCreationInProgress(false);\n    }\n  };\n\n  const handleCreateModal = () => {\n    resetForm();\n    setIsOpen(!isOpen);\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    createServiceAccount();\n  };\n\n  const createForm = () => {\n    const { message, fieldState } = nameValidated;\n\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"text-input-name\"\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message && <ExclamationCircleIcon />}\n          validated={fieldState}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-name\"\n            name=\"text-input-name\"\n            value={textInputNameValue}\n            onChange={handleTextInputName}\n            validated={fieldState}\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"text-input-description\">\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-description\"\n            name=\"text-input-description\"\n            aria-label=\"Input description\"\n            value={textInputDescriptionValue}\n            onChange={handleTextInputDescription}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      isModalOpen={isOpen}\n      title={t('create_a_service_account')}\n      handleModalToggle={handleCreateModal}\n      onCreate={createServiceAccount}\n      isFormValid={isFormValid}\n      primaryButtonTitle=\"Create\"\n      isCreationInProgress={isCreationInProgress}\n    >\n      {createForm()}\n    </MASCreateModal>\n  );\n};\n\nexport { CreateServiceAccountModal };\n","import React, {useState, useContext} from 'react';\nimport {\n  AlertVariant\n} from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi, ServiceAccountListItem } from './../../../../openapi/api';\nimport { NewServiceAccount } from './../../../models/ServiceAccountsModel';\nimport { isValidToken } from '@app/utils';\nimport { MASDeleteModal } from '@app/common/MASDeleteModal/MASDeleteModal';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError } from '@app/utils';\n\nexport type DeleteServiceAccountModalProps = {\n  isOpen: boolean,\n  setIsOpen: (isOpen: boolean) => void,\n  fetchServiceAccounts: () => void,\n  serviceAccountToDelete: ServiceAccountListItem | undefined\n}\n\nconst DeleteServiceAccountModal: React.FunctionComponent<DeleteServiceAccountModalProps> = (\n  {isOpen, setIsOpen, fetchServiceAccounts, serviceAccountToDelete}: DeleteServiceAccountModalProps) => {\n\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  }\n\n  const deleteServiceAccount = async (serviceAccount) => {\n    const serviceAccountId = serviceAccount?.id;\n    if (serviceAccountId === undefined) {\n      throw new Error('service account id not defined');\n    }\n    const accessToken = await authContext?.getToken();\n    if (isValidToken(accessToken)) {\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath,\n      });\n      handleModalToggle();\n      try {\n        await apisService.deleteServiceAccount(serviceAccountId).then((response) => {\n          if(response.status >= 200 ) {\n            fetchServiceAccounts();\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  }\n\n  return (\n    <MASDeleteModal\n      isModalOpen={isOpen}\n      handleModalToggle={handleModalToggle}\n      title={t('serviceAccount.delete_service_account')}\n      confirmButtonProps={{\n        onClick: () => deleteServiceAccount(serviceAccountToDelete),\n        label: \"Delete\",\n      }}\n    >\n      <p><b>{serviceAccountToDelete?.name}</b> {t('serviceAccount.will_be_deleted')}</p>\n\n    </MASDeleteModal>\n  )\n}\n\nexport { DeleteServiceAccountModal };\n","import React, {useState, useContext} from 'react';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  AlertVariant\n} from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi, ServiceAccountListItem } from './../../../../../openapi/api';\nimport { isValidToken } from '@app/utils';\nimport { useTranslation } from 'react-i18next';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\n\nexport type ResetServiceAccountModalProps = {\n  isOpen: boolean,\n  setIsOpen: (isOpen: boolean) => void,\n  serviceAccountToReset: ServiceAccountListItem | undefined\n}\n\nconst ResetServiceAccountModal: React.FunctionComponent<ResetServiceAccountModalProps> = (\n  {isOpen, setIsOpen, serviceAccountToReset}: ResetServiceAccountModalProps) => {\n\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const [isModalLoading, setIsModalLoading] = React.useState(false);\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const resetServiceAccount = async (serviceAccount) => {\n    const serviceAccountId = serviceAccount?.id;\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken)) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n      });\n      setIsModalLoading(true);\n      await apisService.resetServiceAccountCreds(serviceAccountId).then((response) => {\n        setIsOpen(false);\n        setIsModalLoading(false);\n        // open generate credentials modal (when PR is merged)\n      });\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  }\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  }\n\n  const serviceAccountId = serviceAccountToReset?.name;\n  \n  return (\n    <Modal\n      id=\"reset-service-account-modal\"\n      variant={ModalVariant.medium}\n      title={t('serviceAccount.reset_service_account_credentials')}\n      isOpen={isOpen}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={() => resetServiceAccount(serviceAccountToReset)}\n          spinnerAriaValueText={t('common.submitting_request')}\n          isLoading={isModalLoading}\n        >\n          {t('serviceAccount.reset')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {t('common.cancel')}\n        </Button>\n      ]}\n    >\n      <span dangerouslySetInnerHTML={{ __html: t('serviceAccount.client_secret_will_be_reset', { serviceAccountId }) }} />\n    </Modal>\n  )\n}\n\nexport { ResetServiceAccountModal };\n","import React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport {\n  ToolbarGroup,\n  ToolbarItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SelectOptionObject,\n  ToolbarFilter,\n  InputGroup,\n  TextInput,\n  Button,\n  Tooltip,\n  ToolbarChip,\n  ButtonVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\n\nexport type ServiceAccountsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  handleCreateModal: () => void\n};\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nconst ServiceAccountsToolbar: React.FC<ServiceAccountsToolbarProps> = ({\n  filterSelected,\n  setFilterSelected,\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateModal\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation();\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState<boolean>(false);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n  ];\n\n  const onClearAllFilters = () => {\n    setFilteredValue([]);\n  };\n\n  const onToggleFilter = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        // index of current filter value in applied filter\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value);\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onInputPress = (event: any) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const onSelect = (_, selection: string | SelectOptionObject) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onToggleFilter}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"name-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_name_lower')}\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label={t('filter_by_name_lower')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected?.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"owner-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_owner')}\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label={t('filter_by_owner')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateModal}\n          data-testid={'tableServiceAccounts-buttonCreateServiceAccount'}\n        >\n          {t('serviceAccount.create_service_account')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClearAllFilters,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Skeleton, EmptyStateVariant, PaginationVariant, TitleSizes } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState } from '@app/common';\nimport { getLoadingRowsCount } from '@app/utils';\nimport { DefaultApi, ServiceAccountRequest, ServiceAccountListItem } from '../../../../../openapi/api';\nimport { ServiceAccountsToolbar, ServiceAccountsToolbarProps } from './ServiceAccountsToolbar';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  handleCreateModal: () => void;\n};\n\nconst ServiceAccountsTableView: React.FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  total,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n  handleCreateModal,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation();\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n\n  const tableColumns = [\n    { title: t('common.name'), transforms: [sortable] },\n    { title: t('common.owner'), transforms: [sortable, cellWidth(20)] },\n    { title: t('common.description') },\n  ];\n\n  const onSelectKebabDropdownOption = (event: any, originalData: ServiceAccountListItem, selectedOption: string) => {\n    if (selectedOption === 'reset-credentials') {\n      onResetCredentials && onResetCredentials(originalData);\n    } else if (selectedOption === 'delete-account') {\n      onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    }\n\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!serviceAccountsDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, owner, description } = row;\n      tableRow.push({\n        cells: [name, 'owner-test', description],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn = true; //originalData.owner === loggedInUser;\n    let additionalProps: any;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_delete_service_account'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('common.reset_credentials'),\n        id: 'reset-credentials',\n        ['data-testid']: 'tableServiceAccounts-actionResetCredentials',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'reset-credentials'),\n      },\n      {\n        title: t('serviceAccount.delete_service_account'),\n        id: 'delete-account',\n        ['data-testid']: 'tableServiceAccounts-actionDeleteAccount',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-account'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'owner';\n      case 2:\n        return 'description';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'owner':\n        return 1;\n      case 'description':\n        return 2;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, columnIndex: number, sortByDirection: SortByDirection, extraData: IExtraColumnData) => {\n    setOrderBy && setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        handleCreateModal={handleCreateModal}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('serviceAccount.service_account_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems && serviceAccountItems?.length < 1 && serviceAccountsDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: EmptyStateVariant.full,\n          }}\n          emptyStateIconProps={{\n            icon: SearchIcon,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n            headingLevel: 'h2',\n            size: TitleSizes.lg,\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n"],"sourceRoot":""}