{"version":3,"file":"8372.21d58caa.js","mappings":"+PAYMA,EAAgD,WAC5C,IAAAC,GAAM,IAAAC,kBAAgB,EACxBC,GAAO,IAAAC,WAESC,IAClB,IAAAC,cAAe,CAAEC,IAAK,KAAI,gBACtBC,IAAa,IAAAC,aAAc,IAAE,SAC/B,GAAuB,UAArBC,EAAK,QAAEC,EAAS,YAClB,GACJD,MAAAA,OAAK,EAALA,EAAOE,aAAc,GADfC,EAAoB,uBAAEC,EAAsB,yBAG9C,GAA4B,IAAAC,WAAkB,GAA7CC,EAAS,KAAEC,EAAY,KAExBC,EAAoB,WACxBP,KAwDF,OACE,kBAAC,KAAW,CACVQ,aAAa,EACbD,kBAAmBA,EACnBE,MAAOnB,EAAE,yCAA2C,IACpDoB,mBAAoB,CAClBC,QAAS,WAAM,OA1DnBC,EA0DwCT,GA1DU,gD,iFAGlD,QAAyBU,KADnBC,EAAmBF,MAAAA,OAAc,EAAdA,EAAgBG,IAEvC,MAAM,IAAIC,MAAM,kCAEE,SAAMxB,MAAAA,OAAI,EAAJA,EAAMI,IAAIqB,Y,YAA9BC,EAAc,UAChB,YACIC,EAAc,IAAI,EAAAC,YACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXxB,SAAQ,KAGZY,GAAa,G,iBAGX,O,sBAAA,GAAMa,EACHG,yBAAyBR,GACzBS,MAAK,WACJhB,IACAD,GAAa,GACbT,GACEA,EAAS,CACPY,MAAOnB,EACL,sDACA,CACEkC,KAAMZ,MAAAA,OAAc,EAAdA,EAAgBY,OAG1BC,QAAS,EAAAC,aAAA,UAEbxB,Q,cAfJ,S,+BAkBIyB,OAAM,GACN,QAAkB,KACpBA,EAAuB,QAAd,IAAMC,gBAAQ,eAAEC,KAAKF,QAGhCpB,IACAD,GAAa,GACbT,GACEA,EAAS,CACPY,MAAOnB,EAAE,+BACTmC,QAAS,EAAAC,aAAA,OACTI,YAAaH,I,8BA/CM,IAC3Bf,GA2DImB,MAAO,SACP1B,UAAS,IAGX,2BACE,2BAAIF,MAAAA,OAAsB,EAAtBA,EAAwBqB,MAAU,IACrClC,EAAE,qCAOX","sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { DeleteModal, useRootModalContext } from '@app/common';\nimport { isServiceApiError } from '@app/utils';\nimport {\n  Configuration,\n  SecurityApi,\n  ServiceAccountListItem,\n} from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\n\nconst DeleteServiceAccount: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig() || { kas: {} };\n  const { addAlert } = useAlert() || {};\n  const { store, hideModal } = useRootModalContext();\n  const { fetchServiceAccounts, serviceAccountToDelete } =\n    store?.modalProps || {};\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const deleteServiceAccount = async (\n    serviceAccount: ServiceAccountListItem | undefined\n  ) => {\n    const serviceAccountId = serviceAccount?.id;\n    if (serviceAccountId === undefined) {\n      throw new Error('service account id not defined');\n    }\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      const apisService = new SecurityApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      setIsLoading(true);\n\n      try {\n        await apisService\n          .deleteServiceAccountById(serviceAccountId)\n          .then(() => {\n            handleModalToggle();\n            setIsLoading(false);\n            addAlert &&\n              addAlert({\n                title: t(\n                  'serviceAccount.service_account_successfully_deleted',\n                  {\n                    name: serviceAccount?.name,\n                  }\n                ),\n                variant: AlertVariant.success,\n              });\n            fetchServiceAccounts();\n          });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        handleModalToggle();\n        setIsLoading(false);\n        addAlert &&\n          addAlert({\n            title: t('common.something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    }\n  };\n\n  return (\n    <DeleteModal\n      isModalOpen={true}\n      handleModalToggle={handleModalToggle}\n      title={t('serviceAccount.delete_service_account') + '?'}\n      confirmButtonProps={{\n        onClick: () => deleteServiceAccount(serviceAccountToDelete),\n        label: 'Delete',\n        isLoading,\n      }}\n    >\n      <p>\n        <b>{serviceAccountToDelete?.name}</b>{' '}\n        {t('serviceAccount.will_be_deleted')}\n      </p>\n    </DeleteModal>\n  );\n};\n\nexport { DeleteServiceAccount };\nexport default DeleteServiceAccount;\n"],"names":["DeleteServiceAccount","t","useTranslation","auth","useAuth","basePath","useConfig","kas","addAlert","useAlert","store","hideModal","modalProps","fetchServiceAccounts","serviceAccountToDelete","useState","isLoading","setIsLoading","handleModalToggle","isModalOpen","title","confirmButtonProps","onClick","serviceAccount","undefined","serviceAccountId","id","Error","getToken","accessToken","apisService","SecurityApi","Configuration","deleteServiceAccountById","then","name","variant","AlertVariant","reason","response","data","description","label"],"sourceRoot":""}