{"version":3,"file":"3411.e2d66016.js","mappings":"yIAYaA,E,MAAmB,sBAC9BC,GAEWC,EAAe,WAC1B,WAAAC,YAAWH,K,wKCqCb,QAnCE,SAAC,G,IACCI,EAAiB,oBACjBC,EAAqB,wBACrBC,EAAgB,mBAChBC,EAAgB,mBAChBC,EAAkB,qBAElB,OACE,kBAAC,EAAAC,gBAAe,CAACC,MAAM,UACrB,kBAAC,aAAyB,CACxBC,MAAO,CACLL,iBAAgB,EAChBF,kBAAiB,EACjBC,sBAAqB,EACrBE,iBAAgB,EAChBC,mBAAkB,IAGpB,kBAAC,EAAAI,cAAa,KACZ,kBAAC,KAA6B,KAC5B,kBAAC,KAAkB,KACjB,kBAAC,KAAS,CAACN,iBAAkBA,GAC3B,kBAAC,IAAqB,CACpBF,kBAAmBA,MAIzB,kBAAC,IAAc","sources":["webpack://kas-ui/./src/app/contexts/federated.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreamsFederated.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport { Principal } from '@rhoas/app-services-ui-shared';\n\nexport type FederatedProps = {\n  tokenEndPointUrl: string;\n  preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n  shouldOpenCreateModal: () => Promise<boolean>;\n  setKafkaInstance?: (kafka: KafkaRequest) => void;\n  getAllUserAccounts?: () => Principal[];\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { PaginationProvider } from '@app/common';\nimport { initI18N } from '@i18n/i18n';\nimport { FederatedContext, FederatedProps } from '@app/contexts';\nimport { ModalProvider } from '@rhoas/app-services-ui-components';\nimport { KasModalLoader } from '@app/modals';\nimport { InstanceDrawerContextProvider } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { KasLayout } from '@app/modules/OpenshiftStreams/components';\nimport {\n  StreamsTableConnected,\n  StreamsTableProps,\n} from '@app/modules/OpenshiftStreams/components/StreamsTableConnected';\n\n// Version of OpenshiftStreams for federation\ntype OpenshiftStreamsFederatedProps = StreamsTableProps & FederatedProps;\n\nconst OpenshiftStreamsFederated: React.FunctionComponent<OpenshiftStreamsFederatedProps> =\n  ({\n    preCreateInstance,\n    shouldOpenCreateModal,\n    tokenEndPointUrl,\n    setKafkaInstance,\n    getAllUserAccounts,\n  }) => {\n    return (\n      <I18nextProvider i18n={initI18N()}>\n        <FederatedContext.Provider\n          value={{\n            tokenEndPointUrl,\n            preCreateInstance,\n            shouldOpenCreateModal,\n            setKafkaInstance,\n            getAllUserAccounts,\n          }}\n        >\n          <ModalProvider>\n            <InstanceDrawerContextProvider>\n              <PaginationProvider>\n                <KasLayout tokenEndPointUrl={tokenEndPointUrl}>\n                  <StreamsTableConnected\n                    preCreateInstance={preCreateInstance}\n                  />\n                </KasLayout>\n              </PaginationProvider>\n              <KasModalLoader />\n            </InstanceDrawerContextProvider>\n          </ModalProvider>\n        </FederatedContext.Provider>\n      </I18nextProvider>\n    );\n  };\n\nexport default OpenshiftStreamsFederated;\n"],"names":["FederatedContext","undefined","useFederated","useContext","preCreateInstance","shouldOpenCreateModal","tokenEndPointUrl","setKafkaInstance","getAllUserAccounts","I18nextProvider","i18n","value","ModalProvider"],"sourceRoot":""}