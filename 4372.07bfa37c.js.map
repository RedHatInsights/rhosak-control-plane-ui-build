{"version":3,"file":"4372.07bfa37c.js","mappings":"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","sources":["webpack://kas-ui/./src/app/api.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateKafkaInstanceServices.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateInstance.ts","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts"],"sourcesContent":["import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport {\n  AxiosCacheRequestConfig,\n  createCacheAdapter,\n} from \"axios-simple-cache-adapter\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\n\nconst adapter = createCacheAdapter({\n  debug: localStorage.getItem(\"log-axios\") !== null,\n});\n\nexport const useKms = () => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: kasBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const kmsApi = new DefaultApi(\n      new Configuration({\n        accessToken: auth.kas.getToken(),\n        basePath: kasBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return kmsApi;\n  }, [auth.kas, kasBasePath]);\n};\n\nexport const useAms = () => {\n  const auth = useAuth();\n  const {\n    ams: { apiBasePath: amsBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const amsApi = new AppServicesApi(\n      new Configuration({\n        accessToken: auth.ams.getToken(),\n        basePath: amsBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return amsApi;\n  }, [amsBasePath, auth.ams]);\n};\n","import { getModalAppendTo } from \"@app/utils\";\nimport { QuickStartContext } from \"@patternfly/quickstarts\";\nimport {\n  CreateKafkaInstance,\n  CreateKafkaInstanceServices,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n} from \"@rhoas/app-services-ui-shared\";\nimport { FunctionComponent, useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  useCheckDeveloperAvailability,\n  useCheckStandardQuota,\n  useCreateInstance,\n  useFetchProvidersWithRegions,\n  useGetStandardSizes,\n  useGetTrialSizes,\n} from \"./hooks\";\n\nconst CreateInstance: FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ hideModal, onCreate }) => {\n  const history = useHistory();\n  const checkDeveloperAvailability = useCheckDeveloperAvailability();\n  const checkStandardQuota = useCheckStandardQuota();\n  const fetchProvidersWithRegions = useFetchProvidersWithRegions();\n  const getStandardSizes = useGetStandardSizes();\n  const getTrialSizes = useGetTrialSizes();\n  const createInstance = useCreateInstance();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const handleCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (data, onSuccess, onError) {\n      const handleOnSuccess = () => {\n        onSuccess();\n        onCreate && onCreate();\n        hideModal();\n      };\n      createInstance(data, handleOnSuccess, onError);\n    },\n    [hideModal, onCreate, createInstance]\n  );\n\n  return (\n    <CreateKafkaInstance\n      checkDeveloperAvailability={checkDeveloperAvailability}\n      checkStandardQuota={checkStandardQuota}\n      fetchProvidersWithRegions={fetchProvidersWithRegions}\n      getStandardSizes={getStandardSizes}\n      getTrialSizes={getTrialSizes}\n      isModalOpen={true}\n      onCancel={hideModal}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={handleCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={getModalAppendTo}\n    />\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n","import { useAms, useKms } from \"@app/api\";\nimport { InstanceType } from \"@app/utils\";\nimport {\n  CloudProvider,\n  CloudProviderInfo,\n  CreateKafkaInstanceServices,\n  MarketPlace,\n  MarketPlaceSubscriptions,\n  RegionInfo,\n  Size,\n  StandardSizes,\n} from \"@rhoas/app-services-ui-components\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { CloudRegion, SupportedKafkaSize } from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\nimport { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nconst standardId = \"RHOSAK\" as const;\nconst developerId = \"RHOSAKTrial\" as const;\nconst resourceName = \"rhosak\" as const;\n\nfunction isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\nfunction isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n\nexport const useStandardQuota = () => {\n  const getApi = useAms();\n  return useCallback(async () => {\n    const api = getApi();\n    const account = await api.apiAccountsMgmtV1CurrentAccountGet();\n    const orgId = account?.data?.organization?.id;\n    if (!orgId) {\n      throw new Error(\"User has no organization id\");\n    }\n    const quotaResponse =\n      await api.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n        orgId,\n        undefined,\n        true,\n        undefined,\n        true\n      );\n    if (quotaResponse.status !== 200) {\n      throw new Error(quotaResponse.statusText);\n    }\n    const standardQuotas = quotaResponse.data.items?.filter((q) =>\n      q.related_resources?.find(\n        (r) => r.resource_name === resourceName && r.product === standardId\n      )\n    );\n\n    const prepaidQuota = standardQuotas?.find(isStandardQuota);\n\n    const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n      ? standardQuotas?.filter(isMarketplaceQuota)\n      : undefined;\n\n    const hasTrialQuota =\n      (prepaidQuota === undefined &&\n        marketplaceQuotas === undefined &&\n        quotaResponse.data.items?.some((q) =>\n          q.related_resources?.find(\n            (r) => r.resource_name === resourceName && r.product === developerId\n          )\n        )) ||\n      false;\n\n    const remainingPrepaidQuota = prepaidQuota\n      ? prepaidQuota.allowed - prepaidQuota.consumed\n      : undefined;\n    const remainingMarketplaceQuota = marketplaceQuotas\n      ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n      : undefined;\n    const unaggregatedSubscriptions = marketplaceQuotas\n      ?.filter((q) => q.cloud_accounts !== undefined)\n      .flatMap((q) => q.cloud_accounts!);\n    const subscriptionMarketplaces = Array.from(\n      new Set(\n        unaggregatedSubscriptions?.map(\n          (s) => s.cloud_provider_id as MarketPlace\n        )\n      )\n    );\n    const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n      unaggregatedSubscriptions\n        ? subscriptionMarketplaces.map((marketplace) => ({\n            marketplace,\n            subscriptions: unaggregatedSubscriptions\n              .filter((s) => s.cloud_provider_id === marketplace)\n              .map((s) => s.cloud_account_id!),\n          }))\n        : [];\n\n    return {\n      hasTrialQuota,\n      remainingPrepaidQuota,\n      remainingMarketplaceQuota,\n      marketplaceSubscriptions,\n    };\n  }, [getApi]);\n};\n\nexport const useCheckStandardQuota =\n  (): CreateKafkaInstanceServices[\"checkStandardQuota\"] => {\n    const getQuota = useStandardQuota();\n    const checkStandardQuota: CreateKafkaInstanceServices[\"checkStandardQuota\"] =\n      useCallback(\n        async ({ onNoQuotaAvailable, onOutOfQuota, onQuotaAvailable }) => {\n          try {\n            const {\n              hasTrialQuota,\n              remainingPrepaidQuota,\n              remainingMarketplaceQuota,\n              marketplaceSubscriptions,\n            } = await getQuota();\n\n            if (\n              remainingMarketplaceQuota !== undefined ||\n              remainingPrepaidQuota !== undefined\n            ) {\n              if (\n                (remainingMarketplaceQuota || 0) === 0 &&\n                (remainingPrepaidQuota || 0) === 0\n              ) {\n                onOutOfQuota({\n                  quota: {\n                    marketplaceSubscriptions,\n                  },\n                });\n              } else {\n                onQuotaAvailable({\n                  quota: {\n                    remainingPrepaidQuota,\n                    remainingMarketplaceQuota,\n                    marketplaceSubscriptions,\n                  },\n                });\n              }\n            } else {\n              onNoQuotaAvailable({ hasTrialQuota });\n            }\n          } catch (e) {\n            onNoQuotaAvailable({ hasTrialQuota: false });\n          }\n        },\n        [getQuota]\n      );\n    return checkStandardQuota;\n  };\n\nexport const useCheckDeveloperAvailability =\n  (): CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] => {\n    const { getUsername } = useAuth();\n    const getApi = useKms();\n    const checkDeveloperAvailability: CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] =\n      useCallback(\n        async ({ onAvailable, onUnavailable, onUsed }) => {\n          try {\n            const api = getApi();\n            const loggedInUser = await getUsername();\n            const filter = `owner = ${loggedInUser}`;\n\n            const res = await api.getKafkas(\"\", \"\", \"\", filter);\n            if (res.data.items) {\n              const hasTrialRunning = res.data.items.some(\n                (k) =>\n                  k?.instance_type === InstanceType?.eval ||\n                  k?.instance_type === InstanceType?.developer\n              );\n              if (hasTrialRunning) {\n                onUsed();\n              } else {\n                onAvailable();\n              }\n            }\n          } catch (e) {\n            onUnavailable();\n          }\n        },\n        [getApi, getUsername]\n      );\n    return checkDeveloperAvailability;\n  };\n\nexport const useFetchProvidersWithRegions =\n  (): CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] => {\n    const getApi = useKms();\n    const fetchRegions = useFetchProviderRegions();\n    const fetchProvidersWithRegions: CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] =\n      useCallback(\n        async (plan, { onAvailable, onUnavailable }) => {\n          try {\n            const api = getApi();\n            const res = await api.getCloudProviders();\n            const allProviders = res?.data?.items || [];\n\n            const providers = (\n              await Promise.all(\n                allProviders\n                  .filter((p) => p.enabled)\n                  .map(async (provider) => {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const regions = await fetchRegions(provider.id!, plan);\n                    const providerInfo: CloudProviderInfo = {\n                      id: provider.id as CloudProvider,\n                      displayName: provider.display_name!,\n                      regions,\n                    };\n                    return regions.length > 0 ? providerInfo : null;\n                  })\n              )\n            ).filter((provider) => Boolean(provider)) as CloudProviderInfo[];\n            if (providers.length === 0) {\n              throw new Error(\"No available providers\");\n            }\n            const firstProvider = providers[0];\n            onAvailable({ providers, defaultProvider: firstProvider?.id });\n          } catch (e) {\n            onUnavailable();\n          }\n        },\n        [fetchRegions, getApi]\n      );\n    return fetchProvidersWithRegions;\n  };\n\nexport const useFetchProviderRegions = () => {\n  const getApi = useKms();\n  return useCallback(\n    async function fetchProviderRegions(\n      provider: string,\n      instanceType: string\n    ): Promise<Array<RegionInfo & Pick<CloudRegion, \"capacity\">>> {\n      const api = getApi();\n      const res = await api.getCloudProviderRegions(provider);\n\n      if (!res?.data?.items) {\n        return [];\n      }\n\n      const regionsForInstance = res.data.items.filter(\n        (region) =>\n          region.enabled &&\n          region.capacity.some((c) => c.instance_type === instanceType)\n      );\n\n      return regionsForInstance.map((r) => {\n        const max_capacity_reached = r.capacity?.some(\n          (c) =>\n            c.instance_type === instanceType && c.available_sizes?.length === 0\n        );\n\n        return {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          id: r.id!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          displayName: r.display_name!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          isDisabled: max_capacity_reached,\n          capacity: r.capacity,\n        };\n      });\n    },\n    [getApi]\n  );\n};\n\nexport const useGetSizes = (instanceType: \"developer\" | \"standard\") => {\n  const getApi = useKms();\n  const fetchRegions = useFetchProviderRegions();\n  return useCallback(\n    async (provider: CloudProvider, region: string) => {\n      const api = getApi();\n      const regions = await fetchRegions(provider, instanceType);\n      const regionInfo = regions.find((r) => r.id === region);\n      const availableSizes =\n        regionInfo?.capacity.flatMap((c) =>\n          c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n        ) || [];\n      const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n        provider,\n        region\n      );\n      if (!sizes?.data?.instance_types) {\n        throw new Error(`No instance_types from backend`);\n      }\n\n      const standardSizes =\n        sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes ||\n        [];\n\n      return standardSizes.map(\n        apiSizeToComponentSize.bind(\n          undefined,\n          (id) => !availableSizes.includes(`${instanceType}.${id}`)\n        )\n      );\n    },\n    [fetchRegions, getApi, instanceType]\n  );\n};\n\nexport const useGetStandardSizes =\n  (): CreateKafkaInstanceServices[\"getStandardSizes\"] => {\n    const getSizes = useGetSizes(\"standard\");\n    return getSizes;\n  };\n\nexport const useGetTrialSizes =\n  (): CreateKafkaInstanceServices[\"getTrialSizes\"] => {\n    const getStandardSizes = useGetSizes(\"standard\");\n    const getDeveloperSizes = useGetSizes(\"developer\");\n    return useCallback(\n      async (provider, region) => {\n        let standardSizes: StandardSizes;\n        try {\n          standardSizes = await getStandardSizes(provider, region);\n          if (standardSizes.length === 0) {\n            throw new Error(\"Couldn't load standard sizes\");\n          }\n        } catch (e) {\n          // It can happen that the selected provider doesn't support standard instances.\n          // In this case we provide a faux sample list of sizes just to make the slider happy.\n          standardSizes = [\n            { id: \"1\", displayName: \"1\", quota: 1 },\n            { id: \"2\", displayName: \"2\", quota: 2 },\n          ] as StandardSizes;\n        }\n        const trialSizes = await getDeveloperSizes(provider, region);\n        return {\n          standard: standardSizes,\n          trial: trialSizes[0],\n        };\n      },\n      [getDeveloperSizes, getStandardSizes]\n    );\n  };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): Size & { trialDurationHours: number } {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes } from \"@app/utils\";\nimport { useKms } from \"@app/api\";\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const getApi = useKms();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = getApi();\n\n      try {\n        const kafkaRequest = asKafkaRequestPayload(\n          createEmptyNewKafkaRequestPayload()\n        );\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"standard\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from \"@rhoas/kafka-management-sdk\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n","import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string): void {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { IRowCell, IRowData } from \"@patternfly/react-table\";\nimport { formatDistance } from \"date-fns\";\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById(\"primary-app-container\");\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};\n\nenum InstanceStatus {\n  READY = \"ready\",\n  ACCEPTED = \"accepted\",\n  PREPARING = \"preparing\",\n  PROVISIONING = \"provisioning\",\n  FAILED = \"failed\",\n  DEPROVISION = \"deprovision\",\n  DELETED = \"deleting\",\n  SUSPENDED = \"suspended\",\n  SUSPENDING = \"suspending\",\n  RESUMING = \"resuming\",\n}\n\nenum InstanceType {\n  eval = \"eval\",\n  standard = \"standard\",\n  developer = \"developer\",\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: \"aws\", label: \"Amazon Web Services\" },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: \"ready\", label: \"Ready\" },\n  { value: \"failed\", label: \"Failed\" },\n  { value: \"accepted\", label: \"Creation pending\" },\n  { value: \"provisioning\", label: \"Creation in progress\" },\n  { value: \"preparing\", label: \"Creation in progress\" },\n  { value: \"deprovision\", label: \"Deletion in progress\" },\n  { value: \"deleting\", label: \"Deletion in progress\" },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: \"us-east-1\", label: \"US East, N. Virginia\" },\n  { value: \"eu-west-1\", label: \"EU, Ireland\" },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === \"string\" ? new Date(date) : date;\n  return formatDistance(date, new Date()) + \" \" + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || (window as any)[\"opera\"]);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\ntype SizeUnits = \"MiB\" | \"GiB\";\n\nconst convertBytesToUnit = (bytes: number, unit: SizeUnits): number => {\n  switch (unit) {\n    case \"MiB\":\n      return bytes / 1048576;\n    case \"GiB\":\n      return bytes / 1073741824;\n    default:\n      return bytes;\n  }\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n  convertBytesToUnit,\n  SizeUnits,\n};\n"],"names":["adapter","createCacheAdapter","debug","localStorage","getItem","useKms","auth","useAuth","kas","apiBasePath","kasBasePath","useConfig","useCallback","DefaultApi","Configuration","accessToken","getToken","basePath","undefined","cache","useAms","ams","amsBasePath","AppServicesApi","CreateInstance","hideModal","onCreate","history","useHistory","checkDeveloperAvailability","checkStandardQuota","fetchProvidersWithRegions","getStandardSizes","getTrialSizes","createInstance","qsContext","useContext","QuickStartContext","onClickKafkaOverview","push","onClickQuickStart","setActiveQuickStart","handleCreate","data","onSuccess","onError","CreateKafkaInstance","isModalOpen","onCancel","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","resourceName","isStandardQuota","q","related_resources","find","r","billing_model","isMarketplaceQuota","useStandardQuota","getApi","api","account","apiAccountsMgmtV1CurrentAccountGet","orgId","organization","id","Error","quotaResponse","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","status","statusText","standardQuotas","items","filter","resource_name","product","prepaidQuota","marketplaceQuotas","some","hasTrialQuota","remainingPrepaidQuota","allowed","consumed","remainingMarketplaceQuota","reduce","agg","unaggregatedSubscriptions","cloud_accounts","flatMap","subscriptionMarketplaces","Array","from","Set","map","s","cloud_provider_id","marketplaceSubscriptions","marketplace","subscriptions","cloud_account_id","useCheckStandardQuota","getQuota","onNoQuotaAvailable","onOutOfQuota","onQuotaAvailable","quota","e","useCheckDeveloperAvailability","getUsername","onAvailable","onUnavailable","onUsed","res","getKafkas","k","instance_type","useFetchProvidersWithRegions","fetchRegions","useFetchProviderRegions","plan","getCloudProviders","allProviders","providers","Promise","all","p","enabled","provider","regions","providerInfo","displayName","display_name","length","Boolean","firstProvider","defaultProvider","instanceType","getCloudProviderRegions","region","capacity","c","max_capacity_reached","available_sizes","isDisabled","useGetSizes","regionInfo","availableSizes","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","i","apiSizeToComponentSize","bind","includes","useGetStandardSizes","useGetTrialSizes","getDeveloperSizes","standardSizes","standard","trial","apiSize","quota_consumed","ingress","ingress_throughput_per_sec","bytes","egress","egress_throughput_per_sec","storage","Math","round","max_data_retention_size","connections","total_max_connections","connectionRate","max_connection_attempts_per_sec","maxPartitions","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","useCreateInstance","apisService","kafkaRequest","name","value","multi_az","cloud_provider","asKafkaRequestPayload","sizeId","billing","billing_cloud_account_id","subscription","createKafka","error","code","response","console","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDocumentTitle","title","useEffect","originalTitle","InstanceStatus","InstanceType","MAX_INSTANCE_NAME_LENGTH","MAX_SERVICE_ACCOUNT_NAME_LENGTH","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","floor","getFormattedDate","date","translatePostfix","Date","getModalAppendTo","getElementById","body","isMobileTablet","check","a","navigator","userAgent","vendor","window","test","substr","getSkeletonForRows","loadingCount","skeleton","rows","cells"],"sourceRoot":""}