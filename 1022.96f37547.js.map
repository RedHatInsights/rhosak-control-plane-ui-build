{"version":3,"sources":["webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected.tsx"],"names":["module","exports","e","LTS","LT","L","LL","LLL","LLLL","t","o","n","r","prototype","i","format","en","formats","this","$locale","replace","toUpperCase","slice","call","DeleteInstance","store","hideModal","props","modalProps","DeleteInstanceModal","title","confirmButtonProps","cancelButtonProps","textProps","instanceStatus","selectedItemData","onClose","useTranslation","selectedInstanceName","name","useState","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","toLowerCase","isModalOpen","isDisabled","handleModalToggle","textInputProps","showTextInput","label","value","onChange","onKeyPress","event","key","onClick","autoFocus","DeleteInstanceConnected","addAlert","useAlert","auth","useAuth","basePath","useConfig","instanceDetail","onConnectToRoute","setIsOpenDeleteInstanceModal","status","id","undefined","isMaxCapacityReached","setIsMaxCapacityReached","isLoading","setIsLoading","confirmActionLabel","description","useEffect","fetchKafkaServiceStatus","onCloseModal","handleServerError","error","reason","response","data","variant","AlertVariant","kas","getToken","accessToken","DefaultApi","Configuration","getServiceStatus","then","res","maxCapacityReached","kafkas","max_capacity_reached","deleteKafkaById"],"mappings":"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","file":"1022.96f37547.js","sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_localizedFormat=t()}(this,(function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,o,n){var r=o.prototype,i=r.format;n.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var o=this.$locale().formats,n=function(t,o){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var i=r&&r.toUpperCase();return n||o[r]||e[r]||o[i].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,o){return t||o.slice(1)}))}))}(t,void 0===o?{}:o);return i.call(this,n)}}}));","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASDeleteModal, useRootModalContext } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport const DeleteInstance: React.FunctionComponent = () => {\n  const { store, hideModal } = useRootModalContext();\n  const props = { ...store?.modalProps, hideModal };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport const DeleteInstanceModal = (props) => {\n  const {\n    title,\n    confirmButtonProps,\n    cancelButtonProps,\n    textProps,\n    instanceStatus,\n    selectedItemData,\n    onClose,\n    hideModal,\n  } = props || {};\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n\n  const handleToggle = () => {\n    setInstanceNameInput('');\n    hideModal();\n    onClose && onClose();\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteKafka-buttonDelete',\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleToggle}\n      textProps={textProps}\n      selectedItemData={selectedItemData}\n      textInputProps={{\n        showTextInput: instanceStatus === InstanceStatus.READY,\n        label: t('instance_name_label', { name: selectedInstanceName }),\n        value: instanceNameInput,\n        onChange: handleInstanceName,\n        onKeyPress,\n        autoFocus: true,\n      }}\n    ></MASDeleteModal>\n  );\n};\n\nexport default DeleteInstance;\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { useAuth, useConfig, useAlert } from '@bf2/ui-shared';\nimport { getDeleteInstanceModalConfig } from '@app/modules/OpenshiftStreams/components';\nimport { useRootModalContext } from '@app/common';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { DeleteInstanceModal } from './DeleteInstance';\nimport { isServiceApiError } from '@app/utils';\n\nconst DeleteInstanceConnected = () => {\n  const { addAlert } = useAlert();\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { store, hideModal } = useRootModalContext();\n  const { selectedItemData: instanceDetail, onConnectToRoute, setIsOpenDeleteInstanceModal } = store?.modalProps || {};\n  const { status, name, id } = instanceDetail || {};\n  const [isMaxCapacityReached, setIsMaxCapacityReached] = useState<boolean | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    status,\n    name,\n    isMaxCapacityReached\n  );\n\n  useEffect(() => {\n    fetchKafkaServiceStatus();\n  }, []);\n\n  const onCloseModal = () => {\n    setIsOpenDeleteInstanceModal && setIsOpenDeleteInstanceModal(false);\n  };\n\n  const onDeleteInstance = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && id) {\n      try {\n        setIsLoading(true);\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.deleteKafkaById(id, true).then((res) => {\n          setIsLoading(false);\n          onCloseModal();\n          //redirect on kafka list page\n          onConnectToRoute && onConnectToRoute({}, 'kafkas');\n        });\n      } catch (error) {\n        setIsLoading(false);\n        handleServerError(error);\n      }\n    }\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert({\n      title: t('something_went_wrong'),\n      variant: AlertVariant.danger,\n      description: reason,\n    });\n  };\n\n  const fetchKafkaServiceStatus = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService.getServiceStatus().then((res) => {\n          const maxCapacityReached = res?.data?.kafkas?.max_capacity_reached;\n          setIsMaxCapacityReached(maxCapacityReached);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const props = {\n    ...store?.modalProps,\n    hideModal,\n    title,\n    confirmButtonProps: {\n      onClick: onDeleteInstance,\n      label: confirmActionLabel,\n      isLoading,\n    },\n    textProps: {\n      description,\n    },\n    onClose: onCloseModal,\n    instanceStatus: status,\n  };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport { DeleteInstanceConnected };\nexport default DeleteInstanceConnected;\n"],"sourceRoot":""}