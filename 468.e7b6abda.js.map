{"version":3,"sources":["webpack://kas-ui/./src/app/common/MASCreateModal/MASCreateModal.tsx","webpack://kas-ui/./src/app/common/MASDeleteModal/MASDeleteModal.tsx","webpack://kas-ui/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://kas-ui/./src/app/common/MASGenerateCredentialsModal/MASGenerateCredentialsModal.tsx","webpack://kas-ui/./src/app/common/MASLoading/MASLoading.tsx","webpack://kas-ui/./src/app/common/MASPagination/MASPagination.tsx","webpack://kas-ui/./src/app/common/MASTable/CustomRowWrapper.tsx","webpack://kas-ui/./src/app/common/MASTable/MASTable.tsx","webpack://kas-ui/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://kas-ui/./src/app/models/openshiftStreamsModel.ts","webpack://kas-ui/./src/app/models/serviceAccountsModel.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstance.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccount.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/ResetServiceAccount/ResetServiceAccount.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/openapi/base.ts","webpack://kas-ui/./src/openapi/api.ts"],"names":["MASCreateModal","isModalOpen","children","title","handleModalToggle","onCreate","isFormValid","isCreationInProgress","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","id","t","useTranslation","Modal","variant","ModalVariant","isOpen","onClose","appendTo","actions","Button","key","type","onClick","isDisabled","spinnerAriaValueText","isLoading","MASDeleteModal","modalProps","confirmButtonProps","cancelButtonProps","textProps","selectedItemData","textInputProps","titleIconVariant","ariaLabel","showClose","restModalProps","buttonConfirmVariant","ButtonVariant","onClickConfirmButton","isDisabledConfirmButton","label","confirmActionLabel","restConfirmButtonProps","cancelButtonId","cancelButtonKey","cancelButtonVariant","cancelActionLabel","restCancelButtonProps","className","description","restTextProps","value","onChange","onKeyPress","showTextInput","restInputFieldProps","Text","dangerouslySetInnerHTML","__html","htmlFor","TextInput","name","autoFocus","MASDrawer","drawerPanelContentProps","drawerHeaderProps","isExpanded","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","widths","restDrawerPanelContentProps","text","panelContent","DrawerPanelContent","default","DrawerHead","TextContent","component","TextVariants","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","MASGenerateCredentialsModal","store","hideModal","credential","useState","confirmationCheckbox","setConfirmationCheckbox","handleClose","generateCredentials","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","titleProps","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","textAriaLabel","clientID","clientSecret","Bullseye","Checkbox","isChecked","checked","MASLoading","bullseyeProps","spinnerProps","Spinner","MASPagination","page","perPage","itemCount","PaginationVariant","isCompact","titles","restProps","history","location","searchParams","URLSearchParams","search","setSearchParam","useCallback","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","rowDataTestId","trRef","rowProps","row","props","rowIndex","originalData","isRowDeleted","status","isLoggedInUserOwner","owner","isRowDisabled","tabIndex","undefined","ref","css","hidden","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","hasDefaultCustomRowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","breakpoint","map","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","this","cloud_provider","multi_az","region","DrawerPanelContentInfo","qsContext","QuickStartContext","TextList","TextListVariants","Grid","sm","lg","hasGutter","GridItem","TextListItem","TextListItemVariants","isSmall","isInline","style","marginTop","setActiveQuickStart","emptyProvider","kind","display_name","enabled","CreateInstance","refresh","cloudProviders","auth","useAuth","basePath","useConfig","addAlert","useAlert","newKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","setIsFormValid","setCreationInProgress","resetForm","prevState","fetchCloudRegions","provider","kas","getToken","accessToken","listCloudProviderRegions","then","res","providerRegions","data","items","enabledRegions","filter","p","length","unshift","reason","response","AlertVariant","useEffect","onCreateInstance","isValid","trim","test","message","maxLength","validateCreateForm","apisService","createKafka","code","isMultiSelected","onChangeValidateName","onChangeCloudRegion","getTileIcon","toLowerCase","color","onChangeAvailabilty","isSelected","currentTarget","onFormSubmit","preventDefault","Alert","Flex","direction","FlexItem","flex","Form","onSubmit","FormAlert","FormGroup","helperText","helperTextInvalid","isRequired","validated","fieldId","Tile","cloudProvider","FormSelect","FormSelectOption","ToggleGroup","Tooltip","content","ToggleGroupItem","buttonId","reference","document","getElementById","Divider","isVertical","DeleteInstance","instanceStatus","selectedInstanceName","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","CreateServiceAccount","newServiceAccount","N","showModal","fetchServiceAccounts","descriptionValidated","setDescriptionValidated","serviceAccountFormData","setServiceAccountFormData","descMessage","descFieldState","handleTextInputName","handleTextInputDescription","createServiceAccount","error","handleServerError","TextArea","DeleteServiceAccount","serviceAccountToDelete","setIsLoading","serviceAccount","serviceAccountId","Error","deleteServiceAccount","ResetServiceAccount","serviceAccountToReset","isModalLoading","setIsModalLoading","resetServiceAccount","resetServiceAccountCreds","ErrorCodes","isServiceApiError","BASE_PATH","replace","configuration","axios","field","msg","DefaultApiAxiosParamCreator","async","kafkaRequestPayload","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","needsSerialization","JSON","stringify","url","serviceAccountRequest","deleteKafkaById","localVarPath","encodeURIComponent","String","getKafkaById","getMetricsByInstantQuery","filters","getMetricsByRangeQuery","duration","interval","getServiceAccountById","listCloudProviders","listKafkas","orderBy","listServiceAccounts","serviceStatus","versionMetadata","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","BaseAPI"],"mappings":"mMAmBaA,EAA+D,SAAC,G,IAC3EC,EAAW,cACXC,EAAQ,WACRC,EAAK,QACLC,EAAiB,oBACjBC,EAAQ,WACRC,EAAW,cACXC,EAAoB,uBACpBC,EAAkB,qBAClBC,EAAgB,mBAChBC,EAAgB,mBAChB,IAAAC,UAAE,IAAG,qBAAkB,EAEfC,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAC,MAAK,CACJH,GAAIA,EACJI,QAAS,EAAAC,aAAA,OACTb,MAAOA,EACPc,OAAQhB,EACRiB,QAASd,EACTe,SAAU,KACVC,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLC,IAAI,SACJP,QAAQ,UACRQ,KAAK,SACLC,QAASnB,EACToB,YAAanB,GAAeC,EAC5BmB,qBAAsBd,EAAE,sBACxBe,UAAWpB,EAAoB,cAClBE,GAEZD,GAEH,kBAAC,EAAAa,OAAM,CAACC,IAAI,SAASP,QAAQ,OAAOS,QAASpB,EAAiB,cAAeM,GAC1EE,EAAE,aAINV,K,uGCfM0B,EAAgD,SAAC,G,IAC5D3B,EAAW,cACXE,EAAK,QACL0B,EAAU,aACVC,EAAkB,qBAClBC,EAAiB,oBACjB3B,EAAiB,oBACjB4B,EAAS,YACT9B,EAAQ,WACR,IAAA+B,wBAAgB,IAAG,KAAE,EACrBC,EAAc,iBAER,EAMFL,GAAc,GALhB,IAAAd,eAAO,IAAG,IAAAC,aAAA,MAAkB,EAC5B,IAAAmB,wBAAgB,IAAG,YAAS,EACZC,EAAS,gBACzB,IAAAC,iBAAS,IAAG,GAAI,EACbC,GAAc,cALb,yDAQA,EAQFR,GAAsB,GAPxB,IAAAnB,UAAE,IAAG,yBAAsB,EAC3B,IAAAW,WAAG,IAAG,mBAAgB,EACtB,IAAAP,QAASwB,OAAoB,IAAG,IAAAC,cAAA,OAAoB,EAC3CC,EAAoB,UACjBC,EAAuB,aACnC,IAAAC,MAAOC,OAAkB,IAAG,WAAQ,EACjCC,GAAsB,cAPrB,uDAUA,EAQFd,GAAqB,GAPvB,IAAApB,GAAImC,OAAc,IAAG,wBAAqB,EAC1C,IAAAxB,IAAKyB,OAAe,IAAG,mBAAgB,EACvC,IAAAhC,QAASiC,OAAmB,IAAG,IAAAR,cAAA,KAAkB,EAGjD,GAF4B,UACM,aAClC,EAAAG,OAAOM,OAAiB,IAAG,WAAQ,EAChCC,GAAqB,cAPpB,uDAUA,EAAiFlB,GAAa,GAA5F,IAAAmB,iBAAS,IAAG,kCAA+B,EAAEC,EAAW,cAAKC,GAAa,cAA5E,6BACA,EAA2FnB,GAAkB,GAA3G,IAAAS,cAAK,IAAG,KAAE,EAAQW,IAAF,OAAO,SAAEC,GAAQ,WAAEC,GAAU,aAAEC,GAAa,gBAAKC,IAAmB,cAAtF,kEAEN,OACE,kBAAC,EAAA5C,OAAK,eACJC,QAASA,EACTE,OAAQhB,EAAW,aACPmC,EACZjC,MAAOA,EACPgC,iBAAkBA,EAClBE,UAAWA,EACXnB,QAASd,EACTe,SAAU,KACVC,QAAS,CACP,kBAAC,EAAAC,QAAM,eACLV,GAAIA,EACJW,IAAKA,EACLP,QAASwB,EACTf,QAAS,WAAM,OAAAiB,GAAwBA,EAAqBR,IAC5DR,WAAYiB,GACRG,GAEHD,GAEH,kBAAC,EAAAvB,QAAM,eACLV,GAAImC,EACJxB,IAAKyB,EACLhC,QAASiC,EACTxB,QAASpB,GACL8C,GAEHD,KAGDX,GAEHc,GACC,kBAAC,EAAAO,MAAI,eAACR,UAAWA,EAAWS,wBAAyB,CAAEC,OAAQT,GAAe,KAAUC,IAEzFI,IACC,oCACE,2BAAOK,QAAQ,iBAAiBF,wBAAyB,CAAEC,OAAQlB,MACnE,kBAAC,EAAAoB,WAAS,eACRpD,GAAG,mBACHqD,KAAK,iBACLzC,KAAK,OACL+B,MAAOA,GACPC,SAAUA,GACVC,WAAYA,GACZS,WAAW,GACPP,MAITxD,K,uGCjGMgE,EAAsC,SAAC,G,IAClDhD,EAAO,UACP,IAAAS,iBAAS,IAAG,GAAI,EAChBwC,EAAuB,0BACvBC,EAAiB,oBACjBC,EAAU,aACVnE,EAAQ,WACRoE,EAAgB,mBAChBC,EAAQ,WACRC,EAAkC,qCACdC,EAAa,sBACjCC,EAAkB,qBAEZ,EAA6CP,GAA2B,GAAtEQ,EAAM,SAAKC,GAA2B,cAAxC,YACA,EAAkBR,GAAqB,GAArCS,EAAI,OAAE1E,EAAK,QAEb2E,EACJ,kBAAC,EAAAC,oBAAkB,eAACJ,OAAQA,GAAU,CAAEK,QAAS,aAAkBJ,GAChEjD,EACC,kBAAC,KAAU,MAEX,oCACE,kBAAC,EAAAsD,WAAU,KACT,kBAAC,EAAAC,YAAW,MACTL,aAAI,EAAJA,EAAMlC,QACL,kBAAC,EAAAgB,KAAI,CAACwB,WAAWN,aAAI,EAAJA,EAAMM,YAAa,EAAAC,aAAA,MAAoBjC,WAAW0B,aAAI,EAAJA,EAAM1B,YAAa,aACnF0B,aAAI,EAAJA,EAAMlC,QAGVxC,aAAK,EAALA,EAAOmD,QACN,kBAAC,EAAA+B,MAAK,CACJC,cAAcnF,aAAK,EAALA,EAAOmF,eAAgB,KACrCC,MAAMpF,aAAK,EAALA,EAAOoF,OAAQ,EAAAC,WAAA,GACrBrC,WAAWhD,aAAK,EAALA,EAAOgD,YAAa,aAE9BhD,aAAK,EAALA,EAAOmD,QAId,kBAAC,EAAAmC,cAAa,KACZ,kBAAC,EAAAC,kBAAiB,CAAClE,QAASN,MAGhC,kBAAC,EAAAyE,gBAAe,KACbjB,EACAJ,KAOX,OACE,kBAAC,EAAAsB,OAAM,CAACvB,WAAYA,EAAYE,SAAUA,EAAQ,mBAAoBE,GACpE,kBAAC,EAAAoB,cAAa,CACZf,aAAcA,EACd3B,UAAWqB,EAAqC,qBAAuB,IAEvE,kBAAC,EAAAsB,kBAAiB,CAAC3C,UAAU,gD,IAAiDjD,O,wJC3EhF6F,EAA8B,WAC1B,IAAAnF,GAAM,IAAAC,kBAAgB,EACxB,GAAuB,UAArBmF,EAAK,QAAEC,EAAS,YAClB,GAAmCD,aAAK,EAALA,EAAOnE,aAAc,GAAtDqE,EAAU,aAAEvE,EAAS,YAAExB,EAAK,QAE9B,GAAkD,IAAAgG,WAAS,GAA1DC,EAAoB,KAAEC,EAAuB,KAE9CC,EAAc,WAClBL,IACAI,GAAwB,IAOpBE,EACJ,oCACE,kBAAC,KAAa,CACZC,gBAAiB,CACfzF,QAAS,EAAA0F,kBAAA,OAEXC,oBAAqB,CACnBC,KAAM,MAERC,WAAY,CACVzG,MAAOS,EAAE,sCACT0E,aAAc,KACdC,KAAM,EAAAC,WAAA,KAGR,kBAAC,EAAAN,YAAW,KACV,kBAAC,EAAAvB,KAAI,CAACwB,UAAW,EAAAC,aAAA,MAAoBjC,UAAU,cAC5CvC,EAAE,kEAGP,kBAAC,EAAAiG,WAAU,CAAC1D,UAAU,cACpB,kBAAC,EAAA2D,eAAc,CAAC3D,UAAU,qDACvBvC,EAAE,cAEL,kBAAC,EAAAmG,cAAa,CACZC,YAAU,EACV7D,UAAU,aAAY,cACV,gCACZ8D,cAAerG,EAAE,cAEhBsF,aAAU,EAAVA,EAAYgB,WAGjB,kBAAC,EAAAL,WAAU,CAAC1D,UAAU,cACpB,kBAAC,EAAA2D,eAAc,CAAC3D,UAAU,qDACvBvC,EAAE,yBAEL,kBAAC,EAAAmG,cAAa,CACZC,YAAU,EACV7D,UAAU,aAAY,cACV,oCACZ8D,cAAerG,EAAE,yBAEhBsF,aAAU,EAAVA,EAAYiB,eAGjB,kBAAC,EAAAjC,YAAW,KACV,kBAAC,EAAAvB,KAAI,CAACwB,UAAW,EAAAC,aAAA,MAAoBjC,UAAU,cAC5CvC,EAAE,wDAGP,kBAAC,EAAAwG,SAAQ,CAACjE,UAAU,cAClB,kBAAC,EAAAkE,SAAQ,CACP1E,MAAO/B,EAAE,yCACT0G,UAAWlB,EACX7C,SA3DmB,SAACgE,GAC5BlB,EAAwBkB,IA2DhB5G,GAAG,UACHqD,KAAK,YAGT,kBAAC,EAAA3C,OAAM,CACLN,QAAQ,UACRU,YAAa2E,EACb5E,QAAS8E,EAAW,cACR,gCAEX1F,EAAE,YAMX,OACE,kBAAC,EAAAE,MAAK,CACJC,QAAS,EAAAC,aAAA,OACTb,MAAOA,GAASS,EAAE,2CAClBK,QAAQ,EACRC,QAASoF,EACTjE,WAAW,EACXlB,SAAU,MAETQ,EAAY,kBAAC,KAAU,MAAM4E,K,4FClHvBiB,EAAuD,SAAC,G,IACnEC,EAAa,gBACbC,EAAY,eACS,OACrB,kBAAC,EAAAN,UAAQ,iBAAKK,GACZ,kBAAC,EAAAE,SAAO,iBAAKD,O,4ICHXE,EAAoD,SAAC,GACzD,IAAAC,EAAI,OACJ,IAAAC,eAAO,IAAG,KAAE,EACZC,EAAS,YACT,IAAAhH,eAAO,IAAG,IAAAiH,kBAAA,IAAqB,EAC/BC,EAAS,YACTC,EAAM,SACHC,GAAS,cAP6C,+DASnDC,GAAU,UACVC,GAAW,UACXC,EAAe,IAAIC,gBAAgBF,EAASG,QAE5CC,GAAiB,IAAAC,cACrB,SAAC1E,EAAcV,GACbgF,EAAaK,IAAI3E,EAAMV,EAAMsF,cAE/B,CAACN,IAGGO,GAAY,IAAAH,cAChB,SAACI,EAAQC,GACPN,EAAe,OAAQM,EAAQH,YAC/BR,EAAQY,KAAK,CACXR,OAAQF,EAAaM,eAGzB,CAACH,EAAgBL,EAASE,IAGtBW,GAAkB,IAAAP,cACtB,SAACI,EAAQI,GACPT,EAAe,OAAQ,KACvBA,EAAe,UAAWS,EAAWN,YACrCR,EAAQY,KAAK,CACXR,OAAQF,EAAaM,eAGzB,CAACH,EAAgBL,EAASE,IAG5B,OACE,kBAAC,cAAY,eACXP,UAAWA,EACXD,QAASA,EACTD,KAAMA,EACNgB,UAAWA,EACX9H,QAASA,EACTkI,gBAAiBA,EACjBhB,UAAWA,GACPE,EAAS,CACbD,OAAQA,O,kHCjDRiB,GAA0B,IAAAC,eAA4C,CAC1EC,UAAW,GACXC,WAAY,aACZC,aAAc,KAGHC,EAA2BL,EAAwBM,SAEnDC,EAAmB,SAACC,GACzB,OAAyD,IAAAC,YAAWT,GAAlEE,EAAS,YAAEC,EAAU,aAAEO,EAAa,gBAAEN,EAAY,eACpD,EAAgDI,GAAmB,GAAjEG,EAAK,QAAE3G,EAAS,YAAE4G,EAAQ,WAAEC,EAAG,MAAKC,GAAK,cAA3C,wCACEC,EAAaH,EAAQ,SACrB1F,EAA6B2F,EAAG,WAApBG,EAAiBH,EAAG,aAClCI,GACJD,aAAY,EAAZA,EAAcE,UAAW,mBAA8BF,aAAY,EAAZA,EAAcE,UAAW,aAC5EC,EAAsBf,KAAiBY,aAAY,EAAZA,EAAcI,OACrDC,EAAgBJ,IAAiBE,EAEvC,OACE,qDACeT,EACbY,SAAWD,OAAoBE,EAAJ,EAC3BC,IAAKb,EACL3G,WAAW,IAAAyH,KACTzH,EACA,uBACAiH,EAAe,gBAAkBE,GAAuB,mBACvDE,GAAiBnB,GAAaA,KAAcc,aAAY,EAAZA,EAAcnG,OAAQ,iBAErE6G,YAAuBH,IAAfrG,IAA6BA,EACrC7C,QAAS,SAACsJ,GAAe,OAACN,GAAiBlB,GAAcA,EAAWwB,EAAOZ,EAAUF,KACjFC,KCtBJc,EAA6C,SAAC,G,IAClDC,EAAU,aACVC,EAAgB,mBAChBC,EAAc,iBACdhL,EAAQ,WACRmJ,EAAS,YACTC,EAAU,aACVO,EAAa,gBACbN,EAAY,eAGV4B,EAWEH,EAAU,MAVZI,EAUEJ,EAAU,KATZK,EASEL,EAAU,eARZM,EAQEN,EAAU,OAPZO,EAOEP,EAAU,OANE5I,EAMZ4I,EAAU,cALZjK,EAKEiK,EAAU,QAJZ7H,EAIE6H,EAAU,UAFZ,GAEEA,EAAU,WAAVA,EAAU,4BAFZQ,OAA0B,IAAG,GAAK,EAC/BrD,GAAS,YACV6C,EAZE,kIAqBN,OAJIQ,IACFrD,EAAsB,WAAIuB,GAI1B,kBAACF,EAAwB,CACvBlG,MAAO,CACL+F,UAAS,EACTC,WAAU,EACVO,cAAa,EACbN,aAAY,IAGd,kBAAC,SAAO,eACNpG,WAAW,IAAAyH,KAAIY,GAA8B,iCAAkCrI,GAC/EgI,MAAOA,EACPpK,QAASA,EACTqK,KAAMA,EAAI,aACEhJ,EACZiJ,eAAgBA,EAChBC,OAAQA,EACRC,OAAQA,GACJpD,GAEJ,kBAAC,EAAAsD,aAAW,iBAAKR,IACjB,kBAAC,EAAAS,WAAS,iBAAKR,IACdhL,M,4FCrDHyL,EAAuD,SAAC,G,IAC5DC,EAAY,eACZC,EAAgB,mBAChBC,EAAY,eACZC,EAAgB,mBAERpL,EAA4FiL,EAAY,GAApGI,EAAwFJ,EAAY,gBAAnF,EAAuEA,EAAY,gCAAnFK,OAA+B,IAAG,OAAI,EAAEC,EAA+BN,EAAY,MAAjCO,GAAgB,YAAKP,EAA9F,oEAEN,OACE,oCACE,kBAAC,EAAAQ,SAAO,eACNzL,GAAIA,EACJqL,gBAAiBA,EACjBE,MAAOA,EACPD,gCAAiCA,GAC7BE,GAEJ,kBAAC,EAAAE,eAAc,KACXR,GACA,kBAAC,EAAAS,oBAAkB,eAACC,WAAYV,EAAiBU,WAAYC,WAAW,MAASX,GAC9EE,GAGJD,aAAY,EAAZA,EAAcW,KAAI,SAACC,EAAaC,GACvB,MAA2ED,EAAW,IAAtFpL,OAAG,IAAG,QAAK,EAAEP,EAA8D2L,EAAW,QAAhEvJ,EAAqDuJ,EAAW,UAArD/L,EAA0C+L,EAAW,GAAjDE,EAAsCF,EAAW,UAAtCG,EAA2BH,EAAW,KAA7BI,GAAa,YAAKJ,EAA7E,uDACN,OACE,kBAAC,EAAAK,aAAW,eACVzL,IAAQA,EAAG,IAAIqL,EACf5L,QAASA,EACToC,UAAWA,EACXxC,GAAIA,EACJiM,UAAWA,GACPE,GAEHD,W,sDCvDjB,MAME,WACEG,KAAKC,eAAiB,GACtBD,KAAKE,UAAW,EAChBF,KAAKG,OAAS,GACdH,KAAKhJ,KAAO,ICVhB,EAIE,WACEgJ,KAAKhJ,KAAO,GACZgJ,KAAK5J,YAAc,K,uMCWjBgK,EAAyB,WAErB,IAAAxM,GAAM,IAAAC,kBAAgB,EACxBwM,EAAqC,eAAiB,EAAAC,mBAE5D,OACE,kBAAC,EAAApI,YAAW,KACV,kBAAC,EAAAvB,KAAI,CAACwB,UAAW,EAAAC,aAAA,IAAkBxE,EAAE,gCACrC,kBAAC,EAAA2M,SAAQ,CAACpI,UAAW,EAAAqI,iBAAA,IACnB,kBAAC,EAAAC,KAAI,CAACC,GAAI,EAAGC,GAAI,GAAIC,WAAS,GAC5B,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAA0BnN,EAAE,oBACrD,kBAAC,EAAAkN,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAAuB,aAElD,kBAAC,EAAAF,SAAQ,KACP,kBAAC,EAAAC,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAA0BnN,EAAE,0BACrD,kBAAC,EAAAkN,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAAuB,2BAElD,kBAAC,EAAAF,SAAQ,KACP,kBAAC,EAAAC,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAA0BnN,EAAE,mBACrD,kBAAC,EAAAkN,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAAuB,gBAElD,kBAAC,EAAAF,SAAQ,KACP,kBAAC,EAAAC,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAA0BnN,EAAE,sBACrD,kBAAC,EAAAkN,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAAuB,cAElD,kBAAC,EAAAF,SAAQ,KACP,kBAAC,EAAAC,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAA0BnN,EAAE,8BACrD,kBAAC,EAAAkN,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAAuB,cAElD,kBAAC,EAAAF,SAAQ,KACP,kBAAC,EAAAC,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAA0BnN,EAAE,2BACrD,kBAAC,EAAAkN,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAAuB,gCAElD,kBAAC,EAAAF,SAAQ,KACP,kBAAC,EAAAC,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAA0BnN,EAAE,wBACrD,kBAAC,EAAAkN,aAAY,CAAC3I,UAAW,EAAA4I,qBAAA,IAAuB,gBAGpD,kBAAC,EAAA1M,OAAM,CAAC2M,SAAO,EAACC,UAAQ,EAAClN,QAAS,EAAAyB,cAAA,KAAoB0L,MAAO,CAAEC,UAAW,QAAU3M,QAAS,WAAM,OAAC6L,EAAUe,qBAAuBf,EAAUe,oBAAoB,qBAChKxN,EAAE,wC,WC1BPyN,EAA+B,CACnCC,KAAM,iBACNC,aAAc,gBACdC,SAAS,GAGLC,EAAiB,WACb,IAAA7N,GAAM,IAAAC,kBAAgB,EACxB,GAAuB,UAArBmF,EAAK,QAAEC,EAAS,YAClB,GAAwCD,aAAK,EAALA,EAAOnE,aAAc,GAA3DxB,EAAQ,WAAEqO,EAAO,UAAEC,EAAc,iBACnCC,GAAO,IAAAC,WACeC,GAAe,IAAAC,aAAW,gBAC9CC,GAAa,IAAAC,YAAU,SACzBC,EAAqB,IAAI,IAEzB,GAAoC,IAAA/I,UAAmB+I,GAAtDC,EAAa,KAAEC,EAAgB,KAChC,GAAoC,IAAAjJ,UAAkC,CAAEkJ,WAAY,YAAnFC,EAAa,KAAEC,EAAgB,KAChC,GAAkD,IAAApJ,UAAkC,CAAEkJ,WAAY,YAAjGG,EAAoB,KAAEC,EAAuB,KAC9C,GAAkC,IAAAtJ,UAAwB,IAAzDuJ,EAAY,KAAEC,EAAe,KAC9B,GAAgC,IAAAxJ,WAAkB,GAAjD7F,EAAW,KAAEsP,EAAc,KAC5B,GAAgD,IAAAzJ,WAAS,GAAxD5F,EAAoB,KAAEsP,EAAqB,KAE5CC,EAAY,WAChBV,GAAiB,SAACW,GAAc,OAAC,gCAAKA,GAAS,CAAE/L,KAAM,GAAIkJ,UAAU,OACrE0C,GAAe,GACfL,EAAiB,CAAEF,WAAY,YAC/BQ,GAAsB,IAIlBG,EAAoB,SAAOC,GAAuB,uD,+EAClC,SAAMrB,aAAI,EAAJA,EAAMsB,IAAIC,Y,UAA9BC,EAAc,SACdzP,EAAKsP,EAAStP,IAEhByP,IAAezP,EAAf,Y,iBAMA,O,sBAAA,GAJoB,IAAI,KAAW,CACjCyP,YAAW,EACXtB,SAAQ,IAEQuB,yBAAyB1P,GAAI2P,MAAK,SAACC,G,MAC7CC,GAA0B,QAAR,EAAAD,EAAIE,YAAI,eAAEC,QAAS,GACrCC,EAAiBH,aAAe,EAAfA,EAAiBI,QAAO,SAACC,GAAqB,OAAAA,EAAErC,WAEvE,GAA8B,IAA1BmC,EAAeG,QAAgBH,EAAe,GAAGhQ,IAAMsP,EAASjM,KAAM,CACxE,IAAM,EAAiB2M,EAAe,GAAGhQ,GACzCyO,GAAiB,SAACW,GAAc,OAAC,gCAAKA,GAAS,CAAE5C,OAAM,OAGzDwD,EAAeI,QAAQ1C,GACvBsB,EAAgBgB,O,cAVlB,S,+BAaIK,OAAM,GACN,OAAkB,KACpBA,EAAuB,QAAd,IAAMC,gBAAQ,eAAER,KAAKO,QAGhChC,EAASpO,EAAE,+BAAgC,EAAAsQ,aAAA,OAAqBF,G,gCAKtE,IAAAG,YAAU,WACJxC,EAAemC,OAAS,GAAKnC,EAAe,GAAG3K,OACjDoL,GAAiB,SAACW,GAAc,OAAC,gCAAKA,GAAS,CAAE9C,eAAgB0B,EAAe,GAAG3K,UACnFgM,EAAkBrB,EAAe,OAElC,CAACA,IAEJ,IAkCMyC,EAAmB,kE,qFAEH,OADdC,EA9BmB,WACzB,IAAIA,GAAU,EACNrN,EAAiBmL,EAAa,KAAxBhC,EAAWgC,EAAa,OAwBtC,OAtBKnL,aAAI,EAAJA,EAAMsN,QAKD,+BAA+BC,KAAKvN,EAAKsN,UACjDD,GAAU,EACV9B,EAAiB,CAAEF,WAAY,QAASmC,QAAS5Q,EAAE,8CANnDyQ,GAAU,EACV9B,EAAiB,CAAEF,WAAY,QAASmC,QAAS5Q,EAAE,sCAQjDoD,EAAK8M,OAAS,OAChBO,GAAU,EACV9B,EAAiB,CACfF,WAAY,QACZmC,QAAS5Q,EAAE,kCAAmC,CAAE6Q,UAAW,UAI1DtE,EAAOmE,SACVD,GAAU,EACV5B,EAAwB,CAAEJ,WAAY,QAASmC,QAAS5Q,EAAE,sCAErDyQ,EAISK,GACI,GAAM9C,aAAI,EAAJA,EAAMsB,IAAIC,Y,OACpC,GADMC,EAAc,UACfiB,EAEH,OADAzB,GAAe,GACf,I,IAGEQ,EAAA,Y,iBAUA,O,sBARMuB,EAAc,IAAI,KAAW,CACjCvB,YAAW,EACXtB,SAAQ,IAGVzO,IACAwP,GAAsB,GAEtB,GAAM8B,EAAYC,aAAY,EAAMzC,GAAemB,MAAK,SAACC,GACvDT,IACA7J,IACAyI,Q,cAHF,S,gCAMI,OAAkB,KACd,GAAkC,QAAf,eAAK,EAAL,EAAOuC,gBAAQ,eAAER,OAAQ,GAA1CoB,EAAI,OAAEb,EAAM,SAEhBa,IAAS,8BACXjC,GAAe,GACfL,EAAiB,CACfF,WAAY,QACZmC,QAAS5Q,EAAE,qDAAsD,CAAEoD,KAAMmL,EAAcnL,UAGzFgL,EAASpO,EAAE,+BAAgC,EAAAsQ,aAAA,OAAqBF,EAAQ,4BAI5EnB,GAAsB,G,gCAU5B,IAAAsB,YAAU,WACyB,UAA7B7B,EAAcD,YAA8D,UAApCG,EAAqBH,YAC/DO,GAAe,KAEhB,CAACN,EAAcD,WAAYG,EAAqBH,aAEnD,IAiDUmC,EAASnC,EACTrL,EAAMiJ,EAAgBC,EAAUC,EAClC2E,GAnDFC,GAAuB,SAAC/N,GAC5B,IAAIqN,GAAU,EACdjC,GAAiB,SAACW,GAAc,OAAC,gCAAKA,GAAS,CAAE/L,KAAI,OAEjDA,IAAS,+BAA+BuN,KAAKvN,EAAKsN,UACpDD,GAAU,IAGRrN,aAAI,EAAJA,EAAM8M,QAAS,KACjBvB,EAAiB,CACfF,WAAY,QACZmC,QAAS5Q,EAAE,kCAAmC,CAAE6Q,UAAW,SAEpDJ,GAAwC,UAA7B/B,EAAcD,WAClCE,EAAiB,CAAEF,WAAY,UAAWmC,QAAS,KACzCH,GACV9B,EAAiB,CAAEF,WAAY,QAASmC,QAAS5Q,EAAE,6CAIjDoR,GAAsB,SAAC7E,GAC3BiC,GAAiB,SAACW,GAAc,OAAC,gCAAKA,GAAS,CAAE5C,OAAM,OACnDA,GAA8C,UAApCqC,EAAqBH,YACjCI,EAAwB,CAAEJ,WAAY,UAAWmC,QAAS,MAIxDS,GAAc,SAAChC,GACnB,OAAQA,aAAQ,EAARA,EAAUiC,eAChB,IAAK,MACH,OAAO,kBAAC,KAAO,CAAC3M,KAAK,KAAK4M,MAAM,QAAQhP,UAAU,oCACpD,QACE,SAIAiP,GAAsB,SAACC,EAAqBvH,GAChD,GAAIuH,EAAY,CACd,IAAM,EAAQvH,EAAMwH,cAAc3R,GAClCyO,GAAiB,SAACW,GAAc,OAAC,gCAAKA,GAAS,CAAE7C,SAAoB,UAAV,SAIzDqF,GAAe,SAACzH,GACpBA,EAAM0H,iBACNpB,KAgGF,OACE,kBAAC,KAAc,CACbnR,aAAa,EACbE,MAAOS,EAAE,2BACTR,kBA5JsB,WACxB6F,IACA6J,KA2JEzP,SAAU+Q,EACV9Q,YAAaA,EACbE,mBAAoBI,EAAE,mBACtBL,qBAAsBA,EACtBE,iBAAiB,gCACjBC,iBAAiB,iCAEjB,kBAAC,EAAA+R,MAAK,CACJtP,UAAU,aACVpC,QAAQ,OACRZ,MAAM,oDAAmD,YAC/C,SACV8N,UAAQ,IAEV,kBAAC,EAAAyE,KAAI,CAACC,UAAW,CAAE3N,QAAS,SAAU2I,GAAI,QACxC,kBAAC,EAAAiF,SAAQ,CAACC,KAAM,CAAE7N,QAAS,YAhHvBwM,EAAwBlC,EAAa,QAA5BD,EAAeC,EAAa,WACrCtL,EAA2CmL,EAAa,KAAlDlC,EAAqCkC,EAAa,eAAlCjC,EAAqBiC,EAAa,SAAxBhC,EAAWgC,EAAa,OAC1D2C,GAAkB5E,EAEtB,kBAAC,EAAA4F,KAAI,CAACC,SAAUR,KACZjS,GACA,kBAAC,EAAA0S,UAAS,KACR,kBAAC,EAAAP,MAAK,CAAC1R,QAAQ,SAASZ,MAAOS,EAAE,6BAA4B,YAAY,SAASqN,UAAQ,KAG9F,kBAAC,EAAAgF,UAAS,CACRtQ,MAAO/B,EAAE,iBACTsS,WAAYtS,EAAE,oCACduS,kBAAmB3B,EACnB4B,YAAU,EACVC,UAAWhE,EACXiE,QAAQ,sBAER,kBAAC,EAAAvP,UAAS,CACRqP,YAAU,EACVC,UAAWhE,EACX9N,KAAK,OACLZ,GAAG,qBACHqD,KAAK,gBACLV,MAAOU,EACPT,SAAUwO,GACV9N,WAAW,KAGf,kBAAC,EAAAgP,UAAS,CAACtQ,MAAO/B,EAAE,kBAAmB0S,QAAQ,4BAC5C3E,EAAelC,KAAI,SAACwD,GACX,IAAAjM,EAA4BiM,EAAQ,KAA9B,EAAsBA,EAAQ,aAA9B1B,OAAY,IAAG,KAAE,EAC/B,OACE,kBAAC,EAAAgF,KAAI,CACHjS,IAAK,QAAQ0C,EACb7D,MAAOoO,EACP5H,KAAMsL,GAAYjO,GAClBqO,WAAYpF,IAAmBjJ,EAC/BxC,QAAS,WAAM,OA/KEgS,EA+KoBvD,EA9KjDb,GAAiB,SAACW,GAAc,OAAC,gCAAKA,GAAS,CAAE9C,eAAgBuG,EAAcxP,MAAQ,aACvFgM,EAAkBwD,GAFU,IAACA,SAoLzB,kBAAC,EAAAP,UAAS,CACRtQ,MAAO/B,EAAE,gBACTuS,kBAAmB3D,EAAqBgC,QACxC6B,UAAW7D,EAAqBH,WAChCiE,QAAQ,2BACRF,YAAU,GAEV,kBAAC,EAAAK,WAAU,CACTJ,UAAW7D,EAAqBH,WAChC/L,MAAO6J,EACP5J,SAAUyO,GACVrR,GAAG,sBACHqD,KAAK,eAAc,aACPpD,EAAE,iBAEb8O,EAAajD,KAAI,SAAC,EAAwCE,G,IAAtChM,EAAE,KAAE,IAAA4N,oBAAY,IAAG,KAAE,EAA2B,OACnE,kBAAC,EAAAmF,iBAAgB,CAACpS,IAAKqL,EAAOrJ,MAAO3C,EAAIgC,MAAOhC,EAAKC,EAAED,GAAM4N,SAInE,kBAAC,EAAA0E,UAAS,CAACtQ,MAAO/B,EAAE,qBAAsB0S,QAAQ,sBAChD,kBAAC,EAAAK,YAAW,cAAa/S,EAAE,gCACzB,kBAAC,EAAAgT,QAAO,CAACC,QAASjT,EAAE,oDAClB,kBAAC,EAAAkT,gBAAe,CACdjP,KAAMjE,EAAE,UACR0C,MAAO,SACP7B,YAAU,EACVsS,SAAS,SACT1B,WAAYP,GACZvO,SAAU6O,MAGd,kBAAC,EAAA0B,gBAAe,CACdjP,KAAMjE,EAAE,SACR0C,MAAM,QACNyQ,SAAS,QACT1B,WAAYP,GACZvO,SAAU6O,KAEZ,kBAAC,EAAAwB,QAAO,CACNC,QAASjT,EAAE,mDACXoT,UAAW,WAAM,OAAAC,SAASC,eAAe,iBA6B/C,kBAAC,EAAAC,QAAO,CAACC,YAAU,IACnB,kBAAC,EAAAxB,SAAQ,CAACC,KAAM,CAAE7N,QAAS,UAAY7B,UAAU,+CAC/C,kBAACiK,EAAsB,UC5VpBiH,EAAiB,WACpB,IAAAzT,GAAM,IAAAC,kBAAgB,EACxB,GAAuB,UAArBmF,EAAK,QAAEC,EAAS,YAClB,GACJD,aAAK,EAALA,EAAOnE,aAAc,GADf1B,EAAK,QAAE2B,EAAkB,qBAAEC,EAAiB,oBAAEC,EAAS,YAAEsS,EAAc,iBAAErS,EAAgB,mBAE3FsS,EAAuBtS,aAAgB,EAAhBA,EAAkB+B,KAEzC,GAA4C,IAAAmC,YAA3CqO,EAAiB,KAAEC,EAAoB,KAMxCC,EAA0B,WAC9B,OAAIJ,IAAmB,aACjBE,aAAiB,EAAjBA,EAAmBtC,kBAAkBqC,aAAoB,EAApBA,EAAsBrC,gBAmBnE,OACE,kBAAC,KAAc,CACbjS,aAAa,EACbE,MAAOA,EACP2B,oBAAkB,eAChBL,WAAYiT,IACZ,cAAe,iCACZ5S,GAELC,kBAAmBA,EACnB3B,kBAfiB,WACnBqU,EAAqB,IACrBxO,KAcEjE,UAAWA,EACXC,iBAAkBA,EAClBC,eAAgB,CACduB,cAAe6Q,IAAmB,WAClC3R,MAAO/B,EAAE,sBAAuB,CAAEoD,KAAMuQ,IACxCjR,MAAOkR,EACPjR,SA1CqB,SAACD,GAC1BmR,EAAqBnR,IA0CjBE,WA7Ba,SAACsH,GACA,UAAdA,EAAMxJ,KAAoBoT,MAC5B5S,aAAkB,EAAlBA,EAAoBN,UAAWM,EAAmBN,QAAQS,IA4BxDgC,WAAW,O,iLCjDb0Q,EAAgD,WACpD,IAAMC,EAAuC,IAAI,EAAAC,EAC3C,GAAkC,UAAhC7O,EAAK,QAAE8O,EAAS,YAAE7O,EAAS,YAC3B8O,IAAyB/O,aAAK,EAALA,EAAOnE,aAAc,IAAE,qBAChDjB,GAAM,IAAAC,kBAAgB,EACxB+N,GAAO,IAAAC,WACeC,GAAe,IAAAC,aAAW,gBAC9CC,GAAa,IAAAC,YAAU,SAEzB,GAAoC,IAAA9I,UAAkC,CAAEkJ,WAAY,YAAnFC,EAAa,KAAEC,EAAgB,KAChC,GAAkD,IAAApJ,UAAkC,CAAEkJ,WAAY,YAAjG2F,EAAoB,KAAEC,EAAuB,KAC9C,GAAsD,IAAA9O,UAA4ByO,GAAjFM,EAAsB,KAAEC,EAAyB,KAClD,GAAgC,IAAAhP,WAAkB,GAAjD7F,EAAW,KAAEsP,EAAc,KAC5B,GAAgD,IAAAzJ,WAAS,GAAxD5F,EAAoB,KAAEsP,EAAqB,KAE5CC,EAAY,WAChBP,EAAiB,CAAEF,WAAY,YAC/B4F,EAAwB,CAAE5F,WAAY,YACtC8F,EAA0BP,GAC1BhF,GAAe,KAGjB,IAAAuB,YAAU,WACyB,UAA7B7B,EAAcD,YAA8D,UAApC2F,EAAqB3F,YAC/DO,GAAe,KAEhB,CAACN,EAAcD,WAAY2F,EAAqB3F,aAEnD,IA4IUmC,EAASnC,EACTrL,EAAMZ,EACGgS,EAAyBC,EA9ItCC,EAAsB,SAACtR,GAC3BmR,GAA0B,gCAAKD,GAAsB,CAAElR,KAAI,KAC3D,IAAIqN,GAAU,EACVrN,IAAS,+BAA+BuN,KAAKvN,EAAKsN,UACpDD,GAAU,GAGRrN,GAAQA,EAAK8M,OAAS,KACxBvB,EAAiB,CACfF,WAAY,QACZmC,QAAS5Q,EAAE,sEAAuE,CAChF6Q,UAAW,SAGNJ,GAAwC,UAA7B/B,EAAcD,WAClCE,EAAiB,CAAEF,WAAY,UAAWmC,QAAS,KACzCH,GACV9B,EAAiB,CAAEF,WAAY,QAASmC,QAAS5Q,EAAE,6CAYjD2U,EAA6B,SAACnS,GAClC+R,GAA0B,gCAAKD,GAAsB,CAAE9R,YAAW,KAClE,IAAIiO,GAAU,EACVjO,IAAgB,uBAAuBmO,KAAKnO,EAAYkO,UAC1DD,GAAU,GAERjO,GAAeA,EAAY0N,OAAS,KACtCmE,EAAwB,CACtB5F,WAAY,QACZmC,QAAS5Q,EAAE,6EAA8E,CACvF6Q,UAAW,SAGNJ,GAA+C,UAApC2D,EAAqB3F,WACzC4F,EAAwB,CACtB5F,WAAY,UACZmC,QAAS,KAEDH,GACV4D,EAAwB,CACtB5F,WAAY,QACZmC,QAAS5Q,EAAE,iDAgDX4U,EAAuB,kE,2EAEP,OADdnE,EA5CmB,WACzB,IAAIA,GAAU,EACNrN,EAAsBkR,EAAsB,KAAtC9R,EAAgB8R,EAAsB,YAsCpD,OArCKlR,GAAwB,KAAhBA,EAAKsN,OAGN,+BAA+BC,KAAKvN,EAAKsN,QAMzC,uBAAuBC,KAAKnO,EAAYkO,UAClDD,GAAU,EACV4D,EAAwB,CACtB5F,WAAY,QACZmC,QAAS5Q,EAAE,kDATbyQ,GAAU,EACV9B,EAAiB,CACfF,WAAY,QACZmC,QAAS5Q,EAAE,8CANbyQ,GAAU,EACV9B,EAAiB,CAAEF,WAAY,QAASmC,QAAS5Q,EAAE,sCAejDoD,EAAK8M,OAAS,OAChBO,GAAU,EACV9B,EAAiB,CACfF,WAAY,QACZmC,QAAS5Q,EAAE,sEAAuE,CAChF6Q,UAAW,UAKbrO,GAAeA,EAAY0N,OAAS,OACtCO,GAAU,EACV4D,EAAwB,CACtB5F,WAAY,QACZmC,QAAS5Q,EAAE,sEAAuE,CAChF6Q,UAAW,UAKVJ,EAISK,GACI,GAAM9C,aAAI,EAAJA,EAAMsB,IAAIC,Y,OACpC,GADMC,EAAc,UACfiB,EAEH,OADAzB,GAAe,GACf,I,IAEEQ,EAAA,Y,iBAOA,O,sBALMuB,EAAc,IAAI,KAAW,CACjCvB,YAAW,EACXtB,SAAQ,IAEVe,GAAsB,GACtB,GAAM8B,EAAY6D,qBAAqBN,GAAwB5E,MAAK,SAACC,GACnE,IAAMrK,EAAaqK,aAAG,EAAHA,EAAKE,KAExBxK,IAEA6O,EAAU,0BAAkC,CAAE5O,WAAU,IACxD4J,IACAd,EAASpO,EAAE,2DAA4D,EAAAsQ,aAAA,SACvE6D,GAAwBA,Q,cAR1B,S,oBA3FoB,SAACU,G,MACrBzE,GACA,QAAkByE,KACpBzE,EAAuB,QAAd,EAAAyE,EAAMxE,gBAAQ,eAAER,KAAKO,QAEhChC,EAASpO,EAAE,wBAAyB,EAAAsQ,aAAA,OAAqBF,GAiGrD0E,C,8BAGJ7F,GAAsB,G,YAQlB0C,EAAe,SAACzH,GACpBA,EAAM0H,iBACNgD,KAoDF,OACE,kBAAC,KAAc,CACb7U,GAAG,sBACHV,aAAa,EACbE,MAAOS,EAAE,2CACTR,kBAhEsB,WACxB0P,IACA7J,KA+DE5F,SAAUmV,EACVlV,YAAaA,EACbE,mBAAmB,SACnBD,qBAAsBA,EACtBE,iBAAiB,yCACjBC,iBAAiB,2CA3DX8Q,EAAwBlC,EAAa,QAA5BD,EAAeC,EAAa,WACrCtL,EAAsBkR,EAAsB,KAAtC9R,EAAgB8R,EAAsB,YACnCE,EAA4CJ,EAAoB,QAAvCK,EAAmBL,EAAoB,WAE/E,kBAAC,EAAAlC,KAAI,CAACC,SAAUR,IACZjS,GACA,kBAAC,EAAA0S,UAAS,KACR,kBAAC,EAAAP,MAAK,CAAC1R,QAAQ,SAASZ,MAAOS,EAAE,6BAA4B,YAAY,SAASqN,UAAQ,KAG9F,kBAAC,EAAAgF,UAAS,CACRtQ,MAAM,OACNyQ,YAAU,EACVE,QAAQ,kBACRH,kBAAmB3B,EACnB6B,UAAWhE,EACX6D,WAAYtS,EAAE,2CAEd,kBAAC,EAAAmD,UAAS,CACRqP,YAAU,EACV7R,KAAK,OACLZ,GAAG,kBACHqD,KAAK,kBACLV,MAAOU,EACPT,SAAU+R,EACVjC,UAAWhE,EACXpL,WAAW,KAGf,kBAAC,EAAAgP,UAAS,CACRtQ,MAAM,cACN2Q,QAAQ,yBACRH,kBAAmBiC,EACnB/B,UAAWgC,EACXnC,WAAYtS,EAAE,+CAEd,kBAAC,EAAA+U,SAAQ,CACPhV,GAAG,yBACHqD,KAAK,yBACLV,MAAOF,EACPG,SAAUgS,EACVlC,UAAWgC,SClNjBO,EAAuB,WACnB,IAAAhV,GAAM,IAAAC,kBAAgB,EACxB+N,GAAO,IAAAC,WACeC,GAAe,IAAAC,aAAW,gBAC9CC,GAAa,IAAAC,YAAU,SACzB,GAAuB,UAArBjJ,EAAK,QAAEC,EAAS,YAClB,GAAmDD,aAAK,EAALA,EAAOnE,aAAc,GAAtEkT,EAAoB,uBAAEc,EAAsB,yBAE9C,GAA4B,IAAA1P,WAAkB,GAA7CxE,EAAS,KAAEmU,EAAY,KAExB1V,EAAoB,WACxB6F,KAwCF,OACE,kBAAC,KAAc,CACbhG,aAAa,EACbG,kBAAmBA,EACnBD,MAAOS,EAAE,yCAA2C,IACpDkB,mBAAoB,CAClBN,QAAS,WAAM,OA3CeuU,EA2CMF,GA3C4C,gD,iFAEpF,QAAyBnL,KADnBsL,EAAmBD,aAAc,EAAdA,EAAgBpV,IAEvC,MAAM,IAAIsV,MAAM,kCAEE,SAAMrH,aAAI,EAAJA,EAAMsB,IAAIC,Y,YAA9BC,EAAc,UAChB,YACIuB,EAAc,IAAI,KAAW,CACjCvB,YAAW,EACXtB,SAAQ,IAEVgH,GAAa,G,iBAGX,O,sBAAA,GAAMnE,EAAYuE,qBAAqBF,GAAkB1F,MAAK,SAACW,GAC7D7Q,IACA0V,GAAa,GAEb9G,EACEpO,EAAE,sDAAuD,CAAEoD,KAAM+R,aAAc,EAAdA,EAAgB/R,OACjF,EAAAkN,aAAA,SAEF6D,Q,cARF,S,+BAWI/D,OAAM,GACN,QAAkB,KACpBA,EAAuB,QAAd,IAAMC,gBAAQ,eAAER,KAAKO,QAGhC5Q,IACA0V,GAAa,GACb9G,EAASpO,EAAE,+BAAgC,EAAAsQ,aAAA,OAAqBF,G,8BAhCzC,IAAO+E,GA4C9BpT,MAAO,SACPhB,UAAS,IAGX,2BAAG,2BAAIkU,aAAsB,EAAtBA,EAAwB7R,M,IAAWpD,EAAE,qC,WC7D5CuV,EAA+C,WAC3C,IAAAvV,GAAM,IAAAC,kBAAgB,EACxB+N,GAAO,IAAAC,WACeC,GAAe,IAAAC,aAAW,gBAC9CC,GAAa,IAAAC,YAAU,SACzB,GAAkC,UAAhCjJ,EAAK,QAAE8O,EAAS,YAAE7O,EAAS,YAC3BmQ,IAA0BpQ,aAAK,EAALA,EAAOnE,aAAc,IAAE,sBAEnD,GAAsC,IAAAsE,WAAS,GAA9CkQ,EAAc,KAAEC,EAAiB,KAUlCC,EAAsB,SAAOR,GAAc,uD,2EAE3B,OADdC,EAAmBD,aAAc,EAAdA,EAAgBpV,GACrB,GAAMiO,aAAI,EAAJA,EAAMsB,IAAIC,Y,YAA9BC,EAAc,UAChB,Y,iBAOA,O,sBALMuB,EAAc,IAAI,KAAW,CACjCvB,YAAW,EACXtB,SAAQ,IAEVwH,GAAkB,GAClB,GAAM3E,EAAY6E,yBAAyBR,GAAkB1F,MAAK,SAACW,GACjE,IAAM/K,EAAa+K,aAAQ,EAARA,EAAUR,KAC7BxK,IACAqQ,GAAkB,GAClBxB,EAAU,0BAAkC,CAC1C5O,WAAU,EACV/F,MAAOS,EAAE,0D,cANb,S,oBAlBoB,SAAC6U,G,MACrBzE,GACA,QAAkByE,KACpBzE,EAAuB,QAAd,EAAAyE,EAAMxE,gBAAQ,eAAER,KAAKO,QAEhChC,EAASpO,EAAE,wBAAyB,EAAAsQ,aAAA,OAAqBF,GAuBrD0E,C,UACAY,GAAkB,G,+BAKlBlW,EAAoB,WACxB6F,KAGI+P,EAAmBI,aAAqB,EAArBA,EAAuBpS,KAC1CkD,EAAWkP,aAAqB,EAArBA,EAAuBlP,SAExC,OACE,kBAAC,EAAApG,MAAK,CACJH,GAAG,8BACHI,QAAS,EAAAC,aAAA,OACTb,MAAUS,EAAE,oDAAmD,IAC/DK,QAAQ,EACRC,QAASd,EACTe,SAAU,KACVC,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLC,IAAI,SACJP,QAAQ,UACRQ,KAAK,SACLC,QAAS,WAAM,OAAA+U,EAAoBH,IACnC1U,qBAAsBd,EAAE,6BACxBe,UAAW0U,GAEVzV,EAAE,yBAEL,kBAAC,EAAAS,OAAM,CAACC,IAAI,SAASP,QAAQ,OAAOS,QAASpB,GAC1CQ,EAAE,oBAIP,0BACEgD,wBAAyB,CACvBC,OAAQjD,EAAE,6CAA8C,CAAEoV,iBAAgB,EAAE9O,SAAQ,U,sDC5E9F,IAIKuP,EAJCC,EAAoB,SAACjB,G,MACzB,YAAoE/K,KAAhB,QAA7C,EAAC+K,EAAoCxE,gBAAQ,eAAER,KAAKoB,QAG7D,SAAK4E,GACH,oCACA,2CAFF,CAAKA,MAAU,M,0VCKFE,EAAY,4BAA4BC,QAAQ,OAAQ,IA4BrE,EAGI,SAAYC,EAAyC/H,EAAwCgI,QAAxC,IAAAhI,MAAA,QAAwC,IAAAgI,MAAA,KAAxC,KAAAhI,WAAwC,KAAAgI,QACrFD,IACA7J,KAAK6J,cAAgBA,EACrB7J,KAAK8B,SAAW+H,EAAc/H,UAAY9B,KAAK8B,WAW3D,cAEI,WAAmBiI,EAAeC,GAAlC,MACI,YAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAA/S,KAAwB,gB,EAI5B,OALmC,oBAKnC,EALA,CAAmCiS,OCu+BtBgB,EAA8B,SAAUJ,GAAV,WACvC,MAAO,CASHjF,YAAa,SAAOsF,EAAgBC,EAA0CC,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAErG,GAAIH,QACA,MAAM,IAAII,EAAc,QAAQ,4EAGpC,GAAIH,QACA,MAAM,IAAIG,EAAc,sBAAsB,0FAqClD,MAnCqB,6BACfC,EAAiB,KADF,8BACsC,GAEvDV,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBJ,GAC9DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,QAG7C1F,IAAVwM,IACAU,EAA8B,MAAIV,GAKtCS,EAAwB,gBAAkB,mBAE1CJ,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAC9FC,EAAqD,iBAAxBb,GAAwF,qBAAnDM,EAAuBM,QAAQ,gBACvGN,EAAuBhH,KAAQuH,EAAqBC,KAAKC,eAAkCxN,IAAxByM,EAAoCA,EAAsB,IAAOA,GAAuB,GAEpJ,CAAP,EAAO,CACHgB,IAAK,KAAuBZ,GAC5BH,QAASK,WAUjBjC,qBAAsB,SAAO4C,EAA8ChB,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAElG,GAAIe,QACA,MAAM,IAAId,EAAc,wBAAwB,qGAiCpD,MA/BqB,sCACfC,EAAiB,KADF,uCACsC,GAEvDV,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBJ,GAC9DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAK3DuH,EAAwB,gBAAkB,mBAE1CJ,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAC9FC,EAAuD,iBAA1BI,GAA0F,qBAAnDX,EAAuBM,QAAQ,gBACzGN,EAAuBhH,KAAQuH,EAAqBC,KAAKC,eAAoCxN,IAA1B0N,EAAsCA,EAAwB,IAAOA,GAAyB,GAE1J,CAAP,EAAO,CACHD,IAAK,KAAuBZ,GAC5BH,QAASK,WAWjBY,gBAAiB,SAAO1X,EAAYuW,EAAgBE,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAE3E,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,6EAGjC,GAAIJ,QACA,MAAM,IAAII,EAAc,QAAQ,gFAkCpC,OAhCMgB,EAAe,kCAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBJ,GAChEO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,QAG7C1F,IAAVwM,IACAU,EAA8B,MAAIV,GAKtCK,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAUjBvB,qBAAsB,SAAOvV,EAAYyW,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAEhE,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,kFA8BjC,OA5BMgB,EAAe,2CAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBJ,GAChEO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAK3DmH,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAUjBgB,aAAc,SAAO9X,EAAYyW,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAExD,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,0EA8BjC,OA5BMgB,EAAe,kCAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAK3DmH,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAWjBiB,yBAA0B,SAAO/X,EAAYgY,EAAyBvB,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAE7F,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,sFAkCjC,OAhCMgB,EAAe,gDAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAGvDuI,IACAf,EAAgC,QAAIe,GAKxCpB,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAajBmB,uBAAwB,SAAOjY,EAAYkY,EAAkBC,EAAkBH,EAAyBvB,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAE/H,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,oFAGjC,GAAIuB,QACA,MAAM,IAAIvB,EAAc,WAAW,0FAGvC,GAAIwB,QACA,MAAM,IAAIxB,EAAc,WAAW,0FA0CvC,OAxCMgB,EAAe,sDAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,QAG1C1F,IAAbmO,IACAjB,EAAiC,SAAIiB,QAGxBnO,IAAboO,IACAlB,EAAiC,SAAIkB,GAGrCH,IACAf,EAAgC,QAAIe,GAKxCpB,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAUjBsB,sBAAuB,SAAOpY,EAAYyW,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAEjE,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,mFA8BjC,OA5BMgB,EAAe,2CAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAK3DmH,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAYjBpH,yBAA0B,SAAO1P,EAAYkH,EAAetC,EAAe6R,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAElG,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,sFAsCjC,OApCMgB,EAAe,mDAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,QAG9C1F,IAAT7C,IACA+P,EAA6B,KAAI/P,QAGxB6C,IAATnF,IACAqS,EAA6B,KAAIrS,GAKrCgS,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAWjBuB,mBAAoB,SAAOnR,EAAetC,EAAe6R,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,4DAoChF,MAnCqB,sCACfE,EAAiB,KADF,uCACsC,GAEvDV,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,QAG9C1F,IAAT7C,IACA+P,EAA6B,KAAI/P,QAGxB6C,IAATnF,IACAqS,EAA6B,KAAIrS,GAKrCgS,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAajBwB,WAAY,SAAOpR,EAAetC,EAAe2T,EAAkB1Q,EAAiB4O,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,4DA4C3G,MA3CqB,6BACfE,EAAiB,KADF,8BACsC,GAEvDV,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,QAG9C1F,IAAT7C,IACA+P,EAA6B,KAAI/P,QAGxB6C,IAATnF,IACAqS,EAA6B,KAAIrS,QAGrBmF,IAAZwO,IACAtB,EAAgC,QAAIsB,QAGzBxO,IAAXlC,IACAoP,EAA+B,OAAIpP,GAKvC+O,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WASjB0B,oBAAqB,SAAO/B,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,4DA4BnD,MA3BqB,sCACfE,EAAiB,KADF,uCACsC,GAEvDV,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAK3DmH,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WAUjBjB,yBAA0B,SAAO7V,EAAYyW,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,8DAEpE,GAAI1W,QACA,MAAM,IAAI2W,EAAc,KAAK,sFA8BjC,OA5BMgB,EAAe,6DAChB1B,QAAQ,OAAa2B,mBAAmBC,OAAO7X,KAC9C4W,EAAiB,KAAsBe,GAAc,GAEvDzB,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBJ,GAC9DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAK3DmH,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WASjB2B,cAAe,SAAOhC,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,4DA4B7C,MA3BqB,6BACfE,EAAiB,KADF,8BACsC,GAEvDV,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI3Bf,GAAiBA,EAAczG,cACzBA,EAAmD,mBAA9ByG,EAAczG,YACnCyG,EAAczG,cACdyG,EAAczG,YACpBuH,EAAuC,cAAI,UAAYvH,GAK3DmH,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,WASjB4B,gBAAiB,SAAOjC,G,YAAA,IAAAA,MAAA,K,wBAAoBC,SAAO,W,0DAmB/C,MAlBqB,sBACfE,EAAiB,KADF,uBACsC,GAEvDV,IACAW,EAAcX,EAAcW,aAE1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBJ,GAC7DO,EAA0B,GAC1BC,EAAyB,GAI/BL,EAAeM,OAAQ,+CAAIN,EAAeM,OAAUD,GAA2BR,EAAQS,cAEhFN,EAAe/O,OAClBsP,EAAyBN,GAAeA,EAAYO,QAAUP,EAAYO,QAAU,GACxFN,EAAuBM,SAAU,+CAAIJ,GAA4BG,GAA2BV,EAAQW,SAE7F,CAAP,EAAO,CACHI,IAAK,KAAuBZ,GAC5BH,QAASK,aAUZ6B,EAAe,SAASzC,GACjC,MAAO,CASGjF,YAAN,SAAkBsF,EAAgBC,EAA0CC,G,kCAAgBC,SAAO,W,uEACrE,SAAMJ,EAA4BJ,GAAejF,YAAYsF,EAAOC,EAAqBC,I,OACnH,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAUvBhE,qBAAN,SAA2B4C,EAA8ChB,G,kCAAgBC,SAAO,W,uEAClE,SAAMJ,EAA4BJ,GAAerB,qBAAqB4C,EAAuBhB,I,OACvH,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAWvBnB,gBAAN,SAAsB1X,EAAYuW,EAAgBE,G,kCAAgBC,SAAO,W,uEAC3C,SAAMJ,EAA4BJ,GAAewB,gBAAgB1X,EAAIuW,EAAOE,I,OACtG,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAUvBtD,qBAAN,SAA2BvV,EAAYyW,G,kCAAgBC,SAAO,W,uEAChC,SAAMJ,EAA4BJ,GAAeX,qBAAqBvV,EAAIyW,I,OACpG,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAUvBf,aAAN,SAAmB9X,EAAYyW,G,kCAAgBC,SAAO,W,uEACxB,SAAMJ,EAA4BJ,GAAe4B,aAAa9X,EAAIyW,I,OAC5F,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAWvBd,yBAAN,SAA+B/X,EAAYgY,EAAyBvB,G,kCAAgBC,SAAO,W,uEAC7D,SAAMJ,EAA4BJ,GAAe6B,yBAAyB/X,EAAIgY,EAASvB,I,OACjH,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAavBZ,uBAAN,SAA6BjY,EAAYkY,EAAkBC,EAAkBH,EAAyBvB,G,kCAAgBC,SAAO,W,uEAC/F,SAAMJ,EAA4BJ,GAAe+B,uBAAuBjY,EAAIkY,EAAUC,EAAUH,EAASvB,I,OACnI,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAUvBT,sBAAN,SAA4BpY,EAAYyW,G,kCAAgBC,SAAO,W,uEACjC,SAAMJ,EAA4BJ,GAAekC,sBAAsBpY,EAAIyW,I,OACrG,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAYvBnJ,yBAAN,SAA+B1P,EAAYkH,EAAetC,EAAe6R,G,kCAAgBC,SAAO,W,uEAClE,SAAMJ,EAA4BJ,GAAexG,yBAAyB1P,EAAIkH,EAAMtC,EAAM6R,I,OACpH,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAWvBR,mBAAN,SAAyBnR,EAAetC,EAAe6R,G,kCAAgBC,SAAO,W,uEAChD,SAAMJ,EAA4BJ,GAAemC,mBAAmBnR,EAAMtC,EAAM6R,I,OAC1G,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAavBP,WAAN,SAAiBpR,EAAetC,EAAe2T,EAAkB1Q,EAAiB4O,G,kCAAgBC,SAAO,W,uEAC3E,SAAMJ,EAA4BJ,GAAeoC,WAAWpR,EAAMtC,EAAM2T,EAAS1Q,EAAQ4O,I,OACnH,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aASvBL,oBAAN,SAA0B/B,G,kCAAgBC,SAAO,W,uEACnB,SAAMJ,EAA4BJ,GAAesC,oBAAoB/B,I,OAC/F,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aAUvBhD,yBAAN,SAA+B7V,EAAYyW,G,kCAAgBC,SAAO,W,uEACpC,SAAMJ,EAA4BJ,GAAeL,yBAAyB7V,EAAIyW,I,OACxG,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aASvBJ,cAAN,SAAoBhC,G,kCAAgBC,SAAO,W,uEACb,SAAMJ,EAA4BJ,GAAeuC,cAAchC,I,OACzF,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,aASvBH,gBAAN,SAAsBjC,G,kCAAgBC,SAAO,W,uEACf,SAAMJ,EAA4BJ,GAAewC,gBAAgBjC,I,OAC3F,OADMmC,EAAoB,SACnB,CAAP,EAAO,SAACzC,EAAoChI,QAApC,IAAAgI,MAAA,UAAoC,IAAAhI,MAAA,GACxC,IAAM0K,GAAmB,gCAAID,EAAkBnC,SAAO,CAAEe,IAAKrJ,EAAWyK,EAAkBpB,MAC1F,OAAOrB,EAAM2C,QAAQD,eA2VrC,2B,+CA8LA,OA9LgC,oBAUrB,YAAA5H,YAAP,SAAmBsF,EAAgBC,EAA0CC,GAA7E,WACI,OAAOkC,EAAatM,KAAK6J,eAAejF,YAAYsF,EAAOC,EAAqBC,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAWjI,YAAA0G,qBAAP,SAA4B4C,EAA8ChB,GAA1E,WACI,OAAOkC,EAAatM,KAAK6J,eAAerB,qBAAqB4C,EAAuBhB,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAYrI,YAAAuJ,gBAAP,SAAuB1X,EAAYuW,EAAgBE,GAAnD,WACI,OAAOkC,EAAatM,KAAK6J,eAAewB,gBAAgB1X,EAAIuW,EAAOE,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAWpH,YAAAoH,qBAAP,SAA4BvV,EAAYyW,GAAxC,WACI,OAAOkC,EAAatM,KAAK6J,eAAeX,qBAAqBvV,EAAIyW,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAWlH,YAAA2J,aAAP,SAAoB9X,EAAYyW,GAAhC,WACI,OAAOkC,EAAatM,KAAK6J,eAAe4B,aAAa9X,EAAIyW,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAY1G,YAAA4J,yBAAP,SAAgC/X,EAAYgY,EAAyBvB,GAArE,WACI,OAAOkC,EAAatM,KAAK6J,eAAe6B,yBAAyB/X,EAAIgY,EAASvB,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAc/H,YAAA8J,uBAAP,SAA8BjY,EAAYkY,EAAkBC,EAAkBH,EAAyBvB,GAAvG,WACI,OAAOkC,EAAatM,KAAK6J,eAAe+B,uBAAuBjY,EAAIkY,EAAUC,EAAUH,EAASvB,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAWjJ,YAAAiK,sBAAP,SAA6BpY,EAAYyW,GAAzC,WACI,OAAOkC,EAAatM,KAAK6J,eAAekC,sBAAsBpY,EAAIyW,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAanH,YAAAuB,yBAAP,SAAgC1P,EAAYkH,EAAetC,EAAe6R,GAA1E,WACI,OAAOkC,EAAatM,KAAK6J,eAAexG,yBAAyB1P,EAAIkH,EAAMtC,EAAM6R,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAYlI,YAAAkK,mBAAP,SAA0BnR,EAAetC,EAAe6R,GAAxD,WACI,OAAOkC,EAAatM,KAAK6J,eAAemC,mBAAmBnR,EAAMtC,EAAM6R,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAcxH,YAAAmK,WAAP,SAAkBpR,EAAetC,EAAe2T,EAAkB1Q,EAAiB4O,GAAnF,WACI,OAAOkC,EAAatM,KAAK6J,eAAeoC,WAAWpR,EAAMtC,EAAM2T,EAAS1Q,EAAQ4O,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAUjI,YAAAqK,oBAAP,SAA2B/B,GAA3B,WACI,OAAOkC,EAAatM,KAAK6J,eAAesC,oBAAoB/B,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAW7G,YAAA0H,yBAAP,SAAgC7V,EAAYyW,GAA5C,WACI,OAAOkC,EAAatM,KAAK6J,eAAeL,yBAAyB7V,EAAIyW,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAUtH,YAAAsK,cAAP,SAAqBhC,GAArB,WACI,OAAOkC,EAAatM,KAAK6J,eAAeuC,cAAchC,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAUvG,YAAAuK,gBAAP,SAAuBjC,GAAvB,WACI,OAAOkC,EAAatM,KAAK6J,eAAewC,gBAAgBjC,GAAS9G,MAAK,SAACmJ,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKhI,cAGpH,EA9LA,CAAgC4K","file":"468.e7b6abda.js","sourcesContent":["import React from 'react';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { getModalAppendTo } from '@app/utils/utils';\n\nexport type MASCreateModalProps = {\n  id?: string;\n  isModalOpen: boolean;\n  children?: React.ReactNode;\n  title: string;\n  handleModalToggle: () => void;\n  onCreate: () => void;\n  isFormValid: boolean;\n  isCreationInProgress: boolean;\n  primaryButtonTitle: string;\n  dataTestIdSubmit?: string;\n  dataTestIdCancel?: string;\n};\n\nexport const MASCreateModal: React.FunctionComponent<MASCreateModalProps> = ({\n  isModalOpen,\n  children,\n  title,\n  handleModalToggle,\n  onCreate,\n  isFormValid,\n  isCreationInProgress,\n  primaryButtonTitle,\n  dataTestIdSubmit,\n  dataTestIdCancel,\n  id = 'modalCreateKafka',\n}: MASCreateModalProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      id={id}\n      variant={ModalVariant.medium}\n      title={title}\n      isOpen={isModalOpen}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={onCreate}\n          isDisabled={!isFormValid || isCreationInProgress}\n          spinnerAriaValueText={t('submitting_request')}\n          isLoading={isCreationInProgress}\n          data-testid={dataTestIdSubmit}\n        >\n          {primaryButtonTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle} data-testid={dataTestIdCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  Text,\n  ButtonProps,\n  TextProps,\n  TextInput,\n  TextInputProps,\n} from '@patternfly/react-core';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport './MASDeleteModal.css';\n\nexport type MASDeleteModalProps = {\n  isModalOpen: boolean;\n  title: string;\n  modalProps?: Omit<ModalProps, 'children' | 'ref'>;\n  handleModalToggle: () => void;\n  children?: React.ReactNode;\n  selectedItemData?: any;\n  confirmButtonProps?: Omit<ButtonProps, 'children' | 'onClick'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n    onClick?: (data?: any) => Promise<void> | void;\n    'data-testid'?: string;\n  };\n  cancelButtonProps?: Omit<ButtonProps, 'children'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n  };\n  textProps?: Omit<TextProps, 'children'> & {\n    description?: string;\n  };\n  textInputProps?: TextInputProps & {\n    showTextInput: boolean;\n    label: string;\n    value: string | undefined;\n  };\n};\n\nexport const MASDeleteModal: React.FC<MASDeleteModalProps> = ({\n  isModalOpen,\n  title,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  children,\n  selectedItemData = '',\n  textInputProps,\n}: MASDeleteModalProps) => {\n  const {\n    variant = ModalVariant.small,\n    titleIconVariant = 'warning',\n    ['aria-label']: ariaLabel,\n    showClose = true,\n    ...restModalProps\n  } = modalProps || {};\n\n  const {\n    id = 'mas--confirm__button',\n    key = 'confirm-button',\n    variant: buttonConfirmVariant = ButtonVariant.danger,\n    onClick: onClickConfirmButton,\n    isDisabled: isDisabledConfirmButton,\n    label: confirmActionLabel = 'Delete',\n    ...restConfirmButtonProps\n  } = confirmButtonProps || {};\n\n  const {\n    id: cancelButtonId = 'mas--cancel__button',\n    key: cancelButtonKey = '\"cancel-button',\n    variant: cancelButtonVariant = ButtonVariant.link,\n    onClick: onClickCancelButton,\n    isDisabled: isDisabledCancelButton,\n    label: cancelActionLabel = 'Cancel',\n    ...restCancelButtonProps\n  } = cancelButtonProps || {};\n\n  const { className = 'mas--delete-item__modal--text', description, ...restTextProps } = textProps || {};\n  const { label = '', name, value, onChange, onKeyPress, showTextInput, ...restInputFieldProps } = textInputProps || {};\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={ariaLabel}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={showClose}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          id={id}\n          key={key}\n          variant={buttonConfirmVariant}\n          onClick={() => onClickConfirmButton && onClickConfirmButton(selectedItemData)}\n          isDisabled={isDisabledConfirmButton}\n          {...restConfirmButtonProps}\n        >\n          {confirmActionLabel}\n        </Button>,\n        <Button\n          id={cancelButtonId}\n          key={cancelButtonKey}\n          variant={cancelButtonVariant}\n          onClick={handleModalToggle}\n          {...restCancelButtonProps}\n        >\n          {cancelActionLabel}\n        </Button>,\n      ]}\n      {...restModalProps}\n    >\n      {description && (\n        <Text className={className} dangerouslySetInnerHTML={{ __html: description || '' }} {...restTextProps} />\n      )}\n      {showTextInput && (\n        <>\n          <label htmlFor=\"mas-name-input\" dangerouslySetInnerHTML={{ __html: label }} />\n          <TextInput\n            id=\"mas--name__input\"\n            name=\"mas-name-input\"\n            type=\"text\"\n            value={value}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            autoFocus={true}\n            {...restInputFieldProps}\n          />\n        </>\n      )}\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/common';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: React.ReactNode;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n  inlineAlertMessage,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } = drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent widths={widths || { default: 'width_50' }} {...restDrawerPanelContentProps}>\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text component={text?.component || TextVariants.small} className={text?.className || 'pf-u-mb-0'}>\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'pf-u-mt-0'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer isExpanded={isExpanded} onExpand={onExpand} data-ouia-app-id={dataOuiaAppId}>\n      <DrawerContent\n        panelContent={panelContent}\n        className={notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''}\n      >\n        <DrawerContentBody className=\"pf-u-display-flex pf-u-flex-direction-column\"> {children}</DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyStateVariant,\n  InputGroup,\n  InputGroupText,\n  TitleSizes,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport KeyIcon from '@patternfly/react-icons/dist/js/icons/key-icon';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport { useTranslation } from 'react-i18next';\nimport { MASEmptyState, MASLoading, useRootModalContext } from '@app/common';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport './MASGenerateCredentialsModal.css';\n\nconst MASGenerateCredentialsModal = () => {\n  const { t } = useTranslation();\n  const { store, hideModal } = useRootModalContext();\n  const { credential, isLoading, title } = store?.modalProps || {};\n\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const handleClose = () => {\n    hideModal();\n    setConfirmationCheckbox(false);\n  };\n\n  const handleChangeCheckbox = (checked: boolean) => {\n    setConfirmationCheckbox(checked);\n  };\n\n  const generateCredentials = (\n    <>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t('credentials_successfully_generated'),\n          headingLevel: 'h2',\n          size: TitleSizes.lg,\n        }}\n      >\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t('connect_to_the_kafka_instance_using_this_clientID_and_secret')}\n          </Text>\n        </TextContent>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t('client_id')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientID\"\n            textAriaLabel={t('client_id')}\n          >\n            {credential?.clientID}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t('common.client_secret')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientSecret\"\n            textAriaLabel={t('common.client_secret')}\n          >\n            {credential?.clientSecret}\n          </ClipboardCopy>\n        </InputGroup>\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t('create_service_account_credentials_warning_message')}\n          </Text>\n        </TextContent>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button\n          variant=\"primary\"\n          isDisabled={!confirmationCheckbox}\n          onClick={handleClose}\n          data-testid=\"modalCredentials-buttonClose\"\n        >\n          {t('close')}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={title || t('serviceAccount.create_a_service_account')}\n      isOpen={true}\n      onClose={handleClose}\n      showClose={false}\n      appendTo={getModalAppendTo}\n    >\n      {isLoading ? <MASLoading /> : generateCredentials}\n    </Modal>\n  );\n};\n\nexport { MASGenerateCredentialsModal };\n","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport type PaginationProps = Omit<PFPaginationProps, 'children' | 'ref'>;\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { createContext, useContext } from 'react';\nimport { InstanceStatus } from '@app/utils';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (event: any, rowIndex: number, row: any) => void;\n  rowDataTestId?: string;\n  loggedInUser: string | undefined;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => {},\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps) => {\n  const { activeRow, onRowClick, rowDataTestId, loggedInUser } = useContext(CustomRowWrapperContext);\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n  const isRowDeleted =\n    originalData?.status === InstanceStatus.DEPROVISION || originalData?.status === InstanceStatus.DELETED;\n  const isLoggedInUserOwner = loggedInUser === originalData?.owner;\n  const isRowDisabled = isRowDeleted || !isLoggedInUserOwner;\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={!isRowDisabled ? 0 : undefined}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        isRowDeleted ? 'pf-m-disabled' : isLoggedInUserOwner && 'pf-m-selectable',\n        !isRowDisabled && activeRow && activeRow === originalData?.name && 'pf-m-selected'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: any) => !isRowDisabled && onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { CustomRowWrapper, CustomRowWrapperProvider, CustomRowWrapperContextProps } from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    hasDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    rowWrapper,\n    hasDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (hasDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(hasDefaultCustomRowWrapper && 'mas--streams-table-view__table', className)}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: JSX.Element;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: any;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          { toggleGroupProps && (\n            <ToolbarToggleGroup toggleIcon={toggleGroupProps.toggleIcon} breakpoint='md' {...toggleGroupProps}>\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = true;\n    this.region = '';\n    this.name = '';\n  }\n}\n","export class NewServiceAccount {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { QuickStartContext, QuickStartContextValues } from '@cloudmosaic/quickstarts';\n\nconst DrawerPanelContentInfo = () => {\n\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = React.useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>{t('common.instance_information')}</Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.duration')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>48 hours</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.ingress_egress')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 2 MB/second each</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.storage')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 60 GB</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.partitions')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.client_connections')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.connection_rate')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 50 connections/second</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.message_size')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          </GridItem>\n        </Grid>\n        <Button isSmall isInline variant={ButtonVariant.link} style={{ marginTop: '20px' }} onClick={() => (qsContext.setActiveQuickStart && qsContext.setActiveQuickStart(\"getting-started\"))}>\n          {t('common.quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  AlertVariant,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n  Flex,\n  FlexItem,\n  Divider,\n  Tooltip,\n} from '@patternfly/react-core';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { MASCreateModal, useRootModalContext } from '@app/common';\nimport { ErrorCodes } from '@app/utils';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../../../openapi';\nimport { NewKafka, FormDataValidationState } from '../../../../models';\nimport './CreateInstance.css';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstance = () => {\n  const { t } = useTranslation();\n  const { store, hideModal } = useRootModalContext();\n  const { onCreate, refresh, cloudProviders } = store?.modalProps || {};\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n  const newKafka: NewKafka = new NewKafka();\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData((prevState) => ({ ...prevState, name: '', multi_az: true }));\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await auth?.kas.getToken();\n    const id = provider.id;\n\n    if (accessToken && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data?.items || [];\n          const enabledRegions = providerRegions?.filter((p: CloudProvider) => p.enabled);\n          //set default selected region if there is one region\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevState) => ({ ...prevState, region }));\n          }\n          //add empty provider on top in region list\n          enabledRegions.unshift(emptyProvider);\n          setCloudRegions(enabledRegions);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (cloudProviders.length > 0 && cloudProviders[0].name) {\n      setKafkaFormData((prevState) => ({ ...prevState, cloud_provider: cloudProviders[0].name }));\n      fetchCloudRegions(cloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    setKafkaFormData((prevState) => ({ ...prevState, cloud_provider: cloudProvider.name || '' }));\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    //validate required field\n    if (!name?.trim()) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    //validate regex\n    else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n    //validate max length\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    //validate required field\n    if (!region.trim()) {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.kas.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        onCreate();\n        setCreationInProgress(true);\n\n        await apisService.createKafka(true, kafkaFormData).then((res) => {\n          resetForm();\n          hideModal();\n          refresh();\n        });\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code, reason } = error?.response?.data || {};\n\n          if (code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n            setIsFormValid(false);\n            setNameValidated({\n              fieldState: 'error',\n              message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n            });\n          } else {\n            addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason, 'toastCreateKafka-failed');\n          }\n        }\n\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && cloudRegionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, cloudRegionValidated.fieldState]);\n\n  const onChangeValidateName = (name: string) => {\n    let isValid = true;\n    setKafkaFormData((prevState) => ({ ...prevState, name }));\n\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name?.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const onChangeCloudRegion = (region: string) => {\n    setKafkaFormData((prevState) => ({ ...prevState, region }));\n    if (region && cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData((prevState) => ({ ...prevState, multi_az: value === 'multi' }));\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={onChangeValidateName}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map((provider: CloudProvider) => {\n            const { name, display_name = '' } = provider;\n            return (\n              <Tile\n                key={`tile-${name}`}\n                title={display_name}\n                icon={getTileIcon(name)}\n                isSelected={cloud_provider === name}\n                onClick={() => onCloudProviderSelect(provider)}\n              />\n            );\n          })}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n          isRequired\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={onChangeCloudRegion}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(({ id, display_name = '' }: CloudRegion, index) => (\n              <FormSelectOption key={index} value={id} label={id ? t(id) : display_name} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <Tooltip content={t('kafkaInstance.availabilty_zones_tooltip_message')}>\n              <ToggleGroupItem\n                text={t('single')}\n                value={'single'}\n                isDisabled\n                buttonId=\"single\"\n                isSelected={isMultiSelected}\n                onChange={onChangeAvailabilty}\n              />\n            </Tooltip>\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n              reference={() => document.getElementById('multi')}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      isModalOpen={true}\n      title={t('create_a_kafka_instance')}\n      handleModalToggle={handleModalToggle}\n      onCreate={onCreateInstance}\n      isFormValid={isFormValid}\n      primaryButtonTitle={t('create_instance')}\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateKafka-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateKafka-buttonCancel\"\n    >\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        title=\"Your preview instance will expire after 48 hours.\"\n        aria-live=\"polite\"\n        isInline\n      />\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>{createInstanceForm()}</FlexItem>\n        <Divider isVertical />\n        <FlexItem flex={{ default: 'flex_1' }} className=\"mk--create-instance-modal__sidebar--content\">\n          <DrawerPanelContentInfo />\n        </FlexItem>\n      </Flex>\n    </MASCreateModal>\n  );\n};\n\nexport { CreateInstance };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASDeleteModal, useRootModalContext } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport const DeleteInstance = () => {\n  const { t } = useTranslation();\n  const { store, hideModal } = useRootModalContext();\n  const { title, confirmButtonProps, cancelButtonProps, textProps, instanceStatus, selectedItemData } =\n    store?.modalProps || {};\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n\n  const handleToggle = () => {\n    setInstanceNameInput('');\n    hideModal();\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteKafka-buttonDelete',\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleToggle}\n      textProps={textProps}\n      selectedItemData={selectedItemData}\n      textInputProps={{\n        showTextInput: instanceStatus === InstanceStatus.READY,\n        label: t('instance_name_label', { name: selectedInstanceName }),\n        value: instanceNameInput,\n        onChange: handleInstanceName,\n        onKeyPress,\n        autoFocus: true,\n      }}\n    ></MASDeleteModal>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Alert, Form, FormAlert, FormGroup, TextInput, TextArea, AlertVariant } from '@patternfly/react-core';\nimport { DefaultApi } from '../../../../../openapi/api';\nimport { NewServiceAccount, FormDataValidationState } from '../../../../models';\nimport { MASCreateModal, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError, MAX_SERVICE_ACCOUNT_NAME_LENGTH, MAX_SERVICE_ACCOUNT_DESC_LENGTH } from '@app/utils';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nconst CreateServiceAccount: React.FunctionComponent = () => {\n  const newServiceAccount: NewServiceAccount = new NewServiceAccount();\n  const { store, showModal, hideModal } = useRootModalContext();\n  const { fetchServiceAccounts } = store?.modalProps || {};\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [descriptionValidated, setDescriptionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [serviceAccountFormData, setServiceAccountFormData] = useState<NewServiceAccount>(newServiceAccount);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setNameValidated({ fieldState: 'default' });\n    setDescriptionValidated({ fieldState: 'default' });\n    setServiceAccountFormData(newServiceAccount);\n    setIsFormValid(true);\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && descriptionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, descriptionValidated.fieldState]);\n\n  const handleTextInputName = (name: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, name });\n    let isValid = true;\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name && name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const handleTextInputDescription = (description: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, description });\n    let isValid = true;\n    if (description && !/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n    }\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_description_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    } else if (isValid && descriptionValidated.fieldState === 'error') {\n      setDescriptionValidated({\n        fieldState: 'default',\n        message: '',\n      });\n    } else if (!isValid) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, description } = serviceAccountFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.input_filed_invalid_helper_text'),\n      });\n    } else if (!/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n\n    if (name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    }\n\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    }\n\n    return isValid;\n  };\n\n  const createServiceAccount = async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.kas.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setCreationInProgress(true);\n        await apisService.createServiceAccount(serviceAccountFormData).then((res) => {\n          const credential = res?.data;\n          //close current modal i.e. create service account\n          hideModal();\n          //open generate credential modal\n          showModal(MODAL_TYPES.GENERATE_CREDENTIALS, { credential });\n          resetForm();\n          addAlert(t('serviceAccount.service_account_creation_success_message'), AlertVariant.success);\n          fetchServiceAccounts && fetchServiceAccounts();\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    resetForm();\n    hideModal();\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    createServiceAccount();\n  };\n\n  const createForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, description } = serviceAccountFormData;\n    const { message: descMessage, fieldState: descFieldState } = descriptionValidated;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"text-input-name\"\n          helperTextInvalid={message}\n          validated={fieldState}\n          helperText={t('common.input_filed_invalid_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-name\"\n            name=\"text-input-name\"\n            value={name}\n            onChange={handleTextInputName}\n            validated={fieldState}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Description\"\n          fieldId=\"text-input-description\"\n          helperTextInvalid={descMessage}\n          validated={descFieldState}\n          helperText={t('common.input_text_area_invalid_helper_text')}\n        >\n          <TextArea\n            id=\"text-input-description\"\n            name=\"text-input-description\"\n            value={description}\n            onChange={handleTextInputDescription}\n            validated={descFieldState}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      id=\"modalCreateSAccount\"\n      isModalOpen={true}\n      title={t('serviceAccount.create_a_service_account')}\n      handleModalToggle={handleCreateModal}\n      onCreate={createServiceAccount}\n      isFormValid={isFormValid}\n      primaryButtonTitle=\"Create\"\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateServiceAccount-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateServiceAccount-buttonCancel\"\n    >\n      {createForm()}\n    </MASCreateModal>\n  );\n};\n\nexport { CreateServiceAccount };\n","import React, { useState, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { MASDeleteModal, useRootModalContext } from '@app/common';\nimport { isServiceApiError } from '@app/utils';\nimport { DefaultApi, ServiceAccountListItem } from '../../../../../openapi/api';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nconst DeleteServiceAccount = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n  const { store, hideModal } = useRootModalContext();\n  const { fetchServiceAccounts, serviceAccountToDelete } = store?.modalProps || {};\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const deleteServiceAccount = async (serviceAccount: ServiceAccountListItem | undefined) => {\n    const serviceAccountId = serviceAccount?.id;\n    if (serviceAccountId === undefined) {\n      throw new Error('service account id not defined');\n    }\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath,\n      });\n      setIsLoading(true);\n\n      try {\n        await apisService.deleteServiceAccount(serviceAccountId).then((response) => {\n          handleModalToggle();\n          setIsLoading(false);\n\n          addAlert(\n            t('serviceAccount.service_account_successfully_deleted', { name: serviceAccount?.name }),\n            AlertVariant.success\n          );\n          fetchServiceAccounts();\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        handleModalToggle();\n        setIsLoading(false);\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      handleModalToggle={handleModalToggle}\n      title={t('serviceAccount.delete_service_account') + '?'}\n      confirmButtonProps={{\n        onClick: () => deleteServiceAccount(serviceAccountToDelete),\n        label: 'Delete',\n        isLoading,\n      }}\n    >\n      <p><b>{serviceAccountToDelete?.name}</b> {t('serviceAccount.will_be_deleted')}</p>\n    </MASDeleteModal>\n  );\n};\n\nexport { DeleteServiceAccount };\n","import React, { useState, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal, ModalVariant, AlertVariant } from '@patternfly/react-core';\nimport { useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { isServiceApiError } from '@app/utils';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport { DefaultApi } from '../../../../../openapi/api';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nconst ResetServiceAccount: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n  const { store, showModal, hideModal } = useRootModalContext();\n  const { serviceAccountToReset } = store?.modalProps || {};\n\n  const [isModalLoading, setIsModalLoading] = useState(false);\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const resetServiceAccount = async (serviceAccount) => {\n    const serviceAccountId = serviceAccount?.id;\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setIsModalLoading(true);\n        await apisService.resetServiceAccountCreds(serviceAccountId).then((response) => {\n          const credential = response?.data;\n          hideModal(); // Close first modal\n          setIsModalLoading(false);\n          showModal(MODAL_TYPES.GENERATE_CREDENTIALS, {\n            credential,\n            title: t('serviceAccount.reset_service_account_credentials'),\n          });\n        });\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const serviceAccountId = serviceAccountToReset?.name;\n  const clientID = serviceAccountToReset?.clientID;\n\n  return (\n    <Modal\n      id=\"reset-service-account-modal\"\n      variant={ModalVariant.medium}\n      title={`${t('serviceAccount.reset_service_account_credentials')}?`}\n      isOpen={true}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={() => resetServiceAccount(serviceAccountToReset)}\n          spinnerAriaValueText={t('common.submitting_request')}\n          isLoading={isModalLoading}\n        >\n          {t('serviceAccount.reset')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <span\n        dangerouslySetInnerHTML={{\n          __html: t('serviceAccount.client_secret_will_be_reset', { serviceAccountId, clientID }),\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport { ResetServiceAccount };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = \"KAFKAS-MGMT-4\",\n  DUPLICATE_INSTANCE_NAME = \"KAFKAS-MGMT-36\"\n}\n\nexport {\n  ErrorCodes,\n  isServiceApiError\n}\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface InstantQuery\n */\nexport interface InstantQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof InstantQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryList\n */\nexport interface MetricsInstantQueryList extends MetricsInstantQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryListAllOf\n */\nexport interface MetricsInstantQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryList\n */\nexport interface MetricsRangeQueryList extends MetricsRangeQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryListAllOf\n */\nexport interface MetricsRangeQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface RangeQuery\n */\nexport interface RangeQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof RangeQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof RangeQuery\n     */\n    values?: Array<Values>;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: string;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * Schema for the service status response body\n * @export\n * @interface ServiceStatus\n */\nexport interface ServiceStatus {\n    /**\n     * \n     * @type {ServiceStatusKafkas}\n     * @memberof ServiceStatus\n     */\n    kafkas?: ServiceStatusKafkas;\n}\n/**\n * The kafka resource api status\n * @export\n * @interface ServiceStatusKafkas\n */\nexport interface ServiceStatusKafkas {\n    /**\n     * Indicates whether we have reached kafka maximum capacity\n     * @type {boolean}\n     * @memberof ServiceStatusKafkas\n     */\n    max_capacity_reached: boolean;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface VersionMetadata\n */\nexport interface VersionMetadata {\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    href?: string;\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadata\n     */\n    collections?: Array<ObjectReference>;\n}\n/**\n * \n * @export\n * @interface VersionMetadataAllOf\n */\nexport interface VersionMetadataAllOf {\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadataAllOf\n     */\n    collections?: Array<ObjectReference>;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByInstantQuery.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getServiceAccountById.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/status`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByInstantQuery(id, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getServiceAccountById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async serviceStatus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceStatus>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).serviceStatus(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async versionMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionMetadata>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).versionMetadata(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {\n            return DefaultApiFp(configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {\n            return DefaultApiFp(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus(options?: any): AxiosPromise<ServiceStatus> {\n            return DefaultApiFp(configuration).serviceStatus(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata(options?: any): AxiosPromise<VersionMetadata> {\n            return DefaultApiFp(configuration).versionMetadata(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    serviceStatus(options?: any): AxiosPromise<ServiceStatus>;\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    versionMetadata(options?: any): AxiosPromise<VersionMetadata>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getServiceAccountById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public serviceStatus(options?: any) {\n        return DefaultApiFp(this.configuration).serviceStatus(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public versionMetadata(options?: any) {\n        return DefaultApiFp(this.configuration).versionMetadata(options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"],"sourceRoot":""}