{"version":3,"file":"4633.1e8990c0.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/aws-icon.js","webpack://kas-ui/./src/app/models/openshiftStreamsModel.ts","webpack://kas-ui/./src/app/models/serviceAccountsModel.ts","webpack://kas-ui/./src/app/models/federated.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.AwsIconConfig = {\n  name: 'AwsIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.37 637.37 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.AwsIcon = require('../createIcon').createIcon(exports.AwsIconConfig);\nexports[\"default\"] = exports.AwsIcon;","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = true;\n    this.region = '';\n    this.name = '';\n  }\n}\n","export class NewServiceAccount {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import React, { useContext } from 'react';\n\nexport type FederatedProps = {\n  tokenEndPointUrl: string;\n  preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n  shouldOpenCreateModal: () => Promise<boolean>;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(undefined);\nexport const useFederated = (): FederatedProps | undefined => useContext(FederatedContext);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { QuickStartContext, QuickStartContextValues } from '@cloudmosaic/quickstarts';\n\nconst DrawerPanelContentInfo: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = React.useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>{t('common.instance_information')}</Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.duration')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>48 hours</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.ingress_egress')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>{t('common.ingress_egress_value')}</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.storage')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>{t('common.storage_value')}</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.partitions')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.client_connections')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.connection_rate')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 50 connections/second</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.message_size')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>{t('common.message_size_value')}</TextListItem>\n          </GridItem>\n        </Grid>\n        <Button\n          isSmall\n          isInline\n          variant={ButtonVariant.link}\n          style={{ marginTop: '20px' }}\n          onClick={() => qsContext.setActiveQuickStart && qsContext.setActiveQuickStart('getting-started')}\n        >\n          {t('common.quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { DrawerPanelContentInfo };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  AlertVariant,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n  Flex,\n  FlexItem,\n  Divider,\n  Tooltip,\n} from '@patternfly/react-core';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { MASCreateModal, useRootModalContext } from '@app/common';\nimport { ErrorCodes } from '@app/utils';\nimport { DefaultApi, CloudProvider, CloudRegion, Configuration } from '@rhoas/kafka-management-sdk';\nimport { NewKafka, FormDataValidationState } from '../../../../models';\nimport './CreateInstance.css';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstance: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { store, hideModal } = useRootModalContext();\n  const { onCreate, refresh, cloudProviders } = store?.modalProps || {};\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { addAlert } = useAlert() || {};\n  const newKafka: NewKafka = new NewKafka();\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData((prevState) => ({ ...prevState, name: '', multi_az: true }));\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await auth?.kas.getToken();\n    const id = provider.id;\n\n    if (accessToken && id) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data?.items || [];\n          const enabledRegions = providerRegions?.filter((p: CloudProvider) => p.enabled);\n          //set default selected region if there is one region\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevState) => ({ ...prevState, region }));\n          }\n          //add empty provider on top in region list\n          enabledRegions.unshift(emptyProvider);\n          setCloudRegions(enabledRegions);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert &&\n          addAlert({\n            title: t('common.something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (cloudProviders?.length > 0 && cloudProviders[0].name) {\n      setKafkaFormData((prevState) => ({ ...prevState, cloud_provider: cloudProviders[0].name }));\n      fetchCloudRegions(cloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    setKafkaFormData((prevState) => ({ ...prevState, cloud_provider: cloudProvider.name || '' }));\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    //validate required field\n    if (!name?.trim()) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    //validate regex\n    else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n    //validate max length\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    //validate required field\n    if (!region.trim()) {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.kas.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        onCreate();\n        setCreationInProgress(true);\n\n        await apisService.createKafka(true, kafkaFormData).then(() => {\n          resetForm();\n          hideModal();\n          refresh();\n        });\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code, reason } = error?.response?.data || {};\n\n          if (code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n            setIsFormValid(false);\n            setNameValidated({\n              fieldState: 'error',\n              message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n            });\n          } else {\n            addAlert &&\n              addAlert({\n                title: t('common.something_went_wrong'),\n                variant: AlertVariant.danger,\n                description: reason,\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && cloudRegionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, cloudRegionValidated.fieldState]);\n\n  const onChangeValidateName = (name: string) => {\n    let isValid = true;\n    setKafkaFormData((prevState) => ({ ...prevState, name }));\n\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name?.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const onChangeCloudRegion = (region: string) => {\n    setKafkaFormData((prevState) => ({ ...prevState, region }));\n    if (region && cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData((prevState) => ({ ...prevState, multi_az: value === 'multi' }));\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={onChangeValidateName}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders?.map((provider: CloudProvider) => {\n            const { name, display_name = '' } = provider;\n            return (\n              <Tile\n                key={`tile-${name}`}\n                title={display_name}\n                icon={getTileIcon(name)}\n                isSelected={cloud_provider === name}\n                onClick={() => onCloudProviderSelect(provider)}\n              />\n            );\n          })}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n          isRequired\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={onChangeCloudRegion}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(({ id, display_name = '' }: CloudRegion, index) => (\n              <FormSelectOption key={index} value={id} label={id ? t(id) : display_name} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <Tooltip content={t('kafkaInstance.availabilty_zones_tooltip_message')}>\n              <ToggleGroupItem\n                text={t('single')}\n                value={'single'}\n                isDisabled\n                buttonId=\"single\"\n                onChange={onChangeAvailabilty}\n              />\n            </Tooltip>\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n              reference={() => document.getElementById('multi') || document.createElement('span')}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      isModalOpen={true}\n      title={t('create_a_kafka_instance')}\n      handleModalToggle={handleModalToggle}\n      onCreate={onCreateInstance}\n      isFormValid={isFormValid}\n      primaryButtonTitle={t('create_instance')}\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateKafka-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateKafka-buttonCancel\"\n    >\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        title=\"Your preview instance will expire after 48 hours.\"\n        aria-live=\"polite\"\n        isInline\n      />\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>{createInstanceForm()}</FlexItem>\n        <Divider isVertical />\n        <FlexItem flex={{ default: 'flex_1' }} className=\"mk--create-instance-modal__sidebar--content\">\n          <DrawerPanelContentInfo />\n        </FlexItem>\n      </Flex>\n    </MASCreateModal>\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","this","cloud_provider","multi_az","region","description","FederatedContext","undefined","useFederated","useContext","DrawerPanelContentInfo","t","useTranslation","qsContext","QuickStartContext","TextContent","Text","component","TextVariants","TextList","TextListVariants","Grid","sm","lg","hasGutter","GridItem","TextListItem","TextListItemVariants","Button","isSmall","isInline","variant","ButtonVariant","style","marginTop","onClick","setActiveQuickStart","emptyProvider","kind","display_name","enabled","CreateInstance","store","hideModal","modalProps","onCreate","refresh","cloudProviders","auth","useAuth","basePath","useConfig","addAlert","useAlert","newKafka","useState","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","prevState","fetchCloudRegions","provider","kas","getToken","accessToken","id","DefaultApi","Configuration","getCloudProviderRegions","then","res","providerRegions","data","items","enabledRegions","filter","p","length","unshift","reason","response","title","AlertVariant","useEffect","onCreateInstance","isValid","trim","test","message","maxLength","validateCreateForm","apisService","createKafka","code","dataTestId","isMultiSelected","onChangeValidateName","onChangeCloudRegion","getTileIcon","toLowerCase","size","color","className","onChangeAvailabilty","isSelected","event","currentTarget","onFormSubmit","preventDefault","isModalOpen","handleModalToggle","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","Alert","Flex","direction","default","FlexItem","flex","Form","onSubmit","FormAlert","FormGroup","label","helperText","helperTextInvalid","isRequired","validated","fieldId","TextInput","type","value","onChange","autoFocus","map","Tile","key","icon","cloudProvider","FormSelect","index","FormSelectOption","ToggleGroup","Tooltip","content","ToggleGroupItem","text","isDisabled","buttonId","reference","document","getElementById","createElement","Divider","isVertical"],"sourceRoot":""}