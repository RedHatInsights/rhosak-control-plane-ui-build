{"version":3,"file":"2741.c9450e67.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/Metrics/Metrics.tsx","webpack://kas-ui/./src/app/modules/Metrics/MetricsFederated.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/utils.ts","webpack://kas-ui/./src/i18n/i18n.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Grid, GridItem, PageSection } from '@patternfly/react-core';\nimport {\n  UsedDiskSpaceChart,\n  IncomingOutgoingBytesPerTopic,\n} from '@app/modules/Metrics/components';\nimport { ChartEmptyState } from './components/ChartEmptyState';\n\nexport interface MetricsProps {\n  kafkaId: string;\n  onCreateTopic: () => void;\n}\n\nexport const Metrics: React.FC<MetricsProps> = ({ kafkaId, onCreateTopic }) => {\n  const [metricsDataUnavailable, setMetricsDataUnavailable] = useState(false);\n\n  const { t } = useTranslation();\n\n  return (\n    <PageSection>\n      {!metricsDataUnavailable ? (\n        <Grid hasGutter>\n          <GridItem>\n            <UsedDiskSpaceChart\n              kafkaID={kafkaId}\n              metricsDataUnavailable={metricsDataUnavailable}\n              setMetricsDataUnavailable={setMetricsDataUnavailable}\n            />\n          </GridItem>\n          <GridItem>\n            <IncomingOutgoingBytesPerTopic\n              metricsDataUnavailable={metricsDataUnavailable}\n              setMetricsDataUnavailable={setMetricsDataUnavailable}\n              kafkaID={kafkaId}\n              onCreateTopic={onCreateTopic}\n            />\n          </GridItem>\n        </Grid>\n      ) : (\n        <ChartEmptyState\n          title={t('metrics.empty_state_no_data_title')}\n          body={t('metrics.empty_state_no_data_body')}\n          noData\n        />\n      )}\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Metrics, MetricsProps } from '@app/modules/Metrics/Metrics';\nimport { initI18N } from '@i18n/i18n';\nimport { I18nextProvider } from 'react-i18next';\n\n// Version of Metrics for federation\n\nconst MetricsFederated: React.FunctionComponent<MetricsProps> = ({\n  kafkaId,\n  onCreateTopic,\n}) => {\n  return (\n    <I18nextProvider i18n={initI18N()}>\n      <Metrics kafkaId={kafkaId} onCreateTopic={onCreateTopic} />\n    </I18nextProvider>\n  );\n};\n\nexport default MetricsFederated;\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string;\n  id: number;\n  kind: string;\n  reason: string;\n}\n\nconst isServiceApiError = (\n  error: unknown\n): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n};\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = 'KAFKAS-MGMT-4',\n  DUPLICATE_INSTANCE_NAME = 'KAFKAS-MGMT-36',\n  PREVIEW_KAFKA_INSTANCE_EXIST = 'KAFKAS-MGMT-24',\n  INSUFFICIENT_QUOTA = 'KAFKAS-MGMT-120',\n  FAILED_TO_CHECK_QUOTA = 'KAFKAS-MGMT-121',\n  OWNER_DOES_NOT_EXIST = 'KAFKAS-MGMT-21',\n}\n\nexport { ErrorCodes, isServiceApiError };\n","import { IRowCell, IRowData } from '@patternfly/react-table';\nimport { formatDistance } from 'date-fns';\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\nenum InstanceStatus {\n  READY = 'ready',\n  ACCEPTED = 'accepted',\n  PREPARING = 'preparing',\n  PROVISIONING = 'provisioning',\n  FAILED = 'failed',\n  DEPROVISION = 'deprovision',\n  DELETED = 'deleting',\n}\n\nenum InstanceType {\n  eval = 'eval',\n  standard = 'standard',\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n  { value: 'deleting', label: 'Deletion in progress' },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n  { value: 'eu-west-1', label: 'EU, Ireland' },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, SÃ£o Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst sortValues = <T>(\n  items: T[] | undefined,\n  key: string,\n  order = 'asc'\n): T[] | undefined => {\n  const compareValue = (a: T, b: T) => {\n    if (\n      !Object.prototype.hasOwnProperty.call(a, key) ||\n      Object.prototype.hasOwnProperty.call(b, key)\n    ) {\n      // property doesn't exist on either object\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order === 'desc' ? comparison * -1 : comparison;\n  };\n  return items?.sort(compareValue);\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === 'string' ? new Date(date) : date;\n  return formatDistance(date, new Date()) + ' ' + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById('chrome-app-render-root') as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || window['opera']);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  sortValues,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\n// import fromNow\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\ndeclare const __webpack_public_path__: string;\n\ndeclare const window: Window & {\n  windowError: string;\n};\n\nexport const initI18N = () => {\n  const params = new URLSearchParams(window.location.search);\n  const pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\n  const kasi18n = i18n.createInstance();\n\n  kasi18n\n    .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n    // fetch json files\n    // learn more: https://github.com/i18next/i18next-http-backend\n    .use(httpBackend)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(detector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init(\n      {\n        backend: {\n          loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n        },\n        fallbackLng: 'en',\n        load: 'all',\n        debug: process.env.NODE_ENV === 'development',\n        detection: { caches: [] },\n        contextSeparator: '~',\n        // add any namespaces you're using here for loading purposes\n        ns: ['public'],\n        defaultNS: 'public',\n        nsSeparator: ':',\n        keySeparator: '.',\n        postProcess: ['pseudo'],\n        interpolation: {\n          format: function (value, format, lng, options) {\n            options = options || {};\n            if (format === 'number') {\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n              return new Intl.NumberFormat(lng).format(value);\n            }\n            if (value instanceof Date) {\n              if (format === 'fromNow') {\n                return dayjs(value).fromNow(options.omitSuffix === true);\n              }\n              return dayjs(value).format(format);\n            }\n            return value;\n          },\n          escapeValue: false, // not needed for react as it escapes by default\n        },\n        react: {\n          useSuspense: true,\n          wait: true,\n        },\n        saveMissing: true,\n        // missingKeyHandler: function (lng, ns, key) {\n        //   // window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        //   // eslint-disable-next-line no-console\n        //   // console.error(window.windowError); // we use these in OpenShift to break tests\n        // },\n      },\n      () => {\n        dayjs.locale(i18n.language);\n      }\n    );\n\n  kasi18n.on('languageChanged', function (lng) {\n    dayjs.locale(lng);\n  });\n\n  return kasi18n;\n};\n"],"names":["Metrics","kafkaId","onCreateTopic","useState","metricsDataUnavailable","setMetricsDataUnavailable","t","useTranslation","PageSection","ChartEmptyState","title","body","noData","Grid","hasGutter","GridItem","kafkaID","I18nextProvider","i18n","ErrorCodes","isServiceApiError","error","undefined","response","data","code","InstanceStatus","InstanceType","cloudProviderOptions","value","label","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_SERVICE_ACCOUNT_NAME_LENGTH","MAX_POLL_INTERVAL","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","Math","floor","sortValues","items","key","order","sort","a","b","Object","prototype","hasOwnProperty","call","varA","toUpperCase","varB","comparison","getFormattedDate","date","translatePostfix","Date","formatDistance","getModalAppendTo","document","getElementById","isMobileTablet","check","navigator","userAgent","vendor","window","test","substr","getSkeletonForRows","loadingCount","skeleton","length","rows","cells","i","push","initI18N","pseudolocalizationEnabled","URLSearchParams","location","search","get","kasi18n","use","enabled","wrapped","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","format","lng","options","Intl","NumberFormat","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","on"],"sourceRoot":""}