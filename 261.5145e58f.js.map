{"version":3,"sources":["webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./node_modules/react-router-dom/esm/react-router-dom.js","webpack://kas-ui/./src/app/api/ApiContext.tsx","webpack://kas-ui/./src/app/auth/AuthContext.tsx","webpack://kas-ui/./src/app/common/MASEmptyState/MASEmptyState.tsx","webpack://kas-ui/./src/app/common/MASFullPageError/MASFullPageError.tsx","webpack://kas-ui/./src/app/components/Alerts/Alerts.tsx","webpack://kas-ui/./src/app/components/ErrorBoundary/ErrorBoundary.tsx","webpack://kas-ui/./src/app/models/models.ts","webpack://kas-ui/./src/app/components/CreateInstanceModal/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://kas-ui/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/GenerateCredential.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/ConnectionTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/DetailsTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/components/ServiceRegistryHeader/ServiceRegistryHeader.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/utils.ts","webpack://kas-ui/./src/openapi/api.ts"],"names":["module","exports","e","LTS","LT","L","LL","LLL","LLLL","t","n","o","r","prototype","M","format","en","formats","this","$locale","replace","toUpperCase","slice","call","BrowserRouter","_React$Component","_this","_len","arguments","length","args","Array","_key","apply","concat","history","createBrowserHistory","props","render","children","HashRouter","createHashHistory","resolveToLocation","to","currentLocation","normalizeToLocation","createLocation","forwardRefShim","C","forwardRef","LinkAnchor","_ref","forwardedRef","innerRef","navigate","_onClick","onClick","rest","target","event","ex","preventDefault","defaultPrevented","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","ref","Link","_ref2","_ref2$component","component","context","location","href","createHref","push","forwardRefShim$1","forwardRef$1","NavLink","_ref$ariaCurrent","ariaCurrent","_ref$activeClassName","activeClassName","activeStyle","classNameProp","className","exact","isActiveProp","isActive","locationProp","sensitive","strict","styleProp","style","toLocation","path","pathname","escapedPath","match","classnames","filter","i","join","joinClassnames","ApiContext","basePath","undefined","AuthContext","MASEmptyState","titleProps","buttonProps","emptyStateIconProps","emptyStateProps","emptyStateBodyProps","variant","ButtonVariant","restButtonProps","icon","PlusCircleIcon","restEmptyStateIconProps","title","size","TitleSizes","headingLevel","restTitleProps","body","restEmptyStateBodyProps","restEmptyStateProps","css","EmptyStateIcon","Title","EmptyStateBody","Button","MASFullPageError","pageSection","PageSectionVariants","restPageSectionProps","PageSection","padding","default","LockIcon","AlertContext","createContext","addAlert","useAlerts","useContext","AlertProvider","useState","alerts","setAlerts","timers","setTimers","useEffect","timersKeys","map","timer","key","timeOuts","alert","includes","timeOut","setTimeout","hideAlert","forEach","clearTimeout","el","Provider","value","dataTestId","AlertVariant","Date","getTime","onCloseAlert","state","hasError","updateState","setState","getDerivedStateFromError","_","componentDidCatch","error","errorInfo","console","UnexpectedError","Component","cloud_provider","multi_az","region","name","DrawerPanelContentInfo","DrawerPanelContent","DrawerHead","TextContent","Text","TextVariants","TextList","TextListVariants","TextListItem","TextListItemVariants","CreateInstanceModalContext","isModalOpen","setIsModalOpen","onCreate","mainToggle","refresh","cloudProviders","CreateInstanceModalProvider","useCreateInstanceModal","emptyProvider","kind","id","display_name","enabled","CreateInstanceModal","useTranslation","authContext","newKafka","NewKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","fetchCloudRegions","provider","getToken","accessToken","listCloudProviderRegions","then","res","providerRegions","data","providers","items","enabledRegions","prevData","reason","response","enableCloudProviders","onCreateInstance","isValid","trim","test","message","maxLength","validateCreateForm","apisService","createKafka","toShowAlert","code","handleModalToggle","handleInstanceNameChange","handleCloudRegionChange","validRegion","getTileIcon","toLowerCase","AwsIcon","color","onChangeAvailabilty","isSelected","currentTarget","onFormSubmit","createInstanceForm","isMultiSelected","Form","onSubmit","FormAlert","Alert","isInline","FormGroup","label","helperText","helperTextInvalid","helperTextInvalidIcon","ExclamationCircleIcon","isRequired","validated","fieldId","TextInput","type","onChange","autoFocus","Tile","cloudProvider","FormSelect","option","index","FormSelectOption","ToggleGroup","ToggleGroupItem","text","isDisabled","buttonId","Modal","ModalVariant","isOpen","onClose","actions","spinnerAriaValueText","isLoading","Drawer","isStatic","DrawerContent","panelContent","DrawerContentBody","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToInstance","getConnectToInstancePath","page","perPage","total","kafkaDataLoaded","onDelete","expectedTotal","filteredValue","setFilteredValue","setFilterSelected","filterSelected","orderBy","setOrderBy","isDrawerOpen","isDeleteModalOpen","setIsDeleteModalOpen","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","tableColumns","transforms","sortable","setItems","loggedInUser","setLoggedInUser","searchParams","URLSearchParams","search","setSearchParam","useCallback","set","toString","getUsername","username","addAlertAfterSuccessDeletion","notPresentKafkas","kafka","status","k","findIndex","dk","allDeletedKafkas","item","prev","Object","assign","splice","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","dangerouslySetInnerHTML","__html","incompleteKafkas","addAlertAfterSuccessCreation","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","renderNameLink","row","instance","onDeleteInstance","instanceId","Error","deleteKafkaById","instanceName","config","confirmActionLabel","description","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","StreamsToolbar","tableProps","cells","rows","tableRow","loadingCount","loadingRowCount","totalPage","Math","floor","getLoadingRowsCount","Skeleton","date","created_at","owner","cloudProviderDisplayName","regionDisplayName","StatusColumn","formatDistance","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","content","pointerEvents","cursor","getActionResolver","onSort","_event","myDirection","property","getParameterForSortIndex","sortBy","onRowClick","rowIndex","clickedEventType","tagName","EmptyStateVariant","widgetId","itemCount","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","DeleteInstanceModal","instanceStatus","selectedItemData","modalProps","confirmButtonProps","textProps","GenerateCredential","steps","isCreated","setIsCreated","setIsOpen","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","credential","setCredential","setIsLoading","setError","onMove","curr","_prev","handleChangeStep1","_checked","checked","handleChangeStep4","step1","placeholder","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","bodyContent","step3","step4","clientID","KeyIcon","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","clientSecret","Bullseye","Checkbox","FlexItem","serviceAccountRequest","createServiceAccount","Wizard","isFinishedStep","unshift","nextButtonText","onNext","onBack","hideClose","ResourcesTab","externalServer","Flex","SampleCodeTab","CopyIcon","ConnectionTab","onSelect","activeKey","Tabs","isSecondary","Tab","eventKey","TabTitleText","DetailsTab","instanceDetail","updated_at","renderTextListItem","Grid","GridItem","span","Card","isFlat","CardBody","InstanceDrawer","activeTab","isExpanded","dataOuiaAppId","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","selectedTab","bootstrapServerHost","handleTab1Click","onSelectConnectionTab","panelBodyContent","endsWith","drawerHeaderProps","ServiceRegistryHeader","onConnectToRegistry","onDeleteRegistry","dropdownItems","DropdownItem","Level","LevelItem","Dropdown","toggle","KebabToggle","onToggle","isPlain","DropdownPosition","ErrorCodes","isServiceApiError","InstanceStatus","cloudProviderOptions","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_POLL_INTERVAL","isValidToken","DefaultApiAxiosParamCreator","configuration","async","kafkaRequestPayload","options","Promise","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","needsSerialization","url","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByKafkaId","duration","interval","filters","listCloudProviders","listKafkas","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axios","axiosRequestArgs","request"],"mappings":"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","file":"261.5145e58f.js","sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.dayjs_plugin_localizedFormat=t()}(this,function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)}}});\n","import { Router, __RouterContext, matchPath } from 'react-router';\nexport { MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter } from 'react-router';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport React from 'react';\nimport { createBrowserHistory, createHashHistory, createLocation } from 'history';\nimport PropTypes from 'prop-types';\nimport warning from 'tiny-warning';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport invariant from 'tiny-invariant';\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createBrowserHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  BrowserRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    forceRefresh: PropTypes.bool,\n    getUserConfirmation: PropTypes.func,\n    keyLength: PropTypes.number\n  };\n\n  BrowserRouter.prototype.componentDidMount = function () {\n    process.env.NODE_ENV !== \"production\" ? warning(!this.props.history, \"<BrowserRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { BrowserRouter as Router }`.\") : void 0;\n  };\n}\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar HashRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createHashHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  HashRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    getUserConfirmation: PropTypes.func,\n    hashType: PropTypes.oneOf([\"hashbang\", \"noslash\", \"slash\"])\n  };\n\n  HashRouter.prototype.componentDidMount = function () {\n    process.env.NODE_ENV !== \"production\" ? warning(!this.props.history, \"<HashRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { HashRouter as Router }`.\") : void 0;\n  };\n}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === \"function\" ? to(currentLocation) : to;\n};\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === \"string\" ? createLocation(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = React.forwardRef;\n\nif (typeof forwardRef === \"undefined\") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"innerRef\", \"navigate\", \"onClick\"]);\n\n  var target = rest.target;\n\n  var props = _extends({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === \"_self\") && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return React.createElement(\"a\", props);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  LinkAnchor.displayName = \"LinkAnchor\";\n}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"component\", \"replace\", \"to\", \"innerRef\"]);\n\n  return React.createElement(__RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <Link> outside a <Router>\") : invariant(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : \"\";\n\n    var props = _extends({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var method = replace ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return React.createElement(component, props);\n  });\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  var toType = PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]);\n  var refType = PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]);\n  Link.displayName = \"Link\";\n  Link.propTypes = {\n    innerRef: refType,\n    onClick: PropTypes.func,\n    replace: PropTypes.bool,\n    target: PropTypes.string,\n    to: toType.isRequired\n  };\n}\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = React.forwardRef;\n\nif (typeof forwardRef$1 === \"undefined\") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(\" \");\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref[\"aria-current\"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? \"page\" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? \"active\" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"aria-current\", \"activeClassName\", \"activeStyle\", \"className\", \"exact\", \"isActive\", \"location\", \"sensitive\", \"strict\", \"style\", \"to\", \"innerRef\"]);\n\n  return React.createElement(__RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <NavLink> outside a <Router>\") : invariant(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n    var match = escapedPath ? matchPath(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;\n    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;\n\n    var props = _extends({\n      \"aria-current\": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return React.createElement(Link, props);\n  });\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n  var ariaCurrentType = PropTypes.oneOf([\"page\", \"step\", \"location\", \"date\", \"time\", \"true\"]);\n  NavLink.propTypes = _extends({}, Link.propTypes, {\n    \"aria-current\": ariaCurrentType,\n    activeClassName: PropTypes.string,\n    activeStyle: PropTypes.object,\n    className: PropTypes.string,\n    exact: PropTypes.bool,\n    isActive: PropTypes.func,\n    location: PropTypes.object,\n    sensitive: PropTypes.bool,\n    strict: PropTypes.bool,\n    style: PropTypes.object\n  });\n}\n\nexport { BrowserRouter, HashRouter, Link, NavLink };\n//# sourceMappingURL=react-router-dom.js.map\n","import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n  getUsername: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext | undefined>(undefined);\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState as PFEmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  TitleSizes,\n  TitleProps,\n  ButtonProps,\n  EmptyStateIconProps,\n  EmptyStateProps as PFEmptyStateProps,\n  EmptyStateBodyProps,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\nexport type MASEmptyStateProps = {\n  titleProps?: Omit<TitleProps, 'children'>;\n  emptyStateProps?: Omit<PFEmptyStateProps, 'children'>;\n  emptyStateIconProps?: EmptyStateIconProps;\n  emptyStateBodyProps?: Omit<EmptyStateBodyProps, 'children'> & {\n    body?: string | React.ReactNode;\n  };\n  buttonProps?: Omit<ButtonProps, 'children'> & {\n    title?: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    'data-testid'?: string;\n  };\n  children?: React.ReactNode;\n};\n\nexport const MASEmptyState: React.FC<MASEmptyStateProps> = ({\n  titleProps,\n  buttonProps,\n  emptyStateIconProps,\n  emptyStateProps,\n  emptyStateBodyProps,\n  children,\n}: MASEmptyStateProps) => {\n  const { variant = ButtonVariant.primary, onClick, ...restButtonProps } = buttonProps || {};\n  const { icon = PlusCircleIcon, ...restEmptyStateIconProps } = emptyStateIconProps || {};\n  const { title, size = TitleSizes.lg, headingLevel = 'h1', ...restTitleProps } = titleProps || {};\n  const { body, ...restEmptyStateBodyProps } = emptyStateBodyProps || {};\n  const { className, ...restEmptyStateProps } = emptyStateProps || {};\n\n  return (\n    <>\n      <PFEmptyState className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md', className)} {...restEmptyStateProps}>\n        <EmptyStateIcon icon={icon} {...restEmptyStateIconProps} />\n        {title && (\n          <Title headingLevel={headingLevel} size={size} {...restTitleProps}>\n            {title}\n          </Title>\n        )}\n        {body && <EmptyStateBody {...restEmptyStateBodyProps}>{body}</EmptyStateBody>}\n        {buttonProps?.title && (\n          <Button variant={variant} onClick={onClick} {...restButtonProps}>\n            {buttonProps?.title}\n          </Button>\n        )}\n        {children}\n      </PFEmptyState>\n    </>\n  );\n};\n","import React from 'react';\nimport { PageSection, PageSectionVariants, PageSectionProps } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { MASEmptyState, MASEmptyStateProps } from '@app/common';\n\nexport type MASFullPageErrorProps = MASEmptyStateProps & {\n  pageSection?: Omit<PageSectionProps, 'children'>;\n};\n\nexport const MASFullPageError: React.FC<MASFullPageErrorProps> = ({\n  pageSection,\n  titleProps,\n  emptyStateProps,\n  emptyStateIconProps,\n  emptyStateBodyProps,\n  buttonProps,\n}: MASFullPageErrorProps) => {\n  const { variant = PageSectionVariants.default, ...restPageSectionProps } = pageSection || {};\n  return (\n    <PageSection variant={variant} {...restPageSectionProps} padding={{ default: 'noPadding' }}>\n      <MASEmptyState\n        titleProps={titleProps}\n        emptyStateProps={emptyStateProps}\n        emptyStateIconProps={{\n          icon: emptyStateIconProps?.icon || LockIcon,\n          ...emptyStateIconProps,\n        }}\n        emptyStateBodyProps={emptyStateBodyProps}\n        buttonProps={buttonProps}\n      />\n    </PageSection>\n  );\n};\n","import React, { useState, createContext, ReactNode, useContext, useEffect } from 'react';\nimport { AlertType, AlertToastGroup } from './AlertToastGroup';\nimport { AlertVariant } from '@patternfly/react-core';\n\nexport type AlertContextProps = {\n  addAlert: (message: string, variant?: AlertVariant, body?: string | React.ReactElement, dataTestId?: string) => void;\n};\n\nexport const AlertContext = createContext<AlertContextProps>({\n  addAlert: () => {},\n});\n\nexport const useAlerts = () => useContext(AlertContext);\n\ntype TimeOut = {\n  key: number;\n  timeOut: NodeJS.Timeout;\n};\n\nexport const AlertProvider = ({ children }: { children: ReactNode }) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const createId = () => new Date().getTime();\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const addAlert = (\n    title: string,\n    variant: AlertVariant = AlertVariant.default,\n    body?: string | React.ReactElement,\n    dataTestId?: string\n  ) => {\n    setAlerts([...alerts, { key: createId(), title, variant, body, dataTestId }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <AlertToastGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { UnexpectedError } from './UnexpectedError';\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('error:', error, errorInfo);\n  }\n\n  updateState = (hasError: boolean) => {\n    this.setState({ hasError });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return <UnexpectedError updateState={this.updateState} />;\n    }\n    return this.props.children;\n  }\n}\n\nexport { ErrorBoundary };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\n\nconst DrawerPanelContentInfo = () => (\n  <DrawerPanelContent>\n    <DrawerHead>\n      <TextContent>\n        <Text component={TextVariants.h2}>Cluster information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 4 MBps</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100 GB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Partitions</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Client connections</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 500</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Message size</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Availability</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>Multizone highly available</TextListItem>\n        </TextList>\n        <Text component={TextVariants.h2}>Cost information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Base Cluster</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$1.50/hr</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.02/MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.0002/GB/hr</TextListItem>\n        </TextList>\n      </TextContent>\n    </DrawerHead>\n  </DrawerPanelContent>\n);\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState, createContext } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { isValidToken, ErrorCodes } from '@app/utils';\n\nexport type CreateInstanceModalProps = {\n  isModalOpen: boolean;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onCreate: () => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst CreateInstanceModalContext = createContext<CreateInstanceModalProps>({\n  isModalOpen: false,\n  setIsModalOpen: () => {},\n  onCreate: () => {},\n  mainToggle: false,\n  refresh: () => {},\n  cloudProviders: [],\n});\n\nexport const CreateInstanceModalProvider = CreateInstanceModalContext.Provider;\nexport const useCreateInstanceModal = () => useContext(CreateInstanceModalContext);\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { isModalOpen, setIsModalOpen, onCreate, cloudProviders, refresh, mainToggle } = useCreateInstanceModal();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData({ ...kafkaFormData, name: '', multi_az: true });\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    if (!region || region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = validateCreateForm();\n\n    const accessToken = await authContext?.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n    } else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n          });\n          onCreate();\n          await apisService.createKafka(true, kafkaFormData).then((res) => {\n            resetForm();\n            setIsModalOpen(false);\n            refresh();\n          });\n        } catch (error) {\n          let reason: string | undefined;\n          let toShowAlert = true;\n          if (isServiceApiError(error)) {\n            if (error.response?.data.code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n              setIsFormValid(false);\n              toShowAlert = false;\n              setNameValidated({\n                fieldState: 'error',\n                message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n              });\n            } else {\n              reason = error.response?.data.reason;\n            }\n          }\n          /**\n           * Todo: show user friendly message according to server code\n           * and translation for specific language\n           *\n           */\n          toShowAlert && addAlert(t('something_went_wrong'), AlertVariant.danger, reason, 'toastCreateKafka-failed');\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    resetForm();\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (name && name.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else {\n      if (isValid) {\n        if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n        if (nameValidated.fieldState === 'error') {\n          setNameValidated({ fieldState: 'default', message: '' });\n        }\n      } else {\n        setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n      }\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData({ ...kafkaFormData, multi_az: value === 'multi' });\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message != '' && <ExclamationCircleIcon />}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={handleInstanceNameChange}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map(\n            (provider: CloudProvider) =>\n              provider.enabled && (\n                <Tile\n                  key={`tile-${provider.name}`}\n                  title={provider?.display_name || ''}\n                  icon={getTileIcon(provider?.name)}\n                  isSelected={cloud_provider === provider.name}\n                  onClick={() => onCloudProviderSelect(provider)}\n                />\n              )\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={handleCloudRegionChange}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              (option: CloudRegion, index) =>\n                option.enabled && (\n                  <FormSelectOption\n                    key={index}\n                    value={option.id}\n                    label={option.id ? t(option.id) : option.display_name || ''}\n                  />\n                )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <ToggleGroupItem\n              text={t('single')}\n              value={'single'}\n              isDisabled\n              buttonId=\"single\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        id=\"modalCreateKafka\"\n        variant={ModalVariant.medium}\n        title={t('create_a_kafka_instance')}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"create\"\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={onCreateInstance}\n            isDisabled={!isFormValid || isCreationInProgress}\n            spinnerAriaValueText={t('submitting_request')}\n            isLoading={isCreationInProgress}\n            data-testid=\"modalCreateKafka-buttonSubmit\"\n          >\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle} data-testid=\"modalCreateKafka-buttonCancel\">\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {mainToggle === true ? (\n          <Drawer isStatic className=\"mk--create-instance-modal__drawer--content\">\n            <DrawerContent panelContent={<DrawerPanelContentInfo />}>\n              <DrawerContentBody>{createInstanceForm()}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        ) : (\n          createInstanceForm()\n        )}\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { AlertVariant, PaginationVariant, Skeleton, EmptyStateVariant, TitleSizes } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState } from '@app/common';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { useAlerts, DeleteInstanceModal, CreateInstanceModal } from '@app/components';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { InstanceStatus, isServiceApiError } from '@app/utils';\nimport { useHistory } from 'react-router-dom';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { formatDistance } from 'date-fns';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n  mainToggle: boolean;\n  refresh: () => void;\n  page: number;\n  perPage: number;\n  total: number;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected: string;\n  setFilterSelected: (filterSelected: string) => void;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToInstance,\n  getConnectToInstancePath,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n}: StreamsTableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<string>();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  // function to get exact number of skeleton count required for the current page\n  const getLoadingRowsCount = () => {\n    // initiaise loadingRowCount by perPage\n    let loadingRowCount = perPage;\n    /*\n      if number of expected count is greater than 0\n        calculate the loadingRowCount\n      else\n        leave the loadingRowCount to perPage\n     */\n    if (expectedTotal && expectedTotal > 0) {\n      // get total number of pages\n      const totalPage =\n        expectedTotal % perPage !== 0 ? Math.floor(expectedTotal / perPage) + 1 : Math.floor(expectedTotal / perPage);\n      // check whether the current page is the last page\n      if (page === totalPage) {\n        // check whether to total expected count is greater than perPage count\n        if (expectedTotal > perPage) {\n          // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n          loadingRowCount = expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n        } else {\n          loadingRowCount = expectedTotal;\n        }\n      }\n    }\n    // return the exact number of skeleton expected at the time of loading\n    return loadingRowCount !== 0 ? loadingRowCount : perPage;\n  };\n\n  const addAlertAfterSuccessDeletion = () => {\n    // filter all kafkas with status as deprovision\n    const deprovisonedKafkas = kafkaInstanceItems.filter((kafka) => kafka.status === InstanceStatus.DEPROVISION);\n\n    // filter all new kafka which is not in deleteKafka state\n    const notPresentKafkas = deprovisonedKafkas\n      .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n      .map((k) => k.name || '');\n    // create new array by merging old and new kafka with status as deprovion\n    const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n    // update deleteKafka with new array\n    setDeletedKafkas(allDeletedKafkas);\n\n    // add alert for deleted kafkas which are completely deleted from the response\n    allDeletedKafkas.forEach((k) => {\n      if (kafkaInstanceItems.findIndex((item) => item.name === k) < 0) {\n        removeKafkaFromDeleted(k);\n        addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n      }\n    });\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-success'\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-failed'\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const onSelectKebabDropdownOption = (event: any, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n      },\n      {\n        title: t('connect_to_instance'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <>\n        {mainToggle ? (\n          <a href=\"http://uxd-mk-data-plane-cmolloy.apps.uxd-os-research.shz4.p1.openshiftapps.com/openshiftstreams\">\n            {name}\n          </a>\n        ) : (\n          <Link\n            to={() => getConnectToInstancePath(row as KafkaRequest)}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToInstance(row as KafkaRequest);\n            }}\n          >\n            {name}\n          </Link>\n        )}\n      </>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount();\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    const formatDate = (date) => {\n      date = typeof date === 'string' ? new Date(date) : date;\n      return (\n        <>\n          {formatDistance(date, new Date())} {t('ago')}\n        </>\n      );\n    };\n\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title: status === InstanceStatus.DEPROVISION ? name : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: formatDate(created_at),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    setIsDeleteModalOpen(false);\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: EmptyStateVariant.full,\n          }}\n          emptyStateIconProps={{\n            icon: SearchIcon,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n            headingLevel: 'h2',\n            size: TitleSizes.lg,\n          }}\n          emptyStateBodyProps={{\n            body: t('no_results_match_the_filter_criteria'),\n          }}\n        />\n      )}\n      {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n      <DeleteInstanceModal\n        isModalOpen={isDeleteModalOpen}\n        instanceStatus={selectedInstance?.status}\n        selectedItemData={selectedInstance}\n        handleModalToggle={() => setIsDeleteModalOpen(!isDeleteModalOpen)}\n        modalProps={{\n          title,\n        }}\n        confirmButtonProps={{\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        }}\n        textProps={{\n          description,\n        }}\n      />\n      <CreateInstanceModal />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React, { useState, FunctionComponent, useContext } from 'react';\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyStateVariant,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Popover,\n  Radio,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DefaultApi, ServiceAccountRequest } from '../../../openapi/api';\nimport { MASEmptyState } from '@app/common';\n\ntype GenerateCredential = {\n  instanceName?: string;\n  mainToggle?: boolean;\n};\n\nconst GenerateCredential: FunctionComponent<GenerateCredential> = ({\n  instanceName = '',\n  mainToggle,\n}: GenerateCredential) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n  const [credential, setCredential] = useState<any | undefined>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState('');\n\n  const generateCredential = async () => {\n    const accessToken = await authContext?.getToken();\n    const serviceAccountRequest: ServiceAccountRequest = {\n      name: instanceName,\n    };\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.createServiceAccount(serviceAccountRequest).then((res) => {\n        setCredential(res?.data);\n        setIsLoading(false);\n        setIsOpen(true);\n      });\n    } catch (err) {\n      setIsLoading(false);\n      let reason;\n      if (isServiceApiError(err)) {\n        reason = err.response?.data.reason;\n      }\n      setError(reason);\n    }\n  };\n\n  const handleModalToggle = () => {\n    if (mainToggle) {\n      setIsOpen(true);\n      setIsLoading(false);\n    } else {\n      setIsLoading(true);\n      setError('');\n      setCredential(undefined);\n      generateCredential();\n    }\n  };\n\n  // useEffect(() => {\n  //   if (stepNo === 5) {\n  //     generateCredential();\n  //   }\n  // }, [stepNo]);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setIsCreated(!isCreated);\n    setCredential(undefined);\n    setConfirmationCheckbox(false);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, _prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (_checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (_checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      {mainToggle && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title=\"These credentials were not actually generated from this flow as it is part of the mock UI. For now, please turn off the mock UI to generate credentials.\"\n        />\n      )}\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t('credential_successfully_generated'),\n          headingLevel: 'h4',\n          size: TitleSizes.lg,\n        }}\n        emptyStateBodyProps={{\n          body: t('clientid_empty_state_body'),\n        }}\n      >\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t('client_id')}\n          </InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\" data-testid=\"modalCredentials-copyClientID\">\n            {mainToggle ? 'srvc-acct-962bc96e-4339-4aee-9505-040d5069c6a5' : credential?.clientID}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\" data-testid=\"modalCredentials-copyClientSecret\">\n            {mainToggle ? '441cdf77-083c-41d1-9050-c27a3b4247ac' : credential?.clientSecret}\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button\n          variant=\"primary\"\n          isDisabled={!confirmationCheckbox}\n          onClick={handleClose}\n          data-testid=\"modalCredentials-buttonClose\"\n        >\n          {t('close')}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n\n  const getSteps = () => {\n    const steps: WizardStep[] = [{ id: 5, name: t('finish'), component: clientID, isFinishedStep: true }];\n    if (mainToggle) {\n      steps.unshift(\n        { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n        { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n        { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n        { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') }\n      );\n    }\n    return steps;\n  };\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      <FlexItem className=\"pf-m-align-right\">\n        <Button\n          variant=\"secondary\"\n          onClick={handleModalToggle}\n          className=\"pf-u-ml-md\"\n          spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n          isLoading={isLoading}\n          data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n        >\n          {t('generate_credential')}\n        </Button>\n      </FlexItem>\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={getSteps()}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        hideClose={true}\n      />\n      {error && (\n        <FlexItem className=\"pf-m-grow\">\n          <Alert variant=\"danger\" isInline title={error} />\n        </FlexItem>\n      )}\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Flex, FlexItem, ClipboardCopy } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { GenerateCredential } from './GenerateCredential';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n  externalServer?: string;\n  instanceName?: string;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = ({\n  mainToggle,\n  externalServer,\n  instanceName,\n}: ResourcesTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n        <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_2')}</Text>\n        <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n          {t('external_server')}\n        </Text>\n      </TextContent>\n      <Flex>\n        <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n          <ClipboardCopy data-testid=\"drawerStreams-copyBootstrapURL\">{externalServer}</ClipboardCopy>\n        </FlexItem>\n        <GenerateCredential instanceName={instanceName} mainToggle={mainToggle} />\n      </Flex>\n      {mainToggle && (\n        <>\n          <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n            <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n            <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n          </TextContent>\n          <ClipboardCopy>https://:30123</ClipboardCopy>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\nexport const SampleCodeTab = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, TabsProps, Tab, TabTitleText } from '@patternfly/react-core';\nimport { ResourcesTab, ResourcesTabProps } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ConnectionTabProps = Pick<TabsProps, 'onSelect' | 'activeKey'> & ResourcesTabProps;\n\nexport const ConnectionTab: React.FC<ConnectionTabProps> = ({\n  onSelect,\n  externalServer,\n  instanceName,\n  mainToggle,\n  activeKey,\n}: ConnectionTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {mainToggle ? (\n        <div className=\"mas--details__drawer--tab-content pf-m-secondary\">\n          <Tabs activeKey={activeKey} isSecondary onSelect={onSelect}>\n            <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n              <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n            </Tab>\n            <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n              <SampleCodeTab />\n            </Tab>\n          </Tabs>\n        </div>\n      ) : (\n        <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport { KafkaRequest } from 'src/openapi';\n\nexport type DetailsTabProps = {\n  mainToggle?: boolean;\n  instanceDetail?: KafkaRequest;\n};\n\nexport const DetailsTab = ({ mainToggle, instanceDetail }: DetailsTabProps) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n\n  const { id, owner, created_at, updated_at } = instanceDetail || {};\n\n  const renderTextListItem = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mas--details__drawer--grid\">\n            <GridItem span={6} className=\"mas--details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItem(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItem(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItem(t('id'), id)}\n            {renderTextListItem(t('owner'), owner)}\n            {renderTextListItem(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItem(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { ConnectionTab } from './ConnectionTab';\nimport { DetailsTab, DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'\n> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n}) => {\n  dayjs.extend(localizedFormat);\n\n  const { t } = useTranslation();\n  const { name } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrapServerHost } = instanceDetail || {};\n    return bootstrapServerHost?.endsWith(':443') ? bootstrapServerHost : `${bootstrapServerHost}:443`;\n  };\n\n  const panelBodyContent = () => {\n    return (\n      <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n        <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n          <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>} data-testid=\"drawerStreams-tabConnect\">\n          <ConnectionTab\n            mainToggle={mainToggle}\n            activeKey={activeTab2Key}\n            instanceName={name}\n            externalServer={getExternalServer()}\n            onSelect={onSelectConnectionTab}\n          />\n        </Tab>\n      </Tabs>\n    );\n  };\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent()}\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Level, LevelItem, Title, Dropdown, DropdownItem, DropdownPosition, KebabToggle } from '@patternfly/react-core';\n\nexport type ServiceRegistryHeaderProps = {\n  name: string;\n  onConnectToRegistry: (data: any) => void;\n  onDeleteRegistry: (name: string) => void;\n};\n\nexport const ServiceRegistryHeader: React.FC<ServiceRegistryHeaderProps> = ({\n  name,\n  onConnectToRegistry,\n  onDeleteRegistry,\n}: ServiceRegistryHeaderProps) => {\n  const { t } = useTranslation();\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key=\"connect-registry\" aria-label=\"connect to registry\" onClick={() => onConnectToRegistry(name)}>\n      Connect to Registry\n    </DropdownItem>,\n    <DropdownItem key=\"delete-registry\" aria-label=\"delete registry\" onClick={() => onDeleteRegistry(name)}>\n      Delete Registry\n    </DropdownItem>,\n  ];\n\n  return (\n    <Level>\n      <LevelItem>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {t('service_registry')}\n        </Title>\n      </LevelItem>\n      <LevelItem>\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"toggle-service-registry\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </LevelItem>\n    </Level>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = \"MGD-SERV-API-4\",\n  DUPLICATE_INSTANCE_NAME = \"MGD-SERV-API-36\"\n}\n\nexport {\n  ErrorCodes,\n  isServiceApiError\n}\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\nenum InstanceStatus {\n  READY = 'ready',\n  ACCEPTED = 'accepted',\n  PREPARING = 'preparing',\n  PROVISIONING = 'provisioning',\n  FAILED = 'failed',\n  DEPROVISION = 'deprovision',\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\n\nconst getCloudProviderDisplayName = (value: string) => {\n  return cloudProviderOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-1', label: 'EU, Ireland' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\nconst getCloudRegionDisplayName = (value: string) => {\n  return cloudRegionOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst capitalize = (s: string) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\n\nconst MIN_POLL_INTERVAL = 1000;\nconst MAX_POLL_INTERVAL = 5000;\nconst isValidToken = (accessToken: string | undefined) => {\n  if (accessToken !== undefined && accessToken !== '') {\n    return true;\n  }\n  return false;\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  getCloudRegionDisplayName,\n  capitalize,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  isValidToken,\n  MAX_FILTER_LIMIT,\n  MIN_POLL_INTERVAL,\n  MAX_POLL_INTERVAL,\n};\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof Metric\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof Metric\n     */\n    values?: Array<Values>;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList extends MetricsListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByKafkaId.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByKafkaId(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList> {\n            return DefaultApiFp(configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"],"sourceRoot":""}