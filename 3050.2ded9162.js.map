{"version":3,"file":"3050.2ded9162.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./src/app/contexts/federated.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected.tsx"],"sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_localizedFormat=t()}(this,(function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,o,n){var r=o.prototype,i=r.format;n.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var o=this.$locale().formats,n=function(t,o){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var i=r&&r.toUpperCase();return n||o[r]||e[r]||o[i].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,o){return t||o.slice(1)}))}))}(t,void 0===o?{}:o);return i.call(this,n)}}}));","import React, { useContext } from 'react';\n\nexport type FederatedProps = {\n  tokenEndPointUrl: string;\n  preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n  shouldOpenCreateModal: () => Promise<boolean>;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASDeleteModal, useRootModalContext } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport const DeleteInstance: React.FunctionComponent = () => {\n  const { store, hideModal } = useRootModalContext();\n  const props = { ...store?.modalProps, hideModal };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport const DeleteInstanceModal = (props) => {\n  const {\n    title,\n    confirmButtonProps,\n    cancelButtonProps,\n    textProps,\n    instanceStatus,\n    selectedItemData,\n    onClose,\n    hideModal,\n  } = props || {};\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (\n        instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick &&\n        confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n\n  const handleToggle = () => {\n    setInstanceNameInput('');\n    hideModal();\n    onClose && onClose();\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteKafka-buttonDelete',\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleToggle}\n      textProps={textProps}\n      selectedItemData={selectedItemData}\n      textInputProps={{\n        showTextInput: instanceStatus === InstanceStatus.READY,\n        label: t('instance_name_label', { name: selectedInstanceName }),\n        value: instanceNameInput,\n        onChange: handleInstanceName,\n        onKeyPress,\n        autoFocus: true,\n      }}\n    ></MASDeleteModal>\n  );\n};\n\nexport default DeleteInstance;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { useAuth, useConfig, useAlert } from '@rhoas/app-services-ui-shared';\nimport { getDeleteInstanceModalConfig } from '@app/modules/OpenshiftStreams/components';\nimport { useRootModalContext } from '@app/common';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { DeleteInstanceModal } from './DeleteInstance';\nimport { isServiceApiError } from '@app/utils';\n\nconst DeleteInstanceConnected = () => {\n  const { addAlert } = useAlert() || {};\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const history = useHistory();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n\n  const { store, hideModal } = useRootModalContext();\n  const { selectedItemData: instanceDetail, setIsOpenDeleteInstanceModal } =\n    store?.modalProps || {};\n  const { status, name, id } = instanceDetail || {};\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { title, confirmActionLabel, description } =\n    getDeleteInstanceModalConfig(t, status, name);\n\n  const onCloseModal = () => {\n    setIsOpenDeleteInstanceModal && setIsOpenDeleteInstanceModal(false);\n  };\n\n  const onDeleteInstance = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && id) {\n      try {\n        setIsLoading(true);\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.deleteKafkaById(id, true).then(() => {\n          setIsLoading(false);\n          onCloseModal();\n          //redirect on kafka list page\n          history.push('/streams/kafkas');\n        });\n      } catch (error) {\n        setIsLoading(false);\n        handleServerError(error);\n      }\n    }\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t('something_went_wrong'),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  const props = {\n    ...store?.modalProps,\n    hideModal,\n    title,\n    confirmButtonProps: {\n      onClick: onDeleteInstance,\n      label: confirmActionLabel,\n      isLoading,\n    },\n    textProps: {\n      description,\n    },\n    onClose: onCloseModal,\n    instanceStatus: status,\n  };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport { DeleteInstanceConnected };\nexport default DeleteInstanceConnected;\n"],"names":["module","exports","e","LTS","LT","L","LL","LLL","LLLL","t","o","n","r","prototype","i","format","en","formats","this","$locale","replace","toUpperCase","slice","call","FederatedContext","undefined","useFederated","useContext","DeleteInstance","store","hideModal","props","modalProps","DeleteInstanceModal","title","confirmButtonProps","cancelButtonProps","textProps","instanceStatus","selectedItemData","onClose","useTranslation","selectedInstanceName","name","useState","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","toLowerCase","isModalOpen","isDisabled","handleModalToggle","textInputProps","showTextInput","label","value","onChange","onKeyPress","event","key","onClick","autoFocus","DeleteInstanceConnected","addAlert","useAlert","auth","useAuth","history","useHistory","basePath","useConfig","instanceDetail","setIsOpenDeleteInstanceModal","status","id","isLoading","setIsLoading","confirmActionLabel","description","onCloseModal","handleServerError","error","reason","response","data","variant","AlertVariant","kas","getToken","accessToken","DefaultApi","Configuration","deleteKafkaById","then","push"],"sourceRoot":""}