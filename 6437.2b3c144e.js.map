{"version":3,"file":"6437.2b3c144e.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/api.ts","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts"],"sourcesContent":["import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport {\n  CreateKafkaInitializationData,\n  InstanceAvailability,\n  OnCreateKafka,\n  Provider,\n  ProviderInfo,\n  Providers,\n  RegionInfo,\n  Regions,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  Quota,\n  QuotaType,\n  QuotaValue,\n  useAuth,\n  useConfig,\n  useQuota,\n} from \"@rhoas/app-services-ui-shared\";\nimport {\n  CloudRegion,\n  Configuration,\n  DefaultApi,\n} from \"@rhoas/kafka-management-sdk\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes, InstanceType } from \"@app/utils\";\n\nexport const useAvailableProvidersAndDefault = () => {\n  const { kas, getUsername } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { getQuota } = useQuota();\n\n  function getApi() {\n    return new DefaultApi(\n      new Configuration({\n        accessToken: kas.getToken(),\n        basePath,\n      })\n    );\n  }\n\n  const fetchQuota = async (): Promise<Quota[\"data\"]> => {\n    return new Promise((resolve, reject) => {\n      async function getQuotaData() {\n        const quota = await getQuota();\n        if (quota.isServiceDown) {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"fetchQuota rejected because isServiceDown is true\"\n          );\n          reject();\n        } else if (quota.loading) {\n          console.warn(\n            \"useAvailableProvidersAndDefault\",\n            \"fetchQuota\",\n            \"quota is loading, retrying in 1000ms\"\n          );\n          setTimeout(getQuota, 1000);\n        } else {\n          resolve(quota.data);\n        }\n      }\n      getQuotaData();\n    });\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchRegions = async (\n    id: string,\n    ia: InstanceAvailability\n  ): Promise<Regions> => {\n    const apisService = getApi();\n    const res = await apisService.getCloudProviderRegions(id);\n\n    if (!res?.data?.items) {\n      return [];\n    }\n\n    const instance_type =\n      ia === \"quota\"\n        ? InstanceType.standard\n        : getInstanceTypeForResponse(res.data.items);\n\n    const regionsForInstance = res.data.items.filter(\n      (p) =>\n        p.enabled && p.capacity.some((c) => c.instance_type === instance_type)\n    );\n\n    return regionsForInstance.map((r): RegionInfo => {\n      let max_capacity_reached = false;\n      // Backwards compatibility remove once eval type is removed\n      if (instance_type == InstanceType.eval) {\n        max_capacity_reached = r.capacity?.some(\n          (c) => c.max_capacity_reached === true\n        );\n      } else {\n        max_capacity_reached = r.capacity?.some(\n          (c) => c.available_sizes?.length === 0\n        );\n      }\n\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: r.id!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        displayName: r.display_name!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        isDisabled: max_capacity_reached,\n      };\n    });\n  };\n\n  // FUTURE: this method should be removed and replaced with InstanceType.developer value\n  const getInstanceTypeForResponse = (regions: CloudRegion[]): InstanceType => {\n    const detectedNewAPI = !!regions.find((info) => {\n      return info.capacity.find((capacity) => {\n        return !!capacity.available_sizes;\n      });\n    });\n\n    if (detectedNewAPI) {\n      return InstanceType.developer;\n    } else {\n      return InstanceType.eval;\n    }\n  };\n\n  const fetchProviders = async (\n    ia: InstanceAvailability\n  ): Promise<Providers> => {\n    try {\n      const isMultiAZ = ia === \"quota\";\n      const apisService = getApi();\n      const res = await apisService.getCloudProviders();\n      const allProviders = res?.data?.items || [];\n      return await Promise.all(\n        allProviders\n          .filter((p) => p.enabled)\n          .map(async (provider): Promise<ProviderInfo> => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const regions = await fetchRegions(provider.id!, ia);\n            return {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              id: provider.id!,\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              displayName: provider.display_name!,\n              regions,\n              AZ: {\n                single: !isMultiAZ,\n                multi: isMultiAZ,\n              },\n            };\n          })\n      );\n    } catch (e) {\n      console.error(\"useAvailableProvidersAndDefault\", \"fetchProvider\", e);\n      return Promise.reject(e);\n    }\n  };\n\n  const fetchUserHasTrialInstance = async (): Promise<boolean> => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const loggedInUser = await getUsername()!;\n      const filter = `owner = ${loggedInUser}`;\n      const apisService = getApi();\n      const res = await apisService.getKafkas(\"\", \"\", \"\", filter);\n      if (res.data.items) {\n        return res.data.items.some(\n          (k) =>\n            k?.instance_type === InstanceType?.eval ||\n            k?.instance_type === InstanceType?.developer\n        );\n      }\n    } catch (e) {\n      console.error(\n        \"useAvailableProvidersAndDefault\",\n        \"fetchUserHasTrialInstance\",\n        e\n      );\n    }\n    return false;\n  };\n\n  return async function (): Promise<CreateKafkaInitializationData> {\n    try {\n      const quota = await fetchQuota();\n      const hasTrialRunning = await fetchUserHasTrialInstance();\n\n      let kasQuota: QuotaValue | undefined;\n      try {\n        kasQuota = quota?.get(QuotaType?.kas);\n      } catch (e) {\n        console.error(\n          \"useAvailableProvidersAndDefault\",\n          \"quota?.get exception\",\n          e\n        );\n      }\n\n      const instanceAvailability = ((): InstanceAvailability => {\n        switch (true) {\n          case kasQuota !== undefined && kasQuota.remaining > 0:\n            return \"quota\";\n          case kasQuota !== undefined && kasQuota.remaining === 0:\n            return \"over-quota\";\n          case hasTrialRunning:\n            return \"trial-used\";\n          // TODO check if trial instances are available for creation using the info returned by the region endpoint\n          // TODO also check if there is any capacity for standard instances, as for the trial ones\n          default:\n            return \"trial\";\n        }\n      })();\n\n      const availableProviders = await fetchProviders(instanceAvailability);\n      let defaultProvider: Provider | undefined;\n      try {\n        defaultProvider =\n          availableProviders.length === 1\n            ? availableProviders[0].id\n            : undefined;\n      } catch (e) {\n        console.error(\n          \"useAvailableProvidersAndDefault\",\n          \"defaultProvider error\",\n          e\n        );\n      }\n\n      return {\n        defaultProvider,\n        defaultAZ: instanceAvailability !== \"trial\" ? \"multi\" : \"single\",\n        availableProviders,\n        instanceAvailability,\n      };\n    } catch (e) {\n      console.error(\"useAvailableProvidersAndDefault\", e);\n      return Promise.reject(e);\n    }\n  };\n};\n\nexport const useCreateInstance = (): OnCreateKafka => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken: auth?.kas.getToken(),\n      basePath,\n    })\n  );\n\n  return async (data, onSuccess, onError) => {\n    try {\n      const kafkaRequest = asKafkaRequestPayload(\n        createEmptyNewKafkaRequestPayload()\n      );\n      kafkaRequest.name = data.name;\n      kafkaRequest.cloud_provider = data.provider;\n      kafkaRequest.region = data.region;\n      kafkaRequest.multi_az = data.az === \"multi\";\n      await apisService.createKafka(true, kafkaRequest);\n      onSuccess();\n    } catch (error) {\n      if (isServiceApiError(error)) {\n        const { code } = error?.response?.data || {};\n\n        switch (code) {\n          case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n            onError(\"name-taken\");\n            break;\n          case ErrorCodes.INSUFFICIENT_QUOTA:\n            onError(\"over-quota\");\n            break;\n          case ErrorCodes.REACHED_MAX_LIMIT_ALLOWED_KAFKA:\n          case ErrorCodes.INSTANCE_TYPE_NOT_SUPPORTED:\n            onError(\"trial-unavailable\");\n            break;\n          default:\n            console.error(\n              \"useAvailableProvidersAndDefault\",\n              \"createKafka unknown error\",\n              error\n            );\n            onError(\"unknown\");\n        }\n      } else {\n        console.error(\n          \"useAvailableProvidersAndDefault\",\n          \"createKafka unexpected error\",\n          error\n        );\n      }\n    }\n  };\n};\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    multi_az: kafkaRequest.multi_az.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n","import {\n  CreateKafkaInstance,\n  CreateKafkaInitializationData,\n  OnCreateKafka,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n} from \"@rhoas/app-services-ui-shared\";\nimport { QuickStartContext } from \"@patternfly/quickstarts\";\nimport { FunctionComponent, useCallback, useContext } from \"react\";\nimport { getModalAppendTo } from \"@app/utils\";\nimport { useAvailableProvidersAndDefault, useCreateInstance } from \"./api\";\n\nconst CreateInstance: FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ hideModal, onCreate }) => {\n  const fetchAvailableProvidersAndDefault = useAvailableProvidersAndDefault();\n  const createInstance = useCreateInstance();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const handleCreate = useCallback<OnCreateKafka>(\n    function (data, onSuccess, onError) {\n      const handleOnSuccess = () => {\n        onSuccess();\n        onCreate && onCreate();\n        hideModal();\n      };\n      createInstance(data, handleOnSuccess, onError);\n    },\n    [hideModal, onCreate, createInstance]\n  );\n\n  const getAvailableProvidersAndDefaults =\n    useCallback(async (): Promise<CreateKafkaInitializationData> => {\n      return fetchAvailableProvidersAndDefault();\n    }, [fetchAvailableProvidersAndDefault]);\n\n  return (\n    <CreateKafkaInstance\n      isModalOpen={true}\n      onClickQuickStart={onClickQuickStart}\n      onCancel={hideModal}\n      getAvailableProvidersAndDefaults={getAvailableProvidersAndDefaults}\n      onCreate={handleCreate}\n      appendTo={getModalAppendTo}\n    />\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from \"@rhoas/kafka-management-sdk\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  REACHED_MAX_LIMIT_ALLOWED_KAFKA: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n  /** Instance Type not supported*/\n  INSTANCE_TYPE_NOT_SUPPORTED: APIErrorCodes.ERROR_41,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n","import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string): void {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { IRowCell, IRowData } from \"@patternfly/react-table\";\nimport { formatDistance } from \"date-fns\";\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById(\"primary-app-container\");\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};\n\nenum InstanceStatus {\n  READY = \"ready\",\n  ACCEPTED = \"accepted\",\n  PREPARING = \"preparing\",\n  PROVISIONING = \"provisioning\",\n  FAILED = \"failed\",\n  DEPROVISION = \"deprovision\",\n  DELETED = \"deleting\",\n}\n\nenum InstanceType {\n  eval = \"eval\",\n  standard = \"standard\",\n  developer = \"developer\",\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: \"aws\", label: \"Amazon Web Services\" },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: \"ready\", label: \"Ready\" },\n  { value: \"failed\", label: \"Failed\" },\n  { value: \"accepted\", label: \"Creation pending\" },\n  { value: \"provisioning\", label: \"Creation in progress\" },\n  { value: \"preparing\", label: \"Creation in progress\" },\n  { value: \"deprovision\", label: \"Deletion in progress\" },\n  { value: \"deleting\", label: \"Deletion in progress\" },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: \"us-east-1\", label: \"US East, N. Virginia\" },\n  { value: \"eu-west-1\", label: \"EU, Ireland\" },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === \"string\" ? new Date(date) : date;\n  return formatDistance(date, new Date()) + \" \" + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || (window as any)[\"opera\"]);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n};\n"],"names":["useAvailableProvidersAndDefault","kas","getUsername","useAuth","apiBasePath","basePath","useConfig","getQuota","useQuota","getApi","DefaultApi","Configuration","accessToken","getToken","fetchQuota","Promise","resolve","reject","quota","isServiceDown","console","error","loading","warn","setTimeout","data","getQuotaData","getInstanceTypeForResponse","regions","find","info","capacity","available_sizes","fetchProviders","ia","isMultiAZ","apisService","res","getCloudProviders","allProviders","items","all","filter","p","enabled","map","provider","id","getCloudProviderRegions","instance_type","some","c","r","max_capacity_reached","length","displayName","display_name","isDisabled","fetchRegions","AZ","single","multi","e","hasTrialRunning","getKafkas","k","kasQuota","get","QuotaType","instanceAvailability","undefined","remaining","availableProviders","defaultProvider","defaultAZ","useCreateInstance","auth","onSuccess","onError","kafkaRequest","name","value","Error","region","multi_az","cloud_provider","asKafkaRequestPayload","az","createKafka","code","response","CreateInstance","hideModal","onCreate","fetchAvailableProvidersAndDefault","createInstance","qsContext","useContext","QuickStartContext","onClickQuickStart","useCallback","setActiveQuickStart","handleCreate","getAvailableProvidersAndDefaults","CreateKafkaInstance","isModalOpen","onCancel","appendTo","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","REACHED_MAX_LIMIT_ALLOWED_KAFKA","INSUFFICIENT_QUOTA","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","INSTANCE_TYPE_NOT_SUPPORTED","useDocumentTitle","title","useEffect","originalTitle","document","InstanceStatus","InstanceType","cloudProviderOptions","label","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_SERVICE_ACCOUNT_NAME_LENGTH","MAX_POLL_INTERVAL","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","Math","floor","getFormattedDate","date","translatePostfix","Date","formatDistance","getModalAppendTo","getElementById","body","isMobileTablet","check","a","navigator","userAgent","vendor","window","test","substr","getSkeletonForRows","loadingCount","skeleton","rows","cells","i","push"],"sourceRoot":""}