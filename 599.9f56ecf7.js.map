{"version":3,"sources":["webpack://kas-ui/./src/app/common/MASAlerts/MASAlertToastGroup.tsx","webpack://kas-ui/./src/app/common/MASCreateModal/MASCreateModal.tsx","webpack://kas-ui/./src/app/common/MASDeleteModal/MASDeleteModal.tsx","webpack://kas-ui/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://kas-ui/./src/app/common/MASErrorBoundary/UnexpectedError.tsx","webpack://kas-ui/./src/app/common/MASLoading/MASLoading.tsx","webpack://kas-ui/./src/app/common/MASPagination/MASPagination.tsx","webpack://kas-ui/./src/app/common/MASTable/CustomRowWrapper.tsx","webpack://kas-ui/./src/app/common/MASTable/MASTable.tsx","webpack://kas-ui/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://kas-ui/./src/app/models/openshiftStreamsModel.ts","webpack://kas-ui/./src/app/models/serviceAccountsModel.ts","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/CreateServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/DeleteServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ResetServiceAccountModal/ResetServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/openapi/base.ts","webpack://kas-ui/./src/openapi/api.ts"],"names":["MASAlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","map","key","variant","title","body","dataTestId","Alert","isLiveRegion","AlertVariant","variantLabel","actionClose","AlertActionCloseButton","onClose","MASCreateModal","isModalOpen","children","handleModalToggle","onCreate","isFormValid","isCreationInProgress","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","t","useTranslation","Modal","id","ModalVariant","isOpen","appendTo","actions","Button","type","onClick","isDisabled","spinnerAriaValueText","isLoading","MASDeleteModal","modalProps","confirmButtonProps","cancelButtonProps","textProps","selectedItemData","titleIconVariant","ariaLabel","showClose","restModalProps","buttonConfirmVariant","ButtonVariant","onClickConfirmButton","isDisabledConfirmButton","label","confirmActionLabel","restConfirmButtonProps","cancelButtonId","cancelButtonKey","cancelButtonVariant","cancelActionLabel","restCancelButtonProps","className","description","restTextProps","Text","dangerouslySetInnerHTML","__html","MASDrawer","drawerPanelContentProps","drawerHeaderProps","isExpanded","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","widths","restDrawerPanelContentProps","text","panelContent","DrawerPanelContent","default","DrawerHead","TextContent","component","TextVariants","value","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","UnexpectedError","updateState","PageSection","padding","isFilled","emptyStateProps","emptyStateIconProps","titleProps","emptyStateBodyProps","history","push","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","MASPagination","page","perPage","itemCount","PaginationVariant","isCompact","titles","restProps","location","searchParams","URLSearchParams","search","setSearchParam","useCallback","name","set","toString","onSetPage","_","newPage","onPerPageSelect","newPerPage","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","rowDataTestId","trRef","rowProps","row","props","rowIndex","originalData","isRowDeleted","status","isLoggedInUserOwner","owner","isRowDisabled","tabIndex","undefined","ref","css","hidden","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","hasDefaultCustomRowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","breakpoint","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","this","cloud_provider","multi_az","region","CreateServiceAccountModal","setIsOpen","fetchServiceAccounts","newServiceAccount","N","useState","fieldState","nameValidated","setNameValidated","descriptionValidated","setDescriptionValidated","serviceAccountFormData","setServiceAccountFormData","setIsFormValid","setCreationInProgress","credential","setCredential","isGenerateCredentialsModalOpen","setIsGenerateCredentialsModalOpen","authContext","basePath","addAlert","resetForm","useEffect","message","descMessage","descFieldState","handleTextInputName","isValid","test","trim","length","maxLength","handleTextInputDescription","createServiceAccount","validateCreateForm","getToken","accessToken","apisService","then","res","data","error","reason","response","handleServerError","onFormSubmit","preventDefault","Form","onSubmit","FormAlert","isInline","FormGroup","isRequired","fieldId","helperTextInvalid","helperTextInvalidIcon","validated","helperText","TextInput","onChange","autoFocus","TextArea","DeleteServiceAccountModal","serviceAccountToDelete","setIsLoading","serviceAccount","serviceAccountId","Error","deleteServiceAccount","ResetServiceAccountModal","serviceAccountToReset","isModalLoading","setIsModalLoading","resetServiceAccount","resetServiceAccountCreds","clientID","ServiceAccountsToolbar","filterSelected","setFilterSelected","filteredValue","setFilteredValue","handleCreateModal","nameInputRef","useRef","ownerInputRef","isFilterExpanded","setIsFilterExpanded","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","disabled","isInputValid","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","onFilter","filterType","isExact","onInputPress","fieldName","target","tooltipContent","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","find","option","chipIndex","onDeleteChipGroup","ToolbarGroup","Select","SelectVariant","onToggle","selections","onSelect","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","toLowerCase","InputGroup","ValidatedOptions","placeholder","input","onKeyPress","Tooltip","isVisible","content","reference","lg","ServiceAccountsTableView","expectedTotal","total","serviceAccountsDataLoaded","serviceAccountItems","onResetCredentials","onDeleteServiceAccount","orderBy","setOrderBy","mainToggle","AuthContext","setLoggedInUser","getUsername","username","tableColumns","transforms","cellWidth","onSelectKebabDropdownOption","selectedOption","parentElement","previousSibling","focus","getindexForSortParameter","parameter","tableRow","loadingCount","i","Skeleton","forEach","created_at","preparedTableCells","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","style","pointerEvents","cursor","tooltipProps","position","getActionResolver","_event","columnIndex","sortByDirection","getParameterForSortIndex","sort","split","direction","SortByDirection","ErrorCodes","isServiceApiError","code","BASE_PATH","replace","configuration","axios","field","msg","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequestPayload","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","needsSerialization","JSON","stringify","url","serviceAccountRequest","deleteKafkaById","localVarPath","encodeURIComponent","String","getKafkaById","getMetricsByInstantQuery","filters","getMetricsByRangeQuery","duration","interval","getServiceAccountById","listCloudProviderRegions","listCloudProviders","listKafkas","listServiceAccounts","serviceStatus","versionMetadata","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","BaseAPI"],"mappings":"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","file":"599.9f56ecf7.js","sourcesContent":["import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type MASAlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string | React.ReactElement;\n  dataTestId?: string;\n  skipAutoClose?: boolean;\n};\n\ntype AlertToastGroupProps = {\n  alerts: MASAlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function MASAlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body, dataTestId }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n          data-testid={dataTestId}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { getModalAppendTo } from '@app/utils/utils';\n\nexport type MASCreateModalProps = {\n  isModalOpen: boolean,\n  children?: React.ReactNode,\n  title: string,\n  handleModalToggle: () => void,\n  onCreate: () => void,\n  isFormValid: boolean,\n  isCreationInProgress: boolean,\n  primaryButtonTitle: string,\n  dataTestIdSubmit?: string,\n  dataTestIdCancel?: string\n};\n\nexport const MASCreateModal: React.FunctionComponent<MASCreateModalProps> = ({\n  isModalOpen,\n  children,\n  title,\n  handleModalToggle,\n  onCreate,\n  isFormValid,\n  isCreationInProgress,\n  primaryButtonTitle,\n  dataTestIdSubmit,\n  dataTestIdCancel\n}: MASCreateModalProps) => {\n\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      id=\"modalCreateKafka\"\n      variant={ModalVariant.medium}\n      title={title}\n      isOpen={isModalOpen}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={onCreate}\n          isDisabled={!isFormValid || isCreationInProgress}\n          spinnerAriaValueText={t('submitting_request')}\n          isLoading={isCreationInProgress}\n          data-testid={dataTestIdSubmit && dataTestIdSubmit}\n        >\n          {primaryButtonTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle} data-testid={dataTestIdCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      { children }\n    </Modal>\n  )\n}\n","import React from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  Text,\n  ButtonProps,\n  TextProps,\n} from '@patternfly/react-core';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport './MASDeleteModal.css';\n\nexport type MASDeleteModalProps = {\n  isModalOpen: boolean;\n  title: string;\n  modalProps?: Omit<ModalProps, 'children' | 'ref'>;\n  handleModalToggle: () => void;\n  children?: React.ReactNode;\n  selectedItemData?: any;\n  confirmButtonProps?: Omit<ButtonProps, 'children' | 'onClick'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n    onClick?: (data?: any) => Promise<void> | void;\n    'data-testid'?: string;\n  };\n  cancelButtonProps?: Omit<ButtonProps, 'children'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n  };\n  textProps?: Omit<TextProps, 'children'> & {\n    description?: string;\n  };\n};\n\nexport const MASDeleteModal: React.FC<MASDeleteModalProps> = ({\n  isModalOpen,\n  title,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  children,\n  selectedItemData = '',\n}: MASDeleteModalProps) => {\n  const {\n    variant = ModalVariant.small,\n    titleIconVariant = 'warning',\n    ['aria-label']: ariaLabel,\n    showClose = true,\n    ...restModalProps\n  } = modalProps || {};\n\n  const {\n    id = 'mas--confirm__button',\n    key = 'confirm-button',\n    variant: buttonConfirmVariant = ButtonVariant.danger,\n    onClick: onClickConfirmButton,\n    isDisabled: isDisabledConfirmButton,\n    label: confirmActionLabel = 'Delete',\n    ...restConfirmButtonProps\n  } = confirmButtonProps || {};\n\n  const {\n    id: cancelButtonId = 'mas--cancel__button',\n    key: cancelButtonKey = '\"cancel-button',\n    variant: cancelButtonVariant = ButtonVariant.link,\n    onClick: onClickCancelButton,\n    isDisabled: isDisabledCancelButton,\n    label: cancelActionLabel = 'Cancel',\n    ...restCancelButtonProps\n  } = cancelButtonProps || {};\n\n  const { className = 'mas--delete-item__modal--text', description, ...restTextProps } = textProps || {};\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={ariaLabel}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={showClose}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          id={id}\n          key={key}\n          variant={buttonConfirmVariant}\n          onClick={() => onClickConfirmButton && onClickConfirmButton(selectedItemData)}\n          isDisabled={isDisabledConfirmButton}\n          {...restConfirmButtonProps}\n        >\n          {confirmActionLabel}\n        </Button>,\n        <Button\n          id={cancelButtonId}\n          key={cancelButtonKey}\n          variant={cancelButtonVariant}\n          onClick={handleModalToggle}\n          {...restCancelButtonProps}\n        >\n          {cancelActionLabel}\n        </Button>,\n      ]}\n      {...restModalProps}\n    >\n      {description && (\n        <Text className={className} dangerouslySetInnerHTML={{ __html: description || '' }} {...restTextProps} />\n      )}\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/common';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: React.ReactNode;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n  inlineAlertMessage,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } = drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent widths={widths || { default: 'width_50' }} {...restDrawerPanelContentProps}>\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text component={text?.component || TextVariants.small} className={text?.className || 'pf-u-mb-0'}>\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'pf-u-mt-0'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer isExpanded={isExpanded} onExpand={onExpand} data-ouia-app-id={dataOuiaAppId}>\n      <DrawerContent\n        panelContent={panelContent}\n        className={notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''}\n      >\n        <DrawerContentBody className=\"pf-u-display-flex pf-u-flex-direction-column\"> {children}</DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, Button } from '@patternfly/react-core';\nimport './UnexpectedError.css';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\n\ntype UnexpectedError = {\n  updateState: (hasError: boolean) => void;\n};\n\nconst UnexpectedError = ({ updateState }: UnexpectedError) => {\n  const { t } = useTranslation();\n\n  const GoHomeBtn = () => {\n    const history = useHistory();\n    function handleClick() {\n      updateState(false);\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('go_to_kafka_instances')}</Button>;\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.UnexpectedError,\n        }}\n        emptyStateIconProps={{\n          className: 'icon-color',\n        }}\n        titleProps={{\n          title: t('common.something_went_wrong'),\n        }}\n        emptyStateBodyProps={{\n          body: t('unexpected_error'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { UnexpectedError };\n","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport type PaginationProps = Omit<PFPaginationProps, 'children' | 'ref'>;\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { createContext, useContext } from 'react';\nimport { InstanceStatus } from '@app/utils';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (event: any, rowIndex: number, row: any) => void;\n  rowDataTestId?: string;\n  loggedInUser: string | undefined;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => {},\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps) => {\n  const { activeRow, onRowClick, rowDataTestId, loggedInUser } = useContext(CustomRowWrapperContext);\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n  const isRowDeleted =\n    originalData?.status === InstanceStatus.DEPROVISION || originalData?.status === InstanceStatus.DELETED;\n  const isLoggedInUserOwner = loggedInUser === originalData?.owner;\n  const isRowDisabled = isRowDeleted || !isLoggedInUserOwner;\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={!isRowDisabled ? 0 : undefined}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        isRowDeleted ? 'pf-m-disabled' : isLoggedInUserOwner && 'pf-m-selectable',\n        !isRowDisabled && activeRow && activeRow === originalData?.name && 'pf-m-selected'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: any) => !isRowDisabled && onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { CustomRowWrapper, CustomRowWrapperProvider, CustomRowWrapperContextProps } from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    hasDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    rowWrapper,\n    hasDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (hasDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css('mas--streams-table-view__table', className)}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: JSX.Element;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: any;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          { toggleGroupProps && (\n            <ToolbarToggleGroup toggleIcon={toggleGroupProps.toggleIcon} breakpoint='md' {...toggleGroupProps}>\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n","export class NewServiceAccount {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Alert, Form, FormAlert, FormGroup, TextInput, TextArea } from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi } from './../../../../openapi/api';\nimport { NewServiceAccount, FormDataValidationState } from './../../../models';\nimport { MASCreateModal } from '@app/common/MASCreateModal/MASCreateModal';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError, MAX_SERVICE_ACCOUNT_NAME_LENGTH, MAX_SERVICE_ACCOUNT_DESC_LENGTH } from '@app/utils';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { MASGenerateCredentialsModal } from '@app/common/MASGenerateCredentialsModal';\n\nexport type CreateServiceAccountModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  fetchServiceAccounts?: () => void;\n};\n\nconst CreateServiceAccountModal: React.FunctionComponent<CreateServiceAccountModalProps> = ({\n  isOpen,\n  setIsOpen,\n  fetchServiceAccounts,\n}: CreateServiceAccountModalProps) => {\n  const newServiceAccount: NewServiceAccount = new NewServiceAccount();\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [descriptionValidated, setDescriptionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [serviceAccountFormData, setServiceAccountFormData] = useState<NewServiceAccount>(newServiceAccount);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const [credential, setCredential] = useState();\n  const [isGenerateCredentialsModalOpen, setIsGenerateCredentialsModalOpen] = useState(false);\n\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const resetForm = () => {\n    setNameValidated({ fieldState: 'default' });\n    setDescriptionValidated({ fieldState: 'default' });\n    setServiceAccountFormData(newServiceAccount);\n    setIsFormValid(true);\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && descriptionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, descriptionValidated.fieldState]);\n\n  const handleTextInputName = (name: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, name });\n    let isValid = true;\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name && name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const handleTextInputDescription = (description: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, description });\n    let isValid = true;\n    if (description && !/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n    }\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_description_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    } else if (isValid && descriptionValidated.fieldState === 'error') {\n      setDescriptionValidated({\n        fieldState: 'default',\n        message: '',\n      });\n    } else if (!isValid) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, description } = serviceAccountFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.input_filed_invalid_helper_text'),\n      });\n    } else if (!/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n\n    if (name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    }\n\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    }\n\n    return isValid;\n  };\n\n  const createServiceAccount = async () => {\n    let isValid = validateCreateForm();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    const accessToken = await authContext?.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setCreationInProgress(true);\n        await apisService.createServiceAccount(serviceAccountFormData).then((res) => {\n          setCredential(res?.data);\n          setIsOpen(false);\n          setIsGenerateCredentialsModalOpen(true);\n          resetForm();\n          addAlert(t('serviceAccount.service_account_creation_success_message'), AlertVariant.success);\n          fetchServiceAccounts && fetchServiceAccounts();\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    resetForm();\n    setIsOpen(!isOpen);\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    createServiceAccount();\n  };\n\n  const createForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, description } = serviceAccountFormData;\n    const { message: descMessage, fieldState: descFieldState } = descriptionValidated;\n\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"text-input-name\"\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message && <ExclamationCircleIcon />}\n          validated={fieldState}\n          helperText={t('common.input_filed_invalid_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-name\"\n            name=\"text-input-name\"\n            value={name}\n            onChange={handleTextInputName}\n            validated={fieldState}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Description\"\n          fieldId=\"text-input-description\"\n          helperTextInvalid={descMessage}\n          helperTextInvalidIcon={descMessage && <ExclamationCircleIcon />}\n          validated={descFieldState}\n          helperText={t('common.input_text_area_invalid_helper_text')}\n        >\n          <TextArea\n            id=\"text-input-description\"\n            name=\"text-input-description\"\n            value={description}\n            onChange={handleTextInputDescription}\n            validated={descFieldState}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <>\n      <MASCreateModal\n        isModalOpen={isOpen}\n        title={t('serviceAccount.create_a_service_account')}\n        handleModalToggle={handleCreateModal}\n        onCreate={createServiceAccount}\n        isFormValid={isFormValid}\n        primaryButtonTitle=\"Create\"\n        isCreationInProgress={isCreationInProgress}\n      >\n        {createForm()}\n      </MASCreateModal>\n      <MASGenerateCredentialsModal\n        isOpen={isGenerateCredentialsModalOpen}\n        setIsOpen={setIsGenerateCredentialsModalOpen}\n        credential={credential}\n        setCredential={setCredential}\n      />\n    </>\n  );\n};\n\nexport { CreateServiceAccountModal };\n","import React, { useState, useContext } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi, ServiceAccountListItem } from './../../../../openapi/api';\nimport { MASDeleteModal } from '@app/common/MASDeleteModal/MASDeleteModal';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError } from '@app/utils';\n\nexport type DeleteServiceAccountModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  fetchServiceAccounts: () => void;\n  serviceAccountToDelete: ServiceAccountListItem | undefined;\n};\n\nconst DeleteServiceAccountModal: React.FunctionComponent<DeleteServiceAccountModalProps> = ({\n  isOpen,\n  setIsOpen,\n  fetchServiceAccounts,\n  serviceAccountToDelete,\n}: DeleteServiceAccountModalProps) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const deleteServiceAccount = async (serviceAccount: ServiceAccountListItem | undefined) => {\n    const serviceAccountId = serviceAccount?.id;\n    if (serviceAccountId === undefined) {\n      throw new Error('service account id not defined');\n    }\n    const accessToken = await authContext?.getToken();\n    if (accessToken) {\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath,\n      });\n      setIsLoading(true);\n\n      try {\n        await apisService.deleteServiceAccount(serviceAccountId).then((response) => {\n          handleModalToggle();\n          setIsLoading(false);\n\n          addAlert(\n            t('serviceAccount.service_account_successfully_deleted', { name: serviceAccount?.name }),\n            AlertVariant.success\n          );\n          fetchServiceAccounts();\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        handleModalToggle();\n        setIsLoading(false);\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={isOpen}\n      handleModalToggle={handleModalToggle}\n      title={t('serviceAccount.delete_service_account') + '?'}\n      confirmButtonProps={{\n        onClick: () => deleteServiceAccount(serviceAccountToDelete),\n        label: 'Delete',\n        isLoading,\n      }}\n    >\n      <p>\n        <b>{serviceAccountToDelete?.name}</b> {t('serviceAccount.will_be_deleted')}\n      </p>\n    </MASDeleteModal>\n  );\n};\n\nexport { DeleteServiceAccountModal };\n","import React, { useState, useContext } from 'react';\nimport { Button, Modal, ModalVariant, AlertVariant } from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi, ServiceAccountListItem } from './../../../../../openapi/api';\nimport { isValidToken } from '@app/utils';\nimport { useTranslation } from 'react-i18next';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport { MASGenerateCredentialsModal } from '@app/common/MASGenerateCredentialsModal';\nimport { getModalAppendTo } from '@app/utils/utils';\n\nexport type ResetServiceAccountModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  serviceAccountToReset: ServiceAccountListItem | undefined;\n};\n\nconst ResetServiceAccountModal: React.FunctionComponent<ResetServiceAccountModalProps> = ({\n  isOpen,\n  setIsOpen,\n  serviceAccountToReset,\n}: ResetServiceAccountModalProps) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const [isModalLoading, setIsModalLoading] = React.useState(false);\n  const [credential, setCredential] = useState();\n  const [isGenerateCredentialsModalOpen, setIsGenerateCredentialsModalOpen] = useState(false);\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const resetServiceAccount = async (serviceAccount) => {\n    const serviceAccountId = serviceAccount?.id;\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken)) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setIsModalLoading(true);\n        await apisService.resetServiceAccountCreds(serviceAccountId).then((response) => {\n          setCredential(response?.data);\n          setIsOpen(false);\n          setIsModalLoading(false);\n          setIsGenerateCredentialsModalOpen(true);\n        });\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const serviceAccountId = serviceAccountToReset?.name;\n  const clientID = serviceAccountToReset?.clientID;\n\n  return (\n    <>\n      <Modal\n        id=\"reset-service-account-modal\"\n        variant={ModalVariant.medium}\n        title={t('serviceAccount.reset_service_account_credentials')}\n        isOpen={isOpen}\n        onClose={handleModalToggle}\n        appendTo={getModalAppendTo}\n        actions={[\n          <Button\n            key=\"create\"\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={() => resetServiceAccount(serviceAccountToReset)}\n            spinnerAriaValueText={t('common.submitting_request')}\n            isLoading={isModalLoading}\n          >\n            {t('serviceAccount.reset')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('common.cancel')}\n          </Button>,\n        ]}\n      >\n        <span\n          dangerouslySetInnerHTML={{\n            __html: t('serviceAccount.client_secret_will_be_reset', { serviceAccountId, clientID }),\n          }}\n        />\n      </Modal>\n      <MASGenerateCredentialsModal\n        title=\"Reset service account credentials\"\n        isOpen={isGenerateCredentialsModalOpen}\n        setIsOpen={setIsGenerateCredentialsModalOpen}\n        credential={credential}\n        setCredential={setCredential}\n      />\n    </>\n  );\n};\n\nexport { ResetServiceAccountModal };\n","import React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport {\n  ToolbarGroup,\n  ToolbarItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SelectOptionObject,\n  ToolbarFilter,\n  InputGroup,\n  TextInput,\n  Button,\n  Tooltip,\n  ToolbarChip,\n  ButtonVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\n\nexport type ServiceAccountsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  handleCreateModal: () => void;\n  mainToggle?: boolean;\n};\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nconst ServiceAccountsToolbar: React.FC<ServiceAccountsToolbarProps> = ({\n  filterSelected,\n  setFilterSelected,\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateModal,\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation();\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState<boolean>(false);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n  ];\n\n  const onClearAllFilters = () => {\n    setFilteredValue([]);\n  };\n\n  const onToggleFilter = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        // index of current filter value in applied filter\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value);\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onInputPress = (event: any) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const onSelect = (_, selection: string | SelectOptionObject) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onToggleFilter}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"name-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_name_lower')}\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label={t('filter_by_name_lower')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected?.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"owner-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_owner')}\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label={t('filter_by_owner')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateModal}\n          data-testid={'tableServiceAccounts-buttonCreateServiceAccount'}\n        >\n          {t('serviceAccount.create_service_account')}\n        </Button>\n      ),\n    },\n  ];\n  /**\n   * Todo: uncomment code when API start support pagination\n   */\n  // if (total && total > 0 && toolbarItems.length === 1) {\n  //   toolbarItems.push({\n  //     item: (\n  //       <MASPagination\n  //         widgetId=\"pagination-options-menu-top\"\n  //         itemCount={total}\n  //         page={page}\n  //         perPage={perPage}\n  //         isCompact={true}\n  //         titles={{\n  //           paginationTitle: t('minimal_pagination'),\n  //           perPageSuffix: t('per_page_suffix'),\n  //           toFirstPage: t('to_first_page'),\n  //           toPreviousPage: t('to_previous_page'),\n  //           toLastPage: t('to_last_page'),\n  //           toNextPage: t('to_next_page'),\n  //           optionsToggle: t('options_toggle'),\n  //           currPage: t('curr_page'),\n  //         }}\n  //       />\n  //     ),\n  //     variant: 'pagination',\n  //     alignment: { default: 'alignRight' },\n  //   });\n  // }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClearAllFilters,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Skeleton, PaginationVariant } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { getLoadingRowsCount, getFormattedDate } from '@app/utils';\nimport { DefaultApi, ServiceAccountRequest, ServiceAccountListItem } from '../../../../../openapi/api';\nimport { ServiceAccountsToolbar, ServiceAccountsToolbarProps } from './ServiceAccountsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  handleCreateModal: () => void;\n};\n\nconst ServiceAccountsTableView: React.FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  total,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n  handleCreateModal,\n  mainToggle,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  const tableColumns = [\n    { title: t('common.name') },\n    { title: t('common.clientID') },\n    { title: t('common.owner'), transforms: [cellWidth(20)] },\n    { title: t('common.description') },\n    { title: t('time_created') },\n  ];\n\n  const onSelectKebabDropdownOption = (event: any, originalData: ServiceAccountListItem, selectedOption: string) => {\n    if (selectedOption === 'reset-credentials') {\n      onResetCredentials && onResetCredentials(originalData);\n    } else if (selectedOption === 'delete-account') {\n      onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    }\n\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!serviceAccountsDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, owner, description, clientID, created_at } = row;\n      tableRow.push({\n        cells: [name, clientID, owner, description, { title: getFormattedDate(created_at, t('ago')) }],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('common.reset_credentials'),\n        id: 'reset-credentials',\n        ['data-testid']: 'tableServiceAccounts-actionResetCredentials',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'reset-credentials'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_reset_service_account'),\n        },\n      },\n      {\n        title: t('serviceAccount.delete_service_account'),\n        id: 'delete-account',\n        ['data-testid']: 'tableServiceAccounts-actionDeleteAccount',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-account'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_delete_service_account'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'clientID';\n      case 2:\n        return 'owner';\n      case 3:\n        return 'description';\n      case 4:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'clientID':\n        return 1;\n      case 'owner':\n        return 2;\n      case 'description':\n        return 3;\n      case 'created_at':\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, columnIndex: number, sortByDirection: SortByDirection, extraData: IExtraColumnData) => {\n    setOrderBy && setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        handleCreateModal={handleCreateModal}\n        mainToggle={mainToggle}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('serviceAccount.service_account_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems && serviceAccountItems?.length < 1 && serviceAccountsDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {/* {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = \"MGD-SERV-API-4\",\n  DUPLICATE_INSTANCE_NAME = \"MGD-SERV-API-36\"\n}\n\nexport {\n  ErrorCodes,\n  isServiceApiError\n}\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface InstantQuery\n */\nexport interface InstantQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof InstantQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryList\n */\nexport interface MetricsInstantQueryList extends MetricsInstantQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryListAllOf\n */\nexport interface MetricsInstantQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryList\n */\nexport interface MetricsRangeQueryList extends MetricsRangeQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryListAllOf\n */\nexport interface MetricsRangeQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface RangeQuery\n */\nexport interface RangeQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof RangeQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof RangeQuery\n     */\n    values?: Array<Values>;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: string;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * Schema for the service status response body\n * @export\n * @interface ServiceStatus\n */\nexport interface ServiceStatus {\n    /**\n     * \n     * @type {ServiceStatusKafkas}\n     * @memberof ServiceStatus\n     */\n    kafkas?: ServiceStatusKafkas;\n}\n/**\n * The kafka resource api status\n * @export\n * @interface ServiceStatusKafkas\n */\nexport interface ServiceStatusKafkas {\n    /**\n     * Indicates whether we have reached kafka maximum capacity\n     * @type {boolean}\n     * @memberof ServiceStatusKafkas\n     */\n    max_capacity_reached: boolean;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface VersionMetadata\n */\nexport interface VersionMetadata {\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    href?: string;\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadata\n     */\n    collections?: Array<ObjectReference>;\n}\n/**\n * \n * @export\n * @interface VersionMetadataAllOf\n */\nexport interface VersionMetadataAllOf {\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadataAllOf\n     */\n    collections?: Array<ObjectReference>;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByInstantQuery.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getServiceAccountById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/status`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByInstantQuery(id, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getServiceAccountById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async serviceStatus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceStatus>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).serviceStatus(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async versionMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionMetadata>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).versionMetadata(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {\n            return DefaultApiFp(configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {\n            return DefaultApiFp(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus(options?: any): AxiosPromise<ServiceStatus> {\n            return DefaultApiFp(configuration).serviceStatus(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata(options?: any): AxiosPromise<VersionMetadata> {\n            return DefaultApiFp(configuration).versionMetadata(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    serviceStatus(options?: any): AxiosPromise<ServiceStatus>;\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    versionMetadata(options?: any): AxiosPromise<VersionMetadata>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getServiceAccountById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public serviceStatus(options?: any) {\n        return DefaultApiFp(this.configuration).serviceStatus(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public versionMetadata(options?: any) {\n        return DefaultApiFp(this.configuration).versionMetadata(options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"],"sourceRoot":""}