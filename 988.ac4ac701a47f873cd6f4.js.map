{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/constants/constants.ts","webpack://mk-ui-frontend/./src/app/components/EmptyState/EmptyState.tsx","webpack://mk-ui-frontend/./src/openapi/base.ts","webpack://mk-ui-frontend/./src/openapi/api.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/TablePagination.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://mk-ui-frontend/./src/app/utils/error.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://mk-ui-frontend/./src/app/models/models.ts","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/Drawer/GenerateCredential.tsx","webpack://mk-ui-frontend/./src/app/Drawer/InstanceDrawer.tsx","webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/hooks/useTimeout.ts","webpack://mk-ui-frontend/./src/app/api/ApiContext.tsx","webpack://mk-ui-frontend/./src/app/auth/AuthContext.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://mk-ui-frontend/./src/app/components/Loading/Loading.tsx","webpack://mk-ui-frontend/./src/i18n/i18n.ts"],"names":["InstanceStatus","EmptyState","createStreamsInstance","setCreateStreamsInstance","t","useTranslation","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","onClick","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","name","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequestPayload","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","undefined","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","createServiceAccount","serviceAccountRequest","deleteKafkaById","id","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","listCloudProviderRegions","page","listCloudProviders","listKafkas","orderBy","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI","StatusColumn","status","Flex","FlexItem","spacer","default","toLowerCase","CheckCircleIcon","className","ExclamationCircleIcon","PendingIcon","Spinner","IconSize","getStatusIcon","getStatus","DeleteInstanceModal","confirmActionLabel","cancelActionLabel","title","onConfirm","isModalOpen","setIsModalOpen","description","ModalVariant","titleIconVariant","instanceStatus","selectedInstance","useState","instanceNameInput","setInstanceNameInput","selectedInstanceName","handleModalToggle","Modal","isOpen","showClose","onClose","actions","key","ButtonVariant","isDisabled","COMPLETED","Text","dangerouslySetInnerHTML","__html","htmlFor","TextInput","type","value","onChange","TablePagination","perPage","itemCount","isCompact","paginationTitle","history","location","searchParams","URLSearchParams","setSearchParam","useCallback","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","Pagination","titles","StreamsToolbar","setFilterSelected","filterSelected","total","filteredValue","setFilteredValue","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","disabled","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","updateAppliedFilter","filterKey","filterValue","copyFilteredValue","Object","assign","filterIndex","findIndex","filter","toUpdate","splice","trim","onFilter","filterType","clearSelection","deleteChip","onInputPress","event","target","getSelectionForFilter","selectedFilters","length","toggleGroupItems","ToolbarGroup","Select","SelectVariant","onToggle","selections","onSelect","_event","selection","map","option","index","SelectOption","InputGroup","placeholder","input","onKeyPress","SearchIcon","isPlaceholder","placeholderText","toolbarChipGroup","ChipGroup","numChips","Chip","isReadOnly","Toolbar","clearAllFilters","getInitialFilter","inset","lg","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItem","alignment","widgetId","isServiceApiError","error","response","code","StreamsTableView","mainToggle","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToInstance","refresh","kafkaDataLoaded","expectedTotal","setOrderBy","authContext","useContext","AuthContext","ApiContext","isDeleteModalOpen","setIsDeleteModalOpen","setSelectedInstance","tableColumns","transforms","sortable","items","setItems","loggedInUser","setLoggedInUser","addAlert","useEffect","getUsername","username","lastItemsState","parse","item","FAILED","forEach","instances","cfItem","AlertVariant","incompleteKafkas","PROVISIONING","ACCEPTED","onSelectDeleteInstanceKebab","instance","onDeleteInstance","instanceId","getToken","apisService","DefaultApi","reason","instanceName","config","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","Table","cells","rows","tableRow","loadingCount","loadingRowCount","totalPage","Math","floor","getLoadingRowsCount","i","Skeleton","row","cloud_provider","owner","cloudProviderDisplayName","regionDisplayName","isInline","originalData","preparedTableCells","actionResolver","rowData","_extraData","onDelete","isUserSameAsLoggedIn","tooltip","tooltipProps","position","content","style","pointerEvents","cursor","getActionResolver","onSort","direction","getParameterForSortIndex","sortBy","sort","split","SortByDirection","getSortBy","TableHeader","TableBody","EmptyStateVariant","PaginationVariant","multi_az","emptyProvider","kind","display_name","enabled","CreateInstanceModal","cloudProviders","newKafka","NewKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","fetchCloudRegions","provider","res","providerRegions","providers","concat","enabledRegions","prevData","enableCloudProviders","getTileIcon","AwsIcon","color","onChangeAvailabilty","zone","isValid","message","test","Form","FormAlert","Alert","FormGroup","label","helperText","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","Tile","isSelected","FormSelect","validRegion","FormSelectOption","ToggleGroup","GenerateCredential","steps","isCreated","setIsCreated","setIsOpen","stepNo","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","credential","setCredential","isLoading","setIsLoading","setError","onMove","curr","prev","handleChangeStep1","checked","handleChangeStep4","step1","TextContent","component","TextVariants","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","bodyContent","step3","step4","clientID","KeyIcon","InputGroupText","ClipboardCopy","clientSecret","Bullseye","Checkbox","spinnerAriaValueText","Wizard","isFinishedStep","unshift","nextButtonText","onNext","onBack","hideClose","InstanceDrawer","activeTab","instanceDetail","created_at","updated_at","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","handleTab2Click","tabIndex","externalServer","bootstrapServerHost","endsWith","resourcesTab","sampleCodeTab","CopyIcon","renderTextListItemDetail","TextListItem","TextListItemVariants","detailsTab","Grid","GridItem","span","Card","isFlat","CardBody","TextList","TextListVariants","format","DrawerPanelContent","widths","Loading","DrawerHead","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Tabs","activeKey","Tab","eventKey","TabTitleText","isSecondary","OpenshiftStreams","callback","delay","savedCallback","parseInt","get","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setMainToggle","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","drawerRef","fetchKafkas","isValidToken","filters","x","join","kafkaInstances","useRef","current","setTimeout","clearInterval","refreshKafkas","Drawer","isExpanded","onExpand","focus","DrawerContent","panelContent","PageSection","PageSectionVariants","Level","LevelItem","padding","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","body","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","pseudolocalizationEnabled","window","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","lng","Intl","NumberFormat","Date","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","windowError","console"],"mappings":"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","file":"988.ac4ac701a47f873cd6f4.js","sourcesContent":["enum InstanceStatus{\n  COMPLETED=\"complete\",\n  ACCEPTED=\"accepted\",\n  PROVISIONING=\"provisioning\",\n  FAILED=\"failed\"\n}\n\nexport{\n  InstanceStatus\n}","import React from 'react';\nimport { Title, Button, EmptyState as PFEmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\ntype EmptyStateProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ createStreamsInstance, setCreateStreamsInstance }) => {\n  const { t } = useTranslation();\n  const onCreate = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n  return (\n    <>\n      <PFEmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('you_do_not_have_any_kafka_instances_yet')}\n        </Title>\n        <EmptyStateBody>{t('create_a_kafka_instance_to_get_started')}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={onCreate}>\n          {t('create_a_kafka_instance')}\n        </Button>\n      </PFEmptyState>\n    </>\n  );\n};\n\nexport { EmptyState };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: region, cloud_provider, multi_az, name, status. Allowed comparators are &#x60;&lt;&gt;&#x60; and &#x60;&#x3D;&#x60; For example, to retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned. Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n};\n\nconst StatusColumn = ({ status }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value:\n        return t(statusOptions[0].value);\n      case statusOptions[1].value:\n        return t(statusOptions[1].value);\n      case statusOptions[2].value:\n        return t(statusOptions[2].value);\n      case statusOptions[3].value:\n        return t(statusOptions[3].value);\n      default:\n        return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value:\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value:\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value:\n          return <PendingIcon />;\n      case statusOptions[3].value:\n        return <Spinner size={IconSize.md} />;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>{getStatusIcon()}</FlexItem>\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { FunctionComponent, useState } from 'react';\nimport { Modal, Button, ButtonVariant, ModalVariant, ModalProps, TextInput, Text } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/constants';\nimport './DeleteInstanceModal.css';\nimport { KafkaRequest } from 'src/openapi';\n\nexport interface DeleteInstanceModalProps extends Omit<ModalProps, 'children'> {\n  confirmActionLabel?: string;\n  cancelActionLabel?: string;\n  description?: string;\n  selectedInstance: KafkaRequest;\n  isModalOpen: boolean;\n  instanceStatus: string | undefined;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onConfirm: (instance: KafkaRequest) => Promise<void>;\n}\n\nconst DeleteInstanceModal: FunctionComponent<DeleteInstanceModalProps> = ({\n  confirmActionLabel,\n  cancelActionLabel,\n  title,\n  onConfirm,\n  isModalOpen,\n  setIsModalOpen,\n  description,\n  variant = ModalVariant.small,\n  titleIconVariant = 'warning',\n  instanceStatus,\n  selectedInstance,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const selectedInstanceName: string = selectedInstance?.name || '';\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.COMPLETED) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onConfirmDelete = () => {\n    onConfirm(selectedInstance);\n  };\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={t('delete_instance_modal')}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          key=\"confirm-button\"\n          id=\"mk--confirm__button\"\n          variant={ButtonVariant.danger}\n          onClick={onConfirmDelete}\n          isDisabled={isConfirmButtonDisabled()}\n        >\n          {confirmActionLabel || t('delete_instance')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"mk--cancel__button\" onClick={handleModalToggle}>\n          {cancelActionLabel || t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Text className=\"mk--delete-instance__modal--text\" dangerouslySetInnerHTML={{ __html: description || '' }} />\n      {instanceStatus === InstanceStatus.COMPLETED && (\n        <>\n          <label\n            htmlFor=\"instance-name\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport { DeleteInstanceModal };\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { Pagination, PaginationProps, PaginationTitles } from '@patternfly/react-core';\n\ninterface TablePagination extends PaginationProps, Pick<PaginationTitles, 'paginationTitle'> {}\n\nexport const TablePagination: FunctionComponent<TablePagination> = ({\n  page,\n  perPage,\n  itemCount,\n  variant,\n  isCompact,\n  paginationTitle,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  if (itemCount && itemCount > 0) {\n    return (\n      <Pagination\n        itemCount={itemCount}\n        perPage={perPage}\n        page={page}\n        onSetPage={onSetPage}\n        variant={variant || 'top'}\n        onPerPageSelect={onPerPageSelect}\n        isCompact={isCompact}\n        titles={{ paginationTitle }}\n      />\n    );\n  }\n  return null;\n};\n","import React, { useState } from 'react';\nimport {\n  ChipGroup,\n  Chip,\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarToggleGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  SelectOptionObject,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { TablePagination } from './TablePagination';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions } from '@app/utils/utils';\nimport { getInitialFilter } from '@app/OpenshiftStreams/OpenshiftStreams';\nimport './StreamsToolbar.css';\n\ntype StreamsToolbarProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  setFilterSelected,\n  filterSelected,\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n}) => {\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const { t } = useTranslation();\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { value: t('name'), disabled: false },\n    { value: t('cloud_provider'), disabled: false },\n    { value: t('region'), disabled: false },\n    { value: t('owner'), disabled: false },\n    { value: t('status'), disabled: false },\n  ];\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { value: t(cloudProvider.value), disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { value: t(region.value), disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions.map((status) => {\n    return { value: t(status.value), disabled: false };\n  });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n  };\n\n  const onClear = () => {\n    setFilteredValue(getInitialFilter() as FilterType[]);\n  };\n\n  const updateAppliedFilter = (filterKey: string, filterValue?: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === filterKey);\n    let toUpdate = true;\n    if (filterIndex >= 0) {\n      if (copyFilteredValue[filterIndex].filterValue !== filterValue) {\n        copyFilteredValue.splice(filterIndex, 1);\n      } else {\n        toUpdate = false;\n      }\n    }\n    if (toUpdate && filterValue?.trim() !== '') {\n      const filter: FilterType = { filterKey, filterValue };\n      copyFilteredValue.splice(0, 0, filter);\n    }\n    toUpdate && setFilteredValue(copyFilteredValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue) {\n      updateAppliedFilter('name', nameInputValue);\n    } else if (filterType === 'owner' && ownerInputValue) {\n      updateAppliedFilter('owner', ownerInputValue);\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateAppliedFilter('cloud_provider', selection.toString());\n    setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateAppliedFilter('region', selection.toString());\n    setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateAppliedFilter('status', selection.toString());\n    setIsStatusFilterExpanded(false);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const deleteChip = (key: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === key);\n    if (key === 'name' && copyFilteredValue[filterIndex].filterValue === nameInputValue?.trim()) {\n      setNameInputValue('');\n    }\n    if (key === 'owner' && copyFilteredValue[filterIndex].filterValue === ownerInputValue?.trim()) {\n      setOwnerInputValue('');\n    }\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter') {\n      if (event?.target?.name === 'filter names') {\n        onFilter('name');\n      } else if (event.target?.name === 'filter owners') {\n        onFilter('owner');\n      }\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue;\n    }\n    return;\n  };\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <Select\n          variant={SelectVariant.single}\n          aria-label=\"Select filter\"\n          onToggle={onFilterToggle}\n          selections={filterSelected && filterSelected}\n          isOpen={isFilterExpanded}\n          onSelect={onChangeSelect}\n        >\n          {mainFilterOptions.map((option, index) => (\n            <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n          ))}\n        </Select>\n        {filterSelected === t('name') && (\n          <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n            <TextInput\n              name=\"filter names\"\n              id=\"filterText\"\n              type=\"search\"\n              aria-label=\"Search filter input\"\n              placeholder={t('filter_by_name_lower')}\n              onChange={onNameInputChange}\n              onKeyPress={onInputPress}\n              value={nameInputValue}\n            />\n            <Button variant={ButtonVariant.control} onClick={() => onFilter('name')} aria-label=\"Search instances\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        )}\n        {filterSelected === t('cloud_provider') && (\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select cloud provider\"\n            onToggle={onCloudProviderFilterToggle}\n            selections={getSelectionForFilter('cloud_provider')}\n            isOpen={isCloudProviderFilterExpanded}\n            onSelect={onCloudProviderFilterSelect}\n            placeholderText=\"Filter by cloud provider\"\n          >\n            {cloudProviderFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n            ))}\n          </Select>\n        )}\n        {filterSelected === t('region') && (\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select region\"\n            onToggle={onRegionFilterToggle}\n            selections={getSelectionForFilter('region')}\n            isOpen={isRegionFilterExpanded}\n            onSelect={onRegionFilterSelect}\n            placeholderText=\"Filter by region\"\n          >\n            {regionFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n            ))}\n          </Select>\n        )}\n        {filterSelected === t('owner') && (\n          <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n            <TextInput\n              name=\"filter owners\"\n              id=\"filterOwners\"\n              type=\"search\"\n              aria-label=\"Search filter input\"\n              placeholder={t('filter_by_owner')}\n              onChange={onOwnerInputChange}\n              onKeyPress={onInputPress}\n              value={ownerInputValue}\n            />\n            <Button variant={ButtonVariant.control} onClick={() => onFilter('owner')} aria-label=\"Search owners\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        )}\n        {filterSelected === t('status') && (\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select status\"\n            onToggle={onStatusFilterToggle}\n            selections={getSelectionForFilter('status')}\n            isOpen={isStatusFilterExpanded}\n            onSelect={onStatusFilterSelect}\n            placeholderText=\"Filter by status\"\n          >\n            {statusFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n            ))}\n          </Select>\n        )}\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarChipGroup = (\n    <ToolbarGroup>\n      <ChipGroup numChips={5}>\n        {filteredValue &&\n          filteredValue.map((filter: FilterType, index: number) => {\n            if (filter.filterValue && filter.filterValue.trim() != '') {\n              if (filter.filterKey === 'region' || filter.filterKey === 'cloud_provider') {\n                return (\n                  <Chip className=\"pf-c-chip__text\" key={index} onClick={() => deleteChip(filter.filterKey)} isReadOnly>\n                    {t(filter.filterKey)}: {filter.filterValue}\n                  </Chip>\n                );\n              } else {\n                return (\n                  <Chip className=\"pf-c-chip__text\" key={index} onClick={() => deleteChip(filter.filterKey)}>\n                    {t(filter.filterKey)}: {filter.filterValue}\n                  </Chip>\n                );\n              }\n            }\n          })}\n      </ChipGroup>\n    </ToolbarGroup>\n  );\n\n  return (\n    <Toolbar id=\"instance-toolbar\" clearAllFilters={onClear} inset={{ lg: 'insetLg' }}>\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          {toggleGroupItems}\n        </ToolbarToggleGroup>\n        <ToolbarItem>\n          <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n            {t('create_kafka_instance')}\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <TablePagination\n            widgetId=\"pagination-options-menu-top\"\n            itemCount={total}\n            page={page}\n            perPage={perPage}\n            isCompact={true}\n            paginationTitle={t('minimal_pagination')}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n      <ToolbarContent>{toolbarChipGroup}</ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport { StreamsToolbar };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nexport const isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  Table,\n  TableBody,\n  TableHeader,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection\n} from '@patternfly/react-table';\nimport {\n  AlertVariant,\n  PaginationVariant,\n  Skeleton,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n  EmptyStateIcon,\n  EmptyStateVariant\n} from '@patternfly/react-core';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { InstanceStatus } from '@app/constants';\nimport { DeleteInstanceModal } from '@app/components/DeleteInstanceModal';\nimport { TablePagination } from './TablePagination';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { useHistory } from 'react-router-dom';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue?: string;\n};\n\ntype TableProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: (operation: string) => void;\n  page: number;\n  perPage: number;\n  total: number;\n  kafkaDataLoaded: boolean;\n  expectedTotal: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected: string;\n  setFilterSelected: (filterSelected: string) => void;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.COMPLETED) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToInstance,\n  refresh,\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy\n}: TableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  // function to get exact number of skeleton count required for the current page\n  const getLoadingRowsCount = () => {\n    // initiaise loadingRowCount by perPage\n    let loadingRowCount = perPage;\n    /*\n      if number of expected count is greater than 0\n        calculate the loadingRowCount\n      else\n        leave the loadingRowCount to perPage\n     */\n    if (expectedTotal && expectedTotal > 0) {\n      // get total number of pages\n      const totalPage =\n        expectedTotal % perPage !== 0 ? Math.floor(expectedTotal / perPage) + 1 : Math.floor(expectedTotal / perPage);\n      // check whether the current page is the last page\n      if (page === totalPage) {\n        // check whether to total expected count is greater than perPage count\n        if (expectedTotal > perPage) {\n          // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n          loadingRowCount = expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n        } else {\n          loadingRowCount = expectedTotal;\n        }\n      }\n    }\n    // return the exact number of skeleton expected at the time of loading\n    return loadingRowCount !== 0 ? loadingRowCount : perPage;\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.COMPLETED || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.COMPLETED) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const getActionResolver = (rowData: IRowData, onDelete: (data: KafkaRequest) => void) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    const resolver: (IAction | ISeparator)[] = mainToggle\n      ? [\n          {\n            title: t('view_details'),\n            id: 'view-instance',\n            onClick: () => onViewInstance(originalData),\n          },\n          {\n            title: t('connect_to_instance'),\n            id: 'connect-instance',\n            onClick: () => onViewConnection(originalData),\n          },\n          {\n            title: t('delete_instance'),\n            id: 'delete-instance',\n            onClick: () => isUserSameAsLoggedIn && onDelete(originalData),\n            tooltip: !isUserSameAsLoggedIn,\n            tooltipProps: {\n              position: 'left',\n              content: t('no_permission_to_delete_kafka'),\n            },\n            isDisabled: !isUserSameAsLoggedIn,\n            style: {\n              pointerEvents: 'auto',\n              cursor: 'default',\n            },\n          },\n        ]\n      : [\n          {\n            title: t('view_details'),\n            id: 'view-instance',\n            onClick: () => onViewInstance(originalData),\n          },\n          {\n            title: t('delete_instance'),\n            id: 'delete-instance',\n            onClick: () => isUserSameAsLoggedIn && onDelete(originalData),\n            tooltip: !isUserSameAsLoggedIn,\n            tooltipProps: {\n              position: 'left',\n              content: t('no_permission_to_delete_kafka'),\n            },\n            isDisabled: !isUserSameAsLoggedIn,\n            style: {\n              pointerEvents: 'auto',\n              cursor: 'default',\n            },\n          },\n        ];\n    return resolver;\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount();\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title: (\n              <Button variant=\"link\" isInline onClick={() => onConnectToInstance(row as KafkaRequest)}>\n                {name}\n              </Button>\n            ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} />,\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, onSelectDeleteInstanceKebab);\n  };\n\n  const onSelectDeleteInstanceKebab = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.deleteKafkaById(instanceId).then(() => {\n        setIsDeleteModalOpen(false);\n        addAlert(t('kafka_successfully_deleted', { name: instance?.name }), AlertVariant.success);\n        refresh('delete');\n      });\n    } catch (error) {\n      setIsDeleteModalOpen(false);\n      let reason;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string) => {\n    setOrderBy(`${getParameterForSortIndex(index)} ${direction}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        createStreamsInstance={createStreamsInstance}\n        setCreateStreamsInstance={setCreateStreamsInstance}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n      />\n      <Table\n        cells={tableColumns}\n        rows={preparedTableCells()}\n        aria-label={t('cluster_instance_list')}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={getSortBy()}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      {kafkaInstanceItems.length < 1 && (\n        <EmptyState variant={EmptyStateVariant.small}>\n          <EmptyStateIcon icon={SearchIcon} />\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {t('no_matches')}\n          </Title>\n          <EmptyStateBody>{t('please_try_adjusting_your_search_query_and_try_again')}</EmptyStateBody>\n        </EmptyState>\n      )}\n      <TablePagination\n        widgetId=\"pagination-options-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        paginationTitle={t('full_pagination')}\n      />\n      {isDeleteModalOpen && (\n        <DeleteInstanceModal\n          title={title}\n          selectedInstance={selectedInstance}\n          isModalOpen={isDeleteModalOpen}\n          instanceStatus={selectedInstance?.status}\n          setIsModalOpen={setIsDeleteModalOpen}\n          onConfirm={onDeleteInstance}\n          description={description}\n          confirmActionLabel={confirmActionLabel}\n        />\n      )}\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup,\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion, KafkaRequest } from '../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\n\ntype CreateInstanceModalProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  refresh: (operation: string) => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent<CreateInstanceModalProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  cloudProviders,\n  refresh,\n}: CreateInstanceModalProps) => {\n  const { t } = useTranslation();\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const { addAlert } = useAlerts();\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = true;\n\n    if (kafkaFormData.name === undefined || kafkaFormData.name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(kafkaFormData.name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n\n    if (kafkaFormData.region === undefined || kafkaFormData.region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n\n    const accessToken = await authContext?.getToken();\n\n    if (isValid) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.createKafka(true, kafkaFormData).then((res) => {\n          // addAlert(t('kafka_creation_accepted'), AlertVariant.info);\n          handleModalToggle();\n          refresh('create');\n        });\n      } catch (error) {\n        let reason;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    } else {\n      setIsFormValid(false);\n    }\n  };\n\n  const handleModalToggle = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (isValid) {\n      if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n      if (nameValidated.fieldState === 'error') {\n        setNameValidated({ fieldState: 'default', message: '' });\n      }\n    } else {\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n  const onChangeAvailabilty = (zone: string) => {\n    setKafkaFormData({ ...kafkaFormData, multi_az: zone === 'multi' });\n  };\n  return (\n    <>\n      <Modal\n        variant={ModalVariant.medium}\n        title={t('create_a_kafka_instance')}\n        isOpen={createStreamsInstance}\n        onClose={handleModalToggle}\n        actions={[\n          <Button key=\"create\" variant=\"primary\" onClick={onCreateInstance} isDisabled={!isFormValid}>\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Form>\n          {!isFormValid && (\n            <FormAlert>\n              <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n            </FormAlert>\n          )}\n          <FormGroup\n            label={t('instance_name')}\n            helperText={t('create_instance_name_helper_text')}\n            helperTextInvalid={nameValidated.message}\n            helperTextInvalidIcon={nameValidated.message != '' && <ExclamationCircleIcon />}\n            isRequired\n            validated={nameValidated.fieldState}\n            fieldId=\"form-instance-name\"\n          >\n            <TextInput\n              isRequired\n              validated={nameValidated.fieldState}\n              type=\"text\"\n              id=\"form-instance-name\"\n              name=\"instance-name\"\n              value={kafkaFormData?.name}\n              onChange={handleInstanceNameChange}\n            />\n          </FormGroup>\n          <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n            {cloudProviders.map(\n              (provider: CloudProvider) =>\n                provider.enabled && (\n                  <Tile\n                    key={`tile-${provider.name}`}\n                    title={provider.display_name ? t(provider.display_name) : ''}\n                    icon={getTileIcon(provider?.name)}\n                    isSelected={kafkaFormData.cloud_provider === provider.name}\n                    onClick={() => onCloudProviderSelect(provider)}\n                  />\n                )\n            )}\n          </FormGroup>\n          <FormGroup\n            label={t('cloud_region')}\n            helperTextInvalid={cloudRegionValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            validated={cloudRegionValidated.fieldState}\n            fieldId=\"form-cloud-region-option\"\n          >\n            <FormSelect\n              validated={cloudRegionValidated.fieldState}\n              value={kafkaFormData.region}\n              onChange={handleCloudRegionChange}\n              id=\"cloud-region-select\"\n              name=\"cloud-region\"\n              aria-label={t('cloud_region')}\n            >\n              {cloudRegions.map(\n                (option: CloudRegion, index) =>\n                  option.enabled && (\n                    <FormSelectOption\n                      key={index}\n                      value={option.id}\n                      label={option.id ? t(option.id) : option.display_name || ''}\n                    />\n                  )\n              )}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n            <ToggleGroup aria-label={t('availability_zone_selection')}>\n              {/*\n                  TODO: Currently using HTML version\n                  Issue: https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/24\n              */}\n              <div className=\"pf-c-toggle-group__item\">\n                <button\n                  className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === false && 'pf-m-selected'}`}\n                  type=\"button\"\n                  id=\"single\"\n                  disabled\n                  onClick={() => {\n                    onChangeAvailabilty('single');\n                  }}\n                >\n                  <span className=\"pf-c-toggle-group__text\"> {t('single')}</span>\n                </button>\n              </div>\n              <div className=\"pf-c-toggle-group__item\">\n                <button\n                  className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === true && 'pf-m-selected'}`}\n                  type=\"button\"\n                  onClick={() => {\n                    onChangeAvailabilty('multi');\n                  }}\n                  id=\"multi\"\n                >\n                  <span className=\"pf-c-toggle-group__text\"> {t('multi')}</span>\n                </button>\n              </div>\n            </ToggleGroup>\n          </FormGroup>\n        </Form>\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useState, FunctionComponent, useContext, useEffect } from 'react';\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  PageSection,\n  PageSectionVariants,\n  Popover,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DefaultApi, ServiceAccountRequest } from '../../openapi/api';\n\ntype GenerateCredential = {\n  instanceName?: string;\n  mainToggle?: boolean;\n};\n\nconst GenerateCredential: FunctionComponent<GenerateCredential> = ({\n  instanceName = '',\n  mainToggle,\n}: GenerateCredential) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n  const [credential, setCredential] = useState<any | undefined>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState('');\n\n  const generateCredential = async () => {\n    const accessToken = await authContext?.getToken();\n    const serviceAccountRequest: ServiceAccountRequest = {\n      name: instanceName,\n    };\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.createServiceAccount(serviceAccountRequest).then((res) => {\n        setCredential(res?.data);\n        setIsLoading(false);\n        setIsOpen(true);\n      });\n    } catch (err) {\n      setIsLoading(false);\n      let reason;\n      if (isServiceApiError(err)) {\n        reason = err.response?.data.reason;\n      }\n      setError(reason);\n    }\n  };\n\n  const handleModalToggle = () => {\n    if (mainToggle) {\n      setIsOpen(true);\n      setIsLoading(false);\n    } else {\n      setIsLoading(true);\n      setError('');\n      setCredential(undefined);\n      generateCredential();\n    }\n  };\n\n  // useEffect(() => {\n  //   if (stepNo === 5) {\n  //     generateCredential();\n  //   }\n  // }, [stepNo]);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setIsCreated(!isCreated);\n    setCredential(undefined);\n    setConfirmationCheckbox(false);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      {mainToggle && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title=\"These credentials were not actually generated from this flow as it is part of the mock UI. For now, please turn off the mock UI to generate credentials.\"\n        />\n      )}\n      <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={KeyIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('credential_successfully_generated')}\n        </Title>\n        <EmptyStateBody>{t('clientid_empty_state_body')}</EmptyStateBody>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">{t('client_id')}</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            { mainToggle ? 'srvc-acct-962bc96e-4339-4aee-9505-040d5069c6a5' : credential?.clientID }\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            { mainToggle ? '441cdf77-083c-41d1-9050-c27a3b4247ac' : credential?.clientSecret }\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button variant=\"primary\" isDisabled={!confirmationCheckbox} onClick={handleClose}>\n          {t('close')}\n        </Button>\n      </EmptyState>\n    </>\n  );\n\n  const getSteps = () => {\n    const steps: WizardStep[] = [{ id: 5, name: t('finish'), component: clientID, isFinishedStep: true }];\n    if (mainToggle) {\n      steps.unshift(\n        { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n        { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n        { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n        { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') }\n      );\n    }\n    return steps;\n  };\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      <FlexItem className=\"pf-m-align-right\">\n        <Button\n          variant=\"secondary\"\n          onClick={handleModalToggle}\n          className=\"pf-u-ml-md\"\n          spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n          isLoading={isLoading}\n        >\n          {t('generate_credential')}\n        </Button>\n      </FlexItem>\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={getSteps()}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        hideClose={stepNo === 5}\n      />\n      {error && (\n        <FlexItem className=\"pf-m-grow\">\n          <Alert variant=\"danger\" isInline title={error} />\n        </FlexItem>\n      )}\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Tabs,\n  Tab,\n  TabTitleText,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport './InstanceDrawer.css';\nimport { GenerateCredential } from './GenerateCredential';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { KafkaRequest } from 'src/openapi';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { useTranslation } from 'react-i18next';\n\nexport type InstanceDrawerProps = {\n  mainToggle: boolean;\n  onClose: () => void;\n  isExpanded: boolean;\n  drawerRef: any;\n  instanceDetail?: KafkaRequest;\n  activeTab?: 'Details' | 'Connection';\n};\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n}) => {\n  const { t } = useTranslation();\n  const { id, created_at, updated_at, owner } = instanceDetail || {};\n  dayjs.extend(localizedFormat);\n\n  const [activeTab1Key, setActiveTab1Key] = useState(0);\n  const [activeTab2Key, setActiveTab2Key] = useState(0);\n\n  useEffect(() => {\n    setActiveTab1Key(activeTab === 'Details' ? 0 : 1);\n  }, [activeTab]);\n\n  const handleTab1Click = (_event, tabIndex) => {\n    setActiveTab1Key(tabIndex);\n  };\n\n  const handleTab2Click = (_event, tabIndex) => {\n    setActiveTab2Key(tabIndex);\n  };\n\n  const externalServer = instanceDetail?.bootstrapServerHost?.endsWith(\":443\") ? instanceDetail?.bootstrapServerHost : `${instanceDetail?.bootstrapServerHost}:443`;\n\n  const resourcesTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n          <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n          <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_2')}</Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('external_server')}\n          </Text>\n        </TextContent>\n        <Flex>\n          <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n            <ClipboardCopy>{externalServer}</ClipboardCopy>\n          </FlexItem>\n          <GenerateCredential instanceName={instanceDetail?.name} mainToggle={mainToggle} />\n        </Flex>\n        {mainToggle && (\n          <>\n            <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n              <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n              <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n            </TextContent>\n            <ClipboardCopy>https://:30123</ClipboardCopy>\n          </>\n        )}\n      </div>\n    </>\n  );\n\n  const sampleCodeTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n  const renderTextListItemDetail = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  const detailsTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mk--instance-details__drawer--grid\">\n            <GridItem span={6} className=\"mk--instance-details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItemDetail(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItemDetail(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItemDetail(t('id'), id)}\n            {renderTextListItemDetail(t('owner'), owner)}\n            {renderTextListItemDetail(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItemDetail(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n\n  const renderConnectionTab = () => {\n    if (mainToggle) {\n      return (\n        <div className=\"mk--instance-details__drawer--tab-content pf-m-secondary\">\n          <Tabs activeKey={activeTab2Key} isSecondary onSelect={handleTab2Click}>\n            <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n              {resourcesTab}\n            </Tab>\n            <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n              {sampleCodeTab}\n            </Tab>\n          </Tabs>\n        </div>\n      );\n    }\n    return <>{resourcesTab}</>;\n  };\n\n  return (\n    <DrawerPanelContent className=\"instance-drawer\" widths={{ default: 'width_50' }}>\n      {instanceDetail === undefined ? (\n        <Loading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                {t('instance_name')}\n              </Text>\n              <Title headingLevel=\"h1\" size={TitleSizes['xl']} className=\"pf-u-mt-0 \">\n                {instanceDetail?.name}\n              </Title>\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n              <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n                {detailsTab}\n              </Tab>\n              <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>}>\n                {renderConnectionTab()}\n              </Tab>\n            </Tabs>\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Drawer,\n  DrawerContent,\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Switch,\n  Title,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { EmptyState } from '../components/EmptyState/EmptyState';\nimport { StreamsTableView, FilterType } from '../components/StreamsTableView/StreamsTableView';\nimport { CreateInstanceModal } from '../components/CreateInstanceModal/CreateInstanceModal';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../openapi/api';\nimport { AlertProvider } from '../components/Alerts/Alerts';\nimport { InstanceDrawer } from '../Drawer/InstanceDrawer';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError } from '@app/utils/error';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions } from '@app/utils/utils';\nimport './OpenshiftStreams.css';\n\ntype OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nexport const getInitialFilter = () => {\n  return [\n    { filterKey: 'region', filterValue: cloudRegionOptions[0].label },\n    { filterKey: 'cloud_provider', filterValue: cloudProviderOptions[0].label },\n  ];\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [createStreamsInstance, setCreateStreamsInstance] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [mainToggle, setMainToggle] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('Name');\n  const [filteredValue, setFilteredValue] = useState<Array<FilterType>>(getInitialFilter() as FilterType[]);\n\n  const drawerRef = React.createRef<any>();\n\n  const onExpand = () => {\n    drawerRef.current && drawerRef.current.focus();\n  };\n\n  const onCloseClick = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      if (filter.filterValue && filter.filterValue.trim() !== '') {\n        if (filter.filterKey === 'name') {\n          filters.push(`name = ${filter.filterValue}`);\n        } else if (filter.filterKey === 'owner') {\n          filters.push(`owner = ${filter.filterValue}`);\n        } else if (filter.filterKey === 'cloud_provider') {\n          filters.push(\n            `cloud_provider = ${\n              cloudProviderOptions[cloudProviderOptions.findIndex((x) => x.label === filter.filterValue)].value\n            }`\n          );\n        } else if (filter.filterKey === 'region') {\n          filters.push(\n            `region = ${cloudRegionOptions[cloudRegionOptions.findIndex((x) => x.label === filter.filterValue)].value}`\n          );\n        } else if (filter.filterKey === 'status') {\n          filters.push(\n            `status = ${statusOptions[statusOptions.findIndex((x) => x.label === filter.filterValue)].value}`\n          );\n        }\n      }\n    });\n    return filters.join(' and ');\n  };\n  // Functions\n  const fetchKafkas = async () => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken)) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService\n          .listKafkas(page?.toString(), perPage?.toString(), orderBy && orderBy, getFilterString())\n          .then((res) => {\n            const kafkaInstances = res.data;\n            setKafkaInstancesList(kafkaInstances);\n            setKafkaInstanceItems(kafkaInstances.items);\n            kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal &&\n              setExpectedTotal(kafkaInstancesList.total);\n            setKafkaDataLoaded(true);\n          });\n        // Check to see if at least 1 kafka is present\n        await apisService\n          .listKafkas(\n            page?.toString(),\n            perPage?.toString(),\n            orderBy && orderBy,\n            `region = ${cloudRegionOptions[0].value} and cloud_provider = ${cloudProviderOptions[0].value}`\n          )\n          .then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  // Functions\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas();\n  }, []);\n\n  useTimeout(fetchKafkas, 5000);\n\n  const handleSwitchChange = (checked: boolean) => {\n    setMainToggle(checked);\n  };\n\n  const refreshKafkas = (value: string) => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    if (value === 'create') {\n      /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n      setExpectedTotal(kafkaInstancesList.total + 1);\n    } else if (value === 'delete') {\n      /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n      setExpectedTotal(kafkaInstancesList.total - 1);\n    }\n    fetchKafkas();\n  };\n\n  return (\n    <>\n      <AlertProvider>\n        <Drawer isExpanded={selectedInstance != null} onExpand={onExpand}>\n          <DrawerContent\n            panelContent={\n              <InstanceDrawer\n                mainToggle={mainToggle}\n                onClose={onCloseClick}\n                isExpanded={selectedInstance != null}\n                drawerRef={drawerRef}\n                activeTab={selectedInstance?.activeTab}\n                instanceDetail={selectedInstance?.instanceDetail}\n              />\n            }\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n                <LevelItem>\n                  <Switch\n                    id=\"simple-switch\"\n                    label={t('mock_ui')}\n                    labelOff={t('currently_supported_ui')}\n                    isChecked={mainToggle}\n                    onChange={handleSwitchChange}\n                  />\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <Loading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <EmptyState\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  mainToggle={mainToggle}\n                />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  // listOfOwners={listOfOwners}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                />\n              </PageSection>\n            )}\n            {createStreamsInstance && (\n              <CreateInstanceModal\n                createStreamsInstance={createStreamsInstance}\n                setCreateStreamsInstance={setCreateStreamsInstance}\n                cloudProviders={cloudProviders}\n                mainToggle={mainToggle}\n                refresh={refreshKafkas}\n              />\n            )}\n          </DrawerContent>\n        </Drawer>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n  getUsername: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext | undefined>(undefined);\n","import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type AlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string|React.ReactElement;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport { PageSection, Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const __PUBLIC_PATH__: string;\ndeclare const window: Window & {\n  windowError: string;\n};\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__PUBLIC_PATH__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: '~',\n      keySeparator: false,\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\ni18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n"],"sourceRoot":""}