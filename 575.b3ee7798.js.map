{"version":3,"sources":["webpack://kas-ui/./src/app/api/ApiContext.tsx","webpack://kas-ui/./src/app/auth/AuthContext.tsx","webpack://kas-ui/./src/app/common/MASAlerts/MASAlerts.tsx","webpack://kas-ui/./src/app/common/MASEmptyState/MASEmptyState.tsx","webpack://kas-ui/./src/app/common/MASErrorBoundary/MASErrorBoundary.tsx","webpack://kas-ui/./src/app/common/MASFullPageError/MASFullPageError.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccounts.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccountsFederated.tsx","webpack://kas-ui/./src/app/utils/utils.ts"],"names":["ApiContext","basePath","undefined","AuthContext","AlertContext","createContext","addAlert","useAlerts","useContext","AlertProvider","children","useState","alerts","setAlerts","timers","setTimers","useEffect","timersKeys","map","timer","key","timeOuts","filter","alert","includes","timeOut","setTimeout","hideAlert","forEach","clearTimeout","el","Provider","value","title","variant","body","dataTestId","AlertVariant","Date","getTime","onCloseAlert","titleProps","buttonProps","emptyStateIconProps","emptyStateProps","emptyStateBodyProps","ButtonVariant","onClick","restButtonProps","icon","restEmptyStateIconProps","size","TitleSizes","headingLevel","restTitleProps","restEmptyStateBodyProps","className","restEmptyStateProps","css","EmptyStateIcon","Title","EmptyStateBody","Button","state","hasError","updateState","setState","getDerivedStateFromError","_","componentDidCatch","error","errorInfo","console","render","this","UnexpectedError","props","Component","MASFullPageError","pageSection","PageSectionVariants","padding","restPageSectionProps","PageSection","default","ServiceAccounts","t","useTranslation","location","searchParams","URLSearchParams","search","page","parseInt","get","perPage","authContext","serviceAccountList","setServiceAccountList","serviceAccountItems","setServiceAccountItems","isUserUnauthorized","setIsUserUnauthorized","rawServiceAccountDataLength","expectedTotal","serviceAccountsDataLoaded","orderBy","setOrderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isCreateServiceAccountModalOpen","setIsCreateServiceAccountModalOpen","isResetServiceAccountModalOpen","setIsResetServiceAccountModalOpen","serviceAccountToReset","setServiceAccountToReset","isDeleteServiceAccountModalOpen","setIsDeleteServiceAccountModalOpen","serviceAccountToDelete","setServiceAccountToDelete","fetchServiceAccounts","getToken","accessToken","listServiceAccounts","then","response","serviceAccounts","data","items","reason","errorCode","code","handleServerError","handleResetModal","serviceAccount","handleCreateModal","handleDeleteModal","Level","LevelItem","TextContent","Text","component","isOpen","setIsOpen","total","onResetCredentials","onDeleteServiceAccount","renderTableView","getUsername","getConnectToInstancePath","alertContext","InstanceStatus","cloudProviderOptions","label","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_POLL_INTERVAL","isValidToken","getLoadingRowsCount","loadingRowCount","Math","floor"],"mappings":"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","file":"575.b3ee7798.js","sourcesContent":["import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n  getUsername: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext | undefined>(undefined);\n","import React, { useState, createContext, ReactNode, useContext, useEffect } from 'react';\nimport { MASAlertType, MASAlertToastGroup } from './MASAlertToastGroup';\nimport { AlertVariant } from '@patternfly/react-core';\n\nexport type AlertContextProps = {\n  addAlert: (message: string, variant?: AlertVariant, body?: string | React.ReactElement, dataTestId?: string) => void;\n};\n\nexport const AlertContext = createContext<AlertContextProps>({\n  addAlert: () => {},\n});\n\nexport const useAlerts = () => useContext(AlertContext);\n\ntype TimeOut = {\n  key: number;\n  timeOut: NodeJS.Timeout;\n};\n\nexport const AlertProvider = ({ children }: { children: ReactNode }) => {\n  const [alerts, setAlerts] = useState<MASAlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const createId = () => new Date().getTime();\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const addAlert = (\n    title: string,\n    variant: AlertVariant = AlertVariant.default,\n    body?: string | React.ReactElement,\n    dataTestId?: string\n  ) => {\n    setAlerts([...alerts, { key: createId(), title, variant, body, dataTestId }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <MASAlertToastGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState as PFEmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  TitleSizes,\n  TitleProps,\n  ButtonProps,\n  EmptyStateIconProps,\n  EmptyStateProps as PFEmptyStateProps,\n  EmptyStateBodyProps,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport './MASEmptyState.css';\n\nexport type MASEmptyStateProps = {\n  titleProps?: Omit<TitleProps, 'children'>;\n  emptyStateProps?: Omit<PFEmptyStateProps, 'children'>;\n  emptyStateIconProps?: EmptyStateIconProps;\n  emptyStateBodyProps?: Omit<EmptyStateBodyProps, 'children'> & {\n    body?: string | React.ReactNode;\n  };\n  buttonProps?: Omit<ButtonProps, 'children'> & {\n    title?: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    'data-testid'?: string;\n  };\n  children?: React.ReactNode;\n};\n\nexport const MASEmptyState: React.FC<MASEmptyStateProps> = ({\n  titleProps,\n  buttonProps,\n  emptyStateIconProps,\n  emptyStateProps,\n  emptyStateBodyProps,\n  children,\n}: MASEmptyStateProps) => {\n  const { variant = ButtonVariant.primary, onClick, ...restButtonProps } = buttonProps || {};\n  const { icon = PlusCircleIcon, ...restEmptyStateIconProps } = emptyStateIconProps || {};\n  const { title, size = TitleSizes.lg, headingLevel = 'h1', ...restTitleProps } = titleProps || {};\n  const { body, ...restEmptyStateBodyProps } = emptyStateBodyProps || {};\n  const { className, ...restEmptyStateProps } = emptyStateProps || {};\n\n  return (\n    <>\n      <PFEmptyState className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md', className)} {...restEmptyStateProps}>\n        <EmptyStateIcon icon={icon} {...restEmptyStateIconProps} />\n        {title && (\n          <Title headingLevel={headingLevel} size={size} {...restTitleProps}>\n            {title}\n          </Title>\n        )}\n        {body && <EmptyStateBody {...restEmptyStateBodyProps}>{body}</EmptyStateBody>}\n        {buttonProps?.title && (\n          <Button variant={variant} onClick={onClick} {...restButtonProps}>\n            {buttonProps?.title}\n          </Button>\n        )}\n        {children}\n      </PFEmptyState>\n    </>\n  );\n};\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { UnexpectedError } from './UnexpectedError';\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass MASErrorBoundary extends Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('error:', error, errorInfo);\n  }\n\n  updateState = (hasError: boolean) => {\n    this.setState({ hasError });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return <UnexpectedError updateState={this.updateState} />;\n    }\n    return this.props.children;\n  }\n}\n\nexport { MASErrorBoundary };\n","import React from 'react';\nimport { PageSection, PageSectionVariants, PageSectionProps } from '@patternfly/react-core';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport { MASEmptyState, MASEmptyStateProps } from '@app/common';\n\nexport type MASFullPageErrorProps = MASEmptyStateProps & {\n  pageSection?: Omit<PageSectionProps, 'children'>;\n};\n\nexport const MASFullPageError: React.FC<MASFullPageErrorProps> = ({\n  pageSection,\n  titleProps,\n  emptyStateProps,\n  emptyStateIconProps,\n  emptyStateBodyProps,\n  buttonProps,\n}: MASFullPageErrorProps) => {\n  const { variant = PageSectionVariants.default, padding, ...restPageSectionProps } = pageSection || {};\n  return (\n    <PageSection variant={variant} {...restPageSectionProps} padding={padding || { default: 'noPadding' }}>\n      <MASEmptyState\n        titleProps={titleProps}\n        emptyStateProps={emptyStateProps}\n        emptyStateIconProps={{\n          icon: emptyStateIconProps?.icon || LockIcon,\n          ...emptyStateIconProps,\n        }}\n        emptyStateBodyProps={emptyStateBodyProps}\n        buttonProps={buttonProps}\n      />\n    </PageSection>\n  );\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Text,\n  AlertVariant,\n  Level,\n  LevelItem,\n  TextContent,\n} from '@patternfly/react-core';\nimport { DefaultApi, ServiceAccountListItem, ServiceAccountList } from '../../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport { ServiceAccountsTableView, FilterType } from './components/ServiceAccountsTableView';\nimport { MASEmptyState, MASLoading, AlertProvider, useAlerts, MASFullPageError } from '@app/common';\nimport { CreateServiceAccountModal } from './components/CreateServiceAccountModal';\nimport { ResetServiceAccountModal } from './components/ResetServiceAccountModal/ResetServiceAccountModal';\nimport { DeleteServiceAccountModal } from './components/DeleteServiceAccountModal';\n\nexport type ServiceAccountsProps = {\n  getConnectToInstancePath?: (data: any) => string;\n};\n\nconst ServiceAccounts: React.FC<ServiceAccountsProps> = ({ getConnectToInstancePath }: ServiceAccountsProps) => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [serviceAccountList, setServiceAccountList] = useState<ServiceAccountList>();\n  const [serviceAccountItems, setServiceAccountItems] = useState<ServiceAccountListItem[]>();\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [rawServiceAccountDataLength, setRawServiceAccountDataLength] = useState<number>(0);\n  // state to store the expected total  service accounts based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n  const [serviceAccountsDataLoaded, setServiceAccountsDataLoaded] = useState<boolean>(true);\n  const [orderBy, setOrderBy] = useState<string>('name');\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isCreateServiceAccountModalOpen, setIsCreateServiceAccountModalOpen] = useState(false);\n  const [isResetServiceAccountModalOpen, setIsResetServiceAccountModalOpen] = useState(false);\n  const [serviceAccountToReset, setServiceAccountToReset] = useState<ServiceAccountListItem>();\n  const [isDeleteServiceAccountModalOpen, setIsDeleteServiceAccountModalOpen] = useState(false);\n  const [serviceAccountToDelete, setServiceAccountToDelete] = useState<ServiceAccountListItem>();\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const fetchServiceAccounts = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listServiceAccounts().then((response) => {\n          const serviceAccounts = response?.data;\n          setServiceAccountList(serviceAccounts);\n          setServiceAccountItems(serviceAccounts?.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchServiceAccounts();\n  }, []);\n\n  const handleResetModal = (serviceAccount: ServiceAccountListItem) => {\n    setIsResetServiceAccountModalOpen(!isResetServiceAccountModalOpen)\n    setServiceAccountToReset(serviceAccount);\n  }\n\n  const handleCreateModal = () => {\n    setIsCreateServiceAccountModalOpen(!isCreateServiceAccountModalOpen);\n  }\n\n  const handleDeleteModal = (serviceAccount: ServiceAccountListItem) => {\n    setIsDeleteServiceAccountModalOpen(!isDeleteServiceAccountModalOpen);\n    setServiceAccountToDelete(serviceAccount);\n  }\n\n  const renderTableView = () => {\n\n    if (serviceAccountItems === undefined) {\n      return (\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <MASLoading />\n        </PageSection>\n      );\n    } else {\n      if (rawServiceAccountDataLength && rawServiceAccountDataLength < 1) {\n        return (\n          <PageSection>\n            <MASEmptyState\n              titleProps={{\n                title: t('serviceAccount.you_do_not_have_any_service_accounts_yet'),\n                headingLevel: 'h2',\n              }}\n              emptyStateBodyProps={{\n                body: t('serviceAccount.create_service_account_to_get_started'),\n              }}\n              buttonProps={{\n                title: t('serviceAccount.create_service_account'),\n                onClick: () => handleCreateModal(),\n                ['data-testid']: 'emptyStateStreams-buttonCreateServiceAccount',\n              }}\n            />\n          </PageSection>\n        );\n      } else {\n        return (\n          <PageSection\n            className=\"mk--main-page__page-section--table\"\n            variant={PageSectionVariants.light}\n            padding={{ default: 'noPadding' }}\n          >\n            <ServiceAccountsTableView\n              page={page}\n              perPage={perPage}\n              total={serviceAccountList?.total || 1}\n              expectedTotal={expectedTotal}\n              serviceAccountsDataLoaded={serviceAccountsDataLoaded}\n              serviceAccountItems={serviceAccountItems}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              filterSelected={filterSelected}\n              setFilterSelected={setFilterSelected}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              onResetCredentials={handleResetModal}\n              onDeleteServiceAccount={handleDeleteModal}\n              handleCreateModal={handleCreateModal}\n            />\n          </PageSection>\n        );\n      }\n    }\n  };\n\n  /**\n   *  Unauthorized page in case user is not authorized\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('serviceAccount.unauthorized_access_to_service_accounts_title'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('serviceAccount.unauthorized_access_to_service_accounts_info'),\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <AlertProvider>\n        <PageSection variant={PageSectionVariants.light}>\n          <Level>\n            <LevelItem>\n              <TextContent>\n                <Text component=\"h1\"> {t('serviceAccount.service_accounts')}</Text>\n                <Text component=\"p\">{t('serviceAccount.service_accounts_title_header_info')}</Text>\n              </TextContent>\n            </LevelItem>\n          </Level>\n          <CreateServiceAccountModal\n            isOpen={isCreateServiceAccountModalOpen}\n            setIsOpen={setIsCreateServiceAccountModalOpen}\n            handleCreateModal={handleCreateModal}\n            fetchServiceAccounts={fetchServiceAccounts}\n          />\n          <ResetServiceAccountModal isOpen={isResetServiceAccountModalOpen} setIsOpen={setIsResetServiceAccountModalOpen} serviceAccountToReset={serviceAccountToReset}/>\n          <DeleteServiceAccountModal isOpen={isDeleteServiceAccountModalOpen} setIsOpen={setIsDeleteServiceAccountModalOpen} serviceAccountToDelete={serviceAccountToDelete} fetchServiceAccounts={fetchServiceAccounts}/>\n        </PageSection>\n        {renderTableView()}\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { ServiceAccounts };\n","import React from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServiceAccounts, ServiceAccountsProps } from './ServiceAccounts';\nimport { AuthContext, IAuthContext } from '@app/auth/AuthContext';\nimport { AlertContext, AlertContextProps } from '@app/common/MASAlerts/MASAlerts';\nimport { ApiContext } from '@app/api/ApiContext';\nimport '../../../i18n/i18n';\n\n// Federation version of ServiceAccounts\n\nexport type ServiceAccountsFederatedProps = ServiceAccountsProps & {\n  getToken: () => Promise<string>;\n  getUsername: () => Promise<string>;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  basePath: string;\n};\n\nconst ServiceAccountsFederated = ({\n  getUsername,\n  getToken,\n  addAlert,\n  basePath,\n  getConnectToInstancePath,\n}: ServiceAccountsFederatedProps) => {\n  const authContext = {\n    getToken,\n    getUsername,\n  } as IAuthContext;\n\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n\n  return (\n    <ApiContext.Provider\n      value={{\n        basePath: basePath,\n      }}\n    >\n      <AlertContext.Provider value={alertContext}>\n        <AuthContext.Provider value={authContext}>\n          <ServiceAccounts getConnectToInstancePath={getConnectToInstancePath} />\n        </AuthContext.Provider>\n      </AlertContext.Provider>\n    </ApiContext.Provider>\n  );\n};\n\nexport default ServiceAccountsFederated;\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\nenum InstanceStatus {\n  READY = 'ready',\n  ACCEPTED = 'accepted',\n  PREPARING = 'preparing',\n  PROVISIONING = 'provisioning',\n  FAILED = 'failed',\n  DEPROVISION = 'deprovision',\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\n\nconst getCloudProviderDisplayName = (value: string) => {\n  return cloudProviderOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-1', label: 'EU, Ireland' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\nconst getCloudRegionDisplayName = (value: string) => {\n  return cloudRegionOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst capitalize = (s: string) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\n\nconst MIN_POLL_INTERVAL = 1000;\nconst MAX_POLL_INTERVAL = 5000;\nconst isValidToken = (accessToken: string | undefined) => {\n  if (accessToken !== undefined && accessToken !== '') {\n    return true;\n  }\n  return false;\n};\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (page: number, perPage: number, expectedTotal: number) => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0 ? Math.floor(expectedTotal / perPage) + 1 : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount = expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  getCloudRegionDisplayName,\n  capitalize,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  isValidToken,\n  MAX_FILTER_LIMIT,\n  MIN_POLL_INTERVAL,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount\n};\n"],"sourceRoot":""}