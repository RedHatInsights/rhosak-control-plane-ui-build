{"version":3,"sources":["webpack://kas-ui/./src/app/ServiceRegistry/ServiceRegistry.tsx","webpack://kas-ui/./src/app/ServiceRegistry/ServiceRegistryFederated.tsx"],"names":["ServiceRegistry","PageSection","variant","PageSectionVariants","name","onConnectToRegistry","onDeleteRegistry","getUsername","getToken","addAlert","basePath","getConnectToInstancePath","authContext","alertContext","value"],"mappings":"2JAQaA,EAAkB,SAAC,GAA0B,2BAKxD,OACE,kBAAC,EAAAC,YAAW,CAACC,QAAS,EAAAC,oBAAA,OACpB,kBAAC,KAAqB,CAACC,KAAM,GAAIC,oBANT,aAMmDC,iBAJtD,kB,iICqC3B,QA/BiC,SAAC,G,IAChCC,EAAW,cACXC,EAAQ,WACRC,EAAQ,WACRC,EAAQ,WACRC,EAAwB,2BAElBC,EAAc,CAClBJ,SAAQ,EACRD,YAAW,GAGPM,EAAe,CACnBJ,SAAQ,GAGV,OACE,kBAAC,aAAmB,CAClBK,MAAO,CACLJ,SAAUA,IAGZ,kBAAC,cAAqB,CAACI,MAAOD,GAC5B,kBAAC,aAAoB,CAACC,MAAOF,GAC3B,kBAAC,IAAe,CAACD,yBAA0BA","file":"312.244b7d49.js","sourcesContent":["import React from 'react';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { ServiceRegistryHeader } from '@app/components';\n\nexport type ServiceRegistryProps = {\n  getConnectToInstancePath?: (data: any) => string;\n};\n\nexport const ServiceRegistry = ({ getConnectToInstancePath }: ServiceRegistryProps) => {\n  const onConnectToRegistry = () => {};\n\n  const onDeleteRegistry = () => {};\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <ServiceRegistryHeader name={''} onConnectToRegistry={onConnectToRegistry} onDeleteRegistry={onDeleteRegistry} />\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServiceRegistry, ServiceRegistryProps } from './ServiceRegistry';\nimport { AuthContext, IAuthContext } from '@app/auth/AuthContext';\nimport { AlertContext, AlertContextProps } from '@app/components/Alerts/Alerts';\nimport { ApiContext } from '@app/api/ApiContext';\nimport '../../i18n/i18n';\n\n// Version of ServiceRegistry for federation\n\nexport type ServiceRegistryFederatedProps = ServiceRegistryProps & {\n  getToken: () => Promise<string>;\n  getUsername: () => Promise<string>;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  basePath: string;\n};\n\nconst ServiceRegistryFederated = ({\n  getUsername,\n  getToken,\n  addAlert,\n  basePath,\n  getConnectToInstancePath,\n}: ServiceRegistryFederatedProps) => {\n  const authContext = {\n    getToken,\n    getUsername,\n  } as IAuthContext;\n\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n\n  return (\n    <ApiContext.Provider\n      value={{\n        basePath: basePath,\n      }}\n    >\n      <AlertContext.Provider value={alertContext}>\n        <AuthContext.Provider value={authContext}>\n          <ServiceRegistry getConnectToInstancePath={getConnectToInstancePath} />\n        </AuthContext.Provider>\n      </AlertContext.Provider>\n    </ApiContext.Provider>\n  );\n};\n\nexport default ServiceRegistryFederated;\n"],"sourceRoot":""}