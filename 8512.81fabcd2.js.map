{"version":3,"file":"8512.81fabcd2.js","mappings":"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","sources":["webpack://kas-ui/./src/app/contexts/federated.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/OwnerSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/FilterOwners.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership.tsx","webpack://kas-ui/./src/app/utils/error.ts"],"sourcesContent":["import React, { useContext } from 'react';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport { Principal } from '@rhoas/app-services-ui-shared';\n\nexport type FederatedProps = {\n  tokenEndPointUrl: string;\n  preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n  shouldOpenCreateModal: () => Promise<boolean>;\n  setKafkaInstance?: (kafka: KafkaRequest) => void;\n  getAllUserAccounts?: () => Principal[];\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React, { useState } from 'react';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { filterUsers } from './FilterOwners';\nexport type allUsersType =\n  | {\n      id: string;\n      displayName: string | undefined;\n    }[]\n  | undefined;\nexport type OwnerSelectProps = {\n  selection: string | undefined;\n  setSelection: (value: string | undefined) => void;\n  allUsers: allUsersType;\n};\n\nexport const OwnerSelect: React.FC<OwnerSelectProps> = ({\n  selection,\n  setSelection,\n  allUsers,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const options =\n    allUsers &&\n    allUsers?.map((userAccount: { id; displayName }) => {\n      const { id, displayName } = userAccount;\n      return (\n        <SelectOption key={id} value={id} description={displayName}>\n          {id}\n        </SelectOption>\n      );\n    });\n  const onToggle = (isExpanded: boolean) => {\n    setIsOpen(isExpanded);\n  };\n  const onSelect = (\n    _,\n    selection: string | SelectOptionObject,\n    isPlaceholder: boolean | undefined\n  ) => {\n    if (isPlaceholder) {\n      clearSelection();\n    }\n    setSelection(selection.toString());\n    setIsOpen(false);\n  };\n  const clearSelection = () => {\n    setSelection(undefined);\n    setIsOpen(false);\n  };\n  const customFilter = (_, value: string) => {\n    return filterUsers(value, options);\n  };\n  return (\n    <Select\n      id='manage-permissions-owner-select'\n      variant={SelectVariant.typeahead}\n      onToggle={onToggle}\n      isOpen={isOpen}\n      placeholderText={t('select_user_account')}\n      createText={t('common.use')}\n      menuAppendTo='parent'\n      maxHeight={400}\n      onSelect={onSelect}\n      selections={selection}\n      isCreatable\n      onFilter={customFilter}\n    >\n      {options}\n    </Select>\n  );\n};\n","import { useFederated } from '@app/contexts';\nimport { Principal } from '@rhoas/app-services-ui-shared';\n\nexport const filterUsers = (value, options) => {\n  if (!value) {\n    return options;\n  }\n  const input = new RegExp(value, 'i');\n  return options?.filter(\n    (userAccount) =>\n      input.test(userAccount.props.value) ||\n      input.test(userAccount.props.description)\n  );\n};\n\nexport const useGetAllUsers = () => {\n  const { getAllUserAccounts } = useFederated() || {\n    getAllUserAccounts: () => [],\n  };\n  const userAccounts = getAllUserAccounts && getAllUserAccounts();\n  return userAccounts?.map((userAccount: Principal) => {\n    const { id, displayName } = userAccount;\n    return {\n      id: id,\n      displayName: displayName,\n    };\n  });\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { OwnerSelect } from './OwnerSelect';\nimport { useGetAllUsers } from './FilterOwners';\nimport {\n  Form,\n  FormGroup,\n  Button,\n  AlertVariant,\n  Alert,\n  Modal,\n} from '@patternfly/react-core';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaUpdateRequest,\n} from '@rhoas/kafka-management-sdk';\nimport {\n  BaseModalProps,\n  useAlert,\n  useAuth,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { ErrorCodes, isServiceApiError } from '@app/utils/error';\n\nexport type TransferOwnershipProps = {\n  kafka: KafkaRequest;\n  refreshKafkas: () => void;\n  onClose?: () => void;\n  hideModal: () => void;\n};\n\nexport const TransferOwnership: React.FC<\n  TransferOwnershipProps & BaseModalProps\n> = ({ kafka, onClose, hideModal, refreshKafkas, variant, title }) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert() || { addAlert: () => '' };\n\n  //states\n  const [selection, setSelection] = useState<string | undefined>();\n  const [loading, setLoading] = useState<boolean>();\n  const [errorCode, setErrorCode] = useState<string | undefined>();\n\n  const onCloseModal = () => {\n    hideModal();\n    onClose && onClose();\n  };\n\n  const onSubmitTransferOwnership = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && selection?.trim() && kafka?.id) {\n      setLoading(true);\n      const kafkaUpdateRequest: KafkaUpdateRequest = { owner: selection };\n\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n\n      try {\n        await apisService\n          .updateKafkaById(kafka.id, kafkaUpdateRequest)\n          .then(() => {\n            refreshKafkas && refreshKafkas();\n            addAlert({\n              title: t('owner_change_sucess_title'),\n              variant: AlertVariant.success,\n              description: t('owner_change_sucess_message', {\n                newOwner: selection,\n                name: kafka?.name,\n              }),\n            });\n            setLoading(false);\n            onCloseModal();\n          });\n      } catch (error) {\n        let code: string | undefined;\n        if (isServiceApiError(error)) {\n          code = error.response?.data.code;\n        }\n        setErrorCode(code);\n        setLoading(false);\n      }\n    }\n  };\n\n  const renderAlert = () => {\n    let title, description;\n    if (errorCode === ErrorCodes.OWNER_DOES_NOT_EXIST) {\n      title = t('new_owner_does_not_exist_title');\n      description = t('new_owner_does_not_exist_message', {\n        newOwner: selection,\n      });\n    } else if (errorCode) {\n      title = t('can_not_change_owner_title');\n      description = t('onwer_transfer_failed_message', { name: kafka?.name });\n    }\n\n    if (title && description) {\n      return (\n        <Alert\n          variant={AlertVariant.danger}\n          aria-live='polite'\n          isInline\n          title={title}\n        >\n          {description}\n        </Alert>\n      );\n    }\n\n    return <></>;\n  };\n\n  return (\n    <Modal\n      id='manage-permissions-modal'\n      title={title}\n      isOpen={true}\n      onClose={onCloseModal}\n      variant={variant}\n      position='top'\n      actions={[\n        <Button\n          id='confirm__button'\n          key='changeowner'\n          variant='primary'\n          onClick={onSubmitTransferOwnership}\n          isLoading={loading}\n          isDisabled={!selection?.trim() || loading}\n        >\n          {t('common.change_owner')}\n        </Button>,\n        <Button\n          id='cancel__button'\n          key='cancel'\n          variant='link'\n          onClick={onCloseModal}\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Form>\n        {renderAlert()}\n        <FormGroup fieldId='Current-owner-name' label={t('current_owner_name')}>\n          {kafka?.owner}\n        </FormGroup>\n        <FormGroup fieldId='New-owner-name' label={t('new_owner_name')}>\n          <OwnerSelect\n            selection={selection}\n            setSelection={setSelection}\n            allUsers={useGetAllUsers()}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default TransferOwnership;\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string;\n  id: number;\n  kind: string;\n  reason: string;\n}\n\nconst isServiceApiError = (\n  error: unknown\n): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n};\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = 'KAFKAS-MGMT-4',\n  DUPLICATE_INSTANCE_NAME = 'KAFKAS-MGMT-36',\n  PREVIEW_KAFKA_INSTANCE_EXIST = 'KAFKAS-MGMT-24',\n  INSUFFICIENT_QUOTA = 'KAFKAS-MGMT-120',\n  FAILED_TO_CHECK_QUOTA = 'KAFKAS-MGMT-121',\n  OWNER_DOES_NOT_EXIST = 'KAFKAS-MGMT-21',\n}\n\nexport { ErrorCodes, isServiceApiError };\n"],"names":["FederatedContext","undefined","useFederated","useContext","OwnerSelect","selection","setSelection","allUsers","t","useTranslation","useState","isOpen","setIsOpen","options","map","userAccount","id","displayName","SelectOption","key","value","description","clearSelection","Select","variant","SelectVariant","onToggle","isExpanded","placeholderText","createText","menuAppendTo","maxHeight","onSelect","_","isPlaceholder","toString","selections","isCreatable","onFilter","input","RegExp","filter","test","props","filterUsers","TransferOwnership","getAllUserAccounts","userAccounts","kafka","onClose","hideModal","refreshKafkas","title","auth","useAuth","basePath","useConfig","addAlert","useAlert","loading","setLoading","errorCode","setErrorCode","onCloseModal","Modal","position","actions","Button","onClick","kas","getToken","accessToken","trim","kafkaUpdateRequest","owner","apisService","DefaultApi","Configuration","updateKafkaById","then","AlertVariant","newOwner","name","code","response","data","isLoading","isDisabled","Form","Alert","isInline","renderAlert","FormGroup","fieldId","label","ErrorCodes","isServiceApiError","error"],"sourceRoot":""}