{"version":3,"file":"273.e9acd625.js","mappings":"iPAKaA,EAA0C,WAC/C,OAAuB,UAArBC,EAAK,QAAEC,EAAS,YAClBC,GAAQ,gCAAKF,MAAAA,OAAK,EAALA,EAAOG,YAAU,CAAEF,UAAS,IAE/C,OAAO,kBAACG,GAAmB,iBAAKF,KAGrBE,EAAsB,SAACF,GAC5B,MASFA,GAAS,GARXG,EAAK,QACLC,EAAkB,qBAClBC,EAAiB,oBACjBC,EAAS,YACTC,EAAc,iBACdC,EAAgB,mBAChBC,EAAO,UACPV,EAAS,YAEHW,GAAM,IAAAC,kBAAgB,EACxBC,EAAuBJ,MAAAA,OAAgB,EAAhBA,EAAkBK,KAEzC,GAA4C,IAAAC,YAA3CC,EAAiB,KAAEC,EAAoB,KAMxCC,EAA0B,WAC9B,OAAIV,IAAmB,aAEnBQ,MAAAA,OAAiB,EAAjBA,EAAmBG,kBAAkBN,MAAAA,OAAoB,EAApBA,EAAsBM,gBAsBjE,OACE,kBAAC,KAAc,CACbC,aAAa,EACbhB,MAAOA,EACPC,oBAAkB,eAChBgB,WAAYH,IACZ,cAAe,iCACZb,GAELC,kBAAmBA,EACnBgB,kBAhBiB,WACnBL,EAAqB,IACrBjB,IACAU,GAAWA,KAcTH,UAAWA,EACXE,iBAAkBA,EAClBc,eAAgB,CACdC,cAAehB,IAAmB,WAClCiB,MAAOd,EAAE,sBAAuB,CAAEG,KAAMD,IACxCa,MAAOV,EACPW,SA9CqB,SAACD,GAC1BT,EAAqBS,IA8CjBE,WA/Ba,SAACC,GACA,UAAdA,EAAMC,KAAoBZ,MAC5Bb,MAAAA,OAAkB,EAAlBA,EAAoB0B,UAClB1B,EAAmB0B,QAAQtB,IA6B3BuB,WAAW,MAMnB","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstance.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASDeleteModal, useRootModalContext } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport const DeleteInstance: React.FunctionComponent = () => {\n  const { store, hideModal } = useRootModalContext();\n  const props = { ...store?.modalProps, hideModal };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport const DeleteInstanceModal = (props) => {\n  const {\n    title,\n    confirmButtonProps,\n    cancelButtonProps,\n    textProps,\n    instanceStatus,\n    selectedItemData,\n    onClose,\n    hideModal,\n  } = props || {};\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (\n        instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick &&\n        confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n\n  const handleToggle = () => {\n    setInstanceNameInput('');\n    hideModal();\n    onClose && onClose();\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteKafka-buttonDelete',\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleToggle}\n      textProps={textProps}\n      selectedItemData={selectedItemData}\n      textInputProps={{\n        showTextInput: instanceStatus === InstanceStatus.READY,\n        label: t('instance_name_label', { name: selectedInstanceName }),\n        value: instanceNameInput,\n        onChange: handleInstanceName,\n        onKeyPress,\n        autoFocus: true,\n      }}\n    ></MASDeleteModal>\n  );\n};\n\nexport default DeleteInstance;\n"],"names":["DeleteInstance","store","hideModal","props","modalProps","DeleteInstanceModal","title","confirmButtonProps","cancelButtonProps","textProps","instanceStatus","selectedItemData","onClose","t","useTranslation","selectedInstanceName","name","useState","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","toLowerCase","isModalOpen","isDisabled","handleModalToggle","textInputProps","showTextInput","label","value","onChange","onKeyPress","event","key","onClick","autoFocus"],"sourceRoot":""}