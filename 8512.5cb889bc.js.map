{"version":3,"file":"8512.5cb889bc.js","mappings":"wMAUA,MAAMA,GAAU,IAAAC,oBAAmB,CACjCC,MAA6C,OAAtCC,aAAaC,QAAQ,eAGjBC,EAAS,KACpB,MAAMC,GAAO,IAAAC,YAEXC,KAAOC,YAAaC,KAClB,IAAAC,aAEJ,OAAO,IAAAC,cAAY,IACF,IAAI,EAAAC,WACjB,IAAI,EAAAC,cAAc,CAChBC,YAAaT,EAAKE,IAAIQ,WACtBC,SAAUP,SAEZQ,EACA,WAAa,CACXlB,UACAmB,MAAO,SAKV,CAACb,EAAKE,IAAKE,GAAa,EAGhBU,EAAS,KACpB,MAAMd,GAAO,IAAAC,YAEXc,KAAOZ,YAAaa,KAClB,IAAAX,aAEJ,OAAO,IAAAC,cAAY,IACF,IAAI,EAAAW,eACjB,IAAI,EAAAT,cAAc,CAChBC,YAAaT,EAAKe,IAAIL,WACtBC,SAAUK,SAEZJ,EACA,WAAa,CACXlB,UACAmB,MAAO,SAKV,CAACG,EAAahB,EAAKe,KAAK,C,0DChDtB,MAAMG,GAAmB,IAAAC,eAE9B,MAEWC,EAAe,KAAsB,IAAAC,YAAWH,E,8KCVtD,MAYMI,EAAiB,KAC5B,MAAM,mBAAEC,IAAuB,UAAkB,CAC/CA,mBAAoB,IAAM,IAEtBC,EAAeD,GAAsBA,IAC3C,OAAOC,aAAY,EAAZA,EAAcC,KAAKC,IACxB,MAAM,GAAEC,EAAE,YAAEC,GAAgBF,EAC5B,MAAO,CACLC,GAAIA,EACJC,YAAaA,EACd,GACD,ECJSC,EAAoC,EAC/CC,YACAC,eACAC,eAEA,MAAM,EAAEC,IAAM,IAAAC,gBAAe,CAAC,uBACvBC,EAAQC,IAAa,IAAAC,WAAkB,GACxCC,GAAWN,GAAY,IAAIP,KAAKC,IACpC,MAAM,GAAEC,EAAE,YAAEC,GAAgBF,EAC5B,OACE,SAAC,EAAAa,aAAY,eAAUC,MAAOb,EAAIc,YAAab,GAAW,UACvDD,IADgBA,EAGpB,IAgBGe,EAAiB,KACrBX,OAAanB,GACbwB,GAAU,EAAM,EAKlB,OACE,SAAC,EAAAO,OAAM,eACLhB,GAAG,kCACHiB,QAAS,EAAAC,cAAA,UACTC,SAzBcC,IAChBX,EAAUW,EAAW,EAyBnBZ,OAAQA,EACRa,gBAAiBf,EAAE,uBACnBgB,WAAYhB,EAAE,cACdiB,aAAa,SACbC,UAAW,IACXC,SA5BsC,CACxCC,EACAvB,EACAwB,KAEIA,GACFZ,IAEFX,EAAaD,EAAUyB,YACvBnB,GAAU,EAAM,EAoBdoB,WAAY1B,EACZ2B,aAAW,EACXC,SAhB0C,CAACL,EAAGb,IDpDzB,EAACA,EAAeF,KACzC,IAAKE,EACH,OAAOF,EAET,MAAMqB,EAAQ,IAAIC,OAAOpB,EAAO,KAChC,OAAOF,aAAO,EAAPA,EAASuB,QACbnC,GACCiC,EAAMG,KAAKpC,EAAYqC,MAAMvB,QAC7BmB,EAAMG,KAAKpC,EAAYqC,MAAMtB,cAChC,EC4CQuB,CAAYxB,EAAOF,IAeF,UAErBA,IAEJ,ECnDU2B,EAAiE,EAC5EC,QACAC,UACAC,YACAC,gBACAzB,UACA0B,YAEA,MAAM,EAAErC,IAAM,IAAAC,gBAAe,CAAC,sBACxBqC,GAAS,UACT,SAAEC,IAAa,IAAAC,aAAc,CAAED,SAAU,IAAM,KAG9C1C,EAAWC,IAAgB,IAAAM,aAC3BqC,EAASC,IAAc,IAAAtC,aACvBuC,EAAWC,IAAgB,IAAAxC,YAE5ByC,EAAe,KACnBV,IACAD,GAAWA,GAAS,EAiEtB,OACE,SAAC,EAAAY,MAAK,eACJpD,GAAG,2BACH2C,MAAOA,EACPnC,QAAQ,EACRgC,QAASW,EACTlC,QAASA,EACToC,SAAS,MACTC,QAAS,EACP,SAAC,EAAAC,OAAM,eACLvD,GAAG,kBAEHiB,QAAQ,UACRuC,QA3E0B,KAAY,iD,MAC5C,IAAIrD,aAAS,EAATA,EAAWsD,UAAUlB,aAAK,EAALA,EAAOvC,IAAI,CAClCgD,GAAW,GACX,MAAMU,EAAyC,CAAEC,MAAOxD,GAElDyD,EAAchB,IAEpB,UACQgB,EACHC,gBAAgBtB,EAAMvC,GAAI0D,GAC1BI,MAAK,KACJpB,GAAiBA,IACjBG,EAAS,CACPF,MAAOrC,EAAE,6BACTW,QAAS,EAAA8C,aAAA,QACTjD,YAAaR,EAAE,8BAA+B,CAC5C0D,SAAU7D,EACV8D,KAAM1B,aAAK,EAALA,EAAO0B,SAGjBjB,GAAW,GACXG,GAAc,G,CAElB,MAAOe,GACP,IAAIC,GACA,QAAkBD,KACpBC,EAAqB,QAAd,EAAAD,EAAME,gBAAQ,eAAEC,KAAKF,MAE9BjB,EAAaiB,GACbnB,GAAW,E,EAGjB,IA4CQsB,UAAWvB,EACXwB,aAAapE,aAAS,EAATA,EAAWsD,SAAUV,GAAO,UAExCzC,EAAE,yBANC,gBAQN,SAAC,EAAAiD,OAAM,eACLvD,GAAG,iBAEHiB,QAAQ,OACRuC,QAASL,GAAY,UAEpB7C,EAAE,YAJC,YAMP,WAED,UAAC,EAAAkE,KAAI,eAACC,SAAWC,GAAMA,aAAC,EAADA,EAAGC,kBAAgB,WAzD1B,MAClB,IAAIhC,EAAO7B,EAWX,OAVImC,IAAc,2BAChBN,EAAQrC,EAAE,kCACVQ,EAAcR,EAAE,mCAAoC,CAClD0D,SAAU7D,KAEH8C,IACTN,EAAQrC,EAAE,8BACVQ,EAAcR,EAAE,gCAAiC,CAAE2D,KAAM1B,aAAK,EAALA,EAAO0B,QAG9DtB,GAAS7B,GAET,SAAC,EAAA8D,MAAK,eACJ3D,QAAS,EAAA8C,aAAA,OAAmB,YAClB,SACVc,UAAQ,EACRlC,MAAOA,GAAK,UAEX7B,MAKA,uBAAK,EAiCPgE,IACD,SAAC,EAAAC,UAAS,eAACC,QAAQ,qBAAqBC,MAAO3E,EAAE,uBAAqB,UACnEiC,aAAK,EAALA,EAAOoB,UAEV,SAAC,EAAAoB,UAAS,eAACC,QAAQ,iBAAiBC,MAAO3E,EAAE,mBAAiB,WAC5D,SAACJ,EAAW,CACVC,UAAWA,EACXC,aAAcA,EACdC,SAAUV,eAKnB,EAGH,G,8ECpJA,MAAMuF,EAAa,CAEjBC,kBAAmB,EAAAC,cAAA,QAEnBC,wBAAyB,EAAAD,cAAA,SAEzBE,wBAAyB,EAAAF,cAAA,SAEzBG,mBAAoB,EAAAH,cAAA,UAEpBI,WAAY,EAAAJ,cAAA,QAEZK,sBAAuB,EAAAL,cAAA,UAEvBM,qBAAsB,EAAAN,cAAA,S","sources":["webpack://kas-ui/./src/app/api.ts","webpack://kas-ui/./src/app/contexts/federated.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/FilterOwners.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/OwnerSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership.tsx","webpack://kas-ui/./src/app/utils/error.ts"],"sourcesContent":["import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport {\n  AxiosCacheRequestConfig,\n  createCacheAdapter,\n} from \"axios-simple-cache-adapter\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\n\nconst adapter = createCacheAdapter({\n  debug: localStorage.getItem(\"log-axios\") !== null,\n});\n\nexport const useKms = () => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: kasBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const kmsApi = new DefaultApi(\n      new Configuration({\n        accessToken: auth.kas.getToken(),\n        basePath: kasBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return kmsApi;\n  }, [auth.kas, kasBasePath]);\n};\n\nexport const useAms = () => {\n  const auth = useAuth();\n  const {\n    ams: { apiBasePath: amsBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const amsApi = new AppServicesApi(\n      new Configuration({\n        accessToken: auth.ams.getToken(),\n        basePath: amsBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return amsApi;\n  }, [amsBasePath, auth.ams]);\n};\n","import { createContext, useContext } from \"react\";\nimport { Principal } from \"@rhoas/app-services-ui-shared\";\n\nexport type FederatedProps = {\n  preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n  shouldOpenCreateModal: () => Promise<boolean>;\n  getAllUserAccounts?: () => Principal[];\n};\n\nexport const FederatedContext = createContext<FederatedProps>(\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  null!\n);\nexport const useFederated = (): FederatedProps => useContext(FederatedContext);\n","import { useFederated } from \"@app/contexts\";\nimport { Principal } from \"@rhoas/app-services-ui-shared\";\n\nexport const filterUsers = (value: string, options: JSX.Element[]) => {\n  if (!value) {\n    return options;\n  }\n  const input = new RegExp(value, \"i\");\n  return options?.filter(\n    (userAccount) =>\n      input.test(userAccount.props.value) ||\n      input.test(userAccount.props.description)\n  );\n};\n\nexport const useGetAllUsers = () => {\n  const { getAllUserAccounts } = useFederated() || {\n    getAllUserAccounts: () => [],\n  };\n  const userAccounts = getAllUserAccounts && getAllUserAccounts();\n  return userAccounts?.map((userAccount: Principal) => {\n    const { id, displayName } = userAccount;\n    return {\n      id: id,\n      displayName: displayName,\n    };\n  });\n};\n","import { FC, useState } from \"react\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectProps,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { filterUsers } from \"./FilterOwners\";\nexport type allUsersType =\n  | {\n      id: string;\n      displayName: string | undefined;\n    }[]\n  | undefined;\nexport type OwnerSelectProps = {\n  selection: string | undefined;\n  setSelection: (value: string | undefined) => void;\n  allUsers: allUsersType;\n};\n\nexport const OwnerSelect: FC<OwnerSelectProps> = ({\n  selection,\n  setSelection,\n  allUsers,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const options = (allUsers || []).map((userAccount) => {\n    const { id, displayName } = userAccount;\n    return (\n      <SelectOption key={id} value={id} description={displayName}>\n        {id}\n      </SelectOption>\n    );\n  });\n  const onToggle = (isExpanded: boolean) => {\n    setIsOpen(isExpanded);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (\n    _,\n    selection: string | SelectOptionObject,\n    isPlaceholder: boolean | undefined\n  ) => {\n    if (isPlaceholder) {\n      clearSelection();\n    }\n    setSelection(selection.toString());\n    setIsOpen(false);\n  };\n  const clearSelection = () => {\n    setSelection(undefined);\n    setIsOpen(false);\n  };\n  const customFilter: SelectProps[\"onFilter\"] = (_, value: string) => {\n    return filterUsers(value, options);\n  };\n  return (\n    <Select\n      id=\"manage-permissions-owner-select\"\n      variant={SelectVariant.typeahead}\n      onToggle={onToggle}\n      isOpen={isOpen}\n      placeholderText={t(\"select_user_account\")}\n      createText={t(\"common.use\")}\n      menuAppendTo=\"parent\"\n      maxHeight={400}\n      onSelect={onSelect}\n      selections={selection}\n      isCreatable\n      onFilter={customFilter}\n    >\n      {options}\n    </Select>\n  );\n};\n","import { useKms } from \"@app/api\";\nimport { ErrorCodes, isServiceApiError } from \"@app/utils/error\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { BaseModalProps, useAlert } from \"@rhoas/app-services-ui-shared\";\nimport { KafkaRequest, KafkaUpdateRequest } from \"@rhoas/kafka-management-sdk\";\nimport { FC, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useGetAllUsers } from \"./FilterOwners\";\nimport { OwnerSelect } from \"./OwnerSelect\";\n\nexport type TransferOwnershipProps = {\n  kafka: KafkaRequest;\n  refreshKafkas: () => void;\n  onClose?: () => void;\n  hideModal: () => void;\n};\n\nexport const TransferOwnership: FC<TransferOwnershipProps & BaseModalProps> = ({\n  kafka,\n  onClose,\n  hideModal,\n  refreshKafkas,\n  variant,\n  title,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const getApi = useKms();\n  const { addAlert } = useAlert() || { addAlert: () => \"\" };\n\n  //states\n  const [selection, setSelection] = useState<string | undefined>();\n  const [loading, setLoading] = useState<boolean>();\n  const [errorCode, setErrorCode] = useState<string | undefined>();\n\n  const onCloseModal = () => {\n    hideModal();\n    onClose && onClose();\n  };\n\n  const onSubmitTransferOwnership = async () => {\n    if (selection?.trim() && kafka?.id) {\n      setLoading(true);\n      const kafkaUpdateRequest: KafkaUpdateRequest = { owner: selection };\n\n      const apisService = getApi();\n\n      try {\n        await apisService\n          .updateKafkaById(kafka.id, kafkaUpdateRequest)\n          .then(() => {\n            refreshKafkas && refreshKafkas();\n            addAlert({\n              title: t(\"owner_change_sucess_title\"),\n              variant: AlertVariant.success,\n              description: t(\"owner_change_sucess_message\", {\n                newOwner: selection,\n                name: kafka?.name,\n              }),\n            });\n            setLoading(false);\n            onCloseModal();\n          });\n      } catch (error) {\n        let code: string | undefined;\n        if (isServiceApiError(error)) {\n          code = error.response?.data.code;\n        }\n        setErrorCode(code);\n        setLoading(false);\n      }\n    }\n  };\n\n  const renderAlert = () => {\n    let title, description;\n    if (errorCode === ErrorCodes.OWNER_DOES_NOT_EXIST) {\n      title = t(\"new_owner_does_not_exist_title\");\n      description = t(\"new_owner_does_not_exist_message\", {\n        newOwner: selection,\n      });\n    } else if (errorCode) {\n      title = t(\"can_not_change_owner_title\");\n      description = t(\"onwer_transfer_failed_message\", { name: kafka?.name });\n    }\n\n    if (title && description) {\n      return (\n        <Alert\n          variant={AlertVariant.danger}\n          aria-live=\"polite\"\n          isInline\n          title={title}\n        >\n          {description}\n        </Alert>\n      );\n    }\n\n    return <></>;\n  };\n\n  return (\n    <Modal\n      id=\"manage-permissions-modal\"\n      title={title}\n      isOpen={true}\n      onClose={onCloseModal}\n      variant={variant}\n      position=\"top\"\n      actions={[\n        <Button\n          id=\"confirm__button\"\n          key=\"changeowner\"\n          variant=\"primary\"\n          onClick={onSubmitTransferOwnership}\n          isLoading={loading}\n          isDisabled={!selection?.trim() || loading}\n        >\n          {t(\"common.change_owner\")}\n        </Button>,\n        <Button\n          id=\"cancel__button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCloseModal}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form onSubmit={(e) => e?.preventDefault()}>\n        {renderAlert()}\n        <FormGroup fieldId=\"Current-owner-name\" label={t(\"current_owner_name\")}>\n          {kafka?.owner}\n        </FormGroup>\n        <FormGroup fieldId=\"New-owner-name\" label={t(\"new_owner_name\")}>\n          <OwnerSelect\n            selection={selection}\n            setSelection={setSelection}\n            allUsers={useGetAllUsers()}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default TransferOwnership;\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from \"@rhoas/kafka-management-sdk\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n"],"names":["adapter","createCacheAdapter","debug","localStorage","getItem","useKms","auth","useAuth","kas","apiBasePath","kasBasePath","useConfig","useCallback","DefaultApi","Configuration","accessToken","getToken","basePath","undefined","cache","useAms","ams","amsBasePath","AppServicesApi","FederatedContext","createContext","useFederated","useContext","useGetAllUsers","getAllUserAccounts","userAccounts","map","userAccount","id","displayName","OwnerSelect","selection","setSelection","allUsers","t","useTranslation","isOpen","setIsOpen","useState","options","SelectOption","value","description","clearSelection","Select","variant","SelectVariant","onToggle","isExpanded","placeholderText","createText","menuAppendTo","maxHeight","onSelect","_","isPlaceholder","toString","selections","isCreatable","onFilter","input","RegExp","filter","test","props","filterUsers","TransferOwnership","kafka","onClose","hideModal","refreshKafkas","title","getApi","addAlert","useAlert","loading","setLoading","errorCode","setErrorCode","onCloseModal","Modal","position","actions","Button","onClick","trim","kafkaUpdateRequest","owner","apisService","updateKafkaById","then","AlertVariant","newOwner","name","error","code","response","data","isLoading","isDisabled","Form","onSubmit","e","preventDefault","Alert","isInline","renderAlert","FormGroup","fieldId","label","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST"],"sourceRoot":""}