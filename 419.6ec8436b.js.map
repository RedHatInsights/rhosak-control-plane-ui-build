{"version":3,"file":"419.6ec8436b.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/tachometer-alt-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_black_500.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_blue_300.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_green_300.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_orange_300.js","webpack://kas-ui/./src/app/modules/Metrics/components/ChartEmptyState/ChartEmptyState.tsx","webpack://kas-ui/./src/app/modules/Metrics/utils/utils.ts","webpack://kas-ui/./src/app/modules/Metrics/components/ChartPopover/ChartPopover.tsx","webpack://kas-ui/./src/app/modules/Metrics/components/UsedDiskSpaceChart/UsedDiskSpaceChart.tsx","webpack://kas-ui/./src/app/modules/Metrics/components/MessagesChart/MessagesChart.tsx","webpack://kas-ui/./src/app/modules/Metrics/components/IncomingOutgoingBytesPerTopic/IncomingOutgoingBytesPerTopic.tsx","webpack://kas-ui/./src/app/modules/Metrics/components/LogSizePerPartitionChart/LogSizePerPartitionChart.tsx","webpack://kas-ui/./src/app/modules/Metrics/components/ChartToolbar/FilterByTopic.tsx","webpack://kas-ui/./src/app/modules/Metrics/components/ChartToolbar/FilterByTime.tsx","webpack://kas-ui/./src/app/modules/Metrics/components/ChartToolbar/ChartToolbar.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.TachometerAltIconConfig = {\n  name: 'TachometerAltIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M288 32C128.94 32 0 160.94 0 320c0 52.8 14.25 102.26 39.06 144.8 5.61 9.62 16.3 15.2 27.44 15.2h443c11.14 0 21.83-5.58 27.44-15.2C561.75 422.26 576 372.8 576 320c0-159.06-128.94-288-288-288zm0 64c14.71 0 26.58 10.13 30.32 23.65-1.11 2.26-2.64 4.23-3.45 6.67l-9.22 27.67c-5.13 3.49-10.97 6.01-17.64 6.01-17.67 0-32-14.33-32-32S270.33 96 288 96zM96 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm48-160c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm246.77-72.41l-61.33 184C343.13 347.33 352 364.54 352 384c0 11.72-3.38 22.55-8.88 32H232.88c-5.5-9.45-8.88-20.28-8.88-32 0-33.94 26.5-61.43 59.9-63.59l61.34-184.01c4.17-12.56 17.73-19.45 30.36-15.17 12.57 4.19 19.35 17.79 15.17 30.36zm14.66 57.2l15.52-46.55c3.47-1.29 7.13-2.23 11.05-2.23 17.67 0 32 14.33 32 32s-14.33 32-32 32c-11.38-.01-20.89-6.28-26.57-15.22zM480 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.TachometerAltIcon = require('../createIcon').createIcon(exports.TachometerAltIconConfig);\nexports[\"default\"] = exports.TachometerAltIcon;","\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_black_500 = {\n  \"name\": \"--pf-chart-color-black-500\",\n  \"value\": \"#6a6e73\",\n  \"var\": \"var(--pf-chart-color-black-500)\"\n};\nexports[\"default\"] = exports.chart_color_black_500;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_blue_300 = {\n  \"name\": \"--pf-chart-color-blue-300\",\n  \"value\": \"#06c\",\n  \"var\": \"var(--pf-chart-color-blue-300)\"\n};\nexports[\"default\"] = exports.chart_color_blue_300;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_green_300 = {\n  \"name\": \"--pf-chart-color-green-300\",\n  \"value\": \"#4cb140\",\n  \"var\": \"var(--pf-chart-color-green-300)\"\n};\nexports[\"default\"] = exports.chart_color_green_300;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_orange_300 = {\n  \"name\": \"--pf-chart-color-orange-300\",\n  \"value\": \"#ec7a08\",\n  \"var\": \"var(--pf-chart-color-orange-300)\"\n};\nexports[\"default\"] = exports.chart_color_orange_300;","import React from 'react';\nimport { EmptyState, EmptyStateVariant, EmptyStateBody, EmptyStateIcon, Title, Button } from '@patternfly/react-core';\nimport TachometerAltIcon from '@patternfly/react-icons/dist/js/icons/tachometer-alt-icon';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport { FilterIcon } from '@patternfly/react-icons';\n\ntype ChartEmptyState = {\n  title: string;\n  body: string;\n  noData?: boolean;\n  noTopics?: boolean;\n  noFilter?: boolean;\n  onCreateTopic?: () => void;\n};\n\nexport const ChartEmptyState = ({ title, body, noData, noTopics, noFilter, onCreateTopic }: ChartEmptyState) => {\n  const getIcon = () => {\n    if (noData) {\n      return TachometerAltIcon;\n    } else if (noTopics) {\n      return WrenchIcon;\n    } else if (noFilter) {\n      return FilterIcon;\n    }\n    return;\n  };\n\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={getIcon()} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>\n        {body}\n        <br />\n        <br />\n        {noTopics && (\n          <Button variant=\"primary\" onClick={onCreateTopic}>\n            Create Topic\n          </Button>\n        )}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import byteSize from 'byte-size';\n\nexport const getLargestByteSize = (data1, data2) => {\n  let currentByteSize = 'B';\n\n  data1 = data1 && (data1.sortedData ? data1.sortedData : data1.data);\n  data2 = data2 && (data2.sortedData ? data2.sortedData : data2.data);\n\n  data1 &&\n    data1.map((datum) => {\n      datum.bytes.forEach((value) => {\n        const byteString = byteSize(value).unit;\n        if (byteString === 'kiB') {\n          if (currentByteSize === 'B') {\n            currentByteSize = 'kiB';\n          }\n        }\n        if (byteString === 'MiB') {\n          if (currentByteSize === 'B' || currentByteSize === 'kiB') {\n            currentByteSize = 'MiB';\n          }\n        }\n        if (byteString === 'GiB') {\n          if (currentByteSize === 'B' || currentByteSize === 'kiB' || currentByteSize === 'MiB') {\n            currentByteSize = 'GiB';\n          }\n        }\n      });\n    });\n\n  data2 &&\n    data2.map((datum) => {\n      datum.bytes.forEach((value) => {\n        const byteString = byteSize(value).unit;\n        if (byteString === 'kiB') {\n          if (currentByteSize === 'B') {\n            currentByteSize = 'kiB';\n          }\n        }\n        if (byteString === 'MiB') {\n          if (currentByteSize === 'B' || currentByteSize === 'kiB') {\n            currentByteSize = 'MiB';\n          }\n        }\n        if (byteString === 'GiB') {\n          if (currentByteSize === 'B' || currentByteSize === 'kiB' || currentByteSize === 'MiB') {\n            currentByteSize = 'GiB';\n          }\n        }\n      });\n    });\n\n  return currentByteSize;\n};\n\nexport const convertToSpecifiedByte = (bytes, largestByteSize) => {\n  if (largestByteSize === 'B') {\n    return Math.round(bytes * 10) / 10;\n  }\n  if (largestByteSize === 'kiB') {\n    return Math.round((bytes / 1024) * 10) / 10;\n  }\n  if (largestByteSize === 'MiB') {\n    return Math.round((bytes / 1024 / 1024) * 10) / 10;\n  }\n  if (largestByteSize === 'GiB') {\n    return Math.round((bytes / 1024 / 1024 / 1024) * 10) / 10;\n  }\n  return;\n};\n\nexport const getMaxValueOfArray = (data) => {\n  const max = data.reduce(function (prev, current) {\n    return prev.bytes > current.bytes ? prev : current;\n  });\n  return max.bytes;\n};\n\n//Add a scalable logic to set duration and interval\nexport const formatTime = (selection: string) => {\n  let timeDuration = 6;\n  let timeInterval = 1 * 60; //in minutes\n  switch (selection) {\n    case 'Last 5 minutes':\n      timeDuration = 5 / 60;\n      timeInterval = 1;\n      break;\n    case 'Last 15 minutes':\n      timeDuration = 15 / 60;\n      timeInterval = 3;\n      break;\n    case 'Last 30 minutes':\n      timeDuration = 30 / 60;\n      timeInterval = 5;\n      break;\n    case 'Last 1 hour':\n      timeDuration = 1;\n      timeInterval = 10;\n      break;\n    case 'Last 3 hours':\n      timeDuration = 3;\n      timeInterval = 30;\n      break;\n    case 'Last 6 hours':\n      timeDuration = 6;\n      timeInterval = 1 * 60;\n      break;\n    case 'Last 12 hours':\n      timeDuration = 12;\n      timeInterval = 2 * 60;\n      break;\n    case 'Last 24 hours':\n      timeDuration = 24;\n      timeInterval = 4 * 60;\n      break;\n    case 'Last 2 days':\n      timeDuration = 2 * 24;\n      timeInterval = 8 * 60;\n      break;\n    case 'Last 7 days':\n      timeDuration = 7 * 24;\n      timeInterval = 24 * 60;\n      break;\n  }\n  return { timeDuration, timeInterval };\n};\n","import { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\ntype ChartPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ChartPopover = ({ title, description }: ChartPopoverProps) => {\n  return (\n    <Popover aria-label=\"Basic popover\" headerContent={<div>{title}</div>} bodyContent={<div>{description}</div>}>\n      <OutlinedQuestionCircleIcon />\n    </Popover>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport { isServiceApiError } from '@app/utils';\nimport { AlertVariant, Bullseye, Card, CardTitle, CardBody, Spinner } from '@patternfly/react-core';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport chart_color_black_500 from '@patternfly/react-tokens/dist/js/chart_color_black_500';\nimport { ChartEmptyState, ChartToolbar } from '@app/modules/Metrics/components';\nimport { convertToSpecifiedByte } from '@app/modules/Metrics/utils';\nimport { ChartPopover } from '../ChartPopover';\n\ntype Broker = {\n  name: string;\n  data: {\n    timestamp: number;\n    usedSpaceAvg: number[];\n  }[];\n};\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: string;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: any;\n};\n\ntype KafkaInstanceProps = {\n  kafkaID: string;\n  metricsDataUnavailable: boolean;\n  setMetricsDataUnavailable: (value: boolean) => void;\n};\n\nexport const UsedDiskSpaceChart: React.FC<KafkaInstanceProps> = ({\n  kafkaID,\n  metricsDataUnavailable,\n  setMetricsDataUnavailable,\n}: KafkaInstanceProps) => {\n  const containerRef = useRef();\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert();\n  const [width, setWidth] = useState();\n  const [legend, setLegend] = useState();\n  const [chartData, setChartData] = useState<ChartData[]>();\n  const [chartDataLoading, setChartDataLoading] = useState(true);\n  const [largestByteSize, setLargestByteSize] = useState();\n  const [timeDuration, setTimeDuration] = useState(6);\n  const [timeInterval, setTimeInterval] = useState(60);\n  const usageLimit = 60; // Replace with limit from API\n\n  const handleResize = () => containerRef.current && setWidth(containerRef.current.clientWidth);\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const fetchUsedDiskSpaceMetrics = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        if (!kafkaID) {\n          return;\n        }\n\n        const data = await apisService.getMetricsByRangeQuery(kafkaID, timeDuration * 60, timeInterval * 60, [\n          'kubelet_volume_stats_used_bytes',\n        ]);\n\n        const avgBroker = {\n          name: `Used disk space`,\n          data: [],\n        } as Broker;\n\n        if (data.data.items) {\n          setMetricsDataUnavailable(false);\n          data.data.items?.forEach((item, index) => {\n            const labels = item.metric;\n\n            if (labels === undefined) {\n              throw new Error('item.metric cannot be undefined');\n            }\n            if (item.values === undefined) {\n              throw new Error('item.values cannot be undefined');\n            }\n            if (labels['__name__'] === 'kubelet_volume_stats_used_bytes') {\n              const pvcName = labels['persistentvolumeclaim'];\n\n              if (!pvcName.includes('zookeeper')) {\n                item.values?.forEach((value, indexJ) => {\n                  if (value.timestamp == undefined) {\n                    throw new Error('timestamp cannot be undefined');\n                  }\n\n                  if (index > 0) {\n                    const newArray = avgBroker.data[indexJ].usedSpaceAvg.concat(value.value);\n                    avgBroker.data[indexJ].usedSpaceAvg = newArray;\n                  } else {\n                    avgBroker.data.push({\n                      timestamp: value.timestamp,\n                      usedSpaceAvg: [value.value],\n                    });\n                  }\n                });\n              }\n            }\n\n            getChartData(avgBroker);\n          });\n        } else {\n          setMetricsDataUnavailable(true);\n          setChartDataLoading(false);\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchUsedDiskSpaceMetrics();\n    handleResize();\n  }, [timeDuration, timeInterval]);\n\n  // useTimeout(() => fetchUsedDiskSpaceMetrics(), 1000 * 60 * 5);\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, [width]);\n\n  const getChartData = (avgBroker) => {\n    const legendData: Array<LegendData> = [\n      { name: 'Limit', symbol: { fill: chart_color_black_500.value, type: 'threshold' } },\n      { name: avgBroker.name, symbol: { fill: chart_color_blue_300.value } },\n    ];\n\n    const areaColor = chart_color_blue_300.value;\n    const softLimitColor = chart_color_black_500.value;\n    const chartData: Array<ChartData> = [];\n    const area: Array<BrokerChartData> = [];\n    const softLimit: Array<BrokerChartData> = [];\n    const largestByteSize = 'GiB'; // Hard code GiB as the largest byte size because there will always be a 20 GiB limit.\n\n    const getCurrentLengthOfData = () => {\n      const timestampDiff = avgBroker.data[avgBroker.data.length - 1].timestamp - avgBroker.data[0].timestamp;\n      const minutes = timestampDiff / 1000 / 60;\n      return minutes;\n    };\n\n    const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n    const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n    if (lengthOfData <= 360 && timeDuration >= 6) {\n      for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n        const newTimestamp = avgBroker.data[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n        const date = new Date(newTimestamp);\n        const time = date.getHours() + ':' + date.getMinutes();\n        area.push({ name: avgBroker.name, x: time, y: 0 });\n        softLimit.push({ name: 'Limit', x: time, y: usageLimit });\n      }\n    }\n\n    avgBroker.data.map((value) => {\n      const date = new Date(value.timestamp);\n      const time = date.getHours() + ':' + date.getMinutes();\n      const aggregateBytes = value.usedSpaceAvg.reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      const bytes = convertToSpecifiedByte(aggregateBytes, largestByteSize);\n      area.push({ name: avgBroker.name, x: time, y: bytes });\n      softLimit.push({ name: 'Limit', x: time, y: usageLimit });\n    });\n    chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n    setLegend(legendData);\n    setChartData(chartData);\n    setLargestByteSize(largestByteSize);\n    setChartDataLoading(false);\n  };\n\n  const onRefreshKafkaToolbar = () => {\n    fetchUsedDiskSpaceMetrics();\n  };\n\n  return (\n    <Card>\n      <ChartToolbar\n        showTopicFilter={false}\n        title={t('metrics.kafka_instance_metrics')}\n        setTimeDuration={setTimeDuration}\n        setTimeInterval={setTimeInterval}\n        showKafkaToolbar={!metricsDataUnavailable}\n        onRefreshKafkaToolbar={onRefreshKafkaToolbar}\n      />\n      <CardTitle component=\"h2\">\n        {t('metrics.used_disk_space')}{' '}\n        <ChartPopover title={t('metrics.used_disk_space')} description=\"chart description\" />\n      </CardTitle>\n      <CardBody>\n        <div ref={containerRef}>\n          {!chartDataLoading ? (\n            !metricsDataUnavailable ? (\n              chartData &&\n              legend &&\n              largestByteSize && (\n                <Chart\n                  ariaDesc={t('metrics.used_disk_space')}\n                  ariaTitle=\"Disk Space\"\n                  containerComponent={\n                    <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                  }\n                  legendPosition=\"bottom-left\"\n                  legendComponent={<ChartLegend orientation={'horizontal'} data={legend} itemsPerRow={itemsPerRow} />}\n                  height={350}\n                  padding={{\n                    bottom: 110, // Adjusted to accomodate legend\n                    left: 90,\n                    right: 60,\n                    top: 25,\n                  }}\n                  themeColor={ChartThemeColor.multiUnordered}\n                  width={width}\n                  minDomain={{ y: 0 }}\n                  legendAllowWrap={true}\n                >\n                  <ChartAxis label={'Time'} tickCount={6} />\n                  <ChartAxis dependentAxis tickFormat={(t) => `${Math.round(t)} ${largestByteSize}`} tickCount={4} />\n                  <ChartGroup>\n                    {chartData.map((value, index) => (\n                      <ChartArea\n                        key={`chart-area-${index}`}\n                        data={value.area}\n                        interpolation=\"monotoneX\"\n                        style={{\n                          data: {\n                            stroke: value.color,\n                          },\n                        }}\n                      />\n                    ))}\n                  </ChartGroup>\n                  <ChartThreshold\n                    key={`chart-softlimit`}\n                    data={chartData[0].softLimit}\n                    style={{\n                      data: {\n                        stroke: chartData[0].softLimitColor,\n                      },\n                    }}\n                  />\n                </Chart>\n              )\n            ) : (\n              <ChartEmptyState\n                title={t('metrics.empty_state_no_data_title')}\n                body={t('metrics.empty_state_no_data_body')}\n                noData\n              />\n            )\n          ) : (\n            <Bullseye>\n              <Spinner isSVG />\n            </Bullseye>\n          )}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import React from 'react';\nimport {\n  Chart,\n  ChartAxis,\n  ChartGroup,\n  ChartLine,\n  ChartThemeColor,\n  ChartLegendTooltip,\n  createContainer,\n} from '@patternfly/react-charts';\nimport { format } from 'date-fns';\n\nexport type Topic = {\n  name: string;\n\n  data: {\n    timestamp: number;\n    count: number;\n  }[];\n};\n\nexport type MessagesChartProps = {\n  topics: Topic[];\n};\n\nexport class MessagesChart extends React.Component<MessagesChartProps> {\n  render() {\n    // Note: Container order is important\n    const CursorVoronoiContainer = createContainer('voronoi', 'cursor');\n\n    const legendData = [] as any[];\n    const chartData = [] as any[];\n\n    this.props.topics.forEach((topic) => {\n      legendData.push({ name: topic.name });\n\n      const messages = topic.data.map((value) => {\n        const date = new Date(value.timestamp);\n        const time = date.getHours() + ':' + date.getMinutes();\n        return {\n          x: time,\n          y: value.count,\n          name: topic.name,\n        };\n      });\n      chartData.push(messages);\n    });\n\n    return (\n      <div style={{ height: '300x', width: '450px' }}>\n        <Chart\n          ariaDesc=\"Messages in to a topic\"\n          ariaTitle=\"Messages in\"\n          containerComponent={\n            <CursorVoronoiContainer\n              cursorDimension=\"x\"\n              labels={({ datum }) => `${datum.y}`}\n              labelComponent={<ChartLegendTooltip legendData={legendData} title={(datum) => datum.x} />}\n              mouseFollowTooltips\n              voronoiDimension=\"x\"\n              voronoiPadding={50}\n            />\n          }\n          legendData={legendData}\n          legendPosition=\"bottom\"\n          height={300}\n          maxDomain={{ y: 10 }}\n          minDomain={{ y: 0 }}\n          padding={{\n            bottom: 100, // Adjusted to accommodate legend\n            left: 70,\n            right: 50,\n            top: 50,\n          }}\n          themeColor={ChartThemeColor.green}\n          width={450}\n        >\n          <ChartAxis label=\"time\" tickCount={6} />\n          <ChartAxis dependentAxis showGrid label={'messages'} />\n          <ChartGroup>\n            {chartData.map((value, index) => (\n              <ChartLine data={value} key={`chart-messages-${index}`} />\n            ))}\n          </ChartGroup>\n        </Chart>\n      </div>\n    );\n  }\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport { isServiceApiError } from '@app/utils';\nimport { AlertVariant, Divider } from '@patternfly/react-core';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { getLargestByteSize, convertToSpecifiedByte } from '@app/modules/Metrics/utils';\nimport { Bullseye, Card, CardTitle, CardBody, Spinner } from '@patternfly/react-core';\nimport {\n  Chart,\n  ChartLine,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport { ChartEmptyState, ChartPopover, ChartToolbar, LogSizePerPartitionChart } from '@app/modules/Metrics/components';\n\ntype Topic = {\n  name: string;\n  rawData: Map<number, number[]>;\n  sortedData: TopicDataArray;\n};\n\ntype TopicDataArray = { timestamp: number; bytes: number[] }[];\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: string;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: any;\n};\n\ntype KafkaInstanceProps = {\n  kafkaID: string;\n  metricsDataUnavailable: boolean;\n  setMetricsDataUnavailable: (value: boolean) => void;\n  onCreateTopic: () => void;\n};\n\nexport const IncomingOutgoingBytesPerTopic: React.FC<KafkaInstanceProps> = ({\n  kafkaID,\n  metricsDataUnavailable,\n  setMetricsDataUnavailable,\n  onCreateTopic,\n}: KafkaInstanceProps) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert();\n  const containerRef = useRef();\n  const [width, setWidth] = useState();\n  const [timeDuration, setTimeDuration] = useState(6);\n  const [timeInterval, setTimeInterval] = useState(60);\n  const [selectedTopic, setSelectedTopic] = useState<boolean | string>(false);\n  const [isFilterApplied, setIsFilterApplied] = useState<boolean>(false);\n\n  const handleResize = () => containerRef.current && setWidth(containerRef.current.clientWidth);\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, [width]);\n\n  const [chartData, setChartData] = useState<ChartData[]>();\n  const [legend, setLegend] = useState<LegendData[]>();\n  const [largestByteSize, setLargestByteSize] = useState();\n  const [noTopics, setNoTopics] = useState<boolean>();\n  const [chartDataLoading, setChartDataLoading] = useState(true);\n  const [topicList, setTopicList] = useState<string[]>([]);\n\n  const fetchBytesData = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        if (!kafkaID) {\n          return;\n        }\n        const data = await apisService.getMetricsByRangeQuery(kafkaID, timeDuration * 60, timeInterval * 60, [\n          'kafka_server_brokertopicmetrics_bytes_in_total',\n          'kafka_server_brokertopicmetrics_bytes_out_total',\n        ]);\n\n        const incomingTopics = {\n          name: 'Total incoming bytes',\n          rawData: new Map<number, number[]>(),\n        } as Topic;\n\n        const outgoingTopics = {\n          name: 'Total outgoing bytes',\n          rawData: new Map<number, number[]>(),\n        } as Topic;\n\n        if (data.data.items) {\n          setMetricsDataUnavailable(false);\n\n          data.data.items?.forEach((item, index) => {\n            const labels = item.metric;\n            if (labels === undefined) {\n              throw new Error('item.metric cannot be undefined');\n            }\n            if (item.values === undefined) {\n              throw new Error('item.values cannot be undefined');\n            }\n\n            if (labels['topic'] !== '__strimzi_canary' && labels['topic'] !== '__consumer_offsets') {\n              topicList &&\n                labels['topic'] &&\n                topicList.indexOf(labels['topic']) === -1 &&\n                setTopicList([...topicList, labels['topic']]);\n            }\n\n            const isSelectedItem = isFilterApplied\n              ? labels['topic'] !== '__strimzi_canary' &&\n                labels['topic'] !== '__consumer_offsets' &&\n                selectedTopic === labels['topic']\n              : labels['topic'] !== '__strimzi_canary' && labels['topic'] !== '__consumer_offsets';\n\n            if (isSelectedItem) {\n              if (labels['__name__'] === 'kafka_server_brokertopicmetrics_bytes_in_total') {\n                item.values?.forEach((value, indexJ) => {\n                  if (value.timestamp == undefined) {\n                    throw new Error('timestamp cannot be undefined');\n                  }\n                  if (incomingTopics.rawData.has(value.timestamp)) {\n                    incomingTopics.rawData.get(value.timestamp)?.push(value.value);\n                  } else {\n                    incomingTopics.rawData.set(value.timestamp, [value.value] as number[]);\n                  }\n                });\n              }\n              if (labels['__name__'] === 'kafka_server_brokertopicmetrics_bytes_out_total') {\n                item.values?.forEach((value, indexJ) => {\n                  if (value.timestamp == undefined) {\n                    throw new Error('timestamp cannot be undefined');\n                  }\n                  if (outgoingTopics.rawData.has(value.timestamp)) {\n                    outgoingTopics.rawData.get(value.timestamp)?.push(value.value);\n                  } else {\n                    outgoingTopics.rawData.set(value.timestamp, [value.value] as number[]);\n                  }\n                });\n              }\n            }\n          });\n\n          if (incomingTopics.rawData.size < 1 && outgoingTopics.rawData.size < 1) {\n            setNoTopics(true);\n            setChartDataLoading(false);\n          } else {\n            const incomingDataArr = [] as TopicDataArray;\n            incomingTopics.rawData.forEach((value, key) => incomingDataArr.push({ timestamp: key, bytes: value }));\n            incomingTopics.sortedData = incomingDataArr.sort((a, b) => a.timestamp - b.timestamp);\n            const outgoingDataArr = [] as TopicDataArray;\n            outgoingTopics.rawData.forEach((value, key) => outgoingDataArr.push({ timestamp: key, bytes: value }));\n            outgoingTopics.sortedData = outgoingDataArr.sort((a, b) => a.timestamp - b.timestamp);\n            getChartData(incomingTopics, outgoingTopics);\n          }\n        } else {\n          setMetricsDataUnavailable(true);\n          setChartDataLoading(false);\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchBytesData();\n  }, [timeDuration, timeInterval]);\n\n  // useTimeout(() => fetchBytesData(), 1000 * 60 * 5);\n\n  const getChartData = (incomingTopicArray: Topic, outgoingTopicArray: Topic) => {\n    const legendData: Array<LegendData> = [];\n    const chartData: Array<ChartData> = [];\n    const largestByteSize = getLargestByteSize(incomingTopicArray, outgoingTopicArray);\n\n    // Aggregate of Incoming Bytes per Topic\n    if (incomingTopicArray) {\n      const line: Array<TopicChartData> = [];\n      const color = chart_color_blue_300.value;\n\n      const getCurrentLengthOfData = () => {\n        const timestampDiff =\n          incomingTopicArray.sortedData[incomingTopicArray.sortedData.length - 1].timestamp -\n          incomingTopicArray.sortedData[0].timestamp;\n        const minutes = timestampDiff / 1000 / 60;\n        return minutes;\n      };\n      const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n      const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n      if (lengthOfData <= 360 && timeDuration >= 6) {\n        for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n          const newTimestamp = incomingTopicArray.sortedData[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n          const date = new Date(newTimestamp);\n          const time = date.getHours() + ':' + date.getMinutes();\n          line.push({ name: incomingTopicArray.name, x: time, y: 0 });\n        }\n      }\n\n      incomingTopicArray.sortedData.map((value) => {\n        const date = new Date(value.timestamp);\n        const time = date.getHours() + ':' + date.getMinutes();\n\n        const aggregateBytes = value.bytes.reduce(function (a, b) {\n          return a + b;\n        }, 0);\n        const bytes = convertToSpecifiedByte(aggregateBytes, largestByteSize);\n        line.push({ name: incomingTopicArray.name, x: time, y: bytes });\n      });\n\n      chartData.push({ color, line });\n\n      legendData.push({\n        name: incomingTopicArray.name,\n        symbol: {\n          fill: chart_color_blue_300.value,\n        },\n      });\n    }\n\n    // Aggregate of Outgoing Bytes per Topic\n    if (outgoingTopicArray) {\n      const line: Array<TopicChartData> = [];\n      const color = chart_color_orange_300.value;\n\n      const getCurrentLengthOfData = () => {\n        const timestampDiff =\n          outgoingTopicArray.sortedData[outgoingTopicArray.sortedData.length - 1].timestamp -\n          outgoingTopicArray.sortedData[0].timestamp;\n        const minutes = timestampDiff / 1000 / 60;\n        return minutes;\n      };\n      const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n      const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n      if (lengthOfData <= 360 && timeDuration >= 6) {\n        for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n          const newTimestamp = outgoingTopicArray.sortedData[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n          const date = new Date(newTimestamp);\n          const time = date.getHours() + ':' + date.getMinutes();\n          line.push({ name: outgoingTopicArray.name, x: time, y: 0 });\n        }\n      }\n\n      outgoingTopicArray.sortedData.map((value) => {\n        const date = new Date(value.timestamp);\n        const time = date.getHours() + ':' + date.getMinutes();\n\n        const aggregateBytes = value.bytes.reduce(function (a, b) {\n          return a + b;\n        }, 0);\n        const bytes = convertToSpecifiedByte(aggregateBytes, largestByteSize);\n        line.push({ name: outgoingTopicArray.name, x: time, y: bytes });\n      });\n      chartData.push({ color, line });\n      legendData.push({\n        name: outgoingTopicArray.name,\n        symbol: {\n          fill: chart_color_orange_300.value,\n        },\n      });\n    }\n    setLegend(legendData);\n    setChartData(chartData);\n    setLargestByteSize(largestByteSize);\n    setChartDataLoading(false);\n  };\n\n  const onRefreshTopicToolbar = () => {\n    fetchBytesData();\n  };\n\n  return (\n    <Card>\n      <ChartToolbar\n        showTopicFilter={true}\n        title={t('metrics.topic_metrics')}\n        setTimeDuration={setTimeDuration}\n        setTimeInterval={setTimeInterval}\n        showTopicToolbar={!noTopics && !metricsDataUnavailable}\n        selectedTopic={selectedTopic}\n        setSelectedTopic={setSelectedTopic}\n        onRefreshTopicToolbar={onRefreshTopicToolbar}\n        topicList={topicList}\n        setIsFilterApplied={setIsFilterApplied}\n      />\n      <CardTitle component=\"h2\">\n        {t('metrics.total_bytes')} <ChartPopover title={t('metrics.total_bytes')} description=\"chart description\" />\n      </CardTitle>\n      <CardBody>\n        <div ref={containerRef}>\n          <div>\n            {!chartDataLoading ? (\n              !metricsDataUnavailable ? (\n                !noTopics ? (\n                  chartData &&\n                  legend &&\n                  largestByteSize && (\n                    <>\n                      <Chart\n                        ariaDesc={t('metrics.total_bytes')}\n                        ariaTitle=\"Total Bytes\"\n                        containerComponent={\n                          <ChartVoronoiContainer\n                            labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                            constrainToVisibleArea\n                          />\n                        }\n                        legendAllowWrap={true}\n                        legendPosition=\"bottom-left\"\n                        legendComponent={<ChartLegend data={legend} itemsPerRow={itemsPerRow} />}\n                        height={300}\n                        padding={{\n                          bottom: 110,\n                          left: 90,\n                          right: 30,\n                          top: 25,\n                        }}\n                        themeColor={ChartThemeColor.multiUnordered}\n                        width={width}\n                      >\n                        <ChartAxis label={'Time'} tickCount={6} />\n                        <ChartAxis\n                          dependentAxis\n                          tickFormat={(t) => `${Math.round(t)} ${largestByteSize}`}\n                          tickCount={4}\n                          minDomain={{ y: 0 }}\n                        />\n                        <ChartGroup>\n                          {chartData.map((value, index) => (\n                            <ChartLine\n                              key={`chart-line-${index}`}\n                              data={value.line}\n                              style={{\n                                data: {\n                                  stroke: value.color,\n                                },\n                              }}\n                            />\n                          ))}\n                        </ChartGroup>\n                      </Chart>\n\n                      <Divider />\n                      {selectedTopic ? (\n                        <LogSizePerPartitionChart\n                          kafkaID={kafkaID}\n                          timeDuration={timeDuration}\n                          timeInterval={timeInterval}\n                        />\n                      ) : (\n                        <Card>\n                          <CardTitle component=\"h2\">{t('metrics.topic_partition_size')}</CardTitle>\n                          <CardBody>\n                            <ChartEmptyState\n                              title={t('metrics.empty_state_no_filter_title')}\n                              body={t('metrics.empty_state_no_filter_body')}\n                              noFilter\n                            />{' '}\n                          </CardBody>\n                        </Card>\n                      )}\n                    </>\n                  )\n                ) : (\n                  <ChartEmptyState\n                    title={t('metrics.empty_state_no_topics_title')}\n                    body={t('metrics.empty_state_no_topics_body')}\n                    noTopics\n                    onCreateTopic={onCreateTopic}\n                  />\n                )\n              ) : (\n                <ChartEmptyState\n                  title={t('metrics.empty_state_no_data_title')}\n                  body={t('metrics.empty_state_no_data_body')}\n                  noData\n                />\n              )\n            ) : (\n              <Bullseye>\n                <Spinner isSVG />\n              </Bullseye>\n            )}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport { isServiceApiError } from '@app/utils';\nimport { AlertVariant, Bullseye, Card, CardTitle, CardBody, Spinner } from '@patternfly/react-core';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport byteSize from 'byte-size';\nimport { ChartEmptyState, ChartPopover } from '@app/modules/Metrics/components';\nimport { getLargestByteSize, convertToSpecifiedByte } from '@app/modules/Metrics/utils';\n\nexport type Partition = {\n  name: string;\n  data: {\n    timestamp: number;\n    bytes: number;\n    name: string;\n  }[];\n};\n\nexport type ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\nexport type PartitionChartData = {\n  name: string;\n  x: string;\n  y: number;\n};\n\nexport type LegendData = {\n  name: string;\n};\n\nexport type KafkaInstanceProps = {\n  kafkaID: string;\n  timeInterval: number;\n  timeDuration: number;\n};\n\nexport const LogSizePerPartitionChart: React.FC<KafkaInstanceProps> = ({\n  kafkaID,\n  timeDuration,\n  timeInterval,\n}: KafkaInstanceProps) => {\n  const containerRef = useRef();\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert();\n  const [width, setWidth] = useState<number>();\n  const [legend, setLegend] = useState();\n  const [chartData, setChartData] = useState<ChartData[]>();\n  const [largestByteSize, setLargestByteSize] = useState();\n  const [metricsDataUnavailable, setMetricsDataUnavailable] = useState(false);\n  const [chartDataLoading, setChartDataLoading] = useState(true);\n  const [noTopics, setNoTopics] = useState<boolean>();\n\n  const colors = [chart_color_green_300.value, chart_color_blue_300.value];\n\n  const handleResize = () => containerRef.current && setWidth(containerRef.current.clientWidth);\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  // Functions\n  const fetchLogSizePerPartition = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        if (!kafkaID) {\n          return;\n        }\n        const data = await apisService.getMetricsByRangeQuery(kafkaID, timeDuration * 60, timeInterval * 60, [\n          'kafka_log_log_size',\n        ]);\n\n        const partitionArray: Partition[] = [];\n\n        if (data.data.items) {\n          setMetricsDataUnavailable(false);\n          data.data.items?.forEach((item, i) => {\n            const topicName = item?.metric?.topic;\n\n            const topic = {\n              name: topicName,\n              data: [],\n            } as Partition;\n\n            const isTopicInArray = partitionArray.some((topic) => topic.name === topicName);\n\n            item.values?.forEach((value) => {\n              if (value.timestamp == undefined) {\n                throw new Error('timestamp cannot be undefined');\n              }\n\n              if (isTopicInArray) {\n                partitionArray.map((topic: Partition) => {\n                  if (topic.name === topicName) {\n                    topic.data.forEach((datum) => {\n                      datum.bytes = datum.bytes + value.value;\n                    });\n                  }\n                });\n              } else {\n                topic.data.push({\n                  name: topicName || '',\n                  timestamp: value.timestamp,\n                  bytes: value.value,\n                });\n              }\n            });\n\n            if (!isTopicInArray) {\n              partitionArray.push(topic);\n            }\n          });\n          // Check if atleast one topic exists that isn't Strimzi Canary or Consumer Offsets - Keep this here for testing purposes\n          const filteredTopics = partitionArray.filter(\n            (topic) => topic.name !== '__strimzi_canary' && topic.name !== '__consumer_offsets'\n          );\n\n          if (filteredTopics.length < 1) {\n            setNoTopics(true);\n          }\n          getChartData(filteredTopics);\n        } else {\n          setMetricsDataUnavailable(true);\n          setChartDataLoading(false);\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchLogSizePerPartition();\n    handleResize();\n  }, [timeInterval, timeDuration]);\n\n  // useTimeout(() => fetchLogSizePerPartition(), 1000 * 60 * 5);\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, [width]);\n\n  const getChartData = (partitionArray) => {\n    const legendData: Array<LegendData> = [];\n    const chartData: Array<ChartData> = [];\n    const largestByteSize = getLargestByteSize(partitionArray, undefined);\n    partitionArray.map((partition, index) => {\n      const color = colors[index];\n      legendData.push({\n        name: partition.name,\n      });\n      const area: Array<PartitionChartData> = [];\n\n      const getCurrentLengthOfData = () => {\n        const timestampDiff = partition.data[partition.data.length - 1].timestamp - partition.data[0].timestamp;\n        const minutes = timestampDiff / 1000 / 60;\n        return minutes;\n      };\n      const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n      const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n      if (lengthOfData <= 360 && timeDuration >= 6) {\n        for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n          const newtimestamp = partition.data[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n          const date = new Date(newtimestamp);\n          const time = date.getHours() + ':' + date.getMinutes();\n          area.push({ name: partition.name, x: time, y: 0 });\n        }\n      }\n\n      partition.data.map((value) => {\n        const date = new Date(value.timestamp);\n        const time = date.getHours() + ':' + date.getMinutes();\n        const bytes = convertToSpecifiedByte(value.bytes, largestByteSize);\n        area.push({ name: value.name, x: time, y: bytes });\n      });\n      chartData.push({ color, area });\n    });\n    setLegend(legendData);\n    setChartData(chartData);\n    setLargestByteSize(largestByteSize);\n    setChartDataLoading(false);\n  };\n\n  return (\n    <Card>\n      <CardTitle component=\"h2\">\n        {t('metrics.log_size_per_partition')}{' '}\n        <ChartPopover title={t('metrics.log_size_per_partition')} description=\"chart description\" />\n      </CardTitle>\n      <CardBody>\n        <div ref={containerRef}>\n          {!chartDataLoading ? (\n            !metricsDataUnavailable ? (\n              !noTopics ? (\n                chartData &&\n                legend &&\n                byteSize && (\n                  <Chart\n                    ariaDesc={t('metrics.log_size_per_partition')}\n                    ariaTitle=\"Log Size\"\n                    containerComponent={\n                      <ChartVoronoiContainer\n                        labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                        constrainToVisibleArea\n                      />\n                    }\n                    legendPosition=\"bottom-left\"\n                    legendComponent={<ChartLegend data={legend} itemsPerRow={itemsPerRow} />}\n                    height={350}\n                    padding={{\n                      bottom: 110,\n                      left: 90,\n                      right: 30,\n                      top: 25,\n                    }}\n                    themeColor={ChartThemeColor.multiUnordered}\n                    width={width}\n                    legendAllowWrap={true}\n                  >\n                    <ChartAxis label={'Time'} tickCount={6} />\n                    <ChartAxis dependentAxis tickFormat={(t) => `${Math.round(t)} ${largestByteSize}`} />\n                    <ChartGroup>\n                      {chartData.map((value, index) => (\n                        <ChartArea key={`chart-area-${index}`} data={value.area} interpolation=\"monotoneX\" />\n                      ))}\n                    </ChartGroup>\n                  </Chart>\n                )\n              ) : (\n                <ChartEmptyState\n                  title=\"No topics yet\"\n                  body=\"Data will show when topics exist and are in use.\"\n                  noTopics\n                />\n              )\n            ) : (\n              <ChartEmptyState\n                title=\"No data\"\n                body=\"We’re creating your Kafka instance, so some details aren’t yet available.\"\n                noData\n              />\n            )\n          ) : (\n            <Bullseye>\n              <Spinner isSVG />\n            </Bullseye>\n          )}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { ToolbarItem, Select, SelectVariant, SelectGroup, SelectOption } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\n\ntype FilterByTopicProps = {\n  setSelectedTopic?: (value: string | boolean) => void;\n  selectedTopic?: string | boolean;\n  topicList?: string[];\n  setIsFilterApplied?: (value: boolean) => void;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTopic = ({\n  selectedTopic,\n  setSelectedTopic,\n  topicList,\n  setIsFilterApplied,\n  disableToolbar,\n}: FilterByTopicProps) => {\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n  const [topicListFinal, setTopicListFinal] = useState<string[]>();\n\n  useEffect(() => {\n    topicList && setTopicListFinal(topicList);\n  }, [topicList]);\n\n  const onTopicToggle = (isTopicSelectOpen) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect = (_, selection) => {\n    setSelectedTopic && setSelectedTopic(selection);\n    setIsFilterApplied && (selection !== 'All topics' ? setIsFilterApplied(true) : setIsFilterApplied(false));\n    setIsTopicSelectOpen(false);\n  };\n\n  const onTopicFilter = (_, textInput) => {\n    const filteredTopics = topicListFinal?.filter((topic) => topic.indexOf(textInput) != -1) || [];\n    return topicOptions(filteredTopics);\n  };\n\n  const topicOptions = (topicList) => [\n    <SelectOption key={'topic-filter-0'} value=\"All topics\" />,\n    <SelectGroup label=\"Filter by topic\" key=\"topic-filter-group\">\n      {topicList?.map((topic, index) => (\n        <SelectOption key={`topic-filter-${index + 1}`} value={topic} />\n      ))}\n    </SelectGroup>,\n  ];\n\n  const widths = {\n    default: '100px',\n    sm: '80px',\n    md: '150px',\n    lg: '200px',\n    xl: '250px',\n    '2xl': '300px',\n  };\n\n  return (\n    <ToolbarItem widths={widths}>\n      <Select\n        variant={SelectVariant.single}\n        onToggle={onTopicToggle}\n        onSelect={onTopicSelect}\n        selections={selectedTopic}\n        isOpen={isTopicSelectOpen}\n        placeholderText={\n          <>\n            <FilterIcon /> All topics\n          </>\n        }\n        aria-labelledby={'titleId'}\n        onFilter={onTopicFilter}\n        isGrouped\n        hasInlineFilter\n        isDisabled={disableToolbar}\n        style={{ width: '100%' }}\n      >\n        {topicOptions(topicListFinal)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import React, { useState } from 'react';\nimport { ToolbarItem, Select, SelectVariant, SelectGroup, SelectOption } from '@patternfly/react-core';\nimport { formatTime } from '../../utils';\n\ntype FilterByTimeProps = {\n  setTimeDuration: (value: number) => void;\n  setTimeInterval: (value: number) => void;\n  keyText: string;\n  disableToolbar: boolean;\n};\n\nexport const FilterByTime = ({ setTimeDuration, setTimeInterval, keyText, disableToolbar }: FilterByTimeProps) => {\n  const [selectedTime, setSelectedTime] = useState<boolean>(false);\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect = (_, selection) => {\n    setTimeDuration(formatTime(selection).timeDuration);\n    setTimeInterval(formatTime(selection).timeInterval);\n    setSelectedTime(selection);\n    setIsTimeSelectOpen(false);\n  };\n\n  const timeOptions = (keyText: string) => [\n    <SelectGroup label=\"Relative time ranges\" key={`${keyText}-group`}>\n      <SelectOption key={`${keyText}-0`} value=\"Last 5 minutes\" />\n      <SelectOption key={`${keyText}-1`} value=\"Last 15 minutes\" />\n      <SelectOption key={`${keyText}-2`} value=\"Last 30 minutes\" />\n      <SelectOption key={`${keyText}-3`} value=\"Last 1 hour\" />\n      <SelectOption key={`${keyText}-4`} value=\"Last 3 hours\" />\n      <SelectOption key={`${keyText}-5`} value=\"Last 6 hours\" />\n      <SelectOption key={`${keyText}-6`} value=\"Last 12 hours\" />\n      <SelectOption key={`${keyText}-7`} value=\"Last 24 hours\" />\n      <SelectOption key={`${keyText}-8`} value=\"Last 2 days\" />\n      <SelectOption key={`${keyText}-9`} value=\"Last 7 days\" />\n    </SelectGroup>,\n  ];\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label=\"Select Input\"\n        onToggle={onTimeToggle}\n        onSelect={onTimeSelect}\n        selections={selectedTime}\n        isOpen={isTimeSelectOpen}\n        isDisabled={disableToolbar}\n        placeholderText=\"Last 6 hours\"\n      >\n        {timeOptions(keyText)}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import React from 'react';\nimport { Button, CardTitle, Divider, Level, LevelItem, Toolbar, ToolbarContent } from '@patternfly/react-core';\nimport { SyncIcon } from '@patternfly/react-icons';\nimport { FilterByTopic } from './FilterByTopic';\nimport { FilterByTime } from './FilterByTime';\n\ntype ChartToolbarProps = {\n  title: string;\n  showTopicFilter: boolean;\n  setTimeDuration: (value: number) => void;\n  setTimeInterval: (value: number) => void;\n  showTopicToolbar?: boolean;\n  showKafkaToolbar?: boolean;\n  setSelectedTopic?: (value: string | boolean) => void;\n  selectedTopic?: string | boolean;\n  onRefreshKafkaToolbar?: () => void;\n  onRefreshTopicToolbar?: () => void;\n  topicList?: string[];\n  setIsFilterApplied?: (value: boolean) => void;\n};\nexport const ChartToolbar = ({\n  title,\n  showTopicFilter,\n  setTimeDuration,\n  setTimeInterval,\n  showKafkaToolbar = true,\n  showTopicToolbar = true,\n  setSelectedTopic,\n  selectedTopic,\n  onRefreshKafkaToolbar,\n  onRefreshTopicToolbar,\n  topicList,\n  setIsFilterApplied,\n}: ChartToolbarProps) => {\n  return (\n    <>\n      <Level>\n        <LevelItem>\n          <CardTitle component=\"h2\">{title}</CardTitle>\n        </LevelItem>\n        <LevelItem>\n          {showTopicFilter ? (\n            <Toolbar>\n              <ToolbarContent>\n                <FilterByTopic\n                  selectedTopic={selectedTopic}\n                  setSelectedTopic={setSelectedTopic}\n                  topicList={topicList}\n                  setIsFilterApplied={setIsFilterApplied}\n                  disableToolbar={!showTopicToolbar}\n                />\n                <FilterByTime\n                  setTimeDuration={setTimeDuration}\n                  setTimeInterval={setTimeInterval}\n                  disableToolbar={!showTopicToolbar}\n                  keyText={'topic-metrics-time-filter'}\n                />\n                <Button variant=\"plain\" aria-label=\"sync\" onClick={onRefreshTopicToolbar}>\n                  <SyncIcon />\n                </Button>\n              </ToolbarContent>\n            </Toolbar>\n          ) : (\n            <Toolbar>\n              <ToolbarContent>\n                <FilterByTime\n                  setTimeDuration={setTimeDuration}\n                  setTimeInterval={setTimeInterval}\n                  keyText={'kafka-metrics-time-filter'}\n                  disableToolbar={!showKafkaToolbar}\n                />\n                <Button variant=\"plain\" aria-label=\"sync\" onClick={onRefreshKafkaToolbar}>\n                  <SyncIcon />\n                </Button>\n              </ToolbarContent>\n            </Toolbar>\n          )}\n        </LevelItem>\n      </Level>\n      <Divider />\n    </>\n  );\n};\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","ChartEmptyState","title","body","noData","noTopics","noFilter","onCreateTopic","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","FilterIcon","Title","headingLevel","size","EmptyStateBody","Button","onClick","getLargestByteSize","data1","data2","currentByteSize","sortedData","data","map","datum","bytes","forEach","value","byteString","unit","convertToSpecifiedByte","largestByteSize","Math","round","formatTime","selection","timeDuration","timeInterval","ChartPopover","description","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","UsedDiskSpaceChart","kafkaID","metricsDataUnavailable","setMetricsDataUnavailable","containerRef","useRef","t","useTranslation","auth","useAuth","basePath","useConfig","addAlert","useAlert","useState","setWidth","legend","setLegend","chartData","setChartData","chartDataLoading","setChartDataLoading","setLargestByteSize","setTimeDuration","setTimeInterval","handleResize","current","clientWidth","itemsPerRow","fetchUsedDiskSpaceMetrics","kas","getToken","undefined","accessToken","apisService","DefaultApi","Configuration","getMetricsByRangeQuery","items","item","index","labels","metric","Error","values","includes","indexJ","timestamp","newArray","usedSpaceAvg","concat","push","getChartData","reason","response","AlertVariant","useEffect","window","addEventListener","avgBroker","legendData","symbol","fill","chart_color_black_500","type","chart_color_blue_300","areaColor","softLimitColor","area","softLimit","getCurrentLengthOfData","length","lengthOfData","lengthOfDataPer5Mins","i","newTimestamp","date","Date","time","getHours","getMinutes","x","y","aggregateBytes","reduce","a","b","Card","ChartToolbar","showTopicFilter","showKafkaToolbar","onRefreshKafkaToolbar","CardTitle","component","CardBody","ref","Bullseye","Spinner","isSVG","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","orientation","padding","bottom","left","right","top","themeColor","ChartThemeColor","minDomain","legendAllowWrap","ChartAxis","label","tickCount","dependentAxis","tickFormat","ChartGroup","ChartArea","key","interpolation","style","stroke","color","ChartThreshold","render","CursorVoronoiContainer","createContainer","this","props","topics","topic","messages","count","cursorDimension","labelComponent","ChartLegendTooltip","mouseFollowTooltips","voronoiDimension","voronoiPadding","maxDomain","showGrid","ChartLine","IncomingOutgoingBytesPerTopic","selectedTopic","setSelectedTopic","isFilterApplied","setIsFilterApplied","setNoTopics","topicList","setTopicList","fetchBytesData","rawData","Map","indexOf","has","get","set","sort","incomingTopicArray","outgoingTopicArray","line","chart_color_orange_300","showTopicToolbar","onRefreshTopicToolbar","Divider","LogSizePerPartitionChart","colors","chart_color_green_300","topicName","isTopicInArray","some","filteredTopics","filter","partitionArray","partition","newtimestamp","FilterByTopic","disableToolbar","isTopicSelectOpen","setIsTopicSelectOpen","topicListFinal","setTopicListFinal","topicOptions","SelectOption","SelectGroup","ToolbarItem","widths","default","sm","md","lg","xl","Select","SelectVariant","onToggle","onSelect","_","selections","isOpen","placeholderText","onFilter","textInput","isGrouped","hasInlineFilter","isDisabled","FilterByTime","keyText","selectedTime","setSelectedTime","isTimeSelectOpen","setIsTimeSelectOpen","timeOptions","Level","LevelItem","Toolbar","ToolbarContent","SyncIcon"],"sourceRoot":""}