{"version":3,"file":"1914.048dac5e.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceWithSizes/hooks/useAMSQuota.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceWithSizes/hooks/useAvailableProvidersAndDefault.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceWithSizes/hooks/useCreateInstance.ts","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceWithSizes/CreateInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceWithSizes/hooks/useGetAvailableSizes.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts"],"sourcesContent":["import {\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaValue,\n  QuotaType,\n} from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { InstanceType } from \"@app/utils\";\n\n/**\n * Hook that fetches available entitelemts from AMS\n *\n * @returns\n */\nexport const useAMSQuota = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  // TODO we need this details to be shared to from app-servies-ui\n  const quotaProductId = \"RHOSAK\";\n  const trialQuotaProductId = \"RHOSAKTrial\";\n  const resourceName = \"rhosak\";\n\n  return async () => {\n    const accessToken = await auth?.ams.getToken();\n    const ams = new AppServicesApi({\n      accessToken,\n      basePath: config?.ams.apiBasePath || \"\",\n    } as Configuration);\n\n    const account = await ams.apiAccountsMgmtV1CurrentAccountGet();\n    const orgId = account?.data?.organization?.id;\n    const quotaData = new Map<QuotaType, QuotaValue>();\n    // TODO remove service down and other values. Use different model?\n    const filteredQuota: Quota = {\n      loading: true,\n      isServiceDown: false,\n      data: undefined,\n    };\n\n    if (!orgId) {\n      console.error(\"useQuota\", \"orgId is not defined\");\n      filteredQuota.loading = false;\n      filteredQuota.isServiceDown = true;\n      return filteredQuota;\n    }\n\n    try {\n      const response =\n        await ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n          orgId,\n          undefined,\n          true\n        );\n\n      const quota = response?.data?.items?.find((q) =>\n        q.related_resources?.find(\n          (r) =>\n            r.resource_name === resourceName && r.product === quotaProductId\n        )\n      );\n      const trialQuota = response?.data?.items?.find((q) =>\n        q.related_resources?.find(\n          (r) =>\n            r.resource_name === resourceName &&\n            r.product === trialQuotaProductId\n        )\n      );\n\n      // TODO logic here should include marketplace vs standard billing model.\n      // We need to pick standard\n      if (quota && quota.allowed > 0) {\n        const remaining = quota?.allowed - quota?.consumed;\n        quotaData?.set(QuotaType.kas, {\n          allowed: quota?.allowed,\n          consumed: quota?.consumed,\n          remaining: remaining < 0 ? 0 : remaining,\n        });\n      }\n\n      if (trialQuota) {\n        quotaData?.set(QuotaType.kasTrial, {\n          allowed: trialQuota?.allowed,\n          consumed: trialQuota?.consumed,\n          remaining: trialQuota?.allowed - trialQuota?.consumed,\n        });\n      }\n\n      filteredQuota.loading = false;\n      filteredQuota.data = quotaData;\n    } catch (error) {\n      filteredQuota.loading = false;\n      filteredQuota.isServiceDown = true;\n      console.error(error);\n    }\n\n    return filteredQuota;\n  };\n};\n\n// Helper methods for busines logic handled in the UI\nexport function convertQuotaToInstanceType(\n  quota: Map<QuotaType, QuotaValue> | undefined\n) {\n  let kasQuota: QuotaValue | undefined;\n  try {\n    kasQuota = quota?.get(QuotaType?.kas);\n  } catch (e) {\n    console.error(\"useAvailableProvidersAndDefault\", \"quota?.get exception\", e);\n  }\n  if (kasQuota !== undefined && kasQuota.remaining >= 0) {\n    return InstanceType.standard;\n  } else {\n    return InstanceType.developer;\n  }\n}\n\nexport function getQuotaType(quota: Map<QuotaType, QuotaValue> | undefined) {\n  let kasQuota: QuotaValue | undefined;\n  try {\n    kasQuota = quota?.get(QuotaType?.kas);\n  } catch (e) {\n    console.error(\"useAvailableProvidersAndDefault\", \"quota?.get exception\", e);\n  }\n\n  if (kasQuota !== undefined && kasQuota.remaining >= 0) {\n    return \"standard\";\n  }\n\n  return \"trial\";\n}\n","import { CreateKafkaInstanceWithSizesTypes } from \"@rhoas/app-services-ui-components\";\nimport { useAuth, useConfig, QuotaType } from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { InstanceType } from \"@app/utils\";\nimport {\n  convertQuotaToInstanceType,\n  getQuotaType,\n  useAMSQuota,\n} from \"./useAMSQuota\";\n\n/**\n * Hooks for fetching available providers and their regions\n *\n * @returns\n */\nexport const useAvailableProvidersAndDefault = () => {\n  const { kas, getUsername } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const getQuota = useAMSQuota();\n\n  function getApi() {\n    return new DefaultApi(\n      new Configuration({\n        accessToken: kas.getToken(),\n        basePath,\n      })\n    );\n  }\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchRegions = async (\n    id: string,\n    instance_type: string\n  ): Promise<CreateKafkaInstanceWithSizesTypes.Regions> => {\n    const apisService = getApi();\n    const res = await apisService.getCloudProviderRegions(id);\n\n    if (!res?.data?.items) {\n      return [];\n    }\n\n    const regionsForInstance = res.data.items.filter(\n      (p) =>\n        p.enabled && p.capacity.some((c) => c.instance_type === instance_type)\n    );\n\n    return regionsForInstance.map(\n      (r): CreateKafkaInstanceWithSizesTypes.RegionInfo => {\n        const max_capacity_reached = r.capacity?.some(\n          (c) => c.available_sizes?.length === 0\n        );\n\n        return {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          id: r.id!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          displayName: r.display_name!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          isDisabled: max_capacity_reached,\n        };\n      }\n    );\n  };\n\n  const fetchProviders = async (\n    instance_type: string\n  ): Promise<CreateKafkaInstanceWithSizesTypes.Providers> => {\n    try {\n      const apisService = getApi();\n      const res = await apisService.getCloudProviders();\n      const allProviders = res?.data?.items || [];\n      return await Promise.all(\n        allProviders\n          .filter((p) => p.enabled)\n          .map(\n            async (\n              provider\n            ): Promise<CreateKafkaInstanceWithSizesTypes.ProviderInfo> => {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const regions = await fetchRegions(provider.id!, instance_type);\n              return {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                id: provider.id!,\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                displayName: provider.display_name!,\n                regions,\n              };\n            }\n          )\n      );\n    } catch (e) {\n      console.error(\"useAvailableProvidersAndDefault\", \"fetchProvider\", e);\n      return Promise.reject(e);\n    }\n  };\n\n  // TODO - this logic should not exist and be replaced with AMS quota.\n  const fetchUserHasTrialInstance = async (): Promise<boolean> => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const loggedInUser = await getUsername()!;\n      const filter = `owner = ${loggedInUser}`;\n      const apisService = getApi();\n      const res = await apisService.getKafkas(\"\", \"\", \"\", filter);\n      if (res.data.items) {\n        return res.data.items.some(\n          (k) =>\n            k?.instance_type === InstanceType?.eval ||\n            k?.instance_type === InstanceType?.developer\n        );\n      }\n    } catch (e) {\n      console.error(\n        \"useAvailableProvidersAndDefault\",\n        \"fetchUserHasTrialInstance\",\n        e\n      );\n    }\n    return false;\n  };\n\n  return async function (): Promise<CreateKafkaInstanceWithSizesTypes.CreateKafkaInitializationData> {\n    try {\n      const quota = await getQuota();\n      const plan = getQuotaType(quota.data);\n      const instanceType = convertQuotaToInstanceType(quota.data);\n      const kasQuota = quota?.data?.get(QuotaType?.kas);\n\n      const hasTrialRunning = await fetchUserHasTrialInstance();\n      const availableProviders = await fetchProviders(instanceType);\n      let defaultProvider:\n        | CreateKafkaInstanceWithSizesTypes.Provider\n        | undefined;\n      try {\n        defaultProvider =\n          availableProviders.length === 1\n            ? availableProviders[0].id\n            : undefined;\n      } catch (e) {\n        console.error(\n          \"useAvailableProvidersAndDefault\",\n          \"defaultProvider error\",\n          e\n        );\n      }\n\n      const instanceAvailability =\n        ((): CreateKafkaInstanceWithSizesTypes.InstanceAvailability => {\n          switch (true) {\n            case kasQuota !== undefined && kasQuota.remaining > 0:\n              return \"standard-available\";\n            case kasQuota !== undefined && kasQuota.remaining === 0:\n              return \"over-quota\";\n            case hasTrialRunning:\n              return \"trial-used\";\n            default:\n              return \"trial-available\";\n          }\n        })();\n\n      return {\n        defaultProvider,\n        availableProviders,\n        instanceAvailability,\n        maxStreamingUnits: kasQuota?.allowed || 0,\n        remainingQuota: kasQuota?.remaining || 0,\n        plan,\n      };\n    } catch (e) {\n      console.error(\"useAvailableProvidersAndDefault\", e);\n      return Promise.reject(e);\n    }\n  };\n};\n","import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport { CreateKafkaInstanceWithSizesTypes } from \"@rhoas/app-services-ui-components\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes } from \"@app/utils\";\nimport { convertQuotaToInstanceType, useAMSQuota } from \"./useAMSQuota\";\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceWithSizesTypes.OnCreateKafka => {\n    const auth = useAuth();\n    const getQuota = useAMSQuota();\n    const {\n      kas: { apiBasePath: basePath },\n    } = useConfig();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken: auth?.kas.getToken(),\n          basePath,\n        })\n      );\n      const quota = await getQuota();\n      const instanceType = convertQuotaToInstanceType(quota.data);\n\n      try {\n        const kafkaRequest = asKafkaRequestPayload(\n          createEmptyNewKafkaRequestPayload()\n        );\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = instanceType + \".\" + data.sizeId;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (code) {\n            case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n              onError(\"name-taken\");\n              break;\n            case ErrorCodes.INSUFFICIENT_QUOTA:\n              onError(\"over-quota\");\n              break;\n            case ErrorCodes.REACHED_MAX_LIMIT_ALLOWED_KAFKA:\n            case ErrorCodes.INSTANCE_TYPE_NOT_SUPPORTED:\n              onError(\"trial-unavailable\");\n              break;\n            default:\n              console.error(\n                \"useAvailableProvidersAndDefault\",\n                \"createKafka unknown error\",\n                error\n              );\n              onError(\"unknown\");\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    multi_az: kafkaRequest.multi_az.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n","import { useHistory } from \"react-router-dom\";\nimport {\n  CreateKafkaInstancePropsWithSizes,\n  CreateKafkaInstanceWithSizes,\n  CreateKafkaInstanceWithSizesTypes,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n} from \"@rhoas/app-services-ui-shared\";\nimport { QuickStartContext } from \"@patternfly/quickstarts\";\nimport { getModalAppendTo } from \"@app/utils\";\nimport { FunctionComponent, useCallback, useContext } from \"react\";\nimport {\n  useGetAvailableSizes,\n  useCreateInstance,\n  useAvailableProvidersAndDefault,\n} from \"./hooks/\";\n\nconst CreateInstanceWithSizes: FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ hideModal, onCreate }) => {\n  const history = useHistory();\n  const fetchAvailableProvidersAndDefault = useAvailableProvidersAndDefault();\n  const getKafkaSizes = useGetAvailableSizes();\n  const createInstance = useCreateInstance();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const handleCreate =\n    useCallback<CreateKafkaInstanceWithSizesTypes.OnCreateKafka>(\n      function (data, onSuccess, onError) {\n        const handleOnSuccess = () => {\n          onSuccess();\n          onCreate && onCreate();\n          hideModal();\n        };\n        createInstance(data, handleOnSuccess, onError);\n      },\n      [hideModal, onCreate, createInstance]\n    );\n\n  const getAvailableProvidersAndDefaults =\n    useCallback(async (): Promise<CreateKafkaInstanceWithSizesTypes.CreateKafkaInitializationData> => {\n      return fetchAvailableProvidersAndDefault();\n    }, [fetchAvailableProvidersAndDefault]);\n\n  const kafkaSizes = useCallback<CreateKafkaInstancePropsWithSizes[\"getSizes\"]>(\n    getKafkaSizes,\n    [getKafkaSizes]\n  );\n\n  return (\n    <CreateKafkaInstanceWithSizes\n      isModalOpen={true}\n      onClickQuickStart={onClickQuickStart}\n      onCancel={hideModal}\n      getAvailableProvidersAndDefaults={getAvailableProvidersAndDefaults}\n      onCreate={handleCreate}\n      onClickContactUs={onClickKafkaOverview}\n      onClickLearnMoreAboutRegions={onClickKafkaOverview}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      getSizes={kafkaSizes}\n      appendTo={getModalAppendTo}\n    />\n  );\n};\n\nexport { CreateInstanceWithSizes };\nexport default CreateInstanceWithSizes;\n","import { InstanceType } from \"@app/utils\";\nimport { CreateKafkaInstanceWithSizesTypes } from \"@rhoas/app-services-ui-components\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { SupportedKafkaSize } from \"@rhoas/kafka-management-sdk/dist/generated/model/supported-kafka-size\";\n\n/**\n * Return list of the instance types available for the current user\n *\n * @returns {Promise<InstanceType[]>}\n */\nexport function useGetAvailableSizes() {\n  const { kas } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  return async (\n    provider: string,\n    region: string\n  ): Promise<CreateKafkaInstanceWithSizesTypes.GetSizesData> => {\n    const api = new DefaultApi(\n      new Configuration({\n        accessToken: kas.getToken(),\n        basePath,\n      })\n    );\n\n    const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n      provider,\n      region\n    );\n    if (!sizes?.data?.instance_types) {\n      throw new Error(`No instance_types from backend`);\n    }\n\n    const standardSizes = sizes?.data?.instance_types.find(\n      (i) => i.id === InstanceType.standard\n    )?.sizes;\n    const trialSize = (sizes?.data?.instance_types.find(\n      (i) => i.id === InstanceType.developer\n    )?.sizes || [])[0] as Required<SupportedKafkaSize>;\n    if (!(standardSizes && trialSize)) {\n      throw new Error(\n        `No standard sizes or trial size: ${standardSizes} ${trialSize}`\n      );\n    }\n    const componentSizes =\n      standardSizes.map<CreateKafkaInstanceWithSizesTypes.Size>(\n        (sizeFromApi) => {\n          const s = sizeFromApi as Required<SupportedKafkaSize>;\n          return {\n            id: s.id,\n            displayName: s.display_name,\n            quota: s.quota_consumed,\n            ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n            egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n            storage: Math.round(\n              (s.max_data_retention_size.bytes || 0) / 1073741824\n            ),\n            connections: s.total_max_connections,\n            connectionRate: s.max_connection_attempts_per_sec,\n            maxPartitions: s.max_partitions,\n            messageSize: (s.max_message_size.bytes || 0) / 1048576,\n            status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n            trialDurationHours: undefined,\n          };\n        }\n      );\n    return {\n      standard: componentSizes,\n      trial: {\n        id: trialSize.id,\n        displayName: trialSize.display_name,\n        quota: 0,\n        ingress: (trialSize.ingress_throughput_per_sec.bytes || 0) / 1048576,\n        egress: (trialSize.egress_throughput_per_sec.bytes || 0) / 1048576,\n        storage: Math.round(\n          (trialSize.max_data_retention_size.bytes || 0) / 1073741824\n        ),\n        connections: trialSize.total_max_connections,\n        connectionRate: trialSize.max_connection_attempts_per_sec,\n        maxPartitions: trialSize.max_partitions,\n        messageSize: (trialSize.max_message_size.bytes || 0) / 1048576,\n        status: trialSize.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n        trialDurationHours: trialSize.lifespan_seconds\n          ? trialSize.lifespan_seconds / 60 / 60\n          : undefined,\n      },\n    };\n  };\n}\n","// import { CreateInstance as CreateInstanceLegacy } from \"./CreateInstance\";\nimport { CreateInstanceWithSizes } from \"./CreateInstanceWithSizes\";\n\nconst CreateInstance = CreateInstanceWithSizes;\n\nexport default CreateInstance;\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from \"@rhoas/kafka-management-sdk\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  REACHED_MAX_LIMIT_ALLOWED_KAFKA: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n  /** Instance Type not supported*/\n  INSTANCE_TYPE_NOT_SUPPORTED: APIErrorCodes.ERROR_41,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n","import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string): void {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { IRowCell, IRowData } from \"@patternfly/react-table\";\nimport { formatDistance } from \"date-fns\";\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById(\"primary-app-container\");\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};\n\nenum InstanceStatus {\n  READY = \"ready\",\n  ACCEPTED = \"accepted\",\n  PREPARING = \"preparing\",\n  PROVISIONING = \"provisioning\",\n  FAILED = \"failed\",\n  DEPROVISION = \"deprovision\",\n  DELETED = \"deleting\",\n}\n\nenum InstanceType {\n  eval = \"eval\",\n  standard = \"standard\",\n  developer = \"developer\",\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: \"aws\", label: \"Amazon Web Services\" },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: \"ready\", label: \"Ready\" },\n  { value: \"failed\", label: \"Failed\" },\n  { value: \"accepted\", label: \"Creation pending\" },\n  { value: \"provisioning\", label: \"Creation in progress\" },\n  { value: \"preparing\", label: \"Creation in progress\" },\n  { value: \"deprovision\", label: \"Deletion in progress\" },\n  { value: \"deleting\", label: \"Deletion in progress\" },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: \"us-east-1\", label: \"US East, N. Virginia\" },\n  { value: \"eu-west-1\", label: \"EU, Ireland\" },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === \"string\" ? new Date(date) : date;\n  return formatDistance(date, new Date()) + \" \" + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || (window as any)[\"opera\"]);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\ntype SizeUnits = \"MiB\" | \"GiB\";\n\nconst convertBytesToUnit = (bytes: number, unit: SizeUnits): number => {\n  switch (unit) {\n    case \"MiB\":\n      return bytes / 1048576;\n    case \"GiB\":\n      return bytes / 1073741824;\n    default:\n      return bytes;\n  }\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n  convertBytesToUnit,\n  SizeUnits,\n};\n"],"names":["useAMSQuota","config","useConfig","auth","useAuth","resourceName","accessToken","ams","getToken","AppServicesApi","basePath","apiBasePath","account","apiAccountsMgmtV1CurrentAccountGet","orgId","data","organization","id","quotaData","Map","filteredQuota","loading","isServiceDown","undefined","console","error","response","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","quota","items","find","q","related_resources","r","resource_name","product","trialQuota","allowed","remaining","consumed","set","QuotaType","convertQuotaToInstanceType","kasQuota","get","e","useAvailableProvidersAndDefault","kas","getUsername","getQuota","getApi","DefaultApi","Configuration","fetchProviders","instance_type","apisService","res","getCloudProviders","allProviders","Promise","all","filter","p","enabled","map","provider","regions","getCloudProviderRegions","capacity","some","c","max_capacity_reached","available_sizes","length","displayName","display_name","isDisabled","fetchRegions","reject","plan","getQuotaType","instanceType","hasTrialRunning","getKafkas","k","availableProviders","defaultProvider","instanceAvailability","maxStreamingUnits","remainingQuota","useCreateInstance","onSuccess","onError","kafkaRequest","name","value","Error","region","multi_az","cloud_provider","asKafkaRequestPayload","sizeId","createKafka","code","CreateInstanceWithSizes","hideModal","onCreate","history","useHistory","fetchAvailableProvidersAndDefault","getKafkaSizes","api","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","standardSizes","i","trialSize","standard","sizeFromApi","s","quota_consumed","ingress","ingress_throughput_per_sec","bytes","egress","egress_throughput_per_sec","storage","Math","round","max_data_retention_size","connections","total_max_connections","connectionRate","max_connection_attempts_per_sec","maxPartitions","max_partitions","messageSize","max_message_size","status","maturity_status","trialDurationHours","trial","lifespan_seconds","useGetAvailableSizes","createInstance","qsContext","useContext","QuickStartContext","onClickKafkaOverview","push","onClickQuickStart","useCallback","setActiveQuickStart","handleCreate","getAvailableProvidersAndDefaults","kafkaSizes","CreateKafkaInstanceWithSizes","isModalOpen","onCancel","onClickContactUs","onClickLearnMoreAboutRegions","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","getSizes","appendTo","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","REACHED_MAX_LIMIT_ALLOWED_KAFKA","INSUFFICIENT_QUOTA","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","INSTANCE_TYPE_NOT_SUPPORTED","useDocumentTitle","title","useEffect","originalTitle","document","InstanceStatus","InstanceType","cloudProviderOptions","label","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_SERVICE_ACCOUNT_NAME_LENGTH","MAX_POLL_INTERVAL","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","floor","getFormattedDate","date","translatePostfix","Date","formatDistance","getModalAppendTo","getElementById","body","isMobileTablet","check","a","navigator","userAgent","vendor","window","test","substr","getSkeletonForRows","loadingCount","skeleton","rows","cells"],"sourceRoot":""}