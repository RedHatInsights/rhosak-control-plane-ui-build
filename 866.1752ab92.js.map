{"version":3,"sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/components/CreateServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/DeleteServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ResetServiceAccountModal/ResetServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx"],"names":["CreateServiceAccountModal","isOpen","setIsOpen","fetchServiceAccounts","newServiceAccount","N","useState","fieldState","nameValidated","setNameValidated","descriptionValidated","setDescriptionValidated","serviceAccountFormData","setServiceAccountFormData","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","credential","setCredential","isGenerateCredentialsModalOpen","setIsGenerateCredentialsModalOpen","t","useTranslation","authContext","useContext","basePath","addAlert","resetForm","useEffect","message","name","description","descMessage","descFieldState","handleTextInputName","isValid","test","trim","length","maxLength","handleTextInputDescription","createServiceAccount","validateCreateForm","getToken","accessToken","apisService","then","res","data","AlertVariant","error","reason","response","handleServerError","onFormSubmit","event","preventDefault","isModalOpen","title","handleModalToggle","onCreate","primaryButtonTitle","Form","onSubmit","FormAlert","Alert","variant","isInline","FormGroup","label","isRequired","fieldId","helperTextInvalid","helperTextInvalidIcon","validated","helperText","TextInput","type","id","value","onChange","TextArea","DeleteServiceAccountModal","serviceAccountToDelete","isLoading","setIsLoading","confirmButtonProps","onClick","serviceAccount","undefined","serviceAccountId","Error","deleteServiceAccount","ResetServiceAccountModal","serviceAccountToReset","isModalLoading","setIsModalLoading","resetServiceAccount","resetServiceAccountCreds","clientID","Modal","ModalVariant","onClose","actions","Button","key","spinnerAriaValueText","dangerouslySetInnerHTML","__html","ServiceAccountsToolbar","filterSelected","setFilterSelected","filteredValue","setFilteredValue","handleCreateModal","nameInputRef","useRef","ownerInputRef","isFilterExpanded","setIsFilterExpanded","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","disabled","isInputValid","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","push","onFilter","filterType","isExact","onInputPress","fieldName","target","tooltipContent","getSelectionForFilter","selectedFilters","map","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","toolbarItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","onSelect","_","selection","index","SelectOption","isDisabled","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","toLowerCase","InputGroup","className","ValidatedOptions","placeholder","input","onKeyPress","ref","ButtonVariant","Tooltip","isVisible","content","reference","item","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","lg","toggleGroupProps","toggleIcon","breakpoint","ServiceAccountsTableView","page","perPage","expectedTotal","total","serviceAccountsDataLoaded","serviceAccountItems","onResetCredentials","onDeleteServiceAccount","orderBy","setOrderBy","mainToggle","AuthContext","loggedInUser","setLoggedInUser","getUsername","username","tableColumns","transforms","cellWidth","onSelectKebabDropdownOption","originalData","selectedOption","parentElement","previousSibling","focus","getindexForSortParameter","parameter","tableProps","cells","rows","tableRow","loadingCount","i","Skeleton","forEach","row","owner","created_at","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","style","pointerEvents","cursor","getActionResolver","onSort","_event","columnIndex","sortByDirection","getParameterForSortIndex","sortBy","sort","split","direction","SortByDirection","emptyStateProps","titleProps","emptyStateBodyProps","body"],"mappings":"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","file":"866.1752ab92.js","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { Alert, Form, FormAlert, FormGroup, TextInput, TextArea } from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi } from './../../../../openapi/api';\nimport { NewServiceAccount, FormDataValidationState } from './../../../models';\nimport { MASCreateModal } from '@app/common/MASCreateModal/MASCreateModal';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError, MAX_SERVICE_ACCOUNT_NAME_LENGTH, MAX_SERVICE_ACCOUNT_DESC_LENGTH } from '@app/utils';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { MASGenerateCredentialsModal } from '@app/common/MASGenerateCredentialsModal';\n\nexport type CreateServiceAccountModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  fetchServiceAccounts: () => void;\n};\n\nconst CreateServiceAccountModal: React.FunctionComponent<CreateServiceAccountModalProps> = ({\n  isOpen,\n  setIsOpen,\n  fetchServiceAccounts,\n}: CreateServiceAccountModalProps) => {\n  const newServiceAccount: NewServiceAccount = new NewServiceAccount();\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [descriptionValidated, setDescriptionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [serviceAccountFormData, setServiceAccountFormData] = useState<NewServiceAccount>(newServiceAccount);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const [credential, setCredential] = useState();\n  const [isGenerateCredentialsModalOpen, setIsGenerateCredentialsModalOpen] = useState(false);\n\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const resetForm = () => {\n    setNameValidated({ fieldState: 'default' });\n    setDescriptionValidated({ fieldState: 'default' });\n    setServiceAccountFormData(newServiceAccount);\n    setIsFormValid(true);\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && descriptionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, descriptionValidated.fieldState]);\n\n  const handleTextInputName = (name: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, name });\n    let isValid = true;\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name && name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const handleTextInputDescription = (description: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, description });\n    let isValid = true;\n    if (description && !/^[a-zA-Z0-9\\s]*$/.test(description.trim())) {\n      isValid = false;\n    }\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_description_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    } else if (isValid && descriptionValidated.fieldState === 'error') {\n      setDescriptionValidated({\n        fieldState: 'default',\n        message: '',\n      });\n    } else if (!isValid) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, description } = serviceAccountFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.input_filed_invalid_helper_text'),\n      });\n    } else if (!/^[a-zA-Z0-9\\s]*$/.test(description.trim())) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n\n    if (name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    }\n\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    }\n\n    return isValid;\n  };\n\n  const createServiceAccount = async () => {\n    let isValid = validateCreateForm();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    const accessToken = await authContext?.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setCreationInProgress(true);\n        await apisService.createServiceAccount(serviceAccountFormData).then((res) => {\n          setCredential(res?.data);\n          setIsOpen(false);\n          setIsGenerateCredentialsModalOpen(true);\n          resetForm();\n          addAlert(t('serviceAccount.service_account_creation_success_message'), AlertVariant.success);\n          fetchServiceAccounts();\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    resetForm();\n    setIsOpen(!isOpen);\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    createServiceAccount();\n  };\n\n  const createForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, description } = serviceAccountFormData;\n    const { message: descMessage, fieldState: descFieldState } = descriptionValidated;\n\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"text-input-name\"\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message && <ExclamationCircleIcon />}\n          validated={fieldState}\n          helperText={t('common.input_filed_invalid_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-name\"\n            name=\"text-input-name\"\n            value={name}\n            onChange={handleTextInputName}\n            validated={fieldState}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Description\"\n          fieldId=\"text-input-description\"\n          helperTextInvalid={descMessage}\n          helperTextInvalidIcon={descMessage && <ExclamationCircleIcon />}\n          validated={descFieldState}\n          helperText={t('common.input_text_area_invalid_helper_text')}\n        >\n          <TextArea\n            id=\"text-input-description\"\n            name=\"text-input-description\"\n            value={description}\n            onChange={handleTextInputDescription}\n            validated={descFieldState}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <>\n      <MASCreateModal\n        isModalOpen={isOpen}\n        title={t('serviceAccount.create_a_service_account')}\n        handleModalToggle={handleCreateModal}\n        onCreate={createServiceAccount}\n        isFormValid={isFormValid}\n        primaryButtonTitle=\"Create\"\n        isCreationInProgress={isCreationInProgress}\n      >\n        {createForm()}\n      </MASCreateModal>\n      <MASGenerateCredentialsModal\n        isOpen={isGenerateCredentialsModalOpen}\n        setIsOpen={setIsGenerateCredentialsModalOpen}\n        credential={credential}\n        setCredential={setCredential}\n      />\n    </>\n  );\n};\n\nexport { CreateServiceAccountModal };\n","import React, { useState, useContext } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi, ServiceAccountListItem } from './../../../../openapi/api';\nimport { MASDeleteModal } from '@app/common/MASDeleteModal/MASDeleteModal';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError } from '@app/utils';\n\nexport type DeleteServiceAccountModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  fetchServiceAccounts: () => void;\n  serviceAccountToDelete: ServiceAccountListItem | undefined;\n};\n\nconst DeleteServiceAccountModal: React.FunctionComponent<DeleteServiceAccountModalProps> = ({\n  isOpen,\n  setIsOpen,\n  fetchServiceAccounts,\n  serviceAccountToDelete,\n}: DeleteServiceAccountModalProps) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const deleteServiceAccount = async (serviceAccount: ServiceAccountListItem | undefined) => {\n    const serviceAccountId = serviceAccount?.id;\n    if (serviceAccountId === undefined) {\n      throw new Error('service account id not defined');\n    }\n    const accessToken = await authContext?.getToken();\n    if (accessToken) {\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath,\n      });\n      setIsLoading(true);\n\n      try {\n        await apisService.deleteServiceAccount(serviceAccountId).then((response) => {\n          handleModalToggle();\n          setIsLoading(false);\n\n          addAlert(\n            t('serviceAccount.service_account_successfully_deleted', { name: serviceAccount?.name }),\n            AlertVariant.success\n          );\n          fetchServiceAccounts();\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        handleModalToggle();\n        setIsLoading(false);\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={isOpen}\n      handleModalToggle={handleModalToggle}\n      title={t('serviceAccount.delete_service_account') + '?'}\n      confirmButtonProps={{\n        onClick: () => deleteServiceAccount(serviceAccountToDelete),\n        label: 'Delete',\n        isLoading,\n      }}\n    >\n      <p>\n        <b>{serviceAccountToDelete?.name}</b> {t('serviceAccount.will_be_deleted')}\n      </p>\n    </MASDeleteModal>\n  );\n};\n\nexport { DeleteServiceAccountModal };\n","import React, { useState, useContext } from 'react';\nimport { Button, Modal, ModalVariant, AlertVariant } from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi, ServiceAccountListItem } from './../../../../../openapi/api';\nimport { isValidToken } from '@app/utils';\nimport { useTranslation } from 'react-i18next';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport { MASGenerateCredentialsModal } from '@app/common/MASGenerateCredentialsModal';\n\nexport type ResetServiceAccountModalProps = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  serviceAccountToReset: ServiceAccountListItem | undefined;\n};\n\nconst ResetServiceAccountModal: React.FunctionComponent<ResetServiceAccountModalProps> = ({\n  isOpen,\n  setIsOpen,\n  serviceAccountToReset,\n}: ResetServiceAccountModalProps) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const [isModalLoading, setIsModalLoading] = React.useState(false);\n  const [credential, setCredential] = useState();\n  const [isGenerateCredentialsModalOpen, setIsGenerateCredentialsModalOpen] = useState(false);\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const resetServiceAccount = async (serviceAccount) => {\n    const serviceAccountId = serviceAccount?.id;\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken)) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setIsModalLoading(true);\n        await apisService.resetServiceAccountCreds(serviceAccountId).then((response) => {\n          setCredential(response?.data);\n          setIsOpen(false);\n          setIsModalLoading(false);\n          setIsGenerateCredentialsModalOpen(true);\n        });\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const serviceAccountId = serviceAccountToReset?.name;\n  const clientID = serviceAccountToReset?.clientID;\n\n  return (\n    <>\n      <Modal\n        id=\"reset-service-account-modal\"\n        variant={ModalVariant.medium}\n        title={t('serviceAccount.reset_service_account_credentials')}\n        isOpen={isOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"create\"\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={() => resetServiceAccount(serviceAccountToReset)}\n            spinnerAriaValueText={t('common.submitting_request')}\n            isLoading={isModalLoading}\n          >\n            {t('serviceAccount.reset')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('common.cancel')}\n          </Button>,\n        ]}\n      >\n        <span\n          dangerouslySetInnerHTML={{\n            __html: t('serviceAccount.client_secret_will_be_reset', { serviceAccountId, clientID }),\n          }}\n        />\n      </Modal>\n      <MASGenerateCredentialsModal\n        title=\"Reset service account credentials\"\n        isOpen={isGenerateCredentialsModalOpen}\n        setIsOpen={setIsGenerateCredentialsModalOpen}\n        credential={credential}\n        setCredential={setCredential}\n      />\n    </>\n  );\n};\n\nexport { ResetServiceAccountModal };\n","import React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport {\n  ToolbarGroup,\n  ToolbarItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SelectOptionObject,\n  ToolbarFilter,\n  InputGroup,\n  TextInput,\n  Button,\n  Tooltip,\n  ToolbarChip,\n  ButtonVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\n\nexport type ServiceAccountsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  handleCreateModal: () => void;\n  mainToggle?: boolean;\n};\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nconst ServiceAccountsToolbar: React.FC<ServiceAccountsToolbarProps> = ({\n  filterSelected,\n  setFilterSelected,\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateModal,\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation();\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState<boolean>(false);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n  ];\n\n  const onClearAllFilters = () => {\n    setFilteredValue([]);\n  };\n\n  const onToggleFilter = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        // index of current filter value in applied filter\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value);\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onInputPress = (event: any) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const onSelect = (_, selection: string | SelectOptionObject) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onToggleFilter}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"name-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_name_lower')}\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label={t('filter_by_name_lower')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected?.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"owner-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_owner')}\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label={t('filter_by_owner')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateModal}\n          data-testid={'tableServiceAccounts-buttonCreateServiceAccount'}\n        >\n          {t('serviceAccount.create_service_account')}\n        </Button>\n      ),\n    },\n  ];\n  /**\n   * Todo: uncomment code when API start support pagination\n   */\n  // if (total && total > 0 && toolbarItems.length === 1) {\n  //   toolbarItems.push({\n  //     item: (\n  //       <MASPagination\n  //         widgetId=\"pagination-options-menu-top\"\n  //         itemCount={total}\n  //         page={page}\n  //         perPage={perPage}\n  //         isCompact={true}\n  //         titles={{\n  //           paginationTitle: t('minimal_pagination'),\n  //           perPageSuffix: t('per_page_suffix'),\n  //           toFirstPage: t('to_first_page'),\n  //           toPreviousPage: t('to_previous_page'),\n  //           toLastPage: t('to_last_page'),\n  //           toNextPage: t('to_next_page'),\n  //           optionsToggle: t('options_toggle'),\n  //           currPage: t('curr_page'),\n  //         }}\n  //       />\n  //     ),\n  //     variant: 'pagination',\n  //     alignment: { default: 'alignRight' },\n  //   });\n  // }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClearAllFilters,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      // toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Skeleton, PaginationVariant } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { getLoadingRowsCount, getFormattedDate } from '@app/utils';\nimport { DefaultApi, ServiceAccountRequest, ServiceAccountListItem } from '../../../../../openapi/api';\nimport { ServiceAccountsToolbar, ServiceAccountsToolbarProps } from './ServiceAccountsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  handleCreateModal: () => void;\n};\n\nconst ServiceAccountsTableView: React.FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  total,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n  handleCreateModal,\n  mainToggle,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  const tableColumns = [\n    { title: t('common.name') },\n    { title: t('common.clientID') },\n    { title: t('common.owner'), transforms: [cellWidth(20)] },\n    { title: t('common.description') },\n    { title: t('time_created') },\n  ];\n\n  const onSelectKebabDropdownOption = (event: any, originalData: ServiceAccountListItem, selectedOption: string) => {\n    if (selectedOption === 'reset-credentials') {\n      onResetCredentials && onResetCredentials(originalData);\n    } else if (selectedOption === 'delete-account') {\n      onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    }\n\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!serviceAccountsDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, owner, description, clientID, created_at } = row;\n      tableRow.push({\n        cells: [name, clientID, owner, description, { title: getFormattedDate(created_at, t('ago')) }],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_delete_service_account'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('common.reset_credentials'),\n        id: 'reset-credentials',\n        ['data-testid']: 'tableServiceAccounts-actionResetCredentials',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'reset-credentials'),\n      },\n      {\n        title: t('serviceAccount.delete_service_account'),\n        id: 'delete-account',\n        ['data-testid']: 'tableServiceAccounts-actionDeleteAccount',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-account'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'clientID';\n      case 2:\n        return 'owner';\n      case 3:\n        return 'description';\n      case 4:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'clientID':\n        return 1;\n      case 'owner':\n        return 2;\n      case 'description':\n        return 3;\n      case 'created_at':\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, columnIndex: number, sortByDirection: SortByDirection, extraData: IExtraColumnData) => {\n    setOrderBy && setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        handleCreateModal={handleCreateModal}\n        mainToggle={mainToggle}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('serviceAccount.service_account_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems && serviceAccountItems?.length < 1 && serviceAccountsDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {/* {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n"],"sourceRoot":""}