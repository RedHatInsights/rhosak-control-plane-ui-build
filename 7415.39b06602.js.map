{"version":3,"file":"7415.39b06602.js","mappings":"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","sources":["webpack://kas-ui/./src/app/api.ts","webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/Pagination.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable.tsx","webpack://kas-ui/./src/app/hooks/useInterval.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/useKafkaStatusAlerts.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/StreamsTableConnected.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StatusColumn/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/hooks.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/NameFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/RegionFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/FilterSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StatusFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsToolbar/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/Unauthorized/Unauthorized.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KafkaEmptyState/KafkaEmptyState.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KasLayout/KasLayout.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateKafkaInstanceServices.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateInstance.ts","webpack://kas-ui/./src/app/models/kafka.ts"],"sourcesContent":["import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { DefaultApi, Configuration } from \"@rhoas/kafka-management-sdk\";\nimport {\n  AxiosCacheRequestConfig,\n  createCacheAdapter,\n} from \"axios-simple-cache-adapter\";\nimport axios from \"axios\";\n\nconst adapter = createCacheAdapter({\n  debug: localStorage.getItem(\"log-axios\") !== null,\n});\n\nexport const useKms = () => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: kasBasePath },\n  } = useConfig();\n\n  return () => {\n    const kmsApi = new DefaultApi(\n      new Configuration({\n        accessToken: auth.kas.getToken(),\n        basePath: kasBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return kmsApi;\n  };\n};\n\nexport const useAms = () => {\n  const auth = useAuth();\n  const {\n    ams: { apiBasePath: amsBasePath },\n  } = useConfig();\n\n  return () => {\n    const amsApi = new AppServicesApi(\n      new Configuration({\n        accessToken: auth.ams.getToken(),\n        basePath: amsBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return amsApi;\n  };\n};\n","// A map of modal components to their lazy loaded implementations\nimport { FunctionComponent, LazyExoticComponent, lazy } from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateInstanceProps>>,\n      variant: \"medium\",\n      title: t(\"create_a_kafka_instance\"),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteInstanceProps>>,\n      variant: \"small\",\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<TransferOwnershipProps>>,\n      variant: \"medium\",\n      title: t(\"change_owner\"),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateServiceAccountProps>>,\n      variant: \"medium\",\n      title: t(\"serviceAccount.create_a_service_account\"),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteServiceAccountProps>>,\n      title: t(\"serviceAccount.delete_service_account\") + \"?\",\n      variant: \"small\",\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials\"\n          )\n      ) as LazyExoticComponent<\n        FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t(\"serviceAccount.reset_service_account_credentials\")}?`,\n      variant: \"medium\",\n    },\n  };\n};\n\nexport const KasModalLoader: FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","export enum InstanceDrawerTab {\n  DETAILS = \"details\",\n  CONNECTION = \"connection\",\n}\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { MASPagination } from \"@app/common\";\nimport { PaginationVariant } from \"@patternfly/react-core\";\n\nexport type PaginationProps = {\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  total,\n  page,\n  perPage,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  if (total > 0) {\n    return (\n      <MASPagination\n        widgetId=\"pagination-cloudProviderOptions-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        titles={{\n          paginationTitle: t(\"full_pagination\"),\n          perPageSuffix: t(\"per_page_suffix\"),\n          toFirstPage: t(\"to_first_page\"),\n          toPreviousPage: t(\"to_previous_page\"),\n          toLastPage: t(\"to_last_page\"),\n          toNextPage: t(\"to_next_page\"),\n          optionsToggle: t(\"options_toggle\"),\n          currPage: t(\"curr_page\"),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type NoResultsFoundProps = {\n  count: number;\n  dataLoaded: boolean;\n};\nexport const NoResultsFound: FunctionComponent<NoResultsFoundProps> = ({\n  count,\n  dataLoaded,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  if (count < 1 && dataLoaded) {\n    return (\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t(\"no_results_found\"),\n        }}\n        emptyStateBodyProps={{\n          body: t(\"adjust_your_filters_and_try_again\"),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent, MouseEvent, useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  sortable,\n  SortByDirection,\n} from \"@patternfly/react-table\";\nimport { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n} from \"@app/utils\";\nimport { Skeleton } from \"@patternfly/react-core\";\nimport { Link } from \"react-router-dom\";\nimport {\n  StatusColumn,\n  StreamsToolbar,\n  StreamsToolbarProps,\n} from \"@app/modules/OpenshiftStreams/components\";\nimport { MASTable, MASTableProps } from \"@app/common\";\nimport { Pagination } from \"@app/modules/OpenshiftStreams/components/StreamsTable/Pagination\";\nimport { NoResultsFound } from \"@app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\nimport { add } from \"date-fns\";\n\nexport type KafkaRequestWithSize = KafkaRequest & {\n  size?: { trialDurationHours: number };\n};\n\nexport type StreamsTableProps = Pick<\n  StreamsToolbarProps,\n  | \"page\"\n  | \"perPage\"\n  | \"total\"\n  | \"filterSelected\"\n  | \"setFilterSelected\"\n  | \"filteredValue\"\n  | \"setFilteredValue\"\n  | \"onCreate\"\n  | \"refresh\"\n  | \"handleCreateInstanceModal\"\n> & {\n  onDeleteInstance: (instance: KafkaRequest) => Promise<void>;\n  onChangeOwner: (instance: KafkaRequest) => Promise<void>;\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  loggedInUser: string | undefined;\n  expectedTotal: number;\n  kafkaDataLoaded: boolean;\n  kafkaInstanceItems?: KafkaRequestWithSize[];\n  isOrgAdmin?: boolean;\n  setOrderBy: (order: string) => void;\n  orderBy: string;\n  selectedInstanceName: string | undefined;\n};\nexport const StreamsTable: FunctionComponent<StreamsTableProps> = ({\n  onDeleteInstance,\n  onChangeOwner,\n  onViewInstance,\n  onViewConnection,\n  loggedInUser,\n  page,\n  perPage,\n  total,\n  expectedTotal,\n  kafkaDataLoaded,\n  kafkaInstanceItems,\n  isOrgAdmin,\n  setOrderBy,\n  orderBy,\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  onCreate,\n  refresh,\n  handleCreateInstanceModal,\n  selectedInstanceName,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const cells = [\n    { title: t(\"name\"), transforms: [sortable] },\n    { title: t(\"cloud_provider\"), transforms: [sortable] },\n    { title: t(\"region\"), transforms: [sortable] },\n    { title: t(\"owner\"), transforms: [sortable] },\n    { title: t(\"status\"), transforms: [sortable] },\n    { title: t(\"time_created\"), transforms: [sortable] },\n  ];\n\n  const sortBy = useMemo((): ISortBy | undefined => {\n    const getIndexForSortParameter = (parameter: string) => {\n      switch (parameter.toLowerCase()) {\n        case \"name\":\n          return 0;\n        case \"cloud_provider\":\n          return 1;\n        case \"region\":\n          return 2;\n        case \"owner\":\n          return 3;\n        case \"status\":\n          return 4;\n        case \"created_at\":\n          return 5;\n        default:\n          return undefined;\n      }\n    };\n\n    const sort: string[] = orderBy?.split(\" \") || [];\n    if (sort.length > 1) {\n      return {\n        index: getIndexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  }, [orderBy]);\n\n  const rows = useMemo(() => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: cells.length,\n      });\n    }\n\n    kafkaInstanceItems?.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n        size,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link\n                  to={`kafkas/${row?.id}/dashboard`}\n                  data-ouia-component-id={\"table-link\"}\n                >\n                  {name}\n                </Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t(\"ago\"))}\n                <br />\n                {(instance_type === InstanceType?.developer ||\n                  instance_type === InstanceType?.eval) &&\n                  (size?.trialDurationHours ? (\n                    <Trans\n                      i18nKey=\"common.expires_in\"\n                      ns={[\"kasTemporaryFixMe\"]}\n                      components={{\n                        time: (\n                          <FormatDate\n                            date={add(new Date(created_at), {\n                              hours: size?.trialDurationHours,\n                            })}\n                            format=\"expiration\"\n                          />\n                        ),\n                      }}\n                    />\n                  ) : (\n                    <Skeleton />\n                  ))}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  }, [\n    page,\n    perPage,\n    expectedTotal,\n    kafkaDataLoaded,\n    kafkaInstanceItems,\n    cells.length,\n    t,\n  ]);\n\n  const actionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n\n    const isUserSameAsLoggedIn =\n      (loggedInUser !== undefined && originalData.owner === loggedInUser) ||\n      (isOrgAdmin !== undefined && isOrgAdmin === true);\n\n    let additionalProps;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: \"auto\",\n          cursor: \"default\",\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t(\"view_details\"),\n        id: \"view-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionDetails\",\n        onClick: (event: MouseEvent) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"view-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_view_kafka\"),\n        },\n      } as IAction,\n      {\n        title: t(\"view_connection_information\"),\n        id: \"connect-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionConnection\",\n        onClick: (event: MouseEvent) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"connect-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_connect_kafka\"),\n        },\n      } as IAction,\n      {\n        title: t(\"change_owner\"),\n        id: \"change-owner\",\n        [\"data-testid\"]: \"tableStreams-actionChangeOwner\",\n        onClick: (event: MouseEvent) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, \"change-owner\"),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_change_owner\"),\n        },\n      } as IAction,\n      {\n        title: t(\"delete_instance\"),\n        id: \"delete-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionDelete\",\n        onClick: (event: MouseEvent) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"delete-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_delete_kafka\"),\n        },\n      } as IAction,\n    ];\n    return resolver;\n  };\n\n  const onSelectKebabDropdownOption = (\n    event: MouseEvent,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === \"view-instanceDrawerInstance\") {\n      onViewInstance(originalData);\n      //set selected row for view instanceDrawerInstance and connect instanceDrawerInstance\n    } else if (selectedOption === \"connect-instanceDrawerInstance\") {\n      onViewConnection(originalData);\n    } else if (selectedOption === \"change-owner\") {\n      onChangeOwner(originalData);\n    } else if (selectedOption === \"delete-instanceDrawerInstance\") {\n      deleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n\n    const previousNode =\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const deleteInstance = async (kafka: KafkaRequest) => {\n    await onDeleteInstance(kafka);\n  };\n\n  const onSort: OnSort = (_event, index, direction, extraData) => {\n    const getParameterForSortIndex = (index: number) => {\n      switch (index) {\n        case 0:\n          return \"name\";\n        case 1:\n          return \"cloud_provider\";\n        case 2:\n          return \"region\";\n        case 3:\n          return \"owner\";\n        case 4:\n          return \"status\";\n        case 5:\n          return \"created_at\";\n        default:\n          return \"\";\n      }\n    };\n\n    let myDirection = direction;\n    if (sortBy?.index !== index && extraData.property === \"time-created\") {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = SortByDirection.desc;\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const onRowClick: MASTableProps[\"onRowClick\"] = (event, _, row) => {\n    if (event.target instanceof HTMLElement) {\n      const tagName = event.target.tagName.toLowerCase();\n      // Open instance drawer on row click except kebab button click or opening the kafka instance\n      if (tagName === \"button\" || tagName === \"a\") {\n        return;\n      }\n    }\n    onViewInstance(row?.originalData);\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable\n        tableProps={{\n          cells,\n          rows,\n          \"aria-label\": t(\"cluster_instance_list\"),\n          actionResolver,\n          onSort,\n          sortBy,\n          hasDefaultCustomRowWrapper: true,\n          ouiaId: \"table-kafka-instances\",\n        }}\n        activeRow={selectedInstanceName}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n        loggedInUser={loggedInUser}\n      />\n      <NoResultsFound\n        count={kafkaInstanceItems?.length || 0}\n        dataLoaded={kafkaDataLoaded}\n      />\n      <Pagination total={total} page={page} perPage={perPage} />\n    </>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: () => void, delay: number): void {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [delay]);\n}\n","import { SetStateAction, Dispatch, useEffect, useState } from \"react\";\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    // Opera 12.10 and Firefox 18 and later support\n    return \"visibilitychange\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msvisibilitychange\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitvisibilitychange\";\n  }\n  return \"\";\n}\nexport function getBrowserDocumentHiddenProp(): keyof XDocument | undefined {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    return \"hidden\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msHidden\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitHidden\";\n  }\n  return undefined;\n}\nexport function getIsDocumentHidden(): boolean {\n  const hiddenKey = getBrowserDocumentHiddenProp();\n  return hiddenKey !== undefined && !(document as XDocument)[hiddenKey];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: Dispatch<SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import { useCallback, useEffect, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlert } from \"@rhoas/app-services-ui-shared\";\nimport { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport { usePageVisibility } from \"@app/hooks/usePageVisibility\";\nimport { InstanceStatus } from \"@app/utils\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useInterval } from \"@app/hooks/useInterval\";\n\ntype AlertableInstance = { name: string; status: InstanceStatus };\n\nexport function useKafkaStatusAlerts(\n  instances: KafkaRequest[] | undefined\n): void {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { addAlert } = useAlert() || {};\n  const { isVisible } = usePageVisibility();\n  const previousInstancesRef = useRef<KafkaRequest[]>();\n  const instancesBeingDeletedRef = useRef<KafkaRequest[]>([]);\n  const toNotifyRef = useRef<AlertableInstance[]>([]);\n\n  const notifyReady = useCallback(\n    (name: string) => {\n      addAlert({\n        title: t(\"kafka_successfully_created\"),\n        variant: AlertVariant.success,\n        description: (\n          <span\n            dangerouslySetInnerHTML={{\n              __html: t(\"kafka_success_message\", {\n                name,\n              }),\n            }}\n          />\n        ),\n        dataTestId: \"toastCreateKafka-success\",\n      });\n    },\n    [addAlert, t]\n  );\n\n  const notifyDelete = useCallback(\n    (name: string) => {\n      addAlert({\n        title: t(\"kafka_successfully_deleted\", {\n          name,\n        }),\n        variant: AlertVariant.success,\n      });\n    },\n    [addAlert, t]\n  );\n\n  const notifyFailure = useCallback(\n    (name: string) => {\n      addAlert({\n        title: t(\"kafka_not_created\"),\n        variant: AlertVariant.danger,\n        description: (\n          <span\n            dangerouslySetInnerHTML={{\n              __html: t(\"kafka_failed_message\", {\n                name,\n              }),\n            }}\n          />\n        ),\n        dataTestId: \"toastCreateKafka-failed\",\n      });\n    },\n    [addAlert, t]\n  );\n\n  /**\n   * Derive from the updated instances which instances have changed state from\n   * the previous run\n   */\n  useEffect(\n    function checkForInstanceStatusChange() {\n      if (instances) {\n        const firstData = previousInstancesRef.current === undefined;\n        const previousInstances = previousInstancesRef.current || [];\n\n        const previousIdsAndStates = previousInstances.map(\n          (i) => `${i.id}:${i.status}`\n        );\n        const currentIdsAndStates = instances.map((i) => `${i.id}:${i.status}`);\n\n        // Check for changes between polled data in an unefficent but effective way.\n        // We don't stringify the whole KafkaRequest object since it's massive and\n        // we care only about an instance id and its status.\n        if (\n          JSON.stringify(previousIdsAndStates) !==\n          JSON.stringify(currentIdsAndStates)\n        ) {\n          // an helper function to get the instances that changed state, but only\n          // if we got at least one snapshot of the data. We don't want to notify\n          // again for instances already created.\n          const filterInstances = (\n            instances: KafkaRequest[],\n            desiredStatus: InstanceStatus\n          ) => {\n            return firstData\n              ? []\n              : instances.filter(\n                  (i) =>\n                    i.status === desiredStatus &&\n                    !previousInstances.find(\n                      (pi) => pi.id === i.id && i.status !== desiredStatus\n                    )\n                );\n          };\n\n          // get newly created and failed instances\n          const ready = filterInstances(instances, InstanceStatus.READY);\n          const failed = filterInstances(instances, InstanceStatus.FAILED);\n\n          // since it's possible that an instance that is being deleted will\n          // simply not be returned the next time we poll for data, we keep track\n          // of instances that are deprovisoning in a ref. We check if these\n          // instances are still in the current list of instances. If not, they\n          // have been deleted and we should notify the user. The others, we keep\n          // them in the ref\n          const [deleted, stillBeingDeleted] =\n            instancesBeingDeletedRef.current.reduce<\n              [KafkaRequest[], KafkaRequest[]]\n            >(\n              ([deleted, beingDeleted], instanceBeingDeleted) => {\n                if (\n                  instances.find((i) => i.id === instanceBeingDeleted.id) ===\n                  undefined\n                ) {\n                  // this instance has been deleted\n                  return [[...deleted, instanceBeingDeleted], beingDeleted];\n                } else {\n                  return [deleted, [...beingDeleted, instanceBeingDeleted]];\n                }\n              },\n              [[], []]\n            );\n\n          // check also for new instances being deleted\n          const newBeingDeleted = instances.filter(\n            (i) =>\n              [InstanceStatus.DELETED, InstanceStatus.DEPROVISION].includes(\n                i.status as InstanceStatus\n              ) && stillBeingDeleted.find((s) => s.id === i.id) === undefined\n          );\n\n          // recreate the deleted instances ref with the data derived before\n          instancesBeingDeletedRef.current = [\n            ...stillBeingDeleted,\n            ...newBeingDeleted,\n          ];\n\n          // update the ref of instances for which we need to notify the user\n          toNotifyRef.current = [\n            ...toNotifyRef.current,\n            ...ready.map(instanceToAlertable),\n            ...failed.map(instanceToAlertable),\n            ...deleted.map(instanceToAlertable),\n          ];\n\n          // snapshot the instances used in this run\n          previousInstancesRef.current = instances;\n        }\n      }\n    },\n    [instances]\n  );\n\n  // check every second if the browser is visible, and if so send the queued\n  // notifications\n  useInterval(\n    useCallback(\n      function sendNotificationCb() {\n        if (isVisible) {\n          while (toNotifyRef.current.length > 0) {\n            const instance = toNotifyRef.current.shift()!;\n            switch (instance.status) {\n              case InstanceStatus.READY:\n                notifyReady(instance.name);\n                break;\n              case InstanceStatus.FAILED:\n                notifyFailure(instance.name);\n                break;\n              case InstanceStatus.DEPROVISION:\n              case InstanceStatus.DELETED:\n                notifyDelete(instance.name);\n                break;\n            }\n          }\n        }\n      },\n      [isVisible, notifyDelete, notifyFailure, notifyReady]\n    ),\n    1000\n  );\n}\n\nfunction instanceToAlertable(instance: KafkaRequest): AlertableInstance {\n  return { name: instance.name!, status: instance.status as InstanceStatus };\n}\n","import { useKms } from \"@app/api\";\nimport { usePagination } from \"@app/common\";\nimport { FederatedProps, useFederated } from \"@app/contexts\";\nimport { useInterval } from \"@app/hooks/useInterval\";\nimport { useInstanceDrawer } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\nimport {\n  FilterType,\n  KafkaEmptyState,\n  Unauthorized,\n} from \"@app/modules/OpenshiftStreams/components\";\nimport {\n  KafkaRequestWithSize,\n  StreamsTable,\n} from \"@app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable\";\nimport \"@app/modules/styles.css\";\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from \"@app/utils\";\nimport {\n  AlertVariant,\n  Card,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport { CloudProvider } from \"@rhoas/app-services-ui-components\";\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useModal,\n} from \"@rhoas/app-services-ui-shared\";\nimport { KafkaRequest, KafkaRequestList } from \"@rhoas/kafka-management-sdk\";\nimport {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  VoidFunctionComponent,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useGetSizes } from \"../../dialogs/CreateInstance/hooks\";\nimport \"./StreamsTableConnected.css\";\nimport { useKafkaStatusAlerts } from \"./useKafkaStatusAlerts\";\n\nexport type StreamsTableProps = Pick<FederatedProps, \"preCreateInstance\">;\n\nexport const StreamsTableConnected: VoidFunctionComponent<\n  StreamsTableProps\n> = ({ preCreateInstance }: StreamsTableProps) => {\n  const { shouldOpenCreateModal } = useFederated() || {};\n  const auth = useAuth();\n  const getApi = useKms();\n  const getDeveloperSizes = useGetSizes(\"developer\");\n\n  const location = useLocation();\n  const searchParams = useMemo(\n    () => new URLSearchParams(location.search),\n    [location.search]\n  );\n  const { page = 1, perPage = 10, setPage } = usePagination() || {};\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { addAlert } = useAlert() || {};\n  const { showModal: showCreateModal } =\n    useModal<ModalType.KasCreateInstance>();\n  const { showModal: showTransferOwnershipModal } =\n    useModal<ModalType.KasTransferOwnership>();\n  const { hideModal: hideDeleteModal, showModal: showDeleteModal } =\n    useModal<ModalType.KasDeleteInstance>();\n\n  const history = useHistory();\n\n  const {\n    drawerInstance,\n    closeDrawer,\n    openDrawer,\n    setDrawerActiveTab,\n    setDrawerInstance,\n  } = useInstanceDrawer();\n\n  // Kafka list state\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<\n    KafkaRequestList | undefined\n  >();\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [expectedTotal, setExpectedTotal] = useState<number>(3);\n  const [kafkaItems, setKafkaItems] = useState<KafkaRequestWithSize[]>();\n\n  // filter and sort state\n  const [orderBy, setOrderBy] = useState<string>(\"created_at desc\");\n  const [filterSelected, setFilterSelected] = useState(\"name\");\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n  // user state\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  // States to sort out\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n\n  const [shouldRefresh, setShouldRefresh] = useState(false);\n\n  useKafkaStatusAlerts(\n    kafkaInstancesList?.items?.filter((i) => i.owner === loggedInUser)\n  );\n\n  const fetchKafkaSizeAndMergeWithKafkaRequest = useCallback(\n    async (\n      kafkaItems: KafkaRequestWithSize[]\n    ): Promise<KafkaRequestWithSize[]> => {\n      const kafkaItemsWithSize: KafkaRequestWithSize[] = [];\n\n      await Promise.all(\n        kafkaItems?.map(async (instance: KafkaRequest) => {\n          const { instance_type, cloud_provider, region } = instance;\n\n          let size: KafkaRequestWithSize[\"size\"];\n\n          if (instance_type === \"developer\" && cloud_provider && region) {\n            const sizes = await getDeveloperSizes(\n              cloud_provider as CloudProvider,\n              region\n            );\n            size = {\n              trialDurationHours: sizes[0].trialDurationHours,\n            };\n          }\n\n          kafkaItemsWithSize.push({\n            ...instance,\n            size,\n          });\n        })\n      );\n\n      return kafkaItemsWithSize;\n    },\n    [getDeveloperSizes]\n  );\n\n  const handleCreateInstanceModal = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n\n    if (open) {\n      openCreateModal();\n    }\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setDrawerInstance(instance.id!);\n    setDrawerActiveTab(InstanceDrawerTab.DETAILS);\n    openDrawer();\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setDrawerInstance(instance.id!);\n    setDrawerActiveTab(InstanceDrawerTab.CONNECTION);\n    openDrawer();\n  };\n\n  const getFilterQuery = useCallback(() => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        let filterQuery = \"(\";\n        filterQuery += filterValue\n          .map((val) => {\n            const value = val.value.trim();\n            if (value === InstanceStatus.PROVISIONING) {\n              return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n            }\n            if (value === InstanceStatus.DEPROVISION) {\n              return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n            }\n            return value !== \"\"\n              ? `${filterKey} ${\n                  val.isExact === true ? `= ${value}` : `like %${value}%`\n                }`\n              : \"\";\n          })\n          .join(\" or \");\n        filterQuery += \")\";\n\n        filters.push(filterQuery);\n      }\n    });\n    return filters.join(\" and \");\n  }, [filteredValue]);\n\n  const handleServerError = (error: unknown) => {\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = useCallback(\n    async (isPolling = false) => {\n      const filterQuery = getFilterQuery();\n\n      try {\n        const apisService = getApi();\n\n        if (!isPolling) {\n          setKafkaDataLoaded(false);\n        }\n        setShouldRefresh(false);\n\n        await apisService\n          .getKafkas(\n            page?.toString(),\n            perPage?.toString(),\n            orderBy,\n            filterQuery\n          )\n          .then(async (res) => {\n            const kafkaInstances = res.data;\n            const kafkaItems: KafkaRequestWithSize[] =\n              kafkaInstances?.items || [];\n            setKafkaInstancesList(kafkaInstances);\n\n            const kafkaItemsWithSize: KafkaRequestWithSize[] =\n              await fetchKafkaSizeAndMergeWithKafkaRequest(kafkaItems);\n            setKafkaItems(kafkaItemsWithSize);\n\n            if (\n              kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal\n            ) {\n              setExpectedTotal(kafkaInstancesList.total);\n            }\n\n            if (\n              waitingForDelete &&\n              filteredValue.length < 1 &&\n              kafkaItems?.length == 0\n            ) {\n              setWaitingForDelete(false);\n            }\n          })\n          .finally(() => setKafkaDataLoaded(true));\n      } catch (error) {\n        handleServerError(error);\n      }\n    },\n    [\n      getApi,\n      expectedTotal,\n      filteredValue,\n      getFilterQuery,\n      kafkaInstancesList,\n      orderBy,\n      page,\n      perPage,\n      waitingForDelete,\n      fetchKafkaSizeAndMergeWithKafkaRequest,\n    ]\n  );\n\n  const onSearch = useCallback(\n    (filter: FilterType[]) => {\n      setFilteredValue(filter);\n      setPage && setPage(1);\n    },\n    [setPage]\n  );\n\n  const refreshKafkasAfterAction = useCallback(() => {\n    setShouldRefresh(true);\n  }, []);\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = useCallback(() => {\n    setExpectedTotal(\n      (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) + 1\n    );\n  }, [kafkaInstancesList]);\n\n  const openCreateModal = useCallback(() => {\n    showCreateModal(ModalType.KasCreateInstance, {\n      onCreate: () => {\n        onCreate();\n        refreshKafkasAfterAction();\n      },\n    });\n  }, [onCreate, refreshKafkasAfterAction, showCreateModal]);\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setExpectedTotal(\n      (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) - 1\n    );\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onChangeOwner = async (instance: KafkaRequest) => {\n    showTransferOwnershipModal(ModalType.KasTransferOwnership, {\n      kafka: instance,\n      refreshKafkas: refreshKafkasAfterAction,\n    });\n  };\n\n  const onDeleteInstance = async (kafka: KafkaRequest) => {\n    const doDelete = async () => {\n      await deleteInstance(kafka);\n      onDelete();\n    };\n    if (kafka.status === InstanceStatus.FAILED) {\n      await doDelete();\n    } else {\n      showDeleteModal(ModalType.KasDeleteInstance, {\n        onDelete: doDelete,\n        kafka,\n      });\n    }\n  };\n\n  const deleteInstance = async (instance: KafkaRequest) => {\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instanceDrawerInstance api call\n     */\n    if (instance.id === undefined) {\n      throw new Error(\"kafka instanceDrawerInstance id is not set\");\n    }\n    const apisService = getApi();\n    onDelete();\n    hideDeleteModal();\n\n    try {\n      await apisService.deleteKafkaById(instance.id, true).then(() => {\n        setWaitingForDelete(true);\n        refreshKafkasAfterAction();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert &&\n        addAlert({\n          title: t(\"common.something_went_wrong\"),\n          variant: AlertVariant.danger,\n          description: reason,\n        });\n    }\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (\n        kafkaInstancesList?.items !== undefined &&\n        kafkaInstancesList.size === 0\n      ) {\n        setSearchParam(\"page\", (page - 1).toString());\n        setSearchParam(\"perPage\", perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n  }, [\n    history,\n    kafkaInstancesList,\n    page,\n    perPage,\n    searchParams,\n    setSearchParam,\n  ]);\n\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    if (mounted.current === false || shouldRefresh) {\n      mounted.current = true;\n      fetchKafkas();\n    }\n  }, [fetchKafkas, shouldRefresh]);\n\n  // refresh the data when interacting with the UI in a way that will make the displayed data change\n  useEffect(() => {\n    refreshKafkasAfterAction();\n  }, [\n    page,\n    perPage,\n    orderBy,\n    searchParams,\n    refreshKafkasAfterAction,\n    filteredValue,\n  ]);\n\n  useEffect(() => {\n    // close the drawer if the selected instance isn't visible in the list\n    if (\n      kafkaInstancesList !== undefined &&\n      kafkaInstancesList?.size > 0 &&\n      drawerInstance\n    ) {\n      const selectedKafkaItem = kafkaInstancesList.items?.find(\n        (kafka) => kafka?.id === drawerInstance?.id\n      );\n      if (selectedKafkaItem === undefined) {\n        closeDrawer();\n      }\n    }\n  }, [\n    closeDrawer,\n    drawerInstance,\n    drawerInstance?.id,\n    kafkaInstancesList,\n    openDrawer,\n  ]);\n\n  useEffect(() => {\n    if (kafkaInstancesList?.size === 0) {\n      closeDrawer();\n    }\n  }, [kafkaInstancesList, closeDrawer]);\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n    auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen =\n        shouldOpenCreateModal && (await shouldOpenCreateModal());\n      if (shouldOpen) {\n        openCreateModal();\n      }\n    };\n    openModal();\n  }, [openCreateModal, shouldOpenCreateModal]);\n\n  const pollKafkas = useCallback(\n    function pollKafkasCb() {\n      fetchKafkas(true);\n    },\n    [fetchKafkas]\n  );\n  useInterval(pollKafkas, MAX_POLL_INTERVAL);\n\n  if (isUserUnauthorized) {\n    return <Unauthorized />;\n  }\n\n  const isDisplayKafkaEmptyState =\n    kafkaDataLoaded &&\n    filteredValue.length < 1 &&\n    kafkaInstancesList !== undefined &&\n    kafkaInstancesList?.total < 1;\n\n  if (isDisplayKafkaEmptyState) {\n    return (\n      <KafkaEmptyState handleCreateInstanceModal={handleCreateInstanceModal} />\n    );\n  } else if (isDisplayKafkaEmptyState !== undefined) {\n    return (\n      <PageSection\n        className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n        variant={PageSectionVariants.default}\n        padding={{ default: \"noPadding\" }}\n        data-ouia-component-id={\"page-KafkaInstances\"}\n      >\n        <Card ouiaId=\"card-controlplane\">\n          <StreamsTable\n            onDeleteInstance={onDeleteInstance}\n            onViewInstance={onViewInstance}\n            onViewConnection={onViewConnection}\n            onChangeOwner={onChangeOwner}\n            loggedInUser={loggedInUser}\n            page={page}\n            perPage={perPage}\n            total={kafkaInstancesList?.total || 0}\n            isOrgAdmin={isOrgAdmin}\n            expectedTotal={expectedTotal}\n            kafkaDataLoaded={kafkaDataLoaded}\n            kafkaInstanceItems={kafkaItems}\n            setOrderBy={setOrderBy}\n            setFilterSelected={setFilterSelected}\n            setFilteredValue={onSearch}\n            filteredValue={filteredValue}\n            handleCreateInstanceModal={handleCreateInstanceModal}\n            orderBy={orderBy}\n            filterSelected={filterSelected}\n            onCreate={onCreate}\n            refresh={refreshKafkasAfterAction}\n            selectedInstanceName={drawerInstance?.name}\n          />\n        </Card>\n      </PageSection>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, FlexItem, Spinner } from \"@patternfly/react-core\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/js/icons/check-circle-icon\";\nimport PendingIcon from \"@patternfly/react-icons/dist/js/icons/pending-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/js/icons/exclamation-circle-icon\";\nimport { statusOptions } from \"@app/utils/utils\";\nimport \"./StatusColumn.css\";\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const Status: FunctionComponent = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t(\"creation_pending\");\n    }\n  };\n\n  const StatusIcon: FunctionComponent = () => {\n    const statusIcon = getStatusIcon();\n    if (statusIcon) {\n      return <FlexItem spacer={{ default: \"spacerSm\" }}>{statusIcon}</FlexItem>;\n    }\n    return <></>;\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size=\"md\"\n            aria-label={instanceName}\n            aria-valuetext=\"Creation in progress\"\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <StatusIcon />\n      <FlexItem>\n        <Status />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { useTranslation } from \"react-i18next\";\nimport { ReactElement } from \"react\";\n\nexport const useTooltipContent = (\n  isMaxFilter: boolean,\n  fieldName?: string\n): ReactElement => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  if (isMaxFilter) {\n    return <div>{t(\"max_filter_message\")}</div>;\n  }\n  if (fieldName === \"owner\") {\n    return <div>{t(\"owner_field_invalid_message\", { name: fieldName })}</div>;\n  }\n  return <div>{t(\"input_field_invalid_message\", { name: fieldName })}</div>;\n};\n","import { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { cloudProviderOptions, KeyValueOptions } from \"@app/utils\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\n\nexport type CloudProviderFilterProps = FilterProps;\n\nexport const CloudProviderFilter: React.FunctionComponent<\n  CloudProviderFilterProps\n> = ({\n  getSelectionForFilter,\n  filterSelected,\n  onDeleteChipGroup,\n  onDeleteChip,\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const options: KeyValueOptions[] = cloudProviderOptions.map(\n    (cloudProvider) => {\n      return {\n        label: t(cloudProvider.value),\n        value: cloudProvider.value,\n        disabled: false,\n      };\n    }\n  );\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"cloud_provider\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip && onDeleteChip(\"cloud_provider\", chip, options)\n      }\n      deleteChipGroup={() =>\n        onDeleteChipGroup && onDeleteChipGroup(\"cloud_provider\")\n      }\n      categoryName={t(\"cloud_provider\")}\n      showToolbarItem={filterSelected === \"cloud_provider\"}\n    >\n      <CloudProviderSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype CloudProviderSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  options: KeyValueOptions[];\n};\n\nconst CloudProviderSelect: React.FunctionComponent<\n  CloudProviderSelectProps\n> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const [expanded, setExpanded] = useState(false);\n\n  const onToggle = () => {\n    setExpanded((prevState) => !prevState);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"cloud_provider\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue && removeFilterValue(\"cloud_provider\");\n    setExpanded(false);\n  };\n\n  if (filterSelected === \"cloud_provider\") {\n    return (\n      <Select\n        id=\"cloud-provider-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select cloud provider\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"cloud_provider\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_cloud_provider\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter &&\n              isDisabledSelectOption(\"cloud_provider\", option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { FunctionComponent, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  TextInputProps,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n\nexport type NameFilterProps = FilterProps;\n\nexport const NameFilter: FunctionComponent<NameFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [valid, setValid] = useState<boolean>(true);\n  const [value, setValue] = useState<string | undefined>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, \"name\");\n\n  const change = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onKeyPress: TextInputProps[\"onKeyPress\"] = (event) => {\n    if (event.key === \"Enter\" && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != \"\") {\n      if (validate(value)) {\n        updateFilter(\"name\", { value: value, isExact: false }, false);\n        setValue(\"\");\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const renderNameInput = () => {\n    const v = !valid || isMaxFilter;\n    const FilterTooltip: FunctionComponent = () => {\n      if (v) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter || !valid}\n            content={tooltipContent}\n            reference={inputRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    if (filterSelected?.toLowerCase() === \"name\") {\n      return (\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"filterText\"\n            type=\"search\"\n            aria-label=\"Search filter input\"\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            placeholder={t(\"filter_by_name_lower\")}\n            onChange={change}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={!valid || isMaxFilter}\n            onClick={() => onFilter()}\n            aria-label=\"Search instances\"\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"name\")}\n      deleteChip={(_category, chip) => onDeleteChip(\"name\", chip)}\n      deleteChipGroup={() => onDeleteChipGroup(\"name\")}\n      categoryName={t(\"name\")}\n      showToolbarItem={filterSelected?.toLowerCase() === \"name\"}\n    >\n      {renderNameInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { FunctionComponent, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  TextInputProps,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n\nexport type OwnerFilterProps = FilterProps;\nexport const OwnerFilter: FunctionComponent<OwnerFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChipGroup,\n  onDeleteChip,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, \"owner\");\n\n  const [value, setValue] = useState<string | undefined>();\n  const [valid, setValid] = useState<boolean>(true);\n\n  const validate = (value?: string) => {\n    return value ? !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value.trim()) : true;\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != \"\") {\n      if (validate(value)) {\n        updateFilter(\"owner\", { value: value, isExact: false }, false);\n        setValue(\"\");\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const onKeyPress: TextInputProps[\"onKeyPress\"] = (event) => {\n    if (event.key === \"Enter\" && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onChange = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const renderOwnerInput = () => {\n    if (filterSelected?.toLowerCase() === \"owner\") {\n      const v = !valid || isMaxFilter;\n\n      const FilterTooltip: FunctionComponent = () => {\n        if (v) {\n          return (\n            <Tooltip\n              isVisible={isMaxFilter || !valid}\n              content={tooltipContent}\n              reference={inputRef}\n            />\n          );\n        }\n        return <></>;\n      };\n\n      return (\n        <InputGroup>\n          <TextInput\n            name=\"owner\"\n            id=\"filterOwners\"\n            type=\"search\"\n            aria-label=\"Search filter input\"\n            placeholder={t(\"filter_by_owner\")}\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            isDisabled={v}\n            variant={ButtonVariant.control}\n            onClick={onFilter}\n            aria-label=\"Search owners\"\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"owner\")}\n      deleteChip={(_category, chip) => onDeleteChip(\"owner\", chip)}\n      deleteChipGroup={() => onDeleteChipGroup(\"owner\")}\n      categoryName={t(\"owner\")}\n      showToolbarItem={filterSelected?.toLowerCase() === \"owner\"}\n    >\n      {renderOwnerInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { cloudRegionOptions, KeyValueOptions } from \"@app/utils\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\n\nexport type RegionFilterProps = FilterProps;\n\nexport const RegionFilter: React.FunctionComponent<RegionFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  removeFilterValue,\n  isDisabledSelectOption,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const options = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"region\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) => onDeleteChip(\"region\", chip, options)}\n      deleteChipGroup={() => onDeleteChipGroup(\"region\")}\n      categoryName={t(\"region\")}\n      showToolbarItem={filterSelected === \"region\"}\n    >\n      <RegionSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype RegionSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  options: KeyValueOptions[];\n};\n\nconst RegionSelect: React.FunctionComponent<RegionSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"region\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue(\"region\");\n    setExpanded(false);\n  };\n\n  if (filterSelected === \"region\") {\n    return (\n      <Select\n        id=\"region-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select region\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"region\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_region\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption(\"region\", option.value)\n            );\n          };\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent, MouseEvent, ChangeEvent, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nexport type FilterSelectProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const FilterSelect: FunctionComponent<FilterSelectProps> = ({\n  setFilterSelected,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const onToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onSelect = (\n    _event: MouseEvent | ChangeEvent,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const options = [\n    { label: t(\"name\"), value: \"name\", disabled: false },\n    { label: t(\"cloud_provider\"), value: \"cloud_provider\", disabled: false },\n    { label: t(\"region\"), value: \"region\", disabled: false },\n    { label: t(\"owner\"), value: \"owner\", disabled: false },\n    { label: t(\"status\"), value: \"status\", disabled: false },\n  ];\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label=\"Select filter\"\n        onToggle={onToggle}\n        selections={filterSelected}\n        isOpen={isFilterExpanded}\n        onSelect={onSelect}\n      >\n        {options.map((option, index) => (\n          <SelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n          >\n            {option.label}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InstanceStatus, statusOptions, KeyValueOptions } from \"@app/utils\";\n\nexport type StatusFilter = FilterProps;\n\nexport const StatusFilter: React.FunctionComponent<StatusFilter> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"status\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip(\"status\", chip, statusFilterOptions)\n      }\n      deleteChipGroup={() => onDeleteChipGroup(\"status\")}\n      categoryName={t(\"status\")}\n      showToolbarItem={filterSelected === \"status\"}\n    >\n      <StatusSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        statusFilterOptions={statusFilterOptions}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype StatusSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  statusFilterOptions: KeyValueOptions[];\n};\n\nconst StatusSelect: React.FunctionComponent<StatusSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  statusFilterOptions,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const selectRef = useRef<Select>(null);\n\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"status\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n  };\n\n  const clear = () => {\n    removeFilterValue(\"status\");\n    setExpanded(false);\n  };\n  if (filterSelected === \"status\") {\n    return (\n      <Select\n        id=\"status-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select status\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"status\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_status\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {statusFilterOptions.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption(\"status\", option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { ToolbarChip, ToolbarGroup } from \"@patternfly/react-core\";\nimport { CloudProviderFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter\";\nimport { NameFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/NameFilter\";\nimport { OwnerFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter\";\nimport { RegionFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/RegionFilter\";\nimport { FilterSelect } from \"@app/modules/OpenshiftStreams/components/TableFilters/FilterSelect\";\nimport { StatusFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/StatusFilter\";\nimport { KeyValueOptions } from \"@app/utils\";\nimport {\n  FilterType,\n  FilterValue,\n} from \"@app/modules/OpenshiftStreams/components\";\n\nexport type StreamsFilterGroupProps = {\n  isMaxFilter: boolean;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const StreamsFilterGroup: FunctionComponent<StreamsFilterGroupProps> = ({\n  isMaxFilter,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n}) => {\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(\n      ({ filterKey }) => filterKey === key\n    );\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const updateFilter = (\n    key: string,\n    filter: FilterValue,\n    removeIfPresent: boolean\n  ) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex(\n          (f) => f.value === filter.value\n        ); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter(\n      (filter) => filter.filterKey === key\n    );\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (\n    category: string,\n    chip: string | ToolbarChip,\n    filterOptions?: KeyValueOptions[]\n  ) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    const prevFilterValue: FilterValue[] = Object.assign(\n      [],\n      newFilteredValue[filterIndex]?.filterValue\n    );\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter cloudProviderOptions\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find(\n        (option) => option.label === chip.toString()\n      )?.value;\n    }\n    /**\n     * Delete selected chip from filter cloudProviderOptions\n     */\n    const chipIndex = prevFilterValue.findIndex(\n      (val) => val.value === filterChip\n    );\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const removeFilteredValue = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex(\n      (filter) => filter.filterKey === value\n    );\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n  };\n\n  return (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <FilterSelect\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n        <NameFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <CloudProviderFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <RegionFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <OwnerFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <StatusFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n      </ToolbarGroup>\n    </>\n  );\n};\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\nimport FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\nimport { MASPagination, MASToolbar, ToolbarItemProps } from \"@app/common\";\nimport { InstanceStatus, MAX_FILTER_LIMIT } from \"@app/utils\";\nimport \"./StreamsToolbar.css\";\nimport { StreamsFilterGroup } from \"@app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup\";\nimport { FilterType } from \"@app/modules/OpenshiftStreams/components\";\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = \"name\",\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const handleMaxFilters = useCallback(() => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: FilterType) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === \"status\"\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.PROVISIONING\n            )\n          : [];\n      const deprovisionStatus =\n        filterKey === \"status\"\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.DEPROVISION\n            )\n          : [];\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  }, [filteredValue]);\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [handleMaxFilters]);\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateInstanceModal}\n          data-testid=\"tableStreams-buttonCreateKafka\"\n          ouiaId=\"button-create\"\n        >\n          {t(\"create_kafka_instance\")}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-cloudProviderOptions-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t(\"minimal_pagination\"),\n            perPageSuffix: t(\"per_page_suffix\"),\n            toFirstPage: t(\"to_first_page\"),\n            toPreviousPage: t(\"to_previous_page\"),\n            toLastPage: t(\"to_last_page\"),\n            toNextPage: t(\"to_next_page\"),\n            optionsToggle: t(\"options_toggle\"),\n            currPage: t(\"curr_page\"),\n          }}\n        />\n      ),\n      variant: \"pagination\",\n      alignment: { default: \"alignRight\" },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: \"instanceDrawerInstance-toolbar\",\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: \"md\",\n        inset: { xl: \"insetLg\" },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: \"md\" }}\n      toggleGroupItems={\n        <StreamsFilterGroup\n          isMaxFilter={isMaxFilter}\n          filteredValue={filteredValue}\n          setFilteredValue={setFilteredValue}\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n      }\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { MASEmptyState } from \"@app/common\";\nimport LockIcon from \"@patternfly/react-icons/dist/js/icons/lock-icon\";\n\nexport const Unauthorized: FunctionComponent = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: \"noPadding\" }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t(\"access_permissions_needed\"),\n          headingLevel: \"h2\",\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            \"to_access_kafka_instances_contact_your_organization_administrators\"\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n","import { FunctionComponent, useContext } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from \"@patternfly/quickstarts\";\nimport { Button, ButtonVariant, PageSection } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\n\nexport type KafkaEmptyStateProps = {\n  handleCreateInstanceModal: () => void;\n};\nexport const KafkaEmptyState: FunctionComponent<KafkaEmptyStateProps> = ({\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  return (\n    <PageSection padding={{ default: \"noPadding\" }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        emptyStateBodyProps={{\n          body: (\n            <>\n              <Trans\n                i18nKey=\"create_a_kafka_instance_to_get_started\"\n                ns={[\"kasTemporaryFixMe\"]}\n                components={[\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    key=\"btn-quick-start\"\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart(\"getting-started\")\n                    }\n                  />,\n                ]}\n              />\n            </>\n          ),\n        }}\n        titleProps={{ title: t(\"no_kafka_instances_yet\") }}\n      >\n        <Button\n          data-testid=\"emptyStateStreams-buttonCreateKafka\"\n          variant={ButtonVariant.primary}\n          onClick={() =>\n            handleCreateInstanceModal && handleCreateInstanceModal()\n          }\n          ouiaId=\"button-create\"\n        >\n          {t(\"create_kafka_instance\")}\n        </Button>\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isMobileTablet } from \"@app/utils\";\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nexport const KasLayout: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      const localStorage = window.localStorage;\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem(\"openSessions\") || \"0\");\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem(\"openSessions\", `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  return (\n    <>\n      <main className=\"pf-c-page__main\">\n        <PageSection variant={PageSectionVariants.light}>\n          <Level>\n            <LevelItem>\n              <TextContent>\n                <Text component=\"h1\">{t(\"kafka_instances\")}</Text>\n              </TextContent>\n            </LevelItem>\n          </Level>\n        </PageSection>\n        {children}\n      </main>\n      <Modal\n        variant={ModalVariant.small}\n        title=\"Mobile experience\"\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n","import { useAms, useKms } from \"@app/api\";\nimport { InstanceType } from \"@app/utils\";\nimport {\n  CloudProvider,\n  CloudProviderInfo,\n  CreateKafkaInstanceServices,\n  MarketPlace,\n  MarketPlaceSubscriptions,\n  RegionInfo,\n  Size,\n  StandardSizes,\n} from \"@rhoas/app-services-ui-components\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { CloudRegion, SupportedKafkaSize } from \"@rhoas/kafka-management-sdk\";\n\nconst standardId = \"RHOSAK\" as const;\nconst developerId = \"RHOSAKTrial\" as const;\nconst resourceName = \"rhosak\" as const;\n\nexport const useCheckStandardQuota =\n  (): CreateKafkaInstanceServices[\"checkStandardQuota\"] => {\n    const getApi = useAms();\n    const checkStandardQuota: CreateKafkaInstanceServices[\"checkStandardQuota\"] =\n      async ({ onNoQuotaAvailable, onOutOfQuota, onQuotaAvailable }) => {\n        try {\n          const api = getApi();\n          const account = await api.apiAccountsMgmtV1CurrentAccountGet();\n          const orgId = account?.data?.organization?.id;\n          if (!orgId) {\n            7;\n            throw new Error(\"User has no organization id\");\n          }\n          const quotaResponse =\n            await api.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n              orgId,\n              undefined,\n              true,\n              undefined,\n              true\n            );\n          if (quotaResponse.status !== 200) {\n            throw new Error(quotaResponse.statusText);\n          }\n          const standardQuotas = quotaResponse.data.items?.filter((q) =>\n            q.related_resources?.find(\n              (r) =>\n                r.resource_name === resourceName && r.product === standardId\n            )\n          );\n\n          const prepaidQuota = standardQuotas?.find((q) =>\n            q.related_resources?.find((r) => r.billing_model === \"standard\")\n          );\n\n          const marketplaceQuotas = standardQuotas?.filter((q) =>\n            q.related_resources?.find((r) => r.billing_model === \"marketplace\")\n          );\n\n          const hasTrialQuota =\n            quotaResponse.data.items?.some((q) =>\n              q.related_resources?.find(\n                (r) =>\n                  r.resource_name === resourceName && r.product === developerId\n              )\n            ) || false;\n\n          const remainingPrepaidQuota = prepaidQuota\n            ? prepaidQuota.allowed - prepaidQuota.consumed\n            : undefined;\n          const remainingMarketplaceQuota = marketplaceQuotas?.reduce(\n            (agg, q) => q.allowed - q.consumed + agg,\n            0\n          );\n          const unaggregatedSubscriptions = marketplaceQuotas\n            ?.filter((q) => q.cloud_accounts !== undefined)\n            .flatMap((q) => q.cloud_accounts!);\n          const subscriptionMarketplaces = Array.from(\n            new Set(\n              unaggregatedSubscriptions?.map(\n                (s) => s.cloud_provider_id as MarketPlace\n              )\n            )\n          );\n          const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n            unaggregatedSubscriptions\n              ? subscriptionMarketplaces.map((marketplace) => ({\n                  marketplace,\n                  subscriptions: unaggregatedSubscriptions\n                    .filter((s) => s.cloud_provider_id === marketplace)\n                    .map((s) => s.cloud_account_id!),\n                }))\n              : [];\n\n          if (remainingMarketplaceQuota || remainingPrepaidQuota) {\n            if (\n              remainingMarketplaceQuota &&\n              remainingMarketplaceQuota === 0 &&\n              remainingPrepaidQuota &&\n              remainingPrepaidQuota === 0\n            ) {\n              onOutOfQuota({\n                quota: {\n                  marketplaceSubscriptions,\n                },\n              });\n            } else {\n              onQuotaAvailable({\n                quota: {\n                  remainingPrepaidQuota,\n                  remainingMarketplaceQuota,\n                  marketplaceSubscriptions,\n                },\n              });\n            }\n          } else {\n            onNoQuotaAvailable({ hasTrialQuota });\n          }\n        } catch (e) {\n          onNoQuotaAvailable({ hasTrialQuota: false });\n        }\n      };\n    return checkStandardQuota;\n  };\n\nexport const useCheckDeveloperAvailability =\n  (): CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] => {\n    const auth = useAuth();\n    const getApi = useKms();\n    const checkDeveloperAvailability: CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] =\n      async ({ onAvailable, onUnavailable, onUsed }) => {\n        try {\n          const api = getApi();\n          const loggedInUser = await auth.getUsername();\n          const filter = `owner = ${loggedInUser}`;\n\n          const res = await api.getKafkas(\"\", \"\", \"\", filter);\n          if (res.data.items) {\n            const hasTrialRunning = res.data.items.some(\n              (k) =>\n                k?.instance_type === InstanceType?.eval ||\n                k?.instance_type === InstanceType?.developer\n            );\n            if (hasTrialRunning) {\n              onUsed();\n            } else {\n              onAvailable();\n            }\n          }\n        } catch (e) {\n          onUnavailable();\n        }\n      };\n    return checkDeveloperAvailability;\n  };\n\nexport const useFetchProvidersWithRegions =\n  (): CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] => {\n    const getApi = useKms();\n    const fetchRegions = useFetchProviderRegions();\n    const fetchProvidersWithRegions: CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] =\n      async (plan, { onAvailable, onUnavailable }) => {\n        try {\n          const api = getApi();\n          const res = await api.getCloudProviders();\n          const allProviders = res?.data?.items || [];\n\n          const providers = await Promise.all(\n            allProviders\n              .filter((p) => p.enabled)\n              .map(async (provider) => {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const regions = await fetchRegions(provider.id!, plan);\n                const providerInfo: CloudProviderInfo = {\n                  id: provider.id as CloudProvider,\n                  displayName: provider.display_name!,\n                  regions,\n                };\n                return providerInfo;\n              })\n          );\n          const firstProvider = providers[0];\n          onAvailable({ providers, defaultProvider: firstProvider?.id });\n        } catch (e) {\n          onUnavailable();\n        }\n      };\n    return fetchProvidersWithRegions;\n  };\n\nexport const useFetchProviderRegions = () => {\n  const getApi = useKms();\n  return async function fetchProviderRegions(\n    provider: string,\n    instanceType: string\n  ): Promise<Array<RegionInfo & Pick<CloudRegion, \"capacity\">>> {\n    const api = getApi();\n    const res = await api.getCloudProviderRegions(provider);\n\n    if (!res?.data?.items) {\n      return [];\n    }\n\n    const regionsForInstance = res.data.items.filter(\n      (region) =>\n        region.enabled &&\n        region.capacity.some((c) => c.instance_type === instanceType)\n    );\n\n    return regionsForInstance.map((r) => {\n      const max_capacity_reached = r.capacity?.some(\n        (c) =>\n          c.instance_type === instanceType && c.available_sizes?.length === 0\n      );\n\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: r.id!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        displayName: r.display_name!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        isDisabled: max_capacity_reached,\n        capacity: r.capacity,\n      };\n    });\n  };\n};\n\nexport const useGetSizes = (instanceType: \"developer\" | \"standard\") => {\n  const getApi = useKms();\n  const fetchRegions = useFetchProviderRegions();\n  return async (provider: CloudProvider, region: string) => {\n    const api = getApi();\n    const regions = await fetchRegions(provider, instanceType);\n    const regionInfo = regions.find((r) => r.id === region);\n    const availableSizes =\n      regionInfo?.capacity.flatMap((c) =>\n        c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n      ) || [];\n    const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n      provider,\n      region\n    );\n    if (!sizes?.data?.instance_types) {\n      throw new Error(`No instance_types from backend`);\n    }\n\n    const standardSizes =\n      sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes ||\n      [];\n\n    return standardSizes.map(\n      apiSizeToComponentSize.bind(\n        undefined,\n        (id) => !availableSizes.includes(`${instanceType}.${id}`)\n      )\n    );\n  };\n};\n\nexport const useGetStandardSizes =\n  (): CreateKafkaInstanceServices[\"getStandardSizes\"] => {\n    const getSizes = useGetSizes(\"standard\");\n    return getSizes;\n  };\n\nexport const useGetTrialSizes =\n  (): CreateKafkaInstanceServices[\"getTrialSizes\"] => {\n    const getStandardSizes = useGetSizes(\"standard\");\n    const getDeveloperSizes = useGetSizes(\"developer\");\n    return async (provider, region) => {\n      let standardSizes: StandardSizes;\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n      } catch (e) {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\" },\n          { id: \"2\", displayName: \"2\" },\n        ] as StandardSizes;\n      }\n      const trialSizes = await getDeveloperSizes(provider, region);\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    };\n  };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): Size & { trialDurationHours: number } {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes } from \"@app/utils\";\nimport { useKms } from \"@app/api\";\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const getApi = useKms();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = getApi();\n\n      try {\n        const kafkaRequest = asKafkaRequestPayload(\n          createEmptyNewKafkaRequestPayload()\n        );\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"prepaid\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n"],"names":["adapter","createCacheAdapter","debug","localStorage","getItem","useKms","auth","useAuth","kas","apiBasePath","kasBasePath","useConfig","DefaultApi","Configuration","accessToken","getToken","basePath","undefined","cache","useAms","ams","amsBasePath","AppServicesApi","KasModalLoader","registerModals","useModal","t","useTranslation","ModalType","lazyComponent","lazy","variant","title","useKasModals","InstanceDrawerTab","Pagination","total","page","perPage","widgetId","itemCount","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","NoResultsFound","count","dataLoaded","emptyStateProps","titleProps","emptyStateBodyProps","body","StreamsTable","onDeleteInstance","onChangeOwner","onViewInstance","onViewConnection","loggedInUser","expectedTotal","kafkaDataLoaded","kafkaInstanceItems","isOrgAdmin","setOrderBy","orderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","onCreate","refresh","handleCreateInstanceModal","selectedInstanceName","cells","transforms","sortable","sortBy","useMemo","getIndexForSortParameter","parameter","toLowerCase","sort","split","length","index","direction","SortByDirection","rows","tableRow","loadingCount","forEach","row","name","cloud_provider","region","created_at","status","owner","instance_type","size","cloudProviderDisplayName","regionDisplayName","push","Link","to","id","instanceName","trialDurationHours","Trans","i18nKey","ns","components","time","FormatDate","date","add","Date","hours","format","Skeleton","originalData","skeleton","onSelectKebabDropdownOption","event","selectedOption","deleteInstance","previousNode","target","parentElement","previousSibling","focus","kafka","tableProps","actionResolver","rowData","isUserSameAsLoggedIn","additionalProps","tooltip","isDisabled","style","pointerEvents","cursor","onClick","tooltipProps","position","content","onSort","_event","extraData","myDirection","property","getParameterForSortIndex","hasDefaultCustomRowWrapper","ouiaId","activeRow","onRowClick","_","HTMLElement","tagName","rowDataTestId","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","getIsDocumentHidden","hiddenKey","doc","document","hidden","msHidden","webkitHidden","getBrowserDocumentHiddenProp","usePageVisibility","isVisible","setIsVisible","useState","onVisibilityChange","visibilityChange","getBrowserVisibilityProp","addEventListener","removeEventListener","instanceToAlertable","instance","StreamsTableConnected","preCreateInstance","shouldOpenCreateModal","getApi","getDeveloperSizes","location","useLocation","searchParams","URLSearchParams","search","setPage","addAlert","useAlert","showModal","showCreateModal","showTransferOwnershipModal","hideModal","hideDeleteModal","showDeleteModal","history","useHistory","drawerInstance","closeDrawer","openDrawer","setDrawerActiveTab","setDrawerInstance","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","kafkaItems","setKafkaItems","isUserUnauthorized","setIsUserUnauthorized","setLoggedInUser","setIsOrgAdmin","waitingForDelete","setWaitingForDelete","shouldRefresh","setShouldRefresh","instances","previousInstancesRef","instancesBeingDeletedRef","toNotifyRef","notifyReady","useCallback","AlertVariant","description","dangerouslySetInnerHTML","__html","dataTestId","notifyDelete","notifyFailure","firstData","previousInstances","previousIdsAndStates","map","i","currentIdsAndStates","JSON","stringify","filterInstances","desiredStatus","filter","find","pi","ready","failed","deleted","stillBeingDeleted","reduce","beingDeleted","instanceBeingDeleted","newBeingDeleted","includes","s","shift","useKafkaStatusAlerts","items","fetchKafkaSizeAndMergeWithKafkaRequest","kafkaItemsWithSize","Promise","all","open","openCreateModal","getFilterQuery","filters","filterKey","filterValue","filterQuery","val","value","trim","isExact","join","fetchKafkas","isPolling","apisService","getKafkas","toString","then","res","kafkaInstances","data","finally","error","errorCode","response","code","handleServerError","onSearch","refreshKafkasAfterAction","onDelete","setSearchParam","set","refreshKafkas","doDelete","Error","deleteKafkaById","reason","mounted","getUsername","username","isDisplayKafkaEmptyState","PageSection","className","PageSectionVariants","padding","default","Card","StatusColumn","getStatusIcon","Spinner","Flex","statusIcon","FlexItem","spacer","filteredstatus","st","useTooltipContent","isMaxFilter","fieldName","CloudProviderFilter","getSelectionForFilter","onDeleteChipGroup","onDeleteChip","updateFilter","removeFilterValue","isDisabledSelectOption","options","cloudProvider","label","disabled","ToolbarFilter","chips","deleteChip","_category","chip","deleteChipGroup","categoryName","showToolbarItem","CloudProviderSelect","selectRef","tooltipContent","FilterTooltip","Tooltip","reference","expanded","setExpanded","onToggle","prevState","onSelect","selection","isPlaceholder","clear","Select","SelectVariant","selections","isOpen","placeholderText","ref","option","SelectOption","NameFilter","valid","setValid","setValue","inputRef","change","input","onKeyPress","key","onFilter","test","validate","v","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","Button","ButtonVariant","renderNameInput","OwnerFilter","renderOwnerInput","RegionFilter","RegionSelect","FilterSelect","isFilterExpanded","setIsFilterExpanded","ToolbarItem","StatusFilter","statusFilterOptions","StatusSelect","StreamsFilterGroup","optionValue","newFilterValue","newFilteredValue","removeIfPresent","Object","assign","filterIndex","findIndex","f","filterValueIndex","splice","selectedFilters","category","filterOptions","prevFilterValue","filterChip","chipIndex","removeFilteredValue","copyFilteredValue","ToolbarGroup","StreamsToolbar","setIsMaxFilter","handleMaxFilters","maxFilterCount","provisioningStatus","deprovisionStatus","toolbarItems","item","isCompact","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","toggleGroupItems","Unauthorized","isFilled","headingLevel","emptyStateIconProps","icon","KafkaEmptyState","qsContext","useContext","QuickStartContext","isSmall","isInline","setActiveQuickStart","KasLayout","children","isMobileModalOpen","setIsMobileModalOpen","window","parseInt","newCount","setItem","handleMobileModal","Level","LevelItem","TextContent","Text","component","Modal","ModalVariant","onClose","actions","resourceName","useCheckStandardQuota","onNoQuotaAvailable","onOutOfQuota","onQuotaAvailable","api","account","apiAccountsMgmtV1CurrentAccountGet","orgId","organization","quotaResponse","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","statusText","standardQuotas","q","related_resources","r","resource_name","product","prepaidQuota","billing_model","marketplaceQuotas","hasTrialQuota","some","remainingPrepaidQuota","allowed","consumed","remainingMarketplaceQuota","agg","unaggregatedSubscriptions","cloud_accounts","flatMap","subscriptionMarketplaces","Array","from","Set","cloud_provider_id","marketplaceSubscriptions","marketplace","subscriptions","cloud_account_id","quota","e","useCheckDeveloperAvailability","onAvailable","onUnavailable","onUsed","k","useFetchProvidersWithRegions","fetchRegions","useFetchProviderRegions","plan","getCloudProviders","allProviders","providers","p","enabled","provider","regions","displayName","display_name","firstProvider","defaultProvider","instanceType","getCloudProviderRegions","capacity","c","max_capacity_reached","available_sizes","useGetSizes","regionInfo","availableSizes","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","apiSizeToComponentSize","bind","useGetStandardSizes","useGetTrialSizes","getStandardSizes","standardSizes","standard","trial","apiSize","quota_consumed","ingress","ingress_throughput_per_sec","bytes","egress","egress_throughput_per_sec","storage","Math","round","max_data_retention_size","connections","total_max_connections","connectionRate","max_connection_attempts_per_sec","maxPartitions","max_partitions","messageSize","max_message_size","maturity_status","lifespan_seconds","useCreateInstance","onSuccess","onError","kafkaRequest","multi_az","asKafkaRequestPayload","sizeId","billing","billing_cloud_account_id","subscription","createKafka","console"],"sourceRoot":""}