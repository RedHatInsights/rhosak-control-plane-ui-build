{"version":3,"file":"9865.30077043.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/aws-icon.js","webpack://kas-ui/./src/app/models/openshiftStreamsModel.ts","webpack://kas-ui/./src/app/models/serviceAccountsModel.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/QuotaAlert.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.AwsIconConfig = {\n  name: 'AwsIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.37 637.37 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.AwsIcon = require('../createIcon').createIcon(exports.AwsIconConfig);\nexports[\"default\"] = exports.AwsIcon;","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = true;\n    this.region = '';\n    this.name = '';\n  }\n}\n","export class NewServiceAccount {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\n\nexport type DrawerPanelContentInfoProps = {\n  isKasTrial?: boolean;\n};\n\nconst DrawerPanelContentInfo: React.FC<DrawerPanelContentInfoProps> = ({\n  isKasTrial,\n}) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>\n        {t('common.instance_information')}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          {isKasTrial && (\n            <GridItem>\n              <TextListItem component={TextListItemVariants.dt}>\n                {t('common.duration')}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {t('common.duration_value')}\n              </TextListItem>\n            </GridItem>\n          )}\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.ingress_egress')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.ingress_egress_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.storage')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.storage_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.partitions')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.partitions_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.client_connections')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.client_connections_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.connection_rate')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.connection_rate_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.message_size')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.message_size_value')}\n            </TextListItem>\n          </GridItem>\n        </Grid>\n        <Button\n          isSmall\n          isInline\n          variant={ButtonVariant.link}\n          style={{ marginTop: '20px' }}\n          onClick={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart('getting-started')\n          }\n        >\n          {t('common.quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { DrawerPanelContentInfo };\n","import React from 'react';\nimport { Alert, AlertVariant, Spinner } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Quota, QuotaType, QuotaValue } from '@rhoas/app-services-ui-shared';\n\nexport type QuotaAlertProps = {\n  quota: Quota | undefined;\n  hasKafkaCreationFailed?: boolean;\n  loadingQuota: boolean;\n  hasUserTrialKafka?: boolean;\n  isKasTrial?: boolean;\n};\n\nexport const QuotaAlert: React.FC<QuotaAlertProps> = ({\n  quota,\n  hasKafkaCreationFailed,\n  loadingQuota,\n  hasUserTrialKafka,\n  isKasTrial,\n}) => {\n  const { t } = useTranslation();\n  const { data, isServiceDown } = quota || {};\n  const kasQuota: QuotaValue | undefined = data?.get(QuotaType?.kas);\n  const kasTrial: QuotaValue | undefined = data?.get(QuotaType?.kasTrial);\n\n  let titleKey = '';\n  let messageKey = '';\n  let variant: AlertVariant = AlertVariant.warning;\n\n  //trial quota flows\n  //if user has no standard quota and already has a trial instance\n  if (!kasQuota && kasTrial && hasUserTrialKafka) {\n    titleKey = 'trial_kafka_title';\n    variant = AlertVariant.warning;\n    messageKey = 'deploy_one_instance_alert_message';\n  }\n  //if user has no standard quota and no trial quota\n  else if (!kasQuota && !kasTrial && !loadingQuota) {\n    variant = AlertVariant.warning;\n    titleKey = 'no_quota_kafka_alert_title';\n    messageKey = 'no_quota_kafka_alert_message';\n  }\n  //if user has no standard quota and trial instances are available\n  else if (!kasQuota && kasTrial && !hasUserTrialKafka) {\n    variant = AlertVariant.info;\n    titleKey = 'trial_quota_kafka_title';\n  }\n  //standard quota flows\n  //if user has standard quota but all allowed instances are already provisioned\n  else if (kasQuota && kasQuota?.remaining === 0) {\n    variant = AlertVariant.warning;\n    titleKey = 'standard_kafka_alert_title';\n    messageKey = 'standard_kafka_alert_message';\n  }\n  //if user has standard quota and 1 or more allowed instances are available\n  else if (kasQuota && kasQuota?.remaining > 0) {\n    //don't show alert\n    titleKey = '';\n  }\n  //if kafka creation failed for quota related\n  if (hasKafkaCreationFailed) {\n    variant = AlertVariant.danger;\n    titleKey = 'kafka_creation_failed_alert_title';\n    messageKey = kasQuota\n      ? 'standard_kafka_creation_failed_alert_message'\n      : 'trial_kafka_creation_failed_alert_message';\n  }\n  //if service down or any error\n  if (isServiceDown) {\n    titleKey = 'something_went_wrong';\n    variant = AlertVariant.danger;\n    messageKey = 'ams_service_down_message';\n  }\n\n  return (\n    <>\n      {loadingQuota && (\n        <Alert\n          className='pf-u-mb-md'\n          variant={AlertVariant.info}\n          title={t('instance_checking_message')}\n          aria-live='polite'\n          isInline\n          customIcon={\n            <Spinner size='md' aria-valuetext='Checking kafka availability' />\n          }\n        />\n      )}\n\n      {titleKey && (\n        <Alert\n          className='pf-u-mb-md'\n          variant={variant}\n          title={t(titleKey)}\n          aria-live='polite'\n          isInline\n        >\n          {t(messageKey)}\n        </Alert>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  AlertVariant,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n  Flex,\n  FlexItem,\n  Divider,\n  Tooltip,\n} from '@patternfly/react-core';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { MASCreateModal, useRootModalContext } from '@app/common';\nimport { ErrorCodes } from '@app/utils';\nimport {\n  DefaultApi,\n  CloudProvider,\n  CloudRegion,\n  Configuration,\n} from '@rhoas/kafka-management-sdk';\nimport { NewKafka, FormDataValidationState } from '@app/models';\nimport './CreateInstance.css';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport {\n  useAlert,\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaType,\n  useQuota,\n  QuotaValue,\n} from '@rhoas/app-services-ui-shared';\nimport { QuotaAlert } from './QuotaAlert';\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstance: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { store, hideModal } = useRootModalContext();\n  const { onCreate, refresh, cloudProviders, hasUserTrialKafka } =\n    store?.modalProps || {};\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { addAlert } = useAlert() || {};\n  const { getQuota } = useQuota() || {};\n  const newKafka: NewKafka = new NewKafka();\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({\n    fieldState: 'default',\n  });\n  const [cloudRegionValidated, setCloudRegionValidated] =\n    useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const [quota, setQuota] = useState<Quota>();\n  const [hasKafkaCreationFailed, setHasKafkaCreationFailed] =\n    useState<boolean>(false);\n\n  const kasQuota: QuotaValue | undefined = quota?.data?.get(QuotaType?.kas);\n  const kasTrial: QuotaValue | undefined = quota?.data?.get(\n    QuotaType?.kasTrial\n  );\n  const loadingQuota = quota?.loading === undefined ? true : quota?.loading;\n  const isKasTrial = kasTrial && !kasQuota;\n\n  const shouldDisabledButton =\n    loadingQuota ||\n    hasUserTrialKafka ||\n    hasKafkaCreationFailed ||\n    (kasQuota && kasQuota?.remaining === 0) ||\n    (!kasQuota && !kasTrial);\n\n  const resetForm = () => {\n    setKafkaFormData((prevState) => ({\n      ...prevState,\n      name: '',\n      multi_az: true,\n    }));\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await auth?.kas.getToken();\n    const id = provider.id;\n\n    if (accessToken && id) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data?.items || [];\n          const enabledRegions = providerRegions?.filter(\n            (p: CloudProvider) => p.enabled\n          );\n          //set default selected region if there is one region\n          if (\n            enabledRegions.length === 1 &&\n            enabledRegions[0].id &&\n            provider.name\n          ) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevState) => ({ ...prevState, region }));\n          }\n          //add empty provider on top in region list\n          enabledRegions.unshift(emptyProvider);\n          setCloudRegions(enabledRegions);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert &&\n          addAlert({\n            title: t('common.something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (cloudProviders?.length > 0 && cloudProviders[0].name) {\n      setKafkaFormData((prevState) => ({\n        ...prevState,\n        cloud_provider: cloudProviders[0].name,\n      }));\n      fetchCloudRegions(cloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    setKafkaFormData((prevState) => ({\n      ...prevState,\n      cloud_provider: cloudProvider.name || '',\n    }));\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    //validate required field\n    if (!name?.trim()) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.this_is_a_required_field'),\n      });\n    }\n    //validate regex\n    else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.input_filed_invalid_helper_text'),\n      });\n    }\n    //validate max length\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        }),\n      });\n    }\n    //validate required field\n    if (!region.trim()) {\n      isValid = false;\n      setCloudRegionValidated({\n        fieldState: 'error',\n        message: t('common.this_is_a_required_field'),\n      });\n    }\n    return isValid;\n  };\n\n  const manageQuota = async () => {\n    if (getQuota) {\n      await getQuota().then((res) => {\n        setQuota(res);\n      });\n    }\n  };\n\n  useEffect(() => {\n    manageQuota();\n  }, []);\n\n  const onCreateInstance = async () => {\n    const isValid = validateCreateForm();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        setCreationInProgress(true);\n        onCreate();\n\n        await apisService.createKafka(true, kafkaFormData).then(() => {\n          resetForm();\n          hideModal();\n          refresh();\n        });\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code, reason } = error?.response?.data || {};\n          //if instance name duplicate\n          if (code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n            setIsFormValid(false);\n            setNameValidated({\n              fieldState: 'error',\n              message: t('the_name_already_exists_please_enter_a_unique_name', {\n                name: kafkaFormData.name,\n              }),\n            });\n          }\n          //if kafka creation failed due to quota\n          else if (\n            code === ErrorCodes.PREVIEW_KAFKA_INSTANCE_EXIST ||\n            code === ErrorCodes.INSUFFICIENT_QUOTA ||\n            code === ErrorCodes.FAILED_TO_CHECK_QUOTA\n          ) {\n            setHasKafkaCreationFailed(true);\n          } else {\n            addAlert &&\n              addAlert({\n                title: t('common.something_went_wrong'),\n                variant: AlertVariant.danger,\n                description: reason,\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (\n      nameValidated.fieldState !== 'error' &&\n      cloudRegionValidated.fieldState !== 'error'\n    ) {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, cloudRegionValidated.fieldState]);\n\n  const onChangeValidateName = (name: string) => {\n    let isValid = true;\n    setKafkaFormData((prevState) => ({ ...prevState, name }));\n\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name?.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.input_filed_invalid_helper_text'),\n      });\n    }\n  };\n\n  const onChangeCloudRegion = (region: string) => {\n    setKafkaFormData((prevState) => ({ ...prevState, region }));\n    if (region && cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return (\n          <AwsIcon\n            size='lg'\n            color='black'\n            className='mk--create-instance__tile--icon'\n          />\n        );\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData((prevState) => ({\n        ...prevState,\n        multi_az: value === 'multi',\n      }));\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert\n              variant='danger'\n              title={t('common.form_invalid_alert')}\n              aria-live='polite'\n              isInline\n            />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          isRequired\n          validated={fieldState}\n          fieldId='form-instance-name'\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type='text'\n            id='form-instance-name'\n            name='instance-name'\n            value={name}\n            onChange={onChangeValidateName}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_provider')}\n          fieldId='form-cloud-provider-name'\n        >\n          {cloudProviders?.map((provider: CloudProvider) => {\n            const { name, display_name = '' } = provider;\n            return (\n              <Tile\n                key={`tile-${name}`}\n                title={display_name}\n                icon={getTileIcon(name)}\n                isSelected={cloud_provider === name}\n                onClick={() => onCloudProviderSelect(provider)}\n              />\n            );\n          })}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          validated={cloudRegionValidated.fieldState}\n          fieldId='form-cloud-region-option'\n          isRequired\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={onChangeCloudRegion}\n            id='cloud-region-select'\n            name='cloud-region'\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              ({ id, display_name = '' }: CloudRegion, index) => (\n                <FormSelectOption\n                  key={index}\n                  value={id}\n                  label={id ? t(id) : display_name}\n                />\n              )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId='availability-zones'>\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n            >\n              <ToggleGroupItem\n                text={t('single')}\n                value={'single'}\n                isDisabled\n                buttonId='single'\n                onChange={onChangeAvailabilty}\n              />\n            </Tooltip>\n            <ToggleGroupItem\n              text={t('multi')}\n              value='multi'\n              buttonId='multi'\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n              reference={() =>\n                document.getElementById('multi') ||\n                document.createElement('span')\n              }\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      isModalOpen={true}\n      title={t('create_a_kafka_instance')}\n      handleModalToggle={handleModalToggle}\n      onCreate={onCreateInstance}\n      isFormValid={isFormValid}\n      primaryButtonTitle={t('create_instance')}\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit='modalCreateKafka-buttonSubmit'\n      dataTestIdCancel='modalCreateKafka-buttonCancel'\n      isDisabledButton={shouldDisabledButton}\n    >\n      <>\n        <QuotaAlert\n          quota={quota}\n          hasKafkaCreationFailed={hasKafkaCreationFailed}\n          loadingQuota={loadingQuota}\n          hasUserTrialKafka={hasUserTrialKafka}\n          isKasTrial={isKasTrial}\n        />\n        <Flex direction={{ default: 'column', lg: 'row' }}>\n          <FlexItem flex={{ default: 'flex_2' }}>\n            {createInstanceForm()}\n          </FlexItem>\n          <Divider isVertical />\n          <FlexItem\n            flex={{ default: 'flex_1' }}\n            className='mk--create-instance-modal__sidebar--content'\n          >\n            <DrawerPanelContentInfo isKasTrial={isKasTrial} />\n          </FlexItem>\n        </Flex>\n      </>\n    </MASCreateModal>\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","this","cloud_provider","multi_az","region","description","DrawerPanelContentInfo","isKasTrial","t","useTranslation","qsContext","QuickStartContext","TextContent","Text","component","TextVariants","TextList","TextListVariants","Grid","sm","lg","hasGutter","GridItem","TextListItem","TextListItemVariants","Button","isSmall","isInline","variant","ButtonVariant","style","marginTop","onClick","setActiveQuickStart","QuotaAlert","quota","hasKafkaCreationFailed","loadingQuota","hasUserTrialKafka","data","isServiceDown","kasQuota","get","QuotaType","kasTrial","titleKey","messageKey","AlertVariant","remaining","Alert","className","title","customIcon","Spinner","size","emptyProvider","kind","display_name","enabled","CreateInstance","store","hideModal","modalProps","onCreate","refresh","cloudProviders","auth","useAuth","basePath","useConfig","addAlert","useAlert","getQuota","useQuota","newKafka","useState","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","setQuota","setHasKafkaCreationFailed","undefined","loading","shouldDisabledButton","resetForm","prevState","fetchCloudRegions","provider","kas","getToken","accessToken","id","DefaultApi","Configuration","getCloudProviderRegions","then","res","providerRegions","items","enabledRegions","filter","p","length","unshift","reason","response","useEffect","onCreateInstance","isValid","trim","test","message","maxLength","validateCreateForm","apisService","createKafka","code","dataTestId","isMultiSelected","onChangeValidateName","onChangeCloudRegion","getTileIcon","toLowerCase","color","onChangeAvailabilty","isSelected","event","currentTarget","onFormSubmit","preventDefault","isModalOpen","handleModalToggle","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","isDisabledButton","Flex","direction","default","FlexItem","flex","Form","onSubmit","FormAlert","FormGroup","label","helperText","helperTextInvalid","isRequired","validated","fieldId","TextInput","type","value","onChange","autoFocus","map","Tile","key","icon","cloudProvider","FormSelect","index","FormSelectOption","ToggleGroup","Tooltip","content","ToggleGroupItem","text","isDisabled","buttonId","reference","document","getElementById","createElement","Divider","isVertical"],"sourceRoot":""}