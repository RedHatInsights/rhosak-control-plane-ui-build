{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/components/EmptyState/EmptyState.tsx","webpack://mk-ui-frontend/./src/app/common/MASPagination/MASPagination.tsx","webpack://mk-ui-frontend/./src/app/common/MASTable/MASTable.tsx","webpack://mk-ui-frontend/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://mk-ui-frontend/./src/openapi/base.ts","webpack://mk-ui-frontend/./src/openapi/api.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/utils/error.ts","webpack://mk-ui-frontend/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://mk-ui-frontend/./src/app/models/models.ts","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/DrawerPanelContentInfo.tsx","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/Drawer/GenerateCredential.tsx","webpack://mk-ui-frontend/./src/app/Drawer/InstanceDrawer.tsx","webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/hooks/useTimeout.ts","webpack://mk-ui-frontend/./src/app/api/ApiContext.tsx","webpack://mk-ui-frontend/./src/app/auth/AuthContext.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://mk-ui-frontend/./src/app/components/Loading/Loading.tsx","webpack://mk-ui-frontend/./src/i18n/i18n.ts"],"names":["EmptyState","createStreamsInstance","setCreateStreamsInstance","t","useTranslation","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","onClick","MASPagination","page","perPage","itemCount","PaginationVariant","isCompact","titles","restProps","history","location","searchParams","URLSearchParams","search","setSearchParam","useCallback","name","value","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","MASTable","tableProps","tableHeaderProps","tableBodyProps","children","cells","rows","actionResolver","onSort","sortBy","ariaLabel","className","rowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","id","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","toggleIcon","breakpoint","toolbarToggleGroupProps","ToolbarContent","ToolbarToggleGroup","map","toolbarItem","index","key","alignment","item","restItemProps","ToolbarItem","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequestPayload","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","undefined","query","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","createServiceAccount","serviceAccountRequest","deleteKafkaById","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByKafkaId","duration","interval","filters","listCloudProviderRegions","listCloudProviders","listKafkas","orderBy","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI","StatusColumn","filteredstatus","status","instanceName","toLowerCase","CheckCircleIcon","ExclamationCircleIcon","PendingIcon","Spinner","IconSize","getStatusIcon","Flex","FlexItem","spacer","default","st","length","isServiceApiError","error","response","code","DeleteInstanceModal","confirmActionLabel","cancelActionLabel","title","onConfirm","isModalOpen","setIsModalOpen","description","ModalVariant","titleIconVariant","instanceStatus","selectedInstance","useState","instanceNameInput","setInstanceNameInput","selectedInstanceName","handleModalToggle","Modal","isOpen","showClose","onClose","actions","ButtonVariant","isDisabled","Text","dangerouslySetInnerHTML","__html","htmlFor","TextInput","type","onChange","autoFocus","StreamsToolbar","setFilterSelected","filterSelected","total","filteredValue","setFilteredValue","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","nameInputRef","useRef","ownerInputRef","mainFilterOptions","label","disabled","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","option","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","isInputValid","test","trim","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","event","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","newFilteredValue","prevFilterValue","filterChip","find","chipIndex","onDeleteChipGroup","ToolbarGroup","Select","SelectVariant","onToggle","selections","onSelect","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","validated","ValidatedOptions","placeholder","input","onKeyPress","ref","SearchIcon","Tooltip","content","reference","isPlaceholder","placeholderText","widgetId","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","lg","FilterIcon","StreamsTableView","mainToggle","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToInstance","getConnectToInstancePath","refresh","kafkaDataLoaded","onDelete","expectedTotal","setOrderBy","authContext","useContext","AuthContext","ApiContext","isDeleteModalOpen","setIsDeleteModalOpen","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","tableColumns","transforms","sortable","items","setItems","loggedInUser","setLoggedInUser","addAlert","useEffect","getUsername","username","addAlertAfterSuccessDeletion","notPresentKafkas","kafka","k","dk","allDeletedKafkas","forEach","prev","removeKafkaFromDeleted","AlertVariant","lastItemsState","parse","instances","cfItem","incompleteKafkas","addAlertAfterSuccessCreation","onSelectKebabDropdownOption","originalData","selectedOption","rowIndex","onSelectDeleteInstance","parentElement","previousSibling","focus","instance","onDeleteInstance","instanceId","getToken","apisService","DefaultApi","reason","config","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","tableRow","loadingCount","loadingRowCount","totalPage","Math","floor","getLoadingRowsCount","i","Skeleton","NameLink","row","href","Link","to","e","preventDefault","date","cloud_provider","created_at","owner","cloudProviderDisplayName","regionDisplayName","Date","formatDistance","preparedTableCells","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","style","pointerEvents","cursor","getActionResolver","myDirection","property","getParameterForSortIndex","rowProps","props","isExpanded","isRowDeleted","css","hidden","onRowClick","EmptyStateVariant","multi_az","DrawerPanelContentInfo","DrawerPanelContent","DrawerHead","TextContent","component","TextVariants","TextList","TextListVariants","TextListItem","TextListItemVariants","emptyProvider","kind","display_name","enabled","CreateInstanceModal","onCreate","cloudProviders","newKafka","NewKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","fetchCloudRegions","provider","res","providerRegions","providers","concat","enabledRegions","prevData","enableCloudProviders","handleInstanceNameChange","isValid","message","maxLength","handleCloudRegionChange","validRegion","getTileIcon","AwsIcon","color","onChangeAvailabilty","isSelected","currentTarget","createInstanceForm","isMultiSelected","Form","FormAlert","Alert","isInline","FormGroup","helperText","helperTextInvalid","helperTextInvalidIcon","isRequired","fieldId","Tile","FormSelect","FormSelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","validateCreateForm","toShowAlert","spinnerAriaValueText","isLoading","Drawer","isStatic","DrawerContent","panelContent","DrawerContentBody","GenerateCredential","steps","isCreated","setIsCreated","setIsOpen","stepNo","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","credential","setCredential","setIsLoading","setError","onMove","curr","_prev","handleChangeStep1","_checked","checked","handleChangeStep4","step1","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","bodyContent","step3","step4","clientID","KeyIcon","InputGroupText","ClipboardCopy","isReadOnly","clientSecret","Bullseye","Checkbox","Wizard","isFinishedStep","unshift","nextButtonText","onNext","onBack","hideClose","InstanceDrawer","activeTab","instanceDetail","updated_at","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","handleTab2Click","tabIndex","externalServer","bootstrapServerHost","endsWith","resourcesTab","sampleCodeTab","CopyIcon","renderTextListItemDetail","detailsTab","Grid","GridItem","span","Card","isFlat","CardBody","format","widths","Loading","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Tabs","activeKey","Tab","eventKey","TabTitleText","isSecondary","OpenshiftStreams","callback","delay","savedCallback","parseInt","get","has","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","drawerRef","fetchKafkas","justPoll","isValidToken","join","kafkaInstances","current","setTimeout","clearInterval","refreshKafkas","onExpand","PageSection","PageSectionVariants","Level","LevelItem","padding","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","body","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","pseudolocalizationEnabled","window","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","lng","Intl","NumberFormat","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler"],"mappings":"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","file":"437.a245a50263fdad6a9479.js","sourcesContent":["import React from 'react';\nimport { Title, Button, EmptyState as PFEmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\ntype EmptyStateProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ createStreamsInstance, setCreateStreamsInstance }) => {\n  const { t } = useTranslation();\n  const onCreate = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n  return (\n    <>\n      <PFEmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('you_do_not_have_any_kafka_instances_yet')}\n        </Title>\n        <EmptyStateBody>{t('create_a_kafka_instance_to_get_started')}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={onCreate}>\n          {t('create_a_kafka_instance')}\n        </Button>\n      </PFEmptyState>\n    </>\n  );\n};\n\nexport { EmptyState };\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport interface PaginationProps extends Omit<PFPaginationProps, 'children' | 'ref'> {}\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\n\nexport interface MASTableProps {\n  tableProps: Omit<PFTableProps, 'children'>;\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n}\n\nconst MASTable: FunctionComponent<MASTableProps> = ({ tableProps, tableHeaderProps, tableBodyProps, children }) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    rowWrapper,\n    ...restProps\n  } = tableProps;\n\n  return (\n    <PFTable\n      className={className}\n      rowWrapper={rowWrapper}\n      cells={cells}\n      variant={variant}\n      rows={rows}\n      aria-label={ariaLabel}\n      actionResolver={actionResolver}\n      onSort={onSort}\n      sortBy={sortBy}\n      {...restProps}\n    >\n      <TableHeader {...tableHeaderProps} />\n      <TableBody {...tableBodyProps} />\n      {children}\n    </PFTable>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar as PFToolbar,\n  ToolbarProps as PFToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport interface ToolbarItemProps extends Omit<PFToolbarItemProps, 'children'> {\n  item: JSX.Element;\n}\ninterface ToolbarProps {\n  toolbarProps: Omit<PFToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems: JSX.Element;\n  toolbarItems: ToolbarItemProps[];\n}\n\nconst MASToolbar: React.FunctionComponent<ToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n  const { toggleIcon, breakpoint = 'md', ...toolbarToggleGroupProps } = toggleGroupProps;\n  return (\n    <>\n      <PFToolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={toggleIcon} breakpoint={breakpoint} {...toolbarToggleGroupProps}>\n            {toggleGroupItems}\n          </ToolbarToggleGroup>\n          {toolbarItems.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </PFToolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof Metric\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof Metric\n     */\n    values?: Array<Values>;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList extends MetricsListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByKafkaId.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByKafkaId(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList> {\n            return DefaultApiFp(configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size={IconSize.md} aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const icon = getStatusIcon();\n  return (\n    <Flex>\n      {icon && <FlexItem spacer={{ default: 'spacerSm' }}>{icon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nexport const isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n","import React, { FunctionComponent, useState } from 'react';\nimport { Modal, Button, ButtonVariant, ModalVariant, ModalProps, TextInput, Text } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/utils';\nimport './DeleteInstanceModal.css';\nimport { KafkaRequest } from 'src/openapi';\n\nexport interface DeleteInstanceModalProps extends Omit<ModalProps, 'children'> {\n  confirmActionLabel?: string;\n  cancelActionLabel?: string;\n  description?: string;\n  selectedInstance: KafkaRequest;\n  isModalOpen: boolean;\n  instanceStatus: string | undefined;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onConfirm: (instance: KafkaRequest) => Promise<void>;\n}\n\nconst DeleteInstanceModal: FunctionComponent<DeleteInstanceModalProps> = ({\n  confirmActionLabel,\n  cancelActionLabel,\n  title,\n  onConfirm,\n  isModalOpen,\n  setIsModalOpen,\n  description,\n  variant = ModalVariant.small,\n  titleIconVariant = 'warning',\n  instanceStatus,\n  selectedInstance,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const selectedInstanceName: string = selectedInstance?.name || '';\n\n  const handleModalToggle = () => {\n    setInstanceNameInput(undefined);\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onConfirmDelete = () => {\n    setInstanceNameInput(undefined);\n    onConfirm(selectedInstance);\n  };\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={t('delete_instance_modal')}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          key=\"confirm-button\"\n          id=\"mk--confirm__button\"\n          variant={ButtonVariant.danger}\n          onClick={onConfirmDelete}\n          isDisabled={isConfirmButtonDisabled()}\n        >\n          {confirmActionLabel || t('delete_instance')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"mk--cancel__button\" onClick={handleModalToggle}>\n          {cancelActionLabel || t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Text className=\"mk--delete-instance__modal--text\" dangerouslySetInnerHTML={{ __html: description || '' }} />\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport { DeleteInstanceModal };\n","import React, { useState, useRef } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions } from '@app/utils/utils';\nimport './StreamsToolbar.css';\n\ntype StreamsToolbarProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n}) => {\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n  const { t } = useTranslation();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter') {\n      if (event?.target?.name === 'filter names') {\n        onFilter('name');\n      } else if (event.target?.name === 'filter owners') {\n        onFilter('owner');\n      }\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      switch (key) {\n        case 'name':\n        case 'owner':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        case 'region':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        case 'cloud_provider':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        case 'status':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        default:\n          return [];\n      }\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    if (category === 'status') {\n      filterChip = statusFilterOptions.find((option) => option.label === chip.toString())?.value;\n    } else if (category === 'region') {\n      filterChip = regionFilterOptions.find((option) => option.label === chip.toString())?.value;\n    } else if (category === 'cloud_provider') {\n      filterChip = regionFilterOptions.find((option) => option.label === chip.toString())?.value;\n    }\n    const chipIndex = filterIndex >= 0 ? prevFilterValue.findIndex((val) => val.value === filterChip) : -1;\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n    }\n    setFilteredValue(newFilteredValue);\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected && filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onChangeSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"filter names\"\n                  id=\"filterText\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  validated={!isNameValid ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid}\n                  onClick={() => onFilter('name')}\n                  aria-label=\"Search instances\"\n                >\n                  <SearchIcon />\n                </Button>\n                {!isNameValid && (\n                  <Tooltip\n                    content={\n                      <div>\n                        Valid characters for name are lowercase letters from a to z, numbers from 0 to 9, underscore (_)\n                        hyphens (-) and percentage (%)\n                      </div>\n                    }\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <ToolbarItem>\n              <Select\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select cloud provider\"\n                onToggle={onCloudProviderFilterToggle}\n                selections={getSelectionForFilter('cloud_provider')}\n                isOpen={isCloudProviderFilterExpanded}\n                onSelect={onCloudProviderFilterSelect}\n                placeholderText={t('filter_by_cloud_provider')}\n              >\n                {cloudProviderFilterOptions.map((option, index) => (\n                  <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n        >\n          {filterSelected === 'region' && (\n            <ToolbarItem>\n              <Select\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select region\"\n                onToggle={onRegionFilterToggle}\n                selections={getSelectionForFilter('region')}\n                isOpen={isRegionFilterExpanded}\n                onSelect={onRegionFilterSelect}\n                placeholderText={t('filter_by_region')}\n              >\n                {regionFilterOptions.map((option, index) => (\n                  <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"filter owners\"\n                  id=\"filterOwners\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label=\"Search owners\"\n                >\n                  <SearchIcon />\n                </Button>\n                {!isOwnerValid && (\n                  <Tooltip\n                    content={\n                      <div>\n                        Valid characters for owner are lowercase letters from a to z, numbers from 0 to 9, underscore\n                        (_) hyphens (-) and percentage (%)\n                      </div>\n                    }\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n        >\n          {filterSelected === 'status' && (\n            <ToolbarItem>\n              <Select\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select status\"\n                onToggle={onStatusFilterToggle}\n                selections={getSelectionForFilter('status')}\n                isOpen={isStatusFilterExpanded}\n                onSelect={onStatusFilterSelect}\n                placeholderText={t('filter_by_status')}\n              >\n                {statusFilterOptions.map((option, index) => (\n                  <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: FilterIcon, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport {\n  AlertVariant,\n  PaginationVariant,\n  Skeleton,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n  EmptyStateIcon,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { MASPagination, MASTable } from '@app/common';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { DeleteInstanceModal } from '@app/components/DeleteInstanceModal';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { InstanceStatus, isServiceApiError } from '@app/utils';\nimport { useHistory } from 'react-router-dom';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { formatDistance } from 'date-fns';\nimport './StreamsTableView.css';\nimport { css } from '@patternfly/react-styles';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n  mainToggle: boolean;\n  refresh: () => void;\n  page: number;\n  perPage: number;\n  total: number;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected: string;\n  setFilterSelected: (filterSelected: string) => void;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToInstance,\n  getConnectToInstancePath,\n  refresh,\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n}: StreamsTableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<number>();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  // function to get exact number of skeleton count required for the current page\n  const getLoadingRowsCount = () => {\n    // initiaise loadingRowCount by perPage\n    let loadingRowCount = perPage;\n    /*\n      if number of expected count is greater than 0\n        calculate the loadingRowCount\n      else\n        leave the loadingRowCount to perPage\n     */\n    if (expectedTotal && expectedTotal > 0) {\n      // get total number of pages\n      const totalPage =\n        expectedTotal % perPage !== 0 ? Math.floor(expectedTotal / perPage) + 1 : Math.floor(expectedTotal / perPage);\n      // check whether the current page is the last page\n      if (page === totalPage) {\n        // check whether to total expected count is greater than perPage count\n        if (expectedTotal > perPage) {\n          // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n          loadingRowCount = expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n        } else {\n          loadingRowCount = expectedTotal;\n        }\n      }\n    }\n    // return the exact number of skeleton expected at the time of loading\n    return loadingRowCount !== 0 ? loadingRowCount : perPage;\n  };\n\n  const addAlertAfterSuccessDeletion = () => {\n    // filter all kafkas with status as deprovision\n    const deprovisonedKafkas = kafkaInstanceItems.filter((kafka) => kafka.status === InstanceStatus.DEPROVISION);\n\n    // filter all new kafka which is not in deleteKafka state\n    const notPresentKafkas = deprovisonedKafkas\n      .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n      .map((k) => k.name || '');\n    // create new array by merging old and new kafka with status as deprovion\n    const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n    // update deleteKafka with new array\n    setDeletedKafkas(allDeletedKafkas);\n\n    // add alert for deleted kafkas which are completely deleted from the response\n    allDeletedKafkas.forEach((k) => {\n      if (kafkaInstanceItems.findIndex((item) => item.name === k) < 0) {\n        removeKafkaFromDeleted(k);\n        addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n      }\n    });\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const onSelectKebabDropdownOption = (\n    event: any,\n    originalData: KafkaRequest,\n    selectedOption: string,\n    rowIndex: number | undefined\n  ) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n    setActiveRow(rowIndex);\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    const { rowIndex } = extraData;\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'view-instance', rowIndex),\n      },\n      {\n        title: t('connect_to_instance'),\n        id: 'connect-instance',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'connect-instance', rowIndex),\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance', rowIndex),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount();\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    const formatDate = (date) => {\n      date = typeof date === 'string' ? new Date(date) : date;\n      return (\n        <>\n          {formatDistance(date, new Date())} {t('ago')}\n        </>\n      );\n    };\n\n    const NameLink = ({ name, row }) =>\n      mainToggle ? (\n        <a href=\"http://uxd-mk-data-plane-cmolloy.apps.uxd-os-research.shz4.p1.openshiftapps.com/openshiftstreams\">\n          {name}\n        </a>\n      ) : (\n        <Link\n          to={() => getConnectToInstancePath(row as KafkaRequest)}\n          onClick={(e) => {\n            e.preventDefault();\n            onConnectToInstance(row as KafkaRequest);\n          }}\n        >\n          {name}\n        </Link>\n      );\n\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ? (\n                name\n              ) : (\n                <NameLink row={row} name={name} />\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: formatDate(created_at),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    setIsDeleteModalOpen(false);\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button') {\n      onViewInstance(originalData);\n      setActiveRow(rowIndex);\n    }\n  };\n\n  const customRowWrapper = ({ className, rowProps, row, ...props }) => {\n    const { rowIndex } = rowProps;\n    const { isExpanded } = row;\n    const status: string = row?.originalData?.status || '';\n    const isRowDeleted = status === InstanceStatus.DEPROVISION;\n    return (\n      <tr\n        className={css(\n          className,\n          'pf-c-table-row__item',\n          isRowDeleted ? 'pf-m-disabled' : 'pf-m-selectable',\n          activeRow === rowIndex && 'pf-m-selected'\n        )}\n        hidden={isExpanded !== undefined && !isExpanded}\n        onClick={(event: any) => !isRowDeleted && onRowClick(event, rowIndex, row)}\n        {...props}\n      />\n    );\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        createStreamsInstance={createStreamsInstance}\n        setCreateStreamsInstance={setCreateStreamsInstance}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n      />\n      <MASTable\n        tableProps={{\n          className: 'mk--streams-table-view__table',\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          rowWrapper: customRowWrapper,\n        }}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <EmptyState variant={EmptyStateVariant.small}>\n          <EmptyStateIcon icon={SearchIcon} />\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {t('no_results_found')}\n          </Title>\n          <EmptyStateBody>{t('no_results_match_the_filter_criteria')}</EmptyStateBody>\n        </EmptyState>\n      )}\n      {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n      <DeleteInstanceModal\n        title={title}\n        selectedInstance={selectedInstance}\n        isModalOpen={isDeleteModalOpen}\n        instanceStatus={selectedInstance?.status}\n        setIsModalOpen={setIsDeleteModalOpen}\n        onConfirm={onDeleteInstance}\n        description={description}\n        confirmActionLabel={confirmActionLabel}\n      />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\n\nconst DrawerPanelContentInfo = () => (\n  <DrawerPanelContent>\n    <DrawerHead>\n      <TextContent>\n        <Text component={TextVariants.h2}>Cluster information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 4 MBps</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100 GB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Partitions</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Client connections</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 500</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Message size</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Availability</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>Multizone highly available</TextListItem>\n        </TextList>\n        <Text component={TextVariants.h2}>Cost information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Base Cluster</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$1.50/hr</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.02/MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.0002/GB/hr</TextListItem>\n        </TextList>\n      </TextContent>\n    </DrawerHead>\n  </DrawerPanelContent>\n);\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { isValidToken } from '@app/utils/utils';\n\nexport type CreateInstanceModalProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  onCreate: () => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent<CreateInstanceModalProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  onCreate,\n  cloudProviders,\n  refresh,\n  mainToggle,\n}: CreateInstanceModalProps) => {\n  const { t } = useTranslation();\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const { addAlert } = useAlerts();\n\n  const resetForm = () => {\n    setKafkaFormData({ ...kafkaFormData, name: '', multi_az: true });\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    if (!region || region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = validateCreateForm();\n\n    const accessToken = await authContext?.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n    } else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n          });\n          onCreate();\n          await apisService.createKafka(true, kafkaFormData).then((res) => {\n            resetForm();\n            setCreateStreamsInstance(false);\n            refresh();\n          });\n        } catch (error) {\n          let reason: string | undefined;\n          let toShowAlert = true;\n          if (isServiceApiError(error)) {\n            if (error.response?.data.code === 'MGD-SERV-API-36') {\n              setIsFormValid(false);\n              toShowAlert = false;\n              setNameValidated({\n                fieldState: 'error',\n                message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n              });\n            } else {\n              reason = error.response?.data.reason;\n            }\n          }\n          /**\n           * Todo: show user friendly message according to server code\n           * and translation for specific language\n           *\n           */\n          toShowAlert && addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    resetForm();\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (name && name.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else {\n      if (isValid) {\n        if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n        if (nameValidated.fieldState === 'error') {\n          setNameValidated({ fieldState: 'default', message: '' });\n        }\n      } else {\n        setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n      }\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData({ ...kafkaFormData, multi_az: value === 'multi' });\n    }\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message != '' && <ExclamationCircleIcon />}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={handleInstanceNameChange}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map(\n            (provider: CloudProvider) =>\n              provider.enabled && (\n                <Tile\n                  key={`tile-${provider.name}`}\n                  title={provider?.display_name || ''}\n                  icon={getTileIcon(provider?.name)}\n                  isSelected={cloud_provider === provider.name}\n                  onClick={() => onCloudProviderSelect(provider)}\n                />\n              )\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={handleCloudRegionChange}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              (option: CloudRegion, index) =>\n                option.enabled && (\n                  <FormSelectOption\n                    key={index}\n                    value={option.id}\n                    label={option.id ? t(option.id) : option.display_name || ''}\n                  />\n                )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <ToggleGroupItem\n              text={t('single')}\n              value={'single'}\n              isDisabled\n              buttonId=\"single\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        variant={ModalVariant.medium}\n        title={t('create_a_kafka_instance')}\n        isOpen={createStreamsInstance}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"create\"\n            variant=\"primary\"\n            onClick={onCreateInstance}\n            isDisabled={!isFormValid || isCreationInProgress}\n            spinnerAriaValueText={t('submitting_request')}\n            isLoading={isCreationInProgress}\n          >\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {mainToggle === true ? (\n          <Drawer isStatic className=\"mk--create-instance-modal__drawer--content\">\n            <DrawerContent panelContent={<DrawerPanelContentInfo />}>\n              <DrawerContentBody>{createInstanceForm()}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        ) : (\n          createInstanceForm()\n        )}\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useState, FunctionComponent, useContext } from 'react';\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Popover,\n  Radio,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DefaultApi, ServiceAccountRequest } from '../../openapi/api';\n\ntype GenerateCredential = {\n  instanceName?: string;\n  mainToggle?: boolean;\n};\n\nconst GenerateCredential: FunctionComponent<GenerateCredential> = ({\n  instanceName = '',\n  mainToggle,\n}: GenerateCredential) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n  const [credential, setCredential] = useState<any | undefined>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState('');\n\n  const generateCredential = async () => {\n    const accessToken = await authContext?.getToken();\n    const serviceAccountRequest: ServiceAccountRequest = {\n      name: instanceName,\n    };\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.createServiceAccount(serviceAccountRequest).then((res) => {\n        setCredential(res?.data);\n        setIsLoading(false);\n        setIsOpen(true);\n      });\n    } catch (err) {\n      setIsLoading(false);\n      let reason;\n      if (isServiceApiError(err)) {\n        reason = err.response?.data.reason;\n      }\n      setError(reason);\n    }\n  };\n\n  const handleModalToggle = () => {\n    if (mainToggle) {\n      setIsOpen(true);\n      setIsLoading(false);\n    } else {\n      setIsLoading(true);\n      setError('');\n      setCredential(undefined);\n      generateCredential();\n    }\n  };\n\n  // useEffect(() => {\n  //   if (stepNo === 5) {\n  //     generateCredential();\n  //   }\n  // }, [stepNo]);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setIsCreated(!isCreated);\n    setCredential(undefined);\n    setConfirmationCheckbox(false);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, _prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (_checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (_checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      {mainToggle && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title=\"These credentials were not actually generated from this flow as it is part of the mock UI. For now, please turn off the mock UI to generate credentials.\"\n        />\n      )}\n      <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={KeyIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('credential_successfully_generated')}\n        </Title>\n        <EmptyStateBody>{t('clientid_empty_state_body')}</EmptyStateBody>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">{t('client_id')}</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            { mainToggle ? 'srvc-acct-962bc96e-4339-4aee-9505-040d5069c6a5' : credential?.clientID }\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            { mainToggle ? '441cdf77-083c-41d1-9050-c27a3b4247ac' : credential?.clientSecret }\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button variant=\"primary\" isDisabled={!confirmationCheckbox} onClick={handleClose}>\n          {t('close')}\n        </Button>\n      </EmptyState>\n    </>\n  );\n\n  const getSteps = () => {\n    const steps: WizardStep[] = [{ id: 5, name: t('finish'), component: clientID, isFinishedStep: true }];\n    if (mainToggle) {\n      steps.unshift(\n        { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n        { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n        { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n        { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') }\n      );\n    }\n    return steps;\n  };\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      <FlexItem className=\"pf-m-align-right\">\n        <Button\n          variant=\"secondary\"\n          onClick={handleModalToggle}\n          className=\"pf-u-ml-md\"\n          spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n          isLoading={isLoading}\n        >\n          {t('generate_credential')}\n        </Button>\n      </FlexItem>\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={getSteps()}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        hideClose={stepNo === 5}\n      />\n      {error && (\n        <FlexItem className=\"pf-m-grow\">\n          <Alert variant=\"danger\" isInline title={error} />\n        </FlexItem>\n      )}\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Tabs,\n  Tab,\n  TabTitleText,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport './InstanceDrawer.css';\nimport { GenerateCredential } from './GenerateCredential';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { KafkaRequest } from 'src/openapi';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { useTranslation } from 'react-i18next';\n\nexport type InstanceDrawerProps = {\n  mainToggle: boolean;\n  onClose: () => void;\n  isExpanded: boolean;\n  instanceDetail?: KafkaRequest;\n  activeTab?: 'Details' | 'Connection';\n};\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n}) => {\n  const { t } = useTranslation();\n  const { id, created_at, updated_at, owner } = instanceDetail || {};\n  dayjs.extend(localizedFormat);\n\n  const [activeTab1Key, setActiveTab1Key] = useState(0);\n  const [activeTab2Key, setActiveTab2Key] = useState(0);\n\n  useEffect(() => {\n    setActiveTab1Key(activeTab === 'Details' ? 0 : 1);\n  }, [activeTab]);\n\n  const handleTab1Click = (_event, tabIndex) => {\n    setActiveTab1Key(tabIndex);\n  };\n\n  const handleTab2Click = (_event, tabIndex) => {\n    setActiveTab2Key(tabIndex);\n  };\n\n  const externalServer = instanceDetail?.bootstrapServerHost?.endsWith(':443')\n    ? instanceDetail?.bootstrapServerHost\n    : `${instanceDetail?.bootstrapServerHost}:443`;\n\n  const resourcesTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n          <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n          <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_2')}</Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('external_server')}\n          </Text>\n        </TextContent>\n        <Flex>\n          <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n            <ClipboardCopy>{externalServer}</ClipboardCopy>\n          </FlexItem>\n          <GenerateCredential instanceName={instanceDetail?.name} mainToggle={false} />\n        </Flex>\n        {mainToggle && (\n          <>\n            <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n              <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n              <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n            </TextContent>\n            <ClipboardCopy>https://:30123</ClipboardCopy>\n          </>\n        )}\n      </div>\n    </>\n  );\n\n  const sampleCodeTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n  const renderTextListItemDetail = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  const detailsTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mk--instance-details__drawer--grid\">\n            <GridItem span={6} className=\"mk--instance-details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItemDetail(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItemDetail(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItemDetail(t('id'), id)}\n            {renderTextListItemDetail(t('owner'), owner)}\n            {renderTextListItemDetail(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItemDetail(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n\n  const renderConnectionTab = () => {\n    if (mainToggle) {\n      return (\n        <div className=\"mk--instance-details__drawer--tab-content pf-m-secondary\">\n          <Tabs\n            activeKey={activeTab2Key}\n            isSecondary\n            onSelect={handleTab2Click}\n          >\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('resources')}</TabTitleText>}\n            >\n              {resourcesTab}\n            </Tab>\n            <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('sample_code')}</TabTitleText>}\n            >\n              {sampleCodeTab}\n            </Tab>\n          </Tabs>\n        </div>\n      );\n    }\n    return <>{resourcesTab}</>;\n  };\n\n  return (\n    <DrawerPanelContent\n      data-testid=\"mk--instance__drawer\"\n      className=\"instance-drawer\"\n      widths={{ default: 'width_50' }}\n      hidden={false}\n    >\n      {instanceDetail === undefined ? (\n        <Loading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                {t('instance_name')}\n              </Text>\n              <Title headingLevel=\"h1\" size={TitleSizes['xl']} className=\"pf-u-mt-0 \">\n                {instanceDetail?.name}\n              </Title>\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n              <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n                {detailsTab}\n              </Tab>\n              <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>}>\n                {renderConnectionTab()}\n              </Tab>\n            </Tabs>\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Drawer,\n  DrawerContent,\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { EmptyState } from '../components/EmptyState/EmptyState';\nimport { StreamsTableView, FilterType } from '../components/StreamsTableView/StreamsTableView';\nimport { CreateInstanceModal } from '../components/CreateInstanceModal/CreateInstanceModal';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../openapi/api';\nimport { AlertProvider } from '../components/Alerts/Alerts';\nimport { InstanceDrawer } from '../Drawer/InstanceDrawer';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError } from '@app/utils/error';\nimport './OpenshiftStreams.css';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance, getConnectToInstancePath }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [createStreamsInstance, setCreateStreamsInstance] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const drawerRef = React.createRef<any>();\n\n  const onExpand = () => {\n    drawerRef.current && drawerRef.current.focus();\n  };\n\n  const onCloseClick = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken)) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService\n          .listKafkas(page?.toString(), perPage?.toString(), orderBy && orderBy, getFilterString())\n          .then((res) => {\n            const kafkaInstances = res.data;\n            setKafkaInstancesList(kafkaInstances);\n            setKafkaInstanceItems(kafkaInstances.items);\n            kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal &&\n              setExpectedTotal(kafkaInstancesList.total);\n            setKafkaDataLoaded(true);\n          });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  // Functions\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  useTimeout(() => fetchKafkas(true), 5000);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n  return (\n    <>\n      <AlertProvider>\n        <Drawer isExpanded={selectedInstance != null} onExpand={onExpand}>\n          <DrawerContent\n            panelContent={\n              <InstanceDrawer\n                mainToggle={mainToggle}\n                onClose={onCloseClick}\n                isExpanded={selectedInstance != null}\n                activeTab={selectedInstance?.activeTab}\n                instanceDetail={selectedInstance?.instanceDetail}\n              />\n            }\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <Loading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <EmptyState\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  mainToggle={mainToggle}\n                />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  getConnectToInstancePath={getConnectToInstancePath}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  // listOfOwners={listOfOwners}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                />\n              </PageSection>\n            )}\n            <CreateInstanceModal\n              createStreamsInstance={createStreamsInstance}\n              setCreateStreamsInstance={setCreateStreamsInstance}\n              onCreate={onCreate}\n              cloudProviders={cloudProviders}\n              mainToggle={mainToggle}\n              refresh={refreshKafkas}\n            />\n          </DrawerContent>\n        </Drawer>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n  getUsername: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext | undefined>(undefined);\n","import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type AlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string|React.ReactElement;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const __PUBLIC_PATH__: string;\ndeclare const window: Window & {\n  windowError: string;\n};\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__PUBLIC_PATH__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: '~',\n      keySeparator: false,\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        // window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        // console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\ni18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n"],"sourceRoot":""}