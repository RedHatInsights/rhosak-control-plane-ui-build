{"version":3,"sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/tachometer-alt-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_black_500.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_blue_300.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_green_300.js","webpack://kas-ui/./node_modules/@patternfly/react-tokens/dist/js/chart_color_orange_300.js","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/modules/Metrics/Charts/ChartEmptyState.tsx","webpack://kas-ui/./src/app/modules/Metrics/Charts/utils.ts","webpack://kas-ui/./src/app/modules/Metrics/Charts/ChartToolbar.tsx","webpack://kas-ui/./src/app/modules/Metrics/Charts/UsedDiskSpaceChart.tsx","webpack://kas-ui/./src/app/modules/Metrics/Charts/MessagesChart.tsx","webpack://kas-ui/./src/app/modules/Metrics/Charts/IncomingOutgoingBytesPerTopic.tsx","webpack://kas-ui/./src/app/modules/Metrics/Charts/LogSizePerPartitionChart.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","ChartEmptyState","title","body","noData","noTopics","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","Button","getLargestByteSize","data1","data2","currentByteSize","data","map","datum","bytes","forEach","value","byteString","unit","convertToSpecifiedByte","largestByteSize","Math","round","ChartToolbar","disableToolbar","showTopicFilter","setTimeInterval","showKafkaToolbar","showTopicToolbar","useState","selectedTime","setSelectedTime","isTimeSelectOpen","setIsTimeSelectOpen","selectedTopic","setSelectedTopic","isTopicSelectOpen","setIsTopicSelectOpen","onTimeToggle","onTimeSelect","_","selection","formatTime","timeInterval","onTopicToggle","onTopicSelect","filterByTime","ToolbarItem","Select","SelectVariant","onToggle","onSelect","selections","isOpen","isDisabled","SelectOption","key","isPlaceholder","onTopicFilter","textInput","topicOptions","SelectGroup","label","Level","LevelItem","CardTitle","component","Toolbar","ToolbarContent","placeholderText","onFilter","isGrouped","hasInlineFilter","SyncIcon","Divider","UsedDiskSpaceChart","kafkaID","metricsDataUnavailable","setMetricsDataUnavailable","containerRef","t","useTranslation","auth","useAuth","basePath","useConfig","addAlert","useAlert","setWidth","legend","setLegend","chartData","setChartData","chartDataLoading","setChartDataLoading","setLargestByteSize","handleResize","clientWidth","itemsPerRow","fetchUsedDiskSpaceMetrics","kas","getToken","undefined","accessToken","apisService","DefaultApi","Configuration","getMetricsByRangeQuery","items","item","index","labels","metric","Error","values","includes","indexJ","timestamp","newArray","usedSpaceAvg","concat","push","getChartData","reason","response","AlertVariant","description","window","addEventListener","avgBroker","legendData","symbol","fill","chart_color_black_500","type","chart_color_blue_300","areaColor","softLimitColor","area","softLimit","getCurrentLengthOfData","length","lengthOfData","lengthOfDataPer5Mins","i","newTimestamp","date","Date","time","format","x","y","aggregateBytes","reduce","a","b","Card","CardBody","ref","Bullseye","Spinner","isSVG","Chart","ariaDesc","ariaTitle","containerComponent","ChartVoronoiContainer","constrainToVisibleArea","legendPosition","legendComponent","ChartLegend","orientation","padding","bottom","left","right","top","themeColor","ChartThemeColor","minDomain","legendAllowWrap","ChartAxis","tickCount","dependentAxis","tickFormat","ChartGroup","ChartArea","interpolation","style","stroke","color","ChartThreshold","render","CursorVoronoiContainer","createContainer","this","props","topics","topic","messages","count","console","log","cursorDimension","labelComponent","ChartLegendTooltip","mouseFollowTooltips","voronoiDimension","voronoiPadding","maxDomain","showGrid","ChartLine","IncomingOutgoingBytesPerTopic","setNoTopics","fetchBytesData","incomingTopicArray","outgoingTopicArray","line","chart_color_orange_300","LogSizePerPartitionChart","colors","chart_color_green_300","fetchLogSizePerPartition","JSON","stringify","topicName","isTopicInArray","some","filteredTopics","filter","partitionArray","partition","newtimestamp"],"mappings":"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","file":"304.aad1bdad.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.TachometerAltIconConfig = {\n  name: 'TachometerAltIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M288 32C128.94 32 0 160.94 0 320c0 52.8 14.25 102.26 39.06 144.8 5.61 9.62 16.3 15.2 27.44 15.2h443c11.14 0 21.83-5.58 27.44-15.2C561.75 422.26 576 372.8 576 320c0-159.06-128.94-288-288-288zm0 64c14.71 0 26.58 10.13 30.32 23.65-1.11 2.26-2.64 4.23-3.45 6.67l-9.22 27.67c-5.13 3.49-10.97 6.01-17.64 6.01-17.67 0-32-14.33-32-32S270.33 96 288 96zM96 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm48-160c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32zm246.77-72.41l-61.33 184C343.13 347.33 352 364.54 352 384c0 11.72-3.38 22.55-8.88 32H232.88c-5.5-9.45-8.88-20.28-8.88-32 0-33.94 26.5-61.43 59.9-63.59l61.34-184.01c4.17-12.56 17.73-19.45 30.36-15.17 12.57 4.19 19.35 17.79 15.17 30.36zm14.66 57.2l15.52-46.55c3.47-1.29 7.13-2.23 11.05-2.23 17.67 0 32 14.33 32 32s-14.33 32-32 32c-11.38-.01-20.89-6.28-26.57-15.22zM480 384c-17.67 0-32-14.33-32-32s14.33-32 32-32 32 14.33 32 32-14.33 32-32 32z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.TachometerAltIcon = require('../createIcon').createIcon(exports.TachometerAltIconConfig);\nexports[\"default\"] = exports.TachometerAltIcon;","\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_black_500 = {\n  \"name\": \"--pf-chart-color-black-500\",\n  \"value\": \"#6a6e73\",\n  \"var\": \"var(--pf-chart-color-black-500)\"\n};\nexports[\"default\"] = exports.chart_color_black_500;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_blue_300 = {\n  \"name\": \"--pf-chart-color-blue-300\",\n  \"value\": \"#06c\",\n  \"var\": \"var(--pf-chart-color-blue-300)\"\n};\nexports[\"default\"] = exports.chart_color_blue_300;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_green_300 = {\n  \"name\": \"--pf-chart-color-green-300\",\n  \"value\": \"#4cb140\",\n  \"var\": \"var(--pf-chart-color-green-300)\"\n};\nexports[\"default\"] = exports.chart_color_green_300;","\"use strict\";\nexports.__esModule = true;\nexports.chart_color_orange_300 = {\n  \"name\": \"--pf-chart-color-orange-300\",\n  \"value\": \"#ec7a08\",\n  \"var\": \"var(--pf-chart-color-orange-300)\"\n};\nexports[\"default\"] = exports.chart_color_orange_300;","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport { EmptyState, EmptyStateVariant, EmptyStateBody, EmptyStateIcon, Title, Button } from '@patternfly/react-core';\nimport TachometerAltIcon from '@patternfly/react-icons/dist/js/icons/tachometer-alt-icon';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\n\ntype ChartEmptyState = {\n  title: string;\n  body: string;\n  noData?: boolean;\n  noTopics?: boolean;\n};\n\nexport const ChartEmptyState = ({ title, body, noData, noTopics }: ChartEmptyState) => {\n  const getIcon = () => {\n    if (noData) {\n      return TachometerAltIcon;\n    } else if (noTopics) {\n      return WrenchIcon;\n    }\n  };\n\n  return (\n    <EmptyState variant={EmptyStateVariant.xs}>\n      <EmptyStateIcon icon={getIcon()} />\n      <Title headingLevel=\"h3\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>\n        {body}\n        <br />\n        <br />\n        {noTopics && <Button variant=\"primary\">Create Topic</Button>}\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import byteSize from 'byte-size';\n\nexport const getLargestByteSize = (data1, data2) => {\n  let currentByteSize = \"B\";\n  data1.data.map(datum => {\n    datum.bytes.forEach(value => {\n      const byteString = byteSize(value).unit;\n      if(byteString === \"kB\") {\n        if (currentByteSize === \"B\") {\n          currentByteSize = \"kB\";\n        }\n      }\n      if(byteString === \"MB\") {\n        if (currentByteSize === 'B' || currentByteSize === 'kB') {\n          currentByteSize = \"MB\";\n        }\n      }\n      if(byteString === \"GB\") {\n        if (currentByteSize === 'B' || currentByteSize === 'kB' || currentByteSize === 'MB') {\n          currentByteSize = \"GB\";\n        }\n      }\n    })\n  })\n  data2.data.map(datum => {\n    datum.bytes.forEach(value => {\n      const byteString = byteSize(value).unit;\n      if(byteString === \"kB\") {\n        if (currentByteSize === \"B\") {\n          currentByteSize = \"kB\";\n        }\n      }\n      if(byteString === \"MB\") {\n        if (currentByteSize === 'B' || currentByteSize === 'kB') {\n          currentByteSize = \"MB\";\n        }\n      }\n      if(byteString === \"GB\") {\n        if (currentByteSize === 'B' || currentByteSize === 'kB' || currentByteSize === 'MB') {\n          currentByteSize = \"GB\";\n        }\n      }\n    })\n  })\n  return currentByteSize;\n}\n\nexport const convertToSpecifiedByte = (bytes, largestByteSize) => {\n  if(largestByteSize === 'B') {\n    return Math.round(bytes * 10) / 10\n  }\n  if(largestByteSize === 'kB') {\n    return Math.round(bytes / 1024 * 10) / 10\n  }\n  if(largestByteSize === 'MB') {\n    return Math.round(bytes / 1024 / 1024 * 10) / 10\n  }\n  if(largestByteSize === 'GB') {\n    return Math.round(bytes / 1024 / 1024 / 1024 * 10) / 10\n  }\n}\n\nexport const getMaxValueOfArray = (data) => {\n  const max = data.reduce(function(prev, current) {\n    return (prev.bytes > current.bytes) ? prev : current\n  })\n  return max.bytes;\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  CardTitle,\n  Divider,\n  Level,\n  LevelItem,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport { SyncIcon } from '@patternfly/react-icons';\n\ntype ChartToolbarProps = {\n  title: string;\n  showTopicFilter: boolean;\n  setTimeInterval: (value: number) => void;\n  showTopicToolbar?: boolean;\n  showKafkaToolbar?: boolean;\n};\nexport const ChartToolbar = ({\n  title,\n  showTopicFilter,\n  setTimeInterval,\n  showKafkaToolbar = true,\n  showTopicToolbar = true,\n}: ChartToolbarProps) => {\n  const [selectedTime, setSelectedTime] = useState<boolean>(false);\n  const [isTimeSelectOpen, setIsTimeSelectOpen] = useState<boolean>(false);\n  const [selectedTopic, setSelectedTopic] = useState<boolean>(false);\n  const [isTopicSelectOpen, setIsTopicSelectOpen] = useState<boolean>(false);\n\n  const onTimeToggle = (isTimeSelectOpen) => {\n    setIsTimeSelectOpen(isTimeSelectOpen);\n  };\n\n  const onTimeSelect = (_, selection) => {\n    setTimeInterval(formatTime(selection));\n    setSelectedTime(selection);\n    setIsTimeSelectOpen(false);\n  };\n\n  const formatTime = (selection: string) => {\n    let timeInterval = 1;\n    switch (selection) {\n      case 'Last 1 hour':\n        timeInterval = 1;\n        break;\n      case 'Last 2 hour':\n        timeInterval = 2;\n        break;\n      case 'Last 4 hour':\n        timeInterval = 4;\n        break;\n      case 'Last 6 hour':\n        timeInterval = 6;\n        break;\n      case 'Last 12 hour':\n        timeInterval = 12;\n        break;\n      case 'Last 24 hour':\n        timeInterval = 24;\n        break;\n      case 'Last 2 days':\n        timeInterval = 2 * 24;\n        break;\n      case 'Last 3 days':\n        timeInterval = 3 * 24;\n        break;\n      case 'Last 4 days':\n        timeInterval = 4 * 24;\n        break;\n      case 'Last 5 days':\n        timeInterval = 5 * 24;\n        break;\n      case 'Last 6 days':\n        timeInterval = 6 * 24;\n        break;\n      case 'Last 7 days':\n        timeInterval = 7 * 24;\n        break;\n    }\n    return timeInterval;\n  };\n\n  const onTopicToggle = (isTopicSelectOpen) => {\n    setIsTopicSelectOpen(isTopicSelectOpen);\n  };\n\n  const onTopicSelect = (_, selection) => {\n    setSelectedTopic(selection);\n    setIsTopicSelectOpen(false);\n  };\n\n  const filterByTime = (disableToolbar: boolean) => {\n    return (\n      <ToolbarItem>\n        <Select\n          variant={SelectVariant.single}\n          aria-label=\"Select Input\"\n          onToggle={onTimeToggle}\n          onSelect={onTimeSelect}\n          selections={selectedTime}\n          isOpen={isTimeSelectOpen}\n          isDisabled={disableToolbar}\n        >\n          <SelectOption key={0} value=\"Last 1 hour\" isPlaceholder />\n          <SelectOption key={1} value=\"Last 2 hour\" />\n          <SelectOption key={2} value=\"Last 4 hour\" />\n          <SelectOption key={3} value=\"Last 6 hour\" />\n          <SelectOption key={4} value=\"Last 12 hour\" />\n          <SelectOption key={5} value=\"Last 24 hour\" />\n          <SelectOption key={6} value=\"Last 2 days\" />\n          <SelectOption key={7} value=\"Last 3 days\" />\n          <SelectOption key={8} value=\"Last 4 days\" />\n          <SelectOption key={9} value=\"Last 5 days\" />\n          <SelectOption key={10} value=\"Last 6 days\" />\n          <SelectOption key={11} value=\"Last 7 days\" />\n        </Select>\n      </ToolbarItem>\n    );\n  };\n\n  const onTopicFilter = (_, textInput) => {\n    return topicOptions;\n  };\n\n  const topicOptions = [\n    <SelectGroup label=\"Filter by topic\" key=\"group1\">\n      <SelectOption key={0} value=\"topic-1\" />\n      <SelectOption key={1} value=\"topic-2\" />\n    </SelectGroup>,\n  ];\n\n  const filterByTopic = (disableToolbar: boolean) => {\n    return (\n      <ToolbarItem>\n        <Select\n          variant={SelectVariant.single}\n          onToggle={onTopicToggle}\n          onSelect={onTopicSelect}\n          selections={selectedTopic}\n          isOpen={isTopicSelectOpen}\n          placeholderText=\"All Topics\"\n          aria-labelledby={'titleId'}\n          onFilter={onTopicFilter}\n          isGrouped\n          hasInlineFilter\n          isDisabled={disableToolbar}\n        >\n          {topicOptions}\n        </Select>\n      </ToolbarItem>\n    );\n  };\n\n  return (\n    <>\n      <Level>\n        <LevelItem>\n          <CardTitle component=\"h2\">{title}</CardTitle>\n        </LevelItem>\n        <LevelItem>\n          {showTopicFilter ? (\n            <Toolbar>\n              <ToolbarContent>\n                {filterByTopic(!showTopicToolbar)}\n                {filterByTime(!showTopicToolbar)}\n                <Button variant=\"plain\" aria-label=\"sync\">\n                  <SyncIcon />\n                </Button>\n              </ToolbarContent>\n            </Toolbar>\n          ) : (\n            <Toolbar>\n              <ToolbarContent>\n                {filterByTime(!showKafkaToolbar)}\n                <Button variant=\"plain\" aria-label=\"sync\">\n                  <SyncIcon />\n                </Button>\n              </ToolbarContent>\n            </Toolbar>\n          )}\n        </LevelItem>\n      </Level>\n      <Divider />\n    </>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport { isServiceApiError } from '@app/utils';\nimport { AlertVariant, Bullseye, Card, CardTitle, CardBody, Spinner } from '@patternfly/react-core';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport chart_color_black_500 from '@patternfly/react-tokens/dist/js/chart_color_black_500';\nimport { format } from 'date-fns';\nimport { ChartEmptyState } from './ChartEmptyState';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { convertToSpecifiedByte } from './utils';\nimport { ChartToolbar } from './ChartToolbar';\n\ntype Broker = {\n  name: string;\n  data: {\n    timestamp: number;\n    usedSpaceAvg: number[];\n  }[];\n};\n\ntype ChartData = {\n  areaColor: string;\n  softLimitColor: string;\n  area: BrokerChartData[];\n  softLimit: BrokerChartData[];\n};\n\ntype BrokerChartData = {\n  name: string;\n  x: string;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: any;\n};\n\ntype KafkaInstanceProps = {\n  kafkaID: string;\n  metricsDataUnavailable: boolean;\n  setMetricsDataUnavailable: (value: boolean) => void;\n};\n\nexport const UsedDiskSpaceChart: React.FC<KafkaInstanceProps> = ({\n  kafkaID,\n  metricsDataUnavailable,\n  setMetricsDataUnavailable,\n}: KafkaInstanceProps) => {\n  const containerRef = useRef();\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert();\n  const [width, setWidth] = useState();\n  const [legend, setLegend] = useState();\n  const [chartData, setChartData] = useState<ChartData[]>();\n  const [chartDataLoading, setChartDataLoading] = useState(true);\n  const [largestByteSize, setLargestByteSize] = useState();\n  const [timeInterval, setTimeInterval] = useState(1);\n  const usageLimit = 60; // Replace with limit from API\n\n  const handleResize = () => containerRef.current && setWidth(containerRef.current.clientWidth);\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  const fetchUsedDiskSpaceMetrics = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        if (!kafkaID) {\n          return;\n        }\n        const data = await apisService.getMetricsByRangeQuery(kafkaID, timeInterval * 60, 5 * 60, [\n          'kubelet_volume_stats_used_bytes',\n        ]);\n\n        const avgBroker = {\n          name: `Used disk space`,\n          data: [],\n        } as Broker;\n\n        if (data.data.items) {\n          setMetricsDataUnavailable(false);\n          data.data.items?.forEach((item, index) => {\n            const labels = item.metric;\n\n            if (labels === undefined) {\n              throw new Error('item.metric cannot be undefined');\n            }\n            if (item.values === undefined) {\n              throw new Error('item.values cannot be undefined');\n            }\n            if (labels['__name__'] === 'kubelet_volume_stats_used_bytes') {\n              const pvcName = labels['persistentvolumeclaim'];\n\n              if (!pvcName.includes('zookeeper')) {\n                item.values?.forEach((value, indexJ) => {\n                  if (value.timestamp == undefined) {\n                    throw new Error('timestamp cannot be undefined');\n                  }\n\n                  if (index > 0) {\n                    const newArray = avgBroker.data[indexJ].usedSpaceAvg.concat(value.value);\n                    avgBroker.data[indexJ].usedSpaceAvg = newArray;\n                  } else {\n                    avgBroker.data.push({\n                      timestamp: value.timestamp,\n                      usedSpaceAvg: [value.value],\n                    });\n                  }\n                });\n              }\n            }\n\n            getChartData(avgBroker);\n          });\n        } else {\n          setMetricsDataUnavailable(true);\n          setChartDataLoading(false);\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchUsedDiskSpaceMetrics();\n    handleResize();\n  }, [timeInterval]);\n\n  useTimeout(() => fetchUsedDiskSpaceMetrics(), 1000 * 60 * 5);\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, [width]);\n\n  const getChartData = (avgBroker) => {\n    const legendData: Array<LegendData> = [\n      { name: 'Limit', symbol: { fill: chart_color_black_500.value, type: 'threshold' } },\n      { name: avgBroker.name, symbol: { fill: chart_color_blue_300.value } },\n    ];\n\n    const areaColor = chart_color_blue_300.value;\n    const softLimitColor = chart_color_black_500.value;\n    const chartData: Array<ChartData> = [];\n    const area: Array<BrokerChartData> = [];\n    const softLimit: Array<BrokerChartData> = [];\n    const largestByteSize = 'GB'; // Hard code GB as the largest byte size because there will always be a 20 GB limit.\n\n    const getCurrentLengthOfData = () => {\n      const timestampDiff = avgBroker.data[avgBroker.data.length - 1].timestamp - avgBroker.data[0].timestamp;\n      const minutes = timestampDiff / 1000 / 60;\n      return minutes;\n    };\n\n    const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n    const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n    if (lengthOfData <= 360) {\n      for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n        const newTimestamp = avgBroker.data[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n        const date = new Date(newTimestamp);\n        const time = format(date, 'hh:mm');\n        area.push({ name: avgBroker.name, x: time, y: 0 });\n        softLimit.push({ name: 'Limit', x: time, y: usageLimit });\n      }\n    }\n\n    const average = (nums) => {\n      return nums.reduce((a, b) => a + b) / nums.length;\n    };\n\n    avgBroker.data.map((value) => {\n      const date = new Date(value.timestamp);\n      const time = format(date, 'hh:mm');\n      const aggregateBytes = value.usedSpaceAvg.reduce(function (a, b) {\n        return a + b;\n      }, 0);\n\n      const bytes = convertToSpecifiedByte(aggregateBytes, largestByteSize);\n      area.push({ name: avgBroker.name, x: time, y: bytes });\n      softLimit.push({ name: 'Limit', x: time, y: usageLimit });\n    });\n    chartData.push({ areaColor, softLimitColor, area, softLimit });\n\n    setLegend(legendData);\n    setChartData(chartData);\n    setLargestByteSize(largestByteSize);\n    setChartDataLoading(false);\n  };\n\n  return (\n    <Card>\n      <ChartToolbar\n        showTopicFilter={false}\n        title={t('metrics.kafka_instance_metrics')}\n        setTimeInterval={setTimeInterval}\n        showKafkaToolbar={!metricsDataUnavailable}\n      />\n      <CardTitle component=\"h2\">{t('metrics.used_disk_space')}</CardTitle>\n      <CardBody>\n        <div ref={containerRef}>\n          {!chartDataLoading ? (\n            !metricsDataUnavailable ? (\n              chartData &&\n              legend &&\n              largestByteSize && (\n                <Chart\n                  ariaDesc={t('metrics.used_disk_space')}\n                  ariaTitle=\"Disk Space\"\n                  containerComponent={\n                    <ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />\n                  }\n                  legendPosition=\"bottom-left\"\n                  legendComponent={<ChartLegend orientation={'horizontal'} data={legend} itemsPerRow={itemsPerRow} />}\n                  height={350}\n                  padding={{\n                    bottom: 110, // Adjusted to accomodate legend\n                    left: 90,\n                    right: 60,\n                    top: 25,\n                  }}\n                  themeColor={ChartThemeColor.multiUnordered}\n                  width={width}\n                  minDomain={{ y: 0 }}\n                  legendAllowWrap={true}\n                >\n                  <ChartAxis label={'Time'} tickCount={6} />\n                  <ChartAxis dependentAxis tickFormat={(t) => `${Math.round(t)} ${largestByteSize}`} tickCount={4} />\n                  <ChartGroup>\n                    {chartData.map((value, index) => (\n                      <ChartArea\n                        key={`chart-area-${index}`}\n                        data={value.area}\n                        interpolation=\"monotoneX\"\n                        style={{\n                          data: {\n                            stroke: value.color,\n                          },\n                        }}\n                      />\n                    ))}\n                  </ChartGroup>\n                  <ChartThreshold\n                    key={`chart-softlimit`}\n                    data={chartData[0].softLimit}\n                    style={{\n                      data: {\n                        stroke: chartData[0].softLimitColor,\n                      },\n                    }}\n                  />\n                </Chart>\n              )\n            ) : (\n              <ChartEmptyState\n                title={t('metrics.empty_state_no_data_title')}\n                body={t('metrics.empty_state_no_data_body')}\n                noData\n              />\n            )\n          ) : (\n            <Bullseye>\n              <Spinner isSVG />\n            </Bullseye>\n          )}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { Chart, ChartAxis, ChartGroup, ChartLine, ChartThemeColor, ChartLegendTooltip, ChartVoronoiContainer, createContainer } from '@patternfly/react-charts';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { format } from 'date-fns';\n\nexport type Topic = {\n  name: string\n\n  data: {\n    timestamp: number\n    count: number\n  }[]\n}\n\nexport type MessagesChartProps = {\n  topics: Topic[]\n}\n\nexport class MessagesChart extends React.Component<MessagesChartProps> {\n  render() {\n    // Note: Container order is important\n    const CursorVoronoiContainer = createContainer(\"voronoi\", \"cursor\");\n\n    const legendData = [] as any[];\n    const chartData = [] as any[];\n\n    this.props.topics.forEach(topic => {\n      legendData.push({name: topic.name});\n\n      const messages = topic.data.map(value => {\n        const date = new Date(value.timestamp);\n        const time = format(date, 'hh:mm');\n        return {\n          x: time,\n          y: value.count,\n          name: topic.name\n        }\n      });\n      chartData.push(messages);\n    });\n\n    console.log(this.props.topics);\n\n    return (\n      <div style={{ height: '300x', width: '450px' }}>\n        <Chart\n          ariaDesc=\"Messages in to a topic\"\n          ariaTitle=\"Messages in\"\n          containerComponent={\n            <CursorVoronoiContainer\n              cursorDimension=\"x\"\n              labels={({ datum }) => `${datum.y}`}\n              labelComponent={<ChartLegendTooltip legendData={legendData} title={(datum) => datum.x}/>}\n              mouseFollowTooltips\n              voronoiDimension=\"x\"\n              voronoiPadding={50}\n            />\n          }\n          legendData={legendData}\n          legendPosition=\"bottom\"\n          height={300}\n          maxDomain={{y: 10}}\n          minDomain={{y: 0}}\n          padding={{\n            bottom: 100, // Adjusted to accommodate legend\n            left: 70,\n            right: 50,\n            top: 50\n          }}\n          themeColor={ChartThemeColor.green}\n          width={450}\n        >\n          <ChartAxis label='time' tickCount={6} />\n          <ChartAxis dependentAxis showGrid label={'messages'} />\n          <ChartGroup>\n            {chartData.map((value, index) => (\n              <ChartLine data={value} key={`chart-messages-${index}`}/>\n            ))}\n          </ChartGroup>\n        </Chart>\n      </div>\n    );\n  }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport { isServiceApiError } from '@app/utils';\nimport { AlertVariant, Divider } from '@patternfly/react-core';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport chart_color_orange_300 from '@patternfly/react-tokens/dist/js/chart_color_orange_300';\nimport { format } from 'date-fns';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { getLargestByteSize, convertToSpecifiedByte } from './utils';\nimport { Bullseye, Card, CardTitle, CardBody, Spinner } from '@patternfly/react-core';\nimport {\n  Chart,\n  ChartLine,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport { ChartEmptyState } from './ChartEmptyState';\nimport { ChartToolbar } from './ChartToolbar';\nimport { LogSizePerPartitionChart } from '.';\n\ntype Topic = {\n  name: string;\n  data: {\n    timestamp: number;\n    bytes: number[];\n  }[];\n};\n\ntype ChartData = {\n  color: string;\n  line: TopicChartData[];\n};\n\ntype TopicChartData = {\n  name: string;\n  x: string;\n  y: number;\n};\n\ntype LegendData = {\n  name: string;\n  symbol: any;\n};\n\ntype KafkaInstanceProps = {\n  kafkaID: string;\n  metricsDataUnavailable: boolean;\n  setMetricsDataUnavailable: (value: boolean) => void;\n};\n\nexport const IncomingOutgoingBytesPerTopic: React.FC<KafkaInstanceProps> = ({\n  kafkaID,\n  metricsDataUnavailable,\n  setMetricsDataUnavailable,\n}: KafkaInstanceProps) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert();\n  const containerRef = useRef();\n  const [width, setWidth] = useState();\n  const [timeInterval, setTimeInterval] = useState(1);\n\n  const handleResize = () => containerRef.current && setWidth(containerRef.current.clientWidth);\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  useEffect(() => {\n    handleResize();\n  }, []);\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, [width]);\n\n  const [chartData, setChartData] = useState<ChartData[]>();\n  const [legend, setLegend] = useState<LegendData[]>();\n  const [largestByteSize, setLargestByteSize] = useState();\n  const [noTopics, setNoTopics] = useState<boolean>();\n  const [chartDataLoading, setChartDataLoading] = useState(true);\n\n  const fetchBytesData = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        if (!kafkaID) {\n          return;\n        }\n        const data = await apisService.getMetricsByRangeQuery(kafkaID, timeInterval * 60, 5 * 60, [\n          'kafka_server_brokertopicmetrics_bytes_in_total',\n          'kafka_server_brokertopicmetrics_bytes_out_total',\n        ]);\n\n        const incomingTopics = {\n          name: 'Total incoming bytes',\n          data: [],\n        } as Topic;\n\n        const outgoingTopics = {\n          name: 'Total outgoing bytes',\n          data: [],\n        } as Topic;\n\n        if (data.data.items) {\n          setMetricsDataUnavailable(false);\n\n          let incomingCount = 0;\n          let outgoingCount = 0;\n\n          data.data.items?.forEach((item, index) => {\n            const labels = item.metric;\n            if (labels === undefined) {\n              throw new Error('item.metric cannot be undefined');\n            }\n            if (item.values === undefined) {\n              throw new Error('item.values cannot be undefined');\n            }\n\n            console.log('what is label here' + labels['topic']);\n\n            if (labels['topic'] !== '__strimzi_canary' && labels['topic'] !== '__consumer_offsets') {\n              if (labels['__name__'] === 'kafka_server_brokertopicmetrics_bytes_in_total') {\n                item.values?.forEach((value, indexJ) => {\n                  if (value.timestamp == undefined) {\n                    throw new Error('timestamp cannot be undefined');\n                  }\n                  if (incomingCount > 0) {\n                    const newArray = incomingTopics.data[indexJ].bytes.concat(value.value);\n                    incomingTopics.data[indexJ].bytes = newArray;\n                  } else {\n                    incomingTopics.data.push({\n                      timestamp: value.timestamp,\n                      bytes: [value.value],\n                    });\n                  }\n                });\n                incomingCount++;\n              }\n              if (labels['__name__'] === 'kafka_server_brokertopicmetrics_bytes_out_total') {\n                item.values?.forEach((value, indexJ) => {\n                  if (value.timestamp == undefined) {\n                    throw new Error('timestamp cannot be undefined');\n                  }\n                  if (outgoingCount > 0) {\n                    const newArray = outgoingTopics.data[indexJ].bytes.concat(value.value);\n                    outgoingTopics.data[indexJ].bytes = newArray;\n                  } else {\n                    outgoingTopics.data.push({\n                      timestamp: value.timestamp,\n                      bytes: [value.value],\n                    });\n                  }\n                });\n                outgoingCount++;\n              }\n            }\n          });\n\n          if (incomingTopics.data.length < 1 && outgoingTopics.data.length < 1) {\n            setNoTopics(true);\n            setChartDataLoading(false);\n          } else {\n            getChartData(incomingTopics, outgoingTopics);\n          }\n        } else {\n          setMetricsDataUnavailable(true);\n          setChartDataLoading(false);\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchBytesData();\n  }, [timeInterval]);\n\n  useTimeout(() => fetchBytesData(), 1000 * 60 * 5);\n\n  const getChartData = (incomingTopicArray, outgoingTopicArray) => {\n    const legendData: Array<LegendData> = [];\n    const chartData: Array<ChartData> = [];\n    const largestByteSize = getLargestByteSize(incomingTopicArray, outgoingTopicArray);\n\n    // Aggregate of Incoming Bytes per Topic\n    if (incomingTopicArray) {\n      const line: Array<TopicChartData> = [];\n      const color = chart_color_blue_300.value;\n\n      const getCurrentLengthOfData = () => {\n        const timestampDiff =\n          incomingTopicArray.data[incomingTopicArray.data.length - 1].timestamp - incomingTopicArray.data[0].timestamp;\n        const minutes = timestampDiff / 1000 / 60;\n        return minutes;\n      };\n      const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n      const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n      if (lengthOfData <= 360) {\n        for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n          const newTimestamp = incomingTopicArray.data[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n          const date = new Date(newTimestamp);\n          const time = format(date, 'hh:mm');\n          line.push({ name: incomingTopicArray.name, x: time, y: 0 });\n        }\n      }\n\n      incomingTopicArray.data.map((value) => {\n        const date = new Date(value.timestamp);\n        const time = format(date, 'hh:mm');\n        const aggregateBytes = value.bytes.reduce(function (a, b) {\n          return a + b;\n        }, 0);\n        const bytes = convertToSpecifiedByte(aggregateBytes, largestByteSize);\n        line.push({ name: incomingTopicArray.name, x: time, y: bytes });\n      });\n\n      chartData.push({ color, line });\n\n      legendData.push({\n        name: incomingTopicArray.name,\n        symbol: {\n          fill: chart_color_blue_300.value,\n        },\n      });\n    }\n\n    // Aggregate of Outgoing Bytes per Topic\n    if (outgoingTopicArray) {\n      const line: Array<TopicChartData> = [];\n      const color = chart_color_orange_300.value;\n\n      const getCurrentLengthOfData = () => {\n        const timestampDiff =\n          outgoingTopicArray.data[outgoingTopicArray.data.length - 1].timestamp - outgoingTopicArray.data[0].timestamp;\n        const minutes = timestampDiff / 1000 / 60;\n        return minutes;\n      };\n      const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n      const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n      if (lengthOfData <= 360) {\n        for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n          const newTimestamp = outgoingTopicArray.data[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n          const date = new Date(newTimestamp);\n          const time = format(date, 'hh:mm');\n          line.push({ name: outgoingTopicArray.name, x: time, y: 0 });\n        }\n      }\n\n      outgoingTopicArray.data.map((value) => {\n        const date = new Date(value.timestamp);\n        const time = format(date, 'hh:mm');\n        const aggregateBytes = value.bytes.reduce(function (a, b) {\n          return a + b;\n        }, 0);\n        const bytes = convertToSpecifiedByte(aggregateBytes, largestByteSize);\n        line.push({ name: outgoingTopicArray.name, x: time, y: bytes });\n      });\n      chartData.push({ color, line });\n      legendData.push({\n        name: outgoingTopicArray.name,\n        symbol: {\n          fill: chart_color_orange_300.value,\n        },\n      });\n    }\n    setLegend(legendData);\n    setChartData(chartData);\n    setLargestByteSize(largestByteSize);\n    setChartDataLoading(false);\n  };\n\n  return (\n    <Card>\n      <ChartToolbar\n        showTopicFilter={true}\n        title={t('metrics.topic_metrics')}\n        setTimeInterval={setTimeInterval}\n        showTopicToolbar={!noTopics && !metricsDataUnavailable}\n      />\n      <CardTitle component=\"h2\">{t('metrics.total_bytes')}</CardTitle>\n      <CardBody>\n        <div ref={containerRef}>\n          <div>\n            {!chartDataLoading ? (\n              !metricsDataUnavailable ? (\n                !noTopics ? (\n                  chartData &&\n                  legend &&\n                  largestByteSize && (\n                    <>\n                      <Chart\n                        ariaDesc={t('metrics.total_bytes')}\n                        ariaTitle=\"Total Bytes\"\n                        containerComponent={\n                          <ChartVoronoiContainer\n                            labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                            constrainToVisibleArea\n                          />\n                        }\n                        legendAllowWrap={true}\n                        legendPosition=\"bottom-left\"\n                        legendComponent={<ChartLegend data={legend} itemsPerRow={itemsPerRow} />}\n                        height={300}\n                        padding={{\n                          bottom: 110,\n                          left: 90,\n                          right: 30,\n                          top: 25,\n                        }}\n                        themeColor={ChartThemeColor.multiUnordered}\n                        width={width}\n                      >\n                        <ChartAxis label={'Time'} tickCount={6} />\n                        <ChartAxis\n                          dependentAxis\n                          tickFormat={(t) => `${Math.round(t)} ${largestByteSize}`}\n                          tickCount={4}\n                          minDomain={{ y: 0 }}\n                        />\n                        <ChartGroup>\n                          {chartData.map((value, index) => (\n                            <ChartLine\n                              key={`chart-line-${index}`}\n                              data={value.line}\n                              style={{\n                                data: {\n                                  stroke: value.color,\n                                },\n                              }}\n                            />\n                          ))}\n                        </ChartGroup>\n                      </Chart>\n\n                      <Divider />\n                      <LogSizePerPartitionChart kafkaID={kafkaID} />\n                    </>\n                  )\n                ) : (\n                  <ChartEmptyState\n                    title={t('metrics.empty_state_no_topics_title')}\n                    body={t('metrics.empty_state_no_topics_body')}\n                    noTopics\n                  />\n                )\n              ) : (\n                <ChartEmptyState\n                  title={t('metrics.empty_state_no_data_title')}\n                  body={t('metrics.empty_state_no_data_body')}\n                  noData\n                />\n              )\n            ) : (\n              <Bullseye>\n                <Spinner isSVG />\n              </Bullseye>\n            )}\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport { isServiceApiError } from '@app/utils';\nimport { AlertVariant, Bullseye, Card, CardTitle, CardBody, Spinner } from '@patternfly/react-core';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/js/chart_color_blue_300';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/js/chart_color_green_300';\nimport { format } from 'date-fns';\nimport byteSize from 'byte-size';\nimport { ChartEmptyState } from './ChartEmptyState';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { getLargestByteSize, convertToSpecifiedByte } from './utils';\n\nexport type Partition = {\n  name: string;\n  data: {\n    timestamp: number;\n    bytes: number;\n    name: string;\n  }[];\n};\n\nexport type ChartData = {\n  color: string;\n  area: PartitionChartData[];\n};\n\nexport type PartitionChartData = {\n  name: string;\n  x: string;\n  y: number;\n};\n\nexport type LegendData = {\n  name: string;\n};\n\nexport type KafkaInstanceProps = {\n  kafkaID: string;\n};\n\nexport const LogSizePerPartitionChart: React.FC<KafkaInstanceProps> = ({ kafkaID }: KafkaInstanceProps) => {\n  const containerRef = useRef();\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert();\n  const [width, setWidth] = useState();\n  const [legend, setLegend] = useState();\n  const [chartData, setChartData] = useState<ChartData[]>();\n  const [largestByteSize, setLargestByteSize] = useState();\n  const [metricsDataUnavailable, setMetricsDataUnavailable] = useState(false);\n  const [chartDataLoading, setChartDataLoading] = useState(true);\n  const [noTopics, setNoTopics] = useState();\n\n  const colors = [chart_color_green_300.value, chart_color_blue_300.value];\n\n  const handleResize = () => containerRef.current && setWidth(containerRef.current.clientWidth);\n  const itemsPerRow = width && width > 650 ? 6 : 3;\n\n  // Functions\n  const fetchLogSizePerPartition = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        if (!kafkaID) {\n          return;\n        }\n        const data = await apisService.getMetricsByRangeQuery(kafkaID, 6 * 60, 5 * 60, ['kafka_log_log_size']);\n\n        console.log('what is data log size per partition' + JSON.stringify(data));\n\n        const partitionArray: Partition[] = [];\n\n        if (data.data.items) {\n          setMetricsDataUnavailable(false);\n          data.data.items?.forEach((item, i) => {\n            const topicName = item?.metric?.topic;\n\n            const topic = {\n              name: topicName,\n              data: [],\n            } as Partition;\n\n            const isTopicInArray = partitionArray.some((topic) => topic.name === topicName);\n\n            item.values?.forEach((value) => {\n              if (value.timestamp == undefined) {\n                throw new Error('timestamp cannot be undefined');\n              }\n\n              if (isTopicInArray) {\n                partitionArray.map((topic: Partition) => {\n                  if (topic.name === topicName) {\n                    topic.data.forEach((datum) => {\n                      datum.bytes = datum.bytes + value.value;\n                    });\n                  }\n                });\n              } else {\n                topic.data.push({\n                  name: topicName,\n                  timestamp: value.timestamp,\n                  bytes: value.value,\n                });\n              }\n            });\n\n            if (!isTopicInArray) {\n              partitionArray.push(topic);\n            }\n          });\n          // Check if atleast one topic exists that isn't Strimzi Canary or Consumer Offsets - Keep this here for testing purposes\n          const filteredTopics = partitionArray.filter(\n            (topic) => topic.name !== '__strimzi_canary' && topic.name !== '__consumer_offsets'\n          );\n          console.log('what is filteredTopics for logsize' + filteredTopics);\n          if (filteredTopics.length < 1) {\n            setNoTopics(true);\n          }\n          getChartData(filteredTopics);\n        } else {\n          setMetricsDataUnavailable(true);\n          setChartDataLoading(false);\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchLogSizePerPartition();\n    handleResize();\n  }, []);\n\n  useTimeout(() => fetchLogSizePerPartition(), 1000 * 60 * 5);\n\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n  }, [width]);\n\n  const getChartData = (partitionArray) => {\n    console.log('what is partitionArray' + partitionArray);\n\n    const legendData: Array<LegendData> = [];\n    const chartData: Array<ChartData> = [];\n    const largestByteSize = getLargestByteSize(partitionArray);\n    partitionArray.map((partition, index) => {\n      const color = colors[index];\n      legendData.push({\n        name: partition.name,\n      });\n      const area: Array<PartitionChartData> = [];\n\n      const getCurrentLengthOfData = () => {\n        const timestampDiff = partition.data[partition.data.length - 1].timestamp - partition.data[0].timestamp;\n        const minutes = timestampDiff / 1000 / 60;\n        return minutes;\n      };\n      const lengthOfData = 6 * 60 - getCurrentLengthOfData();\n      const lengthOfDataPer5Mins = (6 * 60 - getCurrentLengthOfData()) / 5;\n\n      if (lengthOfData <= 360) {\n        for (let i = 0; i < lengthOfDataPer5Mins; i = i + 1) {\n          const newtimestamp = partition.data[0].timestamp - (lengthOfDataPer5Mins - i) * (5 * 60000);\n          const date = new Date(newtimestamp);\n          const time = format(date, 'hh:mm');\n          area.push({ name: partition.name, x: time, y: 0 });\n        }\n      }\n\n      partition.data.map((value) => {\n        const date = new Date(value.timestamp);\n        const time = format(date, 'hh:mm');\n        const bytes = convertToSpecifiedByte(value.bytes, largestByteSize);\n        area.push({ name: value.name, x: time, y: bytes });\n      });\n      chartData.push({ color, area });\n    });\n    setLegend(legendData);\n    setChartData(chartData);\n    setLargestByteSize(largestByteSize);\n    setChartDataLoading(false);\n  };\n\n  return (\n    <Card>\n      <CardTitle component=\"h2\">{t('metrics.log_size_per_partition')}</CardTitle>\n      <CardBody>\n        <div ref={containerRef}>\n          {!chartDataLoading ? (\n            !metricsDataUnavailable ? (\n              !noTopics ? (\n                chartData &&\n                legend &&\n                byteSize && (\n                  <Chart\n                    ariaDesc={t('metrics.log_size_per_partition')}\n                    ariaTitle=\"Log Size\"\n                    containerComponent={\n                      <ChartVoronoiContainer\n                        labels={({ datum }) => `${datum.name}: ${datum.y}`}\n                        constrainToVisibleArea\n                      />\n                    }\n                    legendPosition=\"bottom-left\"\n                    legendComponent={<ChartLegend data={legend} itemsPerRow={itemsPerRow} />}\n                    height={350}\n                    padding={{\n                      bottom: 110,\n                      left: 90,\n                      right: 30,\n                      top: 25,\n                    }}\n                    themeColor={ChartThemeColor.multiUnordered}\n                    width={width}\n                    legendAllowWrap={true}\n                  >\n                    <ChartAxis label={'Time'} tickCount={6} />\n                    <ChartAxis dependentAxis tickFormat={(t) => `${Math.round(t)} ${largestByteSize}`} />\n                    <ChartGroup>\n                      {chartData.map((value, index) => (\n                        <ChartArea key={`chart-area-${index}`} data={value.area} interpolation=\"monotoneX\" />\n                      ))}\n                    </ChartGroup>\n                  </Chart>\n                )\n              ) : (\n                <ChartEmptyState\n                  title=\"No topics yet\"\n                  body=\"Data will show when topics exist and are in use.\"\n                  noTopics\n                />\n              )\n            ) : (\n              <ChartEmptyState\n                title=\"No data\"\n                body=\"We’re creating your Kafka instance, so some details aren’t yet available.\"\n                noData\n              />\n            )\n          ) : (\n            <Bullseye>\n              <Spinner isSVG />\n            </Bullseye>\n          )}\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n"],"sourceRoot":""}