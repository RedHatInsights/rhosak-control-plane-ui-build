{"version":3,"file":"273.068ac732.js","mappings":"iPAYaA,EAA0C,WAC/C,OAAuB,UAArBC,EAAK,QAAEC,EAAS,YAClBC,GAAQ,gCAAKF,MAAAA,OAAK,EAALA,EAAOG,YAAU,CAAEF,UAAS,IAE/C,OAAO,kBAACG,GAAmB,iBAAKF,KAcrBE,EACX,SAAC,G,IACCC,EAAK,QACLC,EAAkB,qBAClBC,EAAiB,oBACjBC,EAAS,YACTC,EAAc,iBACdC,EAAgB,mBAChBC,EAAO,UACPV,EAAS,YAEDW,GAAM,IAAAC,kBAAgB,EACxBC,EAAuBJ,MAAAA,OAAgB,EAAhBA,EAAkBK,KAEzC,GAA4C,IAAAC,YAA3CC,EAAiB,KAAEC,EAAoB,KAMxCC,EAA0B,WAC9B,OAAIV,IAAmB,aAEnBQ,MAAAA,OAAiB,EAAjBA,EAAmBG,kBACnBN,MAAAA,OAAoB,EAApBA,EAAsBM,gBAsB5B,OACE,kBAAC,KAAW,CACVC,aAAa,EACbhB,MAAOA,EACPC,oBAAkB,eAChBgB,WAAYH,IACZ,cAAe,iCACZb,GAELC,kBAAmBA,EACnBgB,kBAhBiB,WACnBL,EAAqB,IACrBjB,IACAU,GAAWA,KAcTH,UAAWA,EACXE,iBAAkBA,EAClBc,eAAgB,CACdC,cAAehB,IAAmB,WAClCiB,MAAOd,EAAE,sBAAuB,CAAEG,KAAMD,IACxCa,MAAOV,EACPW,SA/CqB,SAACD,GAC1BT,EAAqBS,IA+CjBE,WA/Ba,SAACC,GACA,UAAdA,EAAMC,KAAoBZ,MAC5Bb,MAAAA,OAAkB,EAAlBA,EAAoB0B,UAClB1B,EAAmB0B,QAAQtB,IA6B3BuB,WAAW,MAMrB","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstance.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CancelButtonProps,\n  ConfirmButtonProps,\n  DeleteModal,\n  NestedTextProps,\n  useRootModalContext,\n} from '@app/common';\nimport { InstanceStatus } from '@app/utils';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport const DeleteInstance: React.FunctionComponent = () => {\n  const { store, hideModal } = useRootModalContext();\n  const props = { ...store?.modalProps, hideModal };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport type DeleteInstanceModalProps = {\n  title: string;\n  confirmButtonProps: ConfirmButtonProps<KafkaRequest>;\n  cancelButtonProps: CancelButtonProps;\n  textProps: NestedTextProps;\n  instanceStatus: InstanceStatus;\n  selectedItemData: KafkaRequest;\n  onClose?: () => void;\n  hideModal: () => void;\n};\n\nexport const DeleteInstanceModal: React.FunctionComponent<DeleteInstanceModalProps> =\n  ({\n    title,\n    confirmButtonProps,\n    cancelButtonProps,\n    textProps,\n    instanceStatus,\n    selectedItemData,\n    onClose,\n    hideModal,\n  }) => {\n    const { t } = useTranslation();\n    const selectedInstanceName = selectedItemData?.name;\n\n    const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n    const handleInstanceName = (value: string) => {\n      setInstanceNameInput(value);\n    };\n\n    const isConfirmButtonDisabled = () => {\n      if (instanceStatus === InstanceStatus.READY) {\n        if (\n          instanceNameInput?.toLowerCase() ===\n          selectedInstanceName?.toLowerCase()\n        ) {\n          return false;\n        }\n        return true;\n      }\n      return false;\n    };\n\n    const onKeyPress = (event) => {\n      if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n        confirmButtonProps?.onClick &&\n          confirmButtonProps.onClick(selectedItemData);\n      }\n    };\n\n    const handleToggle = () => {\n      setInstanceNameInput('');\n      hideModal();\n      onClose && onClose();\n    };\n\n    return (\n      <DeleteModal\n        isModalOpen={true}\n        title={title}\n        confirmButtonProps={{\n          isDisabled: isConfirmButtonDisabled(),\n          'data-testid': 'modalDeleteKafka-buttonDelete',\n          ...confirmButtonProps,\n        }}\n        cancelButtonProps={cancelButtonProps}\n        handleModalToggle={handleToggle}\n        textProps={textProps}\n        selectedItemData={selectedItemData}\n        textInputProps={{\n          showTextInput: instanceStatus === InstanceStatus.READY,\n          label: t('instance_name_label', { name: selectedInstanceName }),\n          value: instanceNameInput,\n          onChange: handleInstanceName,\n          onKeyPress,\n          autoFocus: true,\n        }}\n      />\n    );\n  };\n\nexport default DeleteInstance;\n"],"names":["DeleteInstance","store","hideModal","props","modalProps","DeleteInstanceModal","title","confirmButtonProps","cancelButtonProps","textProps","instanceStatus","selectedItemData","onClose","t","useTranslation","selectedInstanceName","name","useState","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","toLowerCase","isModalOpen","isDisabled","handleModalToggle","textInputProps","showTextInput","label","value","onChange","onKeyPress","event","key","onClick","autoFocus"],"sourceRoot":""}