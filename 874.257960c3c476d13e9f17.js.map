{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/constants/constants.ts","webpack://mk-ui-frontend/./src/app/components/EmptyState/EmptyState.tsx","webpack://mk-ui-frontend/./src/openapi/base.ts","webpack://mk-ui-frontend/./src/openapi/api.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/TablePagination.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://mk-ui-frontend/./src/app/models/models.ts","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/Drawer/GenerateCredential.tsx","webpack://mk-ui-frontend/./src/app/Drawer/InstanceDrawer.tsx","webpack://mk-ui-frontend/./src/app/utils/error.ts","webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/hooks/useInterval.ts","webpack://mk-ui-frontend/./src/app/api/ApiContext.tsx","webpack://mk-ui-frontend/./src/app/auth/AuthContext.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://mk-ui-frontend/./src/app/components/Loading/Loading.tsx"],"names":["InstanceStatus","EmptyState","createStreamsInstance","setCreateStreamsInstance","t","useTranslation","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","onClick","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","name","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequest","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","undefined","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","createServiceAccount","deleteKafkaById","id","localVarPath","encodeURIComponent","String","getKafkaById","listKafkas","page","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI","StatusColumn","status","statusDisplayName","ACCEPTED","Flex","FlexItem","spacer","default","toLowerCase","COMPLETED","CheckCircleIcon","className","FAILED","ExclamationCircleIcon","PROVISIONING","Spinner","IconSize","PendingIcon","getStatusIcon","DeleteInstanceModal","confirmActionLabel","cancelActionLabel","title","onConfirm","isModalOpen","setIsModalOpen","description","ModalVariant","titleIconVariant","instanceStatus","selectedInstance","useState","instanceNameInput","setInstanceNameInput","selectedInstanceName","handleModalToggle","Modal","isOpen","showClose","onClose","actions","key","ButtonVariant","isDisabled","toLocaleLowerCase","Text","dangerouslySetInnerHTML","__html","TextContent","TextInput","type","value","onChange","TablePagination","perPage","itemCount","isCompact","history","location","searchParams","URLSearchParams","setSearchParam","useCallback","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","Pagination","StreamsToolbar","filterSelected","namesSelected","setNamesSelected","mainToggle","total","isFilterExpanded","setIsFilterExpanded","inputValue","setInputValue","toggleGroupItems","ToolbarGroup","ToolbarFilter","chips","deleteChip","category","chip","index","findIndex","prevState","Object","assign","splice","deleteChipGroup","categoryName","Select","SelectVariant","onToggle","selections","disabled","map","option","SelectOption","InputGroup","placeholder","input","trim","SearchIcon","Toolbar","collapseListedFiltersBreakpoint","clearAllFilters","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItem","alignment","StreamsTableView","kafkaInstanceItems","onViewInstance","onConnectToInstance","refresh","getToken","useContext","AuthContext","ApiContext","addAlert","isDeleteModalOpen","setIsDeleteModalOpen","setSelectedInstance","tableColumns","setFilterSelected","useEffect","tableRow","getActionResolver","rowData","onDelete","originalData","deleteActionTitle","getDeleteInstanceLabel","onSelectDeleteInstanceKebab","instance","onDeleteInstance","instanceId","apisService","DefaultApi","AlertVariant","console","log","instanceName","config","getDeleteInstanceModalConfig","Card","Table","cells","rows","forEach","row","cloud_provider","region","cloudProviderDisplayName","regionDisplayName","actionResolver","_extraData","TableHeader","TableBody","Divider","widgetId","PaginationVariant","multi_az","CreateInstanceModal","newKafka","NewKafka","cloudRegionsAvailable","label","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","isFormValid","setIsFormValid","getTileIcon","provider","AwsIcon","color","onChangeAvailabilty","zone","isValid","message","res","Form","FormAlert","Alert","isInline","FormGroup","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","Tile","isSelected","FormSelect","FormSelectOption","ToggleGroup","GenerateCredential","isCreated","setIsCreated","setIsOpen","stepNo","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","onMove","curr","prev","handleChangeStep1","checked","event","target","handleChangeStep4","step1","component","TextVariants","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","position","bodyContent","step3","step4","clientID","EmptyStateVariant","KeyIcon","InputGroupText","ClipboardCopy","isReadOnly","Bullseye","Checkbox","steps","nextButtonText","isFinishedStep","Wizard","onNext","onBack","hideClose","InstanceDrawer","activeTab","instanceDetail","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","resourcesTab","sampleCodeTab","CopyIcon","renderTextListItemDetail","TextListItem","TextListItemVariants","created_at","updated_at","owner","detailsTab","Grid","GridItem","span","isFlat","CardBody","TextList","TextListVariants","format","connectionTab","Tabs","activeKey","isSecondary","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","DrawerPanelContent","widths","Loading","DrawerHead","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","OpenshiftStreams","callback","delay","savedCallback","parseInt","get","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","kafkaDataLoaded","setKafkaDataLoaded","setMainToggle","drawerRef","fetchKafkas","kafkaInstances","items","error","response","code","isServiceApiError","reason","useRef","current","setInterval","clearInterval","Drawer","isExpanded","onExpand","focus","DrawerContent","panelContent","PageSection","PageSectionVariants","Level","LevelItem","length","resolve","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton"],"mappings":"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","file":"874.257960c3c476d13e9f17.js","sourcesContent":["  enum InstanceStatus{\n     COMPLETED=\"complete\",\n     ACCEPTED=\"accepted\",\n     PROVISIONING=\"provisioning\",\n     FAILED=\"failed\"\n  }\n\n  export{\n    InstanceStatus\n  }","import React from 'react';\nimport { Title, Button, EmptyState as PFEmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\ntype EmptyStateProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ createStreamsInstance, setCreateStreamsInstance }) => {\n  const { t } = useTranslation();\n  const onCreate = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n  return (\n    <>\n      <PFEmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t(\"You don't have any Streams instances yet\")}\n        </Title>\n        <EmptyStateBody>{t('Create a Streams instance to get started')}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={onCreate}>\n          {t('Create a Streams Instance')}\n        </Button>\n      </PFEmptyState>\n    </>\n  );\n};\n\nexport { EmptyState };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:8000\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface TokenResponse\n */\nexport interface TokenResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface TokenResponseAllOf\n */\nexport interface TokenResponseAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponseAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponseAllOf\n     */\n    clientSecret?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequest: KafkaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequest' is not null or undefined\n            if (kafkaRequest === null || kafkaRequest === undefined) {\n                throw new RequiredError('kafkaRequest','Required parameter kafkaRequest was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequest !== undefined ? kafkaRequest : {}) : (kafkaRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceAccount`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(options?: any): AxiosPromise<TokenResponse> {\n            return DefaultApiFp(configuration).createServiceAccount(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequest} kafkaRequest Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a kafka service account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(options?: any): AxiosPromise<TokenResponse>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequest} kafkaRequest Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a kafka service account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { InstanceStatus } from '@app/constants';\nimport { capitalize } from '@app/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n};\n\nconst StatusColumn = ({ status }: StatusColumnProps) => {\n  const statusDisplayName = status === InstanceStatus.ACCEPTED ? 'pending case' : status;\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case InstanceStatus.COMPLETED:\n        return <CheckCircleIcon className=\"check-circle-icon-color\" />;\n      case InstanceStatus.FAILED:\n        return <ExclamationCircleIcon className=\"exclamation-circle-icon-color\" />;\n      case InstanceStatus.PROVISIONING:\n        return <Spinner size={IconSize.md} />;\n      case InstanceStatus.ACCEPTED:\n        return <PendingIcon />;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>{getStatusIcon()}</FlexItem>\n      <FlexItem>{capitalize(statusDisplayName)}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  TextInput,\n  TextContent,\n  Text,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/constants';\nimport './DeleteInstanceModal.css';\nimport { KafkaRequest } from 'src/openapi';\n\ninterface DeleteInstanceModalProps extends Omit<ModalProps, 'children'> {\n  confirmActionLabel?: string;\n  cancelActionLabel?: string;\n  description?: string;\n  selectedInstance: KafkaRequest;\n  isModalOpen: boolean;\n  instanceStatus: string | undefined;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onConfirm: (instance: KafkaRequest) => Promise<void>;\n}\n\nconst DeleteInstanceModal: FunctionComponent<DeleteInstanceModalProps> = ({\n  confirmActionLabel,\n  cancelActionLabel,\n  title,\n  onConfirm,\n  isModalOpen,\n  setIsModalOpen,\n  description,\n  variant = ModalVariant.small,\n  titleIconVariant = 'warning',\n  instanceStatus,\n  selectedInstance,\n}: DeleteInstanceModalProps) => {\n  const {t}=useTranslation();\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n  \n  const selectedInstanceName = selectedInstance?.name;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.COMPLETED) {\n      if (instanceNameInput?.toLocaleLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n  const onConfirmDelete = () => {\n    onConfirm(selectedInstance);\n  };\n  return (\n    <Modal\n      id=\"dialog-prompt-modal\"\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={t('delete_instance_modal')}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          key={'confirm-button'}\n          variant={ButtonVariant.danger}\n          onClick={onConfirmDelete}\n          isDisabled={isConfirmButtonDisabled()}\n        >\n          {confirmActionLabel || t('confirm')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {cancelActionLabel || t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Text dangerouslySetInnerHTML={{__html:description || ''}} />   \n      {instanceStatus === InstanceStatus.COMPLETED && (\n        <>\n          <TextContent className=\"text-content\">\n            <Text dangerouslySetInnerHTML={{__html:t(\"instance_name_label\",{name:selectedInstanceName})}}/>          \n          </TextContent>\n          <TextInput id=\"instance-name\" type=\"text\" value={instanceNameInput} onChange={handleInstanceName} />\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport { DeleteInstanceModal };\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { Pagination, PaginationProps } from '@patternfly/react-core';\n\nexport const TablePagination: FunctionComponent<PaginationProps> = ({ page, perPage, itemCount, variant, isCompact }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  if (itemCount && itemCount > 0) {\n    return (\n      <Pagination\n        itemCount={itemCount}\n        perPage={perPage}\n        page={page}\n        onSetPage={onSetPage}\n        variant={variant || 'top'}\n        onPerPageSelect={onPerPageSelect}\n        isCompact={isCompact}        \n      />\n    );\n  }\n  return null;\n};\n","import React, { useState } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarToggleGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarFilter,\n  ToolbarChipGroup,\n  ToolbarChip,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { TablePagination } from './TablePagination';\nimport './StreamsToolbarProps.css';\nimport { useTranslation } from 'react-i18next';\n\ntype StreamsToolbarProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  namesSelected: string[];\n  setNamesSelected: (value: string[]) => void;\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  filterSelected,\n  namesSelected,\n  setNamesSelected,\n  mainToggle,\n  total,\n  page,\n  perPage,\n}) => {\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string | undefined>();\n  const { t } = useTranslation();\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  // options for filter dropdown\n  const filterOptions = [{ value: 'Name', disabled: false }];\n\n  const onInputChange = (input?: string) => {\n    setInputValue(input);\n  };\n\n  const onClear = () => {\n    setNamesSelected([]);\n  };\n\n  const onDeleteGroup = (category: string | ToolbarChipGroup) => {\n    if (category.toString().toLowerCase() === 'name') {\n      setNamesSelected([]);\n    }\n  };\n  const onDelete = (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => {\n    if (category.toString().toLowerCase() === 'name') {\n      const index = namesSelected.findIndex((name) => name === chip.toString().toLowerCase());\n      if (index >= 0) {\n        const prevState = Object.assign([], namesSelected);\n        prevState.splice(index, 1);\n        setNamesSelected(prevState);\n      }\n    }\n  };\n\n  const onSearch = () => {\n    if (inputValue && inputValue.trim() !== '') {\n      const index = namesSelected.findIndex((name) => name === inputValue.trim().toLowerCase());\n      if (index < 0) {\n        setNamesSelected([...namesSelected, inputValue.trim()]);\n        setInputValue('');\n      }\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={namesSelected}\n          deleteChip={onDelete}\n          deleteChipGroup={onDeleteGroup}\n          categoryName={t('name')}\n        >\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected && t(filterSelected.toLowerCase())}\n            isOpen={isFilterExpanded}\n          >\n            {filterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={t(option.value.toLowerCase())} />\n            ))}\n          </Select>\n          <InputGroup className=\"filter-text-input\">\n            <TextInput\n              name=\"filter text input\"\n              id=\"filterText\"\n              type=\"search\"\n              aria-label=\"Search filter input\"\n              placeholder={`${t('filter_by')} ${\n                filterSelected?.toLowerCase() && t(`${filterSelected?.toLowerCase()}_lower`)\n              }`}\n              onChange={onInputChange}\n              value={inputValue}\n            />\n            <Button variant={ButtonVariant.control} onClick={onSearch} aria-label=\"Search instances\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  return (\n    <Toolbar id=\"instance-toolbar\" collapseListedFiltersBreakpoint=\"md\" clearAllFilters={onClear}>\n      <ToolbarContent>\n        {mainToggle && (\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n            {toggleGroupItems}\n          </ToolbarToggleGroup>\n        )}\n        <ToolbarItem>\n          <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n            {t('create_streams_instance')}\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <TablePagination itemCount={total} page={page} perPage={perPage} isCompact={true} />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport { StreamsToolbar };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { IAction, IExtraData, IRowData, ISeparator, Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { AlertVariant, Card, Divider, PaginationVariant } from '@patternfly/react-core';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { InstanceStatus } from '@app/constants';\nimport { BASE_PATH } from '../../common/app-config';\nimport { getCloudProviderDisplayName, getCloudRegionDisplayName } from '@app/utils';\nimport { DeleteInstanceModal } from '@app/components/DeleteInstanceModal';\nimport { TablePagination } from './TablePagination';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\n\ntype TableProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onConnectToInstance: (instance: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  page: number;\n  perPage: number;\n  total: number;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceLabel = (t: TFunction, status: string | undefined) => {\n  switch (status) {\n    case InstanceStatus.COMPLETED:\n      return t('delete_instance');\n    case InstanceStatus.FAILED:\n      return t('remove');\n    case InstanceStatus.ACCEPTED:\n    case InstanceStatus.PROVISIONING:\n      return t('stop_instance');\n    default:\n      return;\n  }\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: ''\n  };\n  if (status === InstanceStatus.COMPLETED) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('stop_creating_instance')}?`;\n    config.confirmActionLabel = t('stop_creating_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n                            mainToggle,\n                            kafkaInstanceItems,\n                            onViewInstance,\n                            onConnectToInstance,\n                            refresh,\n                            createStreamsInstance,\n                            setCreateStreamsInstance,\n                            page,\n                            perPage,\n                            total\n                          }: TableProps) => {\n  const { getToken } = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n\n  const { addAlert } = useAlerts();\n\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const tableColumns = [t('name'), t('cloud_provider'), t('region'), t('status')];\n  const [filterSelected, setFilterSelected] = useState('Name');\n  const [namesSelected, setNamesSelected] = useState<string[]>([]);\n\n  useEffect(() => {\n    refresh();\n  }, [page, perPage]);\n\n  const getActionResolver = (rowData: IRowData, onDelete: (data: KafkaRequest) => void) => {\n    const originalData: KafkaRequest = rowData.originalData;\n    const deleteActionTitle = getDeleteInstanceLabel(t, originalData?.status);\n    const resolver: (IAction | ISeparator)[] = mainToggle ? [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        onClick: () => onViewInstance(originalData)\n      }, {\n        title: t('connect_to_instance'),\n        id: 'connect-instance',\n        onClick: () => onConnectToInstance(originalData)\n      },\n      {\n        title: deleteActionTitle,\n        id: 'delete-instance',\n        onClick: () => onDelete(originalData)\n      }\n    ] : [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        onClick: () => onViewInstance(originalData)\n      },\n      {\n        title: deleteActionTitle,\n        id: 'delete-instance',\n        onClick: () => onDelete(originalData)\n      }\n    ];\n    return resolver;\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, status } = row;\n      const cloudProviderDisplayName = getCloudProviderDisplayName(cloud_provider);\n      const regionDisplayName = getCloudRegionDisplayName(region);\n      tableRow.push({\n        cells: [\n          name,\n          cloudProviderDisplayName,\n          regionDisplayName,\n          {\n            title: <StatusColumn status={status} />\n          }\n        ],\n        originalData: row\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, onSelectDeleteInstanceKebab);\n  };\n\n  const onSelectDeleteInstanceKebab = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath\n    });\n\n    try {\n      await apisService.deleteKafkaById(instanceId).then(() => {\n        setIsDeleteModalOpen(false);\n        addAlert(t('kafka_successfully_deleted'), AlertVariant.success);\n        refresh();\n      });\n    } catch (error) {\n      setIsDeleteModalOpen(false);\n      console.log('IS THERE AN ERROR HERE');\n      addAlert(error, AlertVariant.danger);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n  return (\n    <Card>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        createStreamsInstance={createStreamsInstance}\n        setCreateStreamsInstance={setCreateStreamsInstance}\n        filterSelected={filterSelected}\n        namesSelected={namesSelected}\n        setFilterSelected={setFilterSelected}\n        setNamesSelected={setNamesSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n      />\n      <Table\n        cells={tableColumns}\n        rows={preparedTableCells()}\n        aria-label={t('cluster_instance_list')}\n        actionResolver={actionResolver}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <Divider />\n      <TablePagination\n        widgetId=\"pagination-options-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n      />\n      {isDeleteModalOpen && (\n        <DeleteInstanceModal\n          title={title}\n          selectedInstance={selectedInstance}\n          isModalOpen={isDeleteModalOpen}\n          instanceStatus={selectedInstance?.status}\n          setIsModalOpen={setIsDeleteModalOpen}\n          onConfirm={onDeleteInstance}\n          description={description}\n          confirmActionLabel={confirmActionLabel}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport { StreamsTableView };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi } from '../../../openapi';\nimport { cloudProviderOptions, cloudRegionOptions } from '../../utils/utils';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\n\ntype CreateInstanceModalProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  refresh: () => void;\n};\n\nconst CreateInstanceModal: React.FunctionComponent<CreateInstanceModalProps> = ({\n                                                                                  createStreamsInstance,\n                                                                                  setCreateStreamsInstance,\n                                                                                  refresh\n                                                                                }: CreateInstanceModalProps) => {\n  const { t } = useTranslation();\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = 'aws';\n  newKafka.region = 'us-east-1';\n  newKafka.multi_az = true;\n  const cloudRegionsAvailable = [{ value: '', label: 'please_select', disabled: false }, ...cloudRegionOptions];\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const { getToken } = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const { addAlert } = useAlerts();\n\n  const onCreateInstance = async () => {\n    let isValid = true;\n\n    if (kafkaFormData.name === undefined || kafkaFormData.name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n\n    if (kafkaFormData.region === undefined || kafkaFormData.region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n\n    const accessToken = await getToken();\n\n    if (isValid) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath\n        });\n        await apisService.createKafka(true, kafkaFormData).then((res) => {\n          addAlert(t('kafka_successfully_created'), AlertVariant.success);\n          handleModalToggle();\n          refresh();\n        });\n      } catch (error) {\n        addAlert(error, AlertVariant.danger);\n      }\n    } else {\n      setIsFormValid(false);\n    }\n  };\n\n  const handleModalToggle = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n    if (nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: region });\n  };\n\n  const getTileIcon = (provider: string) => {\n    switch (provider.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"cloud-region-icon\" />;\n      default:\n        return;\n    }\n  };\n  const onChangeAvailabilty = (zone: string) => {\n    setKafkaFormData({ ...kafkaFormData, multi_az: zone === 'multi' });\n  };\n  return (\n    <>\n      <Modal\n        variant={ModalVariant.medium}\n        title={t('create_a_streams_instance')}\n        isOpen={createStreamsInstance}\n        onClose={handleModalToggle}\n        actions={[\n          <Button key=\"create\" variant=\"primary\" onClick={onCreateInstance} isDisabled={!isFormValid}>\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('cancel')}\n          </Button>\n        ]}\n      >\n        <Form>\n          {!isFormValid && (\n            <FormAlert>\n              <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n            </FormAlert>\n          )}\n          <FormGroup\n            label={t('instance_name')}\n            helperTextInvalid={nameValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            isRequired\n            validated={nameValidated.fieldState}\n            fieldId=\"form-instance-name\"\n          >\n            <TextInput\n              isRequired\n              validated={nameValidated.fieldState}\n              type=\"text\"\n              id=\"form-instance-name\"\n              name=\"instance-name\"\n              value={kafkaFormData?.name}\n              onChange={handleInstanceNameChange}\n            />\n          </FormGroup>\n          <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n            {cloudProviderOptions.map((provider) => (\n              <Tile\n                key={`tile-${provider.value}`}\n                title={t(provider.label)}\n                icon={getTileIcon(provider.value)}\n                isSelected={kafkaFormData.cloud_provider === provider.value}\n                onClick={() => setKafkaFormData({ ...kafkaFormData, cloud_provider: provider.value })}\n              />\n            ))}\n          </FormGroup>\n          <FormGroup\n            label={t('cloud_region')}\n            helperTextInvalid={cloudRegionValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            validated={cloudRegionValidated.fieldState}\n            fieldId=\"form-cloud-region-option\"\n          >\n            <FormSelect\n              validated={cloudRegionValidated.fieldState}\n              value={kafkaFormData.region}\n              onChange={handleCloudRegionChange}\n              id=\"cloud-region-select\"\n              name=\"cloud-region\"\n              aria-label={t('cloud_region')}\n            >\n              {cloudRegionsAvailable.map((option, index) => (\n                <FormSelectOption key={index} value={option.value} label={t(option.label)} />\n              ))}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n            <ToggleGroup aria-label={t('availability_zone_selection')}>\n              {/*\n                  TODO: Currently using HTML version\n                  Issue: https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/24\n              */}\n              <div className=\"pf-c-toggle-group__item\">\n                <button\n                  className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === false && 'pf-m-selected'}`}\n                  type=\"button\"\n                  id=\"single\"\n                  disabled\n                  onClick={() => {\n                    onChangeAvailabilty('single');\n                  }}\n                >\n                  <span className=\"pf-c-toggle-group__text\"> {t('single')}</span>\n                </button>\n              </div>\n              <div className=\"pf-c-toggle-group__item\">\n                <button\n                  className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === true && 'pf-m-selected'}`}\n                  type=\"button\"\n                  onClick={() => {\n                    onChangeAvailabilty('multi');\n                  }}\n                  id=\"multi\"\n                >\n                  <span className=\"pf-c-toggle-group__text\"> {t('multi')}</span>\n                </button>\n              </div>\n            </ToggleGroup>\n          </FormGroup>\n        </Form>\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useState } from 'react';\nimport {\n  Alert,\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  Divider,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  PageSection,\n  PageSectionVariants,\n  Popover,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\n\nconst GenerateCredential: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClose = () => {\n    setIsOpen(!isOpen);\n    setIsCreated(!isCreated);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={KeyIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('credential_successfully_generated')}\n        </Title>\n        <EmptyStateBody>{t('clientid_empty_state_body')}</EmptyStateBody>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"no-wrap\">{t('client_id')}</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            FSLG934JM98IL\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"no-wrap\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            898VsyDInUfhSd9ng8K/REs9r8h0n8j98s5c4JdeJfUg/E8\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button variant=\"primary\" isDisabled={!confirmationCheckbox} onClick={handleClose}>\n          {t('close')}\n        </Button>\n      </EmptyState>\n    </>\n  );\n\n  const steps: WizardStep[] = [\n    { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n    { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n    { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n    { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') },\n    { id: 5, name: t('finish'), component: clientID, isFinishedStep: true },\n  ];\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      {isCreated ? (\n        <>\n          <FlexItem className=\"pf-m-align-right pf-m-spacer-none\">\n            <Button variant=\"danger\" onClick={handleModalToggle} className=\"pf-u-ml-md pf-u-mb-md\">\n              {t('generate_new_credential')}\n            </Button>\n          </FlexItem>\n          <FlexItem className=\"pf-m-grow\">\n            <Alert variant=\"success\" isInline title={t('credentials_successfully_generated')} />\n          </FlexItem>\n        </>\n      ) : (\n        <FlexItem className=\"pf-m-align-right\">\n          <Button variant=\"secondary\" onClick={handleModalToggle} className=\"pf-u-ml-md\">\n            {t('generate_credential')}\n          </Button>\n        </FlexItem>\n      )}\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={steps}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={handleModalToggle}\n        isOpen={isOpen}\n        hideClose={stepNo === 5}\n      />\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Tabs,\n  Tab,\n  TabTitleText,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport './InstanceDrawer.css';\nimport { GenerateCredential } from './GenerateCredential';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { KafkaRequest } from 'src/openapi';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { useTranslation } from 'react-i18next';\n\nexport type InstanceDrawerProps = {\n  mainToggle: boolean;\n  onClose: () => void;\n  isExpanded: boolean;\n  drawerRef: any;\n  instanceDetail?: KafkaRequest;\n  activeTab?: 'Details' | 'Connection';\n};\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n}) => {\n  const {t} = useTranslation();\n  const [activeTab1Key, setActiveTab1Key] = useState(0);\n  const [activeTab2Key, setActiveTab2Key] = useState(0);\n  useEffect(() => {\n    setActiveTab1Key(activeTab === 'Details' ? 0 : 1);\n  }, [activeTab]);\n\n  const handleTab1Click = (_event, tabIndex) => {\n    setActiveTab1Key(tabIndex);\n  };\n\n  const handleTab2Click = (_event, tabIndex) => {\n    setActiveTab2Key(tabIndex);\n  };\n\n  const resourcesTab = (\n    <>\n      <div className=\"tab-content-body\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.small}>\n            {t('drawer_resource_tab_body_description_1')}\n          </Text>\n          <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_resource_tab_body_description_2')}\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('external_server')}\n          </Text>\n        </TextContent>\n        <Flex>\n          <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n            <ClipboardCopy>strimzi-external-bootstrap-01 : 1234</ClipboardCopy>\n          </FlexItem>\n          <GenerateCredential />\n        </Flex>\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_resource_tab_body_description_3')}\n          </Text>\n        </TextContent>\n        <ClipboardCopy>https : // : 30123</ClipboardCopy>\n      </div>\n    </>\n  );\n\n  const sampleCodeTab = (\n    <>\n      <div className=\"tab-content-body\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n          {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n          <div className=\"pf-c-code-editor__tab\">\n            <span className=\"pf-c-code-editor__tab-text\">Java</span>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n          </div>\n        </div>\n      </div>\n\n      <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n         {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">\n              bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n              sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n            </pre>\n          </div>\n        </div>\n      </div>\n      </div>\n    </>\n  );\n\n  const renderTextListItemDetail = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  const { id, created_at, updated_at, owner } = instanceDetail || {};\n  dayjs.extend(localizedFormat);\n\n  const detailsTab = (\n    <>\n      <div className=\"tab-content-body\">\n        {mainToggle && (\n          <Grid className=\"instance-card-grid\">\n            <GridItem span={6} className=\"instance-detail-first-grid\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItemDetail(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItemDetail(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItemDetail(t('id'), id)}\n            {renderTextListItemDetail(t('owner'), owner)}\n            {renderTextListItemDetail(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItemDetail(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n\n  const connectionTab = (\n    <>\n      <div className=\"tab-content-body pf-m-secondary\">\n        <Tabs activeKey={activeTab2Key} isSecondary onSelect={handleTab2Click}>\n          <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n            {resourcesTab}\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n            {sampleCodeTab}\n          </Tab>\n        </Tabs>\n      </div>\n    </>\n  );\n\n  return (\n    <DrawerPanelContent className=\"instance-drawer\" widths={{ default: 'width_66' }}>\n      {instanceDetail === undefined ? (\n        <Loading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                {t('instance_name')}\n              </Text>\n              <Title headingLevel=\"h3\" size={TitleSizes['2xl']} className=\"pf-u-mt-0 \">\n                {instanceDetail?.name}\n              </Title>\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n              <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n                {detailsTab}\n              </Tab>\n              {mainToggle && (\n                <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>}>\n                  {connectionTab}\n                </Tab>\n              )}\n            </Tabs>\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n};\n\nexport { InstanceDrawer };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nexport const isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Drawer,\n  DrawerContent,\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Switch,\n  Title\n} from '@patternfly/react-core';\nimport { EmptyState } from '../components/EmptyState/EmptyState';\nimport { StreamsTableView } from '../components/StreamsTableView/StreamsTableView';\nimport { CreateInstanceModal } from '../components/CreateInstanceModal/CreateInstanceModal';\nimport { DefaultApi, KafkaRequest, KafkaRequestList } from '../../openapi/api';\nimport { AlertProvider } from '../components/Alerts/Alerts';\nimport { InstanceDrawer } from '../Drawer/InstanceDrawer';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { useInterval } from '@app/hooks/useInterval';\nimport { isServiceApiError } from '@app/utils/error';\nimport { ApiContext } from '@app/api/ApiContext';\n\ntype OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance }: OpenShiftStreamsProps) => {\n  const { getToken } = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  const { t } = useTranslation();\n\n  // States\n  const [createStreamsInstance, setCreateStreamsInstance] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [mainToggle, setMainToggle] = useState(false);\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const drawerRef = React.createRef<any>();\n\n  const onExpand = () => {\n    drawerRef.current && drawerRef.current.focus();\n  };\n\n  const onCloseClick = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onConnectInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    const accessToken = await getToken();\n\n    if (accessToken !== undefined || accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString()).then((res) => {\n\n\n          const kafkaInstances = res.data;\n          console.log('what is res' + JSON.stringify(kafkaInstances));\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          setKafkaDataLoaded(true);\n        });\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          console.log(error.response?.data.reason);\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n  }, [getToken, page, perPage]);\n\n  useInterval(fetchKafkas, 5000);\n\n  const handleSwitchChange = (checked: boolean) => {\n    setMainToggle(checked);\n  };\n\n  return (\n    <>\n      <AlertProvider>\n        <Drawer isExpanded={selectedInstance != null} onExpand={onExpand}>\n          <DrawerContent\n            panelContent={\n              <InstanceDrawer\n                mainToggle={mainToggle}\n                onClose={onCloseClick}\n                isExpanded={selectedInstance != null}\n                drawerRef={drawerRef}\n                activeTab={selectedInstance?.activeTab}\n                instanceDetail={selectedInstance?.instanceDetail}\n              />\n            }\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('OpenshiftStreams')}\n                  </Title>\n                </LevelItem>\n                <LevelItem>\n                  <Switch\n                    id=\"simple-switch\"\n                    label={t('Mock UI')}\n                    labelOff={t('Currently supported UI')}\n                    isChecked={mainToggle}\n                    onChange={handleSwitchChange}\n                  />\n                </LevelItem>\n              </Level>\n            </PageSection>\n            <PageSection>\n              {!kafkaDataLoaded ? (\n                <Loading />\n              ) : kafkaInstanceItems && kafkaInstanceItems.length > 0 ? (\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onConnectToInstance={onConnectInstance}\n                  onViewInstance={onViewInstance}\n                  refresh={fetchKafkas}\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                />\n              ) : (\n                kafkaInstanceItems !== undefined && (\n                  <EmptyState\n                    createStreamsInstance={createStreamsInstance}\n                    setCreateStreamsInstance={setCreateStreamsInstance}\n                    mainToggle={mainToggle}\n                  />\n                )\n              )}\n              {createStreamsInstance && (\n                <CreateInstanceModal\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  mainToggle={mainToggle}\n                  refresh={fetchKafkas}\n                />\n              )}\n            </PageSection>\n          </DrawerContent>\n        </Drawer>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [callback, delay]);\n}\n","import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n    getToken: () => Promise.resolve('')\n  }\n);\n","import React from \"react\";\nimport {\n  AlertGroup,\n  Alert,\n  AlertActionCloseButton,\n  AlertVariant,\n} from \"@patternfly/react-core\";\n\nexport type AlertType = {\n  key: number;\n  message: string;\n  variant: AlertVariant;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, message }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={message}\n          actionClose={\n            <AlertActionCloseButton\n              title={message}\n              onClose={() => onCloseAlert(key)}\n            />\n          }\n        />\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport { PageSection, Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <PageSection>\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  </PageSection>\n);\n"],"sourceRoot":""}