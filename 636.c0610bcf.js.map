{"version":3,"sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccounts.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccountsFederated.tsx"],"names":["ServiceAccounts","t","useTranslation","addAlert","useAlert","showModal","location","useLocation","searchParams","URLSearchParams","search","page","parseInt","get","perPage","mainToggle","has","auth","useAuth","basePath","useConfig","useState","setServiceAccountList","serviceAccountItems","setServiceAccountItems","isUserUnauthorized","setIsUserUnauthorized","orderBy","setOrderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isServiceAccountsEmpty","setIsServiceAccountsEmpty","fetchServiceAccounts","kas","getToken","accessToken","SecurityApi","Configuration","getServiceAccounts","then","response","serviceAccounts","data","items","itemsLength","length","sortedServiceAccounts","error","reason","errorCode","code","variant","AlertVariant","title","description","handleServerError","useEffect","handleResetModal","serviceAccount","serviceAccountToReset","handleCreateModal","handleDeleteModal","serviceAccountToDelete","PageSection","PageSectionVariants","padding","default","isFilled","titleProps","headingLevel","emptyStateIconProps","icon","emptyStateBodyProps","body","TextContent","Text","component","undefined","emptyStateProps","buttonProps","onClick","className","Card","total","expectedTotal","serviceAccountsDataLoaded","onResetCredentials","onDeleteServiceAccount","renderTableView","I18nextProvider","i18n"],"mappings":"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","file":"636.c0610bcf.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants, Text, AlertVariant, TextContent, Card } from '@patternfly/react-core';\nimport { isServiceApiError, ErrorCodes, sortValues } from '@app/utils';\nimport { MASEmptyState, MASLoading, MASEmptyStateVariant, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { ServiceAccountListItem, ServiceAccountList, SecurityApi, Configuration } from '@rhoas/kafka-management-sdk';\nimport { ServiceAccountsTableView, FilterType } from './components/ServiceAccountsTableView';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\n\nconst ServiceAccounts: React.FC = () => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlert();\n  const { showModal } = useRootModalContext();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  const [serviceAccountList, setServiceAccountList] = useState<ServiceAccountList>();\n  const [serviceAccountItems, setServiceAccountItems] = useState<ServiceAccountListItem[] | undefined>();\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isServiceAccountsEmpty, setIsServiceAccountsEmpty] = useState<boolean>(false);\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n    }\n  };\n\n  const fetchServiceAccounts = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getServiceAccounts().then((response) => {\n          const serviceAccounts: ServiceAccountList = response?.data;\n          const items = serviceAccounts?.items || [];\n          const itemsLength = items?.length;\n          setServiceAccountList(serviceAccounts);\n          const sortedServiceAccounts: ServiceAccountListItem[] | undefined = sortValues<ServiceAccountListItem>(\n            items,\n            'name',\n            'asc'\n          );\n          setServiceAccountItems(sortedServiceAccounts);\n          /**\n           * Todo: handle below logic in separate API call when backend start support pagination\n           */\n          if (!itemsLength || itemsLength < 1) {\n            setIsServiceAccountsEmpty(true);\n          } else {\n            setIsServiceAccountsEmpty(false);\n          }\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchServiceAccounts();\n  }, []);\n\n  const handleResetModal = (serviceAccount: ServiceAccountListItem) => {\n    showModal(MODAL_TYPES.RESET_CREDENTIALS, { serviceAccountToReset: serviceAccount });\n  };\n\n  const handleCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_ACCOUNT, { fetchServiceAccounts });\n  };\n\n  const handleDeleteModal = (serviceAccount: ServiceAccountListItem) => {\n    showModal(MODAL_TYPES.DELETE_SERVICE_ACCOUNT, { serviceAccountToDelete: serviceAccount, fetchServiceAccounts });\n  };\n\n  const renderTableView = () => {\n    if (serviceAccountItems === undefined) {\n      return (\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <MASLoading />\n        </PageSection>\n      );\n    } else {\n      if (isServiceAccountsEmpty) {\n        return (\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <MASEmptyState\n              emptyStateProps={{\n                variant: MASEmptyStateVariant.NoItems,\n              }}\n              titleProps={{\n                title: t('serviceAccount.you_do_not_have_any_service_accounts_yet'),\n              }}\n              emptyStateBodyProps={{\n                body: t('serviceAccount.create_service_account_to_get_started'),\n              }}\n              buttonProps={{\n                title: t('serviceAccount.create_service_account'),\n                onClick: handleCreateModal,\n                ['data-testid']: 'emptyStateStreams-buttonCreateServiceAccount',\n              }}\n            />\n          </PageSection>\n        );\n      } else {\n        return (\n          <PageSection\n            className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n            variant={PageSectionVariants.default}\n            padding={{ default: 'noPadding' }}\n          >\n            <Card>\n              <ServiceAccountsTableView\n                page={page}\n                perPage={perPage}\n                total={/*serviceAccountList?.total ||*/ 1}\n                expectedTotal={0}\n                serviceAccountsDataLoaded={true}\n                serviceAccountItems={serviceAccountItems}\n                orderBy={orderBy}\n                setOrderBy={setOrderBy}\n                filterSelected={filterSelected}\n                setFilterSelected={setFilterSelected}\n                filteredValue={filteredValue}\n                setFilteredValue={setFilteredValue}\n                onResetCredentials={handleResetModal}\n                onDeleteServiceAccount={handleDeleteModal}\n                handleCreateModal={handleCreateModal}\n                mainToggle={mainToggle}\n              />\n            </Card>\n          </PageSection>\n        );\n      }\n    }\n  };\n\n  if (isUserUnauthorized) {\n    return (\n      <PageSection variant={PageSectionVariants.default} padding={{ default: 'noPadding' }} isFilled>\n        <MASEmptyState\n          titleProps={{\n            title: t('serviceAccount.unauthorized_access_to_service_accounts_title'),\n            headingLevel: 'h2',\n          }}\n          emptyStateIconProps={{\n            icon: LockIcon,\n          }}\n          emptyStateBodyProps={{\n            body: t('serviceAccount.unauthorized_access_to_service_accounts_info'),\n          }}\n        />\n      </PageSection>\n    );\n  }\n\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component=\"h1\"> {t('serviceAccount.service_accounts')}</Text>\n          <Text component=\"p\">{t('serviceAccount.service_accounts_title_header_info')}</Text>\n        </TextContent>\n      </PageSection>\n      {renderTableView()}\n    </>\n  );\n};\n\nexport { ServiceAccounts };\n","import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { ServiceAccounts } from './ServiceAccounts';\nimport { RootModal } from '@app/common';\nimport { initI18N } from '@i18n/i18n';\n\n// Federation version of ServiceAccounts\n\nconst ServiceAccountsFederated: React.FC = () => {\n  return (\n    <I18nextProvider i18n={initI18N()}>\n      <RootModal>\n        <ServiceAccounts />\n      </RootModal>\n    </I18nextProvider>\n  );\n};\n\nexport default ServiceAccountsFederated;\n"],"sourceRoot":""}