{"version":3,"sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/aws-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/copy-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/filter-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/pending-icon.js","webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/CreateInstanceModal/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ConnectionTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/DetailsTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","module","e","LTS","LT","L","LL","LLL","LLLL","t","n","o","r","prototype","M","format","en","formats","this","$locale","replace","toUpperCase","slice","call","DrawerPanelContentInfo","useTranslation","TextContent","Text","component","TextVariants","TextList","TextListVariants","Grid","sm","lg","hasGutter","GridItem","TextListItem","TextListItemVariants","Button","isSmall","isInline","variant","ButtonVariant","style","marginTop","CreateInstanceModalContext","createContext","isModalOpen","setIsModalOpen","onCreate","mainToggle","refresh","cloudProviders","CreateInstanceModalProvider","Provider","useCreateInstanceModal","useContext","emptyProvider","kind","id","display_name","enabled","CreateInstanceModal","authContext","AuthContext","basePath","ApiContext","addAlert","newKafka","cloud_provider","region","multi_az","useState","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","fetchCloudRegions","provider","getToken","accessToken","undefined","listCloudProviderRegions","then","res","providerRegions","data","providers","concat","items","enabledRegions","filter","length","prevData","reason","response","AlertVariant","useEffect","enableCloudProviders","message","isMultiSelected","onCreateInstance","isValid","trim","test","maxLength","validateCreateForm","apisService","createKafka","toShowAlert","code","handleInstanceNameChange","handleCloudRegionChange","validRegion","getTileIcon","toLowerCase","size","color","className","onChangeAvailabilty","isSelected","event","value","currentTarget","onFormSubmit","preventDefault","MASCreateModal","title","handleModalToggle","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","Alert","Flex","direction","default","FlexItem","flex","Form","onSubmit","FormAlert","FormGroup","label","helperText","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","TextInput","type","onChange","autoFocus","map","Tile","key","icon","onClick","cloudProvider","FormSelect","option","index","FormSelectOption","ToggleGroup","ToggleGroupItem","text","isDisabled","buttonId","Divider","isVertical","StatusColumn","filteredstatus","status","instanceName","Spinner","getStatusIcon","spacer","st","DeleteInstanceModal","confirmButtonProps","cancelButtonProps","textProps","instanceStatus","selectedItemData","selectedInstanceName","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","htmlFor","dangerouslySetInnerHTML","__html","onKeyPress","StreamsToolbar","setFilterSelected","filterSelected","total","page","perPage","filteredValue","setFilteredValue","isDisabledCreateButton","buttonTooltipContent","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","nameInputRef","useRef","ownerInputRef","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","regionFilterOptions","statusFilterOptions","updateFilter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","push","isInputValid","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","isDisabledSelectOption","optionValue","tooltipContent","toggleGroupItems","ToolbarGroup","Select","SelectVariant","onToggle","selections","isOpen","onSelect","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","showToolbarItem","InputGroup","ValidatedOptions","placeholder","input","ref","Tooltip","isVisible","content","reference","isPlaceholder","placeholderText","document","getElementById","toolbarItems","item","isAriaDisabled","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","toggleGroupProps","toggleIcon","breakpoint","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToRoute","getConnectToRoutePath","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","isMaxCapacityReached","loggedInUser","isDeleteModalOpen","setIsDeleteModalOpen","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","tableColumns","transforms","sortable","setItems","searchParams","URLSearchParams","location","search","history","setSearchParam","useCallback","set","addAlertAfterSuccessDeletion","notPresentKafkas","kafka","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","incompleteKafkas","addAlertAfterSuccessCreation","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","renderNameLink","row","href","Link","to","instance","onDeleteInstance","instanceId","Error","deleteKafkaById","config","confirmActionLabel","description","additionalMessage","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","getSortBy","sort","split","SortByDirection","tableProps","cells","rows","tableRow","loadingCount","i","Skeleton","created_at","owner","cloudProviderDisplayName","regionDisplayName","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","pointerEvents","cursor","getActionResolver","onSort","myDirection","property","getParameterForSortIndex","sortBy","hasDefaultCustomRowWrapper","onRowClick","rowIndex","clickedEventType","tagName","rowDataTestId","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant","ResourcesTab","externalServer","isKafkaPending","tokenEndPointUrl","isCreateServiceAccountModalOpen","setIsCreateServiceAccountModalOpen","fontSize","ClipboardCopy","textAriaLabel","Label","Popover","bodyContent","CreateServiceAccountModal","setIsOpen","SampleCodeTab","ConnectionTab","activeKey","Tabs","isSecondary","Tab","eventKey","TabTitleText","DetailsTab","instanceDetail","updated_at","renderTextListItem","span","Card","isFlat","CardBody","InstanceDrawer","onClose","activeTab","isExpanded","isLoading","children","dataOuiaAppId","notRequiredDrawerContentBackground","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","selectedTab","bootstrapServerHost","handleTab1Click","_","onSelectConnectionTab","panelBodyContent","endsWith","drawerHeaderProps","headingLevel","inlineAlertMessage","useTimeout","callback","delay","savedCallback","current","setTimeout","clearInterval","getIsDocumentHidden","doc","hidden","msHidden","webkitHidden","usePageVisibility","setIsVisible","onVisibilityChange","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","preCreateInstance","createDialogOpen","parseInt","get","has","isOpenCreateInstanceModalState","setIsOpenCreateInstanceModalState","setKafkaInstanceItems","kafkas","setKafkas","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setExpectedTotal","isDisplayKafkaEmptyState","setIsDisplayKafkaEmptyState","isUserUnauthorized","setIsUserUnauthorized","selectedKafkaItem","newState","updateSelectedKafkaInstance","setIsMaxCapacityReached","setLoggedInUser","getUsername","username","fetchKafkaServiceStatus","serviceStatus","maxCapacityReached","max_capacity_reached","handleServerError","setIsOpenCreateInstanceModal","open","error","errorCode","fetchKafkas","justPoll","listKafkas","filters","join","kafkaInstances","kafkaItemsLength","fetchKafkasOnborading","listCloudProviders","refreshKafkas","getLoggedInUserKafkaInstance","getButtonTooltipContent","isKafkaInstanceExist","Banner","isSticky","PageSection","PageSectionVariants","Level","LevelItem","padding","isFilled","createInstanceButton"],"mappings":"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","file":"122.d8f9ba7b.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.AwsIconConfig = {\n  name: 'AwsIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.37 637.37 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.AwsIcon = require('../createIcon').createIcon(exports.AwsIconConfig);\nexports[\"default\"] = exports.AwsIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CopyIconConfig = {\n  name: 'CopyIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CopyIcon = require('../createIcon').createIcon(exports.CopyIconConfig);\nexports[\"default\"] = exports.CopyIcon;","\"use strict\"\nexports.__esModule = true;\nexports.FilterIconConfig = {\n  name: 'FilterIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.FilterIcon = require('../createIcon').createIcon(exports.FilterIconConfig);\nexports[\"default\"] = exports.FilterIcon;","\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PendingIconConfig = {\n  name: 'PendingIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,895.9 C300.3,895.9 128.1,723.8 128.1,511.9 C128.1,300.2 300.3,127.9 512.1,127.9 C723.8,127.9 896,300.2 896.1,511.9 C896.1,723.7 723.8,895.9 512.1,895.9 M512.1,0 C229.7,0 0,229.7 0,512 C0,794.3 229.7,1024 512.1,1024 C794.3,1024 1024,794.3 1024,512 C1024,229.7 794.3,0 512.1,0 M704,288 L704,272 C704,263.2 696.8,256 688,256 L336,256 C327.2,256 320,263.2 320,272 L320,288 C320,447 480,449 480,512 C480,575 320,575 320,736 L320,752 C320,760.8 327.2,768 336,768 L688,768 C696.8,768 704,760.8 704,752 L704,736 C704,576 544,577 544,512 C544,447 704,448 704,288 M603.9,704 L420.3,704 C417.3,704 418.2,695 419.4,686.8 C426.8,634.5 480.1,617.4 495.2,612.3 C512.3,606.6 512.3,606.6 528.9,612.3 C544,617.6 597.6,635.4 604.8,687 C605.9,695.2 606.9,704 603.9,704',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PendingIcon = require('../createIcon').createIcon(exports.PendingIconConfig);\nexports[\"default\"] = exports.PendingIcon;","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.dayjs_plugin_localizedFormat=t()}(this,function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)}}});\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nconst DrawerPanelContentInfo = () => {\n  const { t } = useTranslation();\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>{t('common.instance_information')}</Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.duration')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>48 hours</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.ingress_egress')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 2 MB/second each</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.storage')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 60 GB</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.partitions')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.client_connections')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.connection_rate')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 50 connections/second</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.message_size')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          </GridItem>\n        </Grid>\n        <Button isSmall isInline variant={ButtonVariant.link} style={{ marginTop: '20px' }}>\n          {t('common.quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState, createContext } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n  Flex,\n  FlexItem,\n  Divider,\n} from '@patternfly/react-core';\nimport { NewKafka, FormDataValidationState } from '../../../../models';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { isValidToken, ErrorCodes } from '@app/utils';\nimport { MASCreateModal } from '@app/common/MASCreateModal/MASCreateModal';\n\nexport type CreateInstanceModalProps = {\n  isModalOpen: boolean;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onCreate: () => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst CreateInstanceModalContext = createContext<CreateInstanceModalProps>({\n  isModalOpen: false,\n  setIsModalOpen: () => {},\n  onCreate: () => {},\n  mainToggle: false,\n  refresh: () => {},\n  cloudProviders: [],\n});\n\nexport const CreateInstanceModalProvider = CreateInstanceModalContext.Provider;\nexport const useCreateInstanceModal = () => useContext(CreateInstanceModalContext);\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { isModalOpen, setIsModalOpen, onCreate, cloudProviders, refresh, mainToggle } = useCreateInstanceModal();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData({ ...kafkaFormData, name: '', multi_az: true });\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    if (!region || region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = validateCreateForm();\n\n    const accessToken = await authContext?.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n    } else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n          });\n          onCreate();\n          setCreationInProgress(true);\n          await apisService.createKafka(true, kafkaFormData).then((res) => {\n            resetForm();\n            setIsModalOpen(false);\n            refresh();\n          });\n        } catch (error) {\n          let reason: string | undefined;\n          let toShowAlert = true;\n          if (isServiceApiError(error)) {\n            if (error.response?.data.code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n              setIsFormValid(false);\n              toShowAlert = false;\n              setNameValidated({\n                fieldState: 'error',\n                message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n              });\n            } else {\n              reason = error.response?.data.reason;\n            }\n          }\n          /**\n           * Todo: show user friendly message according to server code\n           * and translation for specific language\n           *\n           */\n          toShowAlert &&\n            addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason, 'toastCreateKafka-failed');\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    resetForm();\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (name && name.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else {\n      if (isValid) {\n        if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n        if (nameValidated.fieldState === 'error') {\n          setNameValidated({ fieldState: 'default', message: '' });\n        }\n      } else {\n        setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n      }\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData({ ...kafkaFormData, multi_az: value === 'multi' });\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message != '' && <ExclamationCircleIcon />}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={handleInstanceNameChange}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map(\n            (provider: CloudProvider) =>\n              provider.enabled && (\n                <Tile\n                  key={`tile-${provider.name}`}\n                  title={provider?.display_name || ''}\n                  icon={getTileIcon(provider?.name)}\n                  isSelected={cloud_provider === provider.name}\n                  onClick={() => onCloudProviderSelect(provider)}\n                />\n              )\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={handleCloudRegionChange}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              (option: CloudRegion, index) =>\n                option.enabled && (\n                  <FormSelectOption\n                    key={index}\n                    value={option.id}\n                    label={option.id ? t(option.id) : option.display_name || ''}\n                  />\n                )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <ToggleGroupItem\n              text={t('single')}\n              value={'single'}\n              isDisabled\n              buttonId=\"single\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      isModalOpen={isModalOpen}\n      title={t('create_a_kafka_instance')}\n      handleModalToggle={handleModalToggle}\n      onCreate={onCreateInstance}\n      isFormValid={isFormValid}\n      primaryButtonTitle={t('create_instance')}\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateKafka-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateKafka-buttonCancel\"\n    >\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        title=\"Your preview instance will expire after 48 hours.\"\n        aria-live=\"polite\"\n        isInline\n      />\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>{createInstanceForm()}</FlexItem>\n        <Divider isVertical />\n        <FlexItem flex={{ default: 'flex_1' }} className=\"mk--create-instance-modal__sidebar--content\">\n          <DrawerPanelContentInfo />\n        </FlexItem>\n      </Flex>   \n    </MASCreateModal>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size=\"md\" aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleted'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const icon = getStatusIcon();\n  return (\n    <Flex>\n      {icon && <FlexItem spacer={{ default: 'spacerSm' }}>{icon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextInput } from '@patternfly/react-core';\nimport { MASDeleteModal, MASDeleteModalProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport type DeleteInstanceModalProps = MASDeleteModalProps & {\n  instanceStatus?: string;\n};\n\nexport const DeleteInstanceModal: React.FC<DeleteInstanceModalProps> = ({\n  isModalOpen,\n  title,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  instanceStatus,\n  selectedItemData,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n\n  const handleToggle = () => {\n    setInstanceNameInput('');\n    handleModalToggle && handleModalToggle();\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={isModalOpen}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteKafka-buttonDelete',\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleToggle}\n      textProps={textProps}\n    >\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            onKeyPress={onKeyPress}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </MASDeleteModal>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { useCreateInstanceModal } from '../../components/CreateInstanceModal';\n\nexport type StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  isDisabledCreateButton?: boolean;\n  buttonTooltipContent?: string | undefined;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  isDisabledCreateButton,\n  buttonTooltipContent,\n}) => {\n  const { isModalOpen, setIsModalOpen } = useCreateInstanceModal();\n  const { t } = useTranslation();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus = filterKey === 'status' && filterValue?.filter(({ value }) => value === 'provisioning');\n      if (provisioningStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <Select\n          variant={SelectVariant.single}\n          aria-label=\"Select filter\"\n          onToggle={onFilterToggle}\n          selections={filterSelected}\n          isOpen={isFilterExpanded}\n          onSelect={onChangeSelect}\n        >\n          {mainFilterOptions.map((option, index) => (\n            <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n              {option.label}\n            </SelectOption>\n          ))}\n        </Select>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"name\"\n                id=\"filterText\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                placeholder={t('filter_by_name_lower')}\n                onChange={onNameInputChange}\n                onKeyPress={onInputPress}\n                value={nameInputValue}\n                ref={nameInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                isDisabled={!isNameValid || isMaxFilter}\n                onClick={() => onFilter('name')}\n                aria-label=\"Search instances\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isNameValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isNameValid}\n                  content={tooltipContent('name')}\n                  reference={nameInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n          showToolbarItem={filterSelected === 'cloud_provider'}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <Select\n              id=\"cloud-provider-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select cloud provider\"\n              onToggle={onCloudProviderFilterToggle}\n              selections={getSelectionForFilter('cloud_provider')}\n              isOpen={isCloudProviderFilterExpanded}\n              onSelect={onCloudProviderFilterSelect}\n              placeholderText={t('filter_by_cloud_provider')}\n            >\n              {cloudProviderFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={\n                    option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                  }\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('cloud-provider-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n          showToolbarItem={filterSelected === 'region'}\n        >\n          {filterSelected === 'region' && (\n            <Select\n              id=\"region-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select region\"\n              onToggle={onRegionFilterToggle}\n              selections={getSelectionForFilter('region')}\n              isOpen={isRegionFilterExpanded}\n              onSelect={onRegionFilterSelect}\n              placeholderText={t('filter_by_region')}\n            >\n              {regionFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('region-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"owner\"\n                id=\"filterOwners\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                placeholder={t('filter_by_owner')}\n                validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                onChange={onOwnerInputChange}\n                onKeyPress={onInputPress}\n                value={ownerInputValue}\n                ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                isDisabled={!isOwnerValid || isMaxFilter}\n                variant={ButtonVariant.control}\n                onClick={() => onFilter('owner')}\n                aria-label=\"Search owners\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isOwnerValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isOwnerValid}\n                  content={tooltipContent('owner')}\n                  reference={ownerInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n          showToolbarItem={filterSelected === 'status'}\n        >\n          {filterSelected === 'status' && (\n            <Select\n              id=\"status-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select status\"\n              onToggle={onStatusFilterToggle}\n              selections={getSelectionForFilter('status')}\n              isOpen={isStatusFilterExpanded}\n              onSelect={onStatusFilterSelect}\n              placeholderText={t('filter_by_status')}\n            >\n              {statusFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('status-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const createButton = () => {\n    if (isDisabledCreateButton) {\n      return (\n        <Tooltip content={buttonTooltipContent}>\n          <Button\n            variant=\"primary\"\n            onClick={() => setIsModalOpen(!isModalOpen)}\n            data-testid={'tableStreams-buttonCreateKafka'}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Button\n        variant=\"primary\"\n        onClick={() => setIsModalOpen(!isModalOpen)}\n        data-testid={'tableStreams-buttonCreateKafka'}\n      >\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: createButton(),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { AlertVariant, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { DefaultApi, KafkaRequest } from '../../../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { CreateInstanceModal } from '../CreateInstanceModal';\nimport { DeleteInstanceModal } from '../DeleteInstanceModal';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { StreamsToolbar, StreamsToolbarProps } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { InstanceStatus, isServiceApiError, getLoadingRowsCount, getFormattedDate } from '@app/utils';\nimport { useHistory } from 'react-router-dom';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = StreamsToolbarProps & {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToRoute: (data: KafkaRequest, routePath: string) => void;\n  getConnectToRoutePath: (data: KafkaRequest, routePath: string) => string;\n  mainToggle: boolean;\n  refresh: () => void;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n  loggedInUser: string | undefined;\n  isMaxCapacityReached?: boolean | undefined;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined,\n  isMaxCapacityReached?: boolean | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const additionalMessage = isMaxCapacityReached\n    ? ' You might not be able to create a new instance because all of them are currently provisioned by other users.'\n    : '';\n\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_complete', { instanceName }) + additionalMessage;\n  } else if (\n    status === InstanceStatus.ACCEPTED ||\n    status === InstanceStatus.PROVISIONING ||\n    status === InstanceStatus.PREPARING\n  ) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName }) + additionalMessage;\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n  isMaxCapacityReached,\n  buttonTooltipContent,\n  isDisabledCreateButton,\n  loggedInUser,\n}: StreamsTableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<string>();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    // filter all kafkas with status as deprovision\n    const deprovisonedKafkas = kafkaInstanceItems.filter((kafka) => kafka.status === InstanceStatus.DEPROVISION);\n\n    // filter all new kafka which is not in deleteKafka state\n    const notPresentKafkas = deprovisonedKafkas\n      .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n      .map((k) => k.name || '');\n    // create new array by merging old and new kafka with status as deprovion\n    const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n    // update deleteKafka with new array\n    setDeletedKafkas(allDeletedKafkas);\n\n    // add alert for deleted kafkas which are completely deleted from the response\n    allDeletedKafkas.forEach((k) => {\n      if (kafkaInstanceItems.findIndex((item) => item.name === k) < 0) {\n        removeKafkaFromDeleted(k);\n        addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n      }\n    });\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-success'\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-failed'\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const onSelectKebabDropdownOption = (event: any, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <>\n        {mainToggle ? (\n          <a href=\"http://uxd-mk-data-plane-cmolloy.apps.uxd-os-research.shz4.p1.openshiftapps.com/openshiftstreams\">\n            {name}\n          </a>\n        ) : (\n          <Link\n            to={() => getConnectToRoutePath(row as KafkaRequest, `kafkas/${row?.id}`)}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToRoute(row as KafkaRequest, `kafkas/${row?.id}`);\n            }}\n            data-testid=\"tableStreams-linkKafka\"\n          >\n            {name}\n          </Link>\n        )}\n      </>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION || status !== InstanceStatus.READY\n                ? name\n                : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: getFormattedDate(created_at, t('ago')),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    setIsDeleteModalOpen(false);\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name,\n    isMaxCapacityReached\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        isDisabledCreateButton={isDisabledCreateButton}\n        buttonTooltipContent={buttonTooltipContent}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n      <DeleteInstanceModal\n        isModalOpen={isDeleteModalOpen}\n        instanceStatus={selectedInstance?.status}\n        selectedItemData={selectedInstance}\n        handleModalToggle={() => setIsDeleteModalOpen(!isDeleteModalOpen)}\n        title={title}\n        confirmButtonProps={{\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        }}\n        textProps={{\n          description,\n        }}\n      />\n      <CreateInstanceModal />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React, { useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Button,\n  TextContent,\n  Text,\n  TextVariants,\n  ClipboardCopy,\n  Label,\n  Popover,\n  Skeleton,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { KafkaRequest } from '../../../../../openapi/api';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport { CreateServiceAccountModal } from '@app/modules/ServiceAccounts/components';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n  externalServer?: string;\n  instance: KafkaRequest | undefined;\n  isKafkaPending?: boolean;\n  onConnectToRoute: (data: KafkaRequest, routePath: string) => void;\n  getConnectToRoutePath: (data: KafkaRequest, routePath: string) => string;\n  tokenEndPointUrl: string;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = ({\n  mainToggle,\n  externalServer,\n  instance = {},\n  isKafkaPending,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  tokenEndPointUrl,\n}: ResourcesTabProps) => {\n  const { t } = useTranslation();\n  const [isCreateServiceAccountModalOpen, setIsCreateServiceAccountModalOpen] = useState(false);\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-lg\">\n          {t('bootstrap_server')}\n        </Text>\n        <Text component={TextVariants.small}>{t('bootstrap_server_description')}</Text>\n      </TextContent>\n      {isKafkaPending ? (\n        <Skeleton fontSize=\"2xl\" />\n      ) : (\n        <ClipboardCopy data-testid=\"drawerStreams-copyBootstrapURL\" textAriaLabel={t('bootstrap_server')}>\n          {externalServer}\n        </ClipboardCopy>\n      )}\n\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t('serviceAccount.service_accounts_small')}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t('serviceAccount.create_service_account_to_generate_credentials')}{' '}\n          <Link\n            to={() => getConnectToRoutePath(instance, 'service-accounts')}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToRoute(instance, 'service-accounts');\n            }}\n            data-testid=\"tableStreams-linkKafka\"\n          >\n            {t('serviceAccount.service_accounts')}\n          </Link>{' '}\n          {t('common.page')}.\n        </Text>\n      </TextContent>\n      <Button\n        variant=\"secondary\"\n        onClick={() => setIsCreateServiceAccountModalOpen(true)}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n        isInline\n      >\n        {t('serviceAccount.create_service_account')}\n      </Button>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t('common.authentication_method')}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t('common.sasl_oauthbearer')} <Label color=\"green\">{t('common.recommended')}</Label>\n          <Popover\n            aria-label={t('common.sasl_oauthbearer')}\n            bodyContent={<div>{t('serviceAccount.sasl_oauthbearer_popover_content')}</div>}\n          >\n            <Button variant={ButtonVariant.plain} aria-label={t('more_info_about_sasl_oauthbearer')}>\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>{t('serviceAccount.sasl_oauthbearer_description')}</Text>\n        <Text component={TextVariants.h6} className=\"pf-u-mt-md\">\n          {t('common.token_endpoint_url')}\n        </Text>\n        {isKafkaPending ? <Skeleton fontSize=\"2xl\" /> : <ClipboardCopy>{tokenEndPointUrl}</ClipboardCopy>}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t('common.sasl_plain')}\n        </Text>\n        <Text component={TextVariants.small}>{t('serviceAccount.sasl_plain_description')}</Text>\n      </TextContent>\n      {mainToggle && (\n        <>\n          <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n            <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n            <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n          </TextContent>\n          <ClipboardCopy>https://:30123</ClipboardCopy>\n        </>\n      )}\n      <CreateServiceAccountModal\n        isOpen={isCreateServiceAccountModalOpen}\n        setIsOpen={setIsCreateServiceAccountModalOpen}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport CopyIcon from '@patternfly/react-icons/dist/js/icons/copy-icon';\nimport { useTranslation } from 'react-i18next';\n\nexport const SampleCodeTab = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, TabsProps, Tab, TabTitleText } from '@patternfly/react-core';\nimport { ResourcesTab, ResourcesTabProps } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ConnectionTabProps = Pick<TabsProps, 'onSelect' | 'activeKey'> & ResourcesTabProps;\n\nexport const ConnectionTab: React.FC<ConnectionTabProps> = ({\n  onSelect,\n  externalServer,\n  instance,\n  mainToggle,\n  activeKey,\n  isKafkaPending,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  tokenEndPointUrl,\n}: ConnectionTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {mainToggle ? (\n        <div className=\"mas--details__drawer--tab-content pf-m-secondary\">\n          <Tabs activeKey={activeKey} isSecondary onSelect={onSelect}>\n            <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n              <ResourcesTab\n                externalServer={externalServer}\n                instance={instance}\n                mainToggle={mainToggle}\n                isKafkaPending={isKafkaPending}\n                getConnectToRoutePath={getConnectToRoutePath}\n                onConnectToRoute={onConnectToRoute}\n                tokenEndPointUrl={tokenEndPointUrl}\n              />\n            </Tab>\n            <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n              <SampleCodeTab />\n            </Tab>\n          </Tabs>\n        </div>\n      ) : (\n        <ResourcesTab\n          externalServer={externalServer}\n          instance={instance}\n          mainToggle={mainToggle}\n          isKafkaPending={isKafkaPending}\n          getConnectToRoutePath={getConnectToRoutePath}\n          onConnectToRoute={onConnectToRoute}\n          tokenEndPointUrl={tokenEndPointUrl}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport { KafkaRequest } from 'src/openapi';\n\nexport type DetailsTabProps = {\n  mainToggle?: boolean;\n  instanceDetail?: KafkaRequest;\n};\n\nexport const DetailsTab = ({ mainToggle, instanceDetail }: DetailsTabProps) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n\n  const { id, owner, created_at, updated_at } = instanceDetail || {};\n\n  const renderTextListItem = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mas--details__drawer--grid\">\n            <GridItem span={6} className=\"mas--details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItem(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItem(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItem(t('id'), id)}\n            {renderTextListItem(t('owner'), owner)}\n            {renderTextListItem(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItem(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, Tab, TabTitleText, Alert, AlertVariant } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { ConnectionTab, ConnectionTabProps } from './ConnectionTab';\nimport { DetailsTab, DetailsTabProps } from './DetailsTab';\nimport { InstanceStatus } from '@app/utils';\nimport './InstanceDrawer.css';\n\nexport type InstanceDrawerProps = Pick<\n  ConnectionTabProps,\n  'getConnectToRoutePath' | 'onConnectToRoute' | 'tokenEndPointUrl'\n> &\n  Omit<MASDrawerProps, 'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  getConnectToRoutePath,\n  onConnectToRoute,\n  tokenEndPointUrl,\n  notRequiredDrawerContentBackground,\n}) => {\n  dayjs.extend(localizedFormat);\n\n  const { t } = useTranslation();\n  const { name, status } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrapServerHost } = instanceDetail || {};\n    return bootstrapServerHost?.endsWith(':443') ? bootstrapServerHost : `${bootstrapServerHost}:443`;\n  };\n\n  const isKafkaPending = status === InstanceStatus.ACCEPTED || status === InstanceStatus.PREPARING;\n\n  const panelBodyContent = () => {\n    return (\n      <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n        <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n          <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>} data-testid=\"drawerStreams-tabConnect\">\n          <ConnectionTab\n            mainToggle={mainToggle}\n            activeKey={activeTab2Key}\n            instance={instanceDetail}\n            externalServer={getExternalServer()}\n            onSelect={onSelectConnectionTab}\n            isKafkaPending={isKafkaPending}\n            getConnectToRoutePath={getConnectToRoutePath}\n            onConnectToRoute={onConnectToRoute}\n            tokenEndPointUrl={tokenEndPointUrl}\n          />\n        </Tab>\n      </Tabs>\n    );\n  };\n\n  const alertMessage = () => {\n    if (isKafkaPending) {\n      return (\n        <Alert\n          isInline\n          variant={AlertVariant.info}\n          title={t('kafka_instance_not_ready_inline_message')}\n          className=\"pf-u-mt-sm\"\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent()}\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      inlineAlertMessage={alertMessage()}\n      notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import { useEffect, useState } from 'react';\n\nexport function getBrowserVisibilityProp() {\n  const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp() {\n    const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden() {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility() {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  });\n  return {isVisible,setIsVisible};\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  AlertVariant,\n  Banner,\n  Alert,\n  Button,\n  ButtonVariant,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  StreamsTableView,\n  FilterType,\n  CreateInstanceModal,\n  InstanceDrawer,\n  CreateInstanceModalProvider,\n  InstanceDrawerProps,\n  StreamsTableProps,\n} from './components';\nimport { AlertProvider, useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport './OpenshiftStreams.css';\nimport { MASLoading, MASEmptyState, MASFullPageError, MASEmptyStateVariant } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { MAX_POLL_INTERVAL } from '@app/utils';\n\nexport type OpenShiftStreamsProps = Pick<InstanceDrawerProps, 'tokenEndPointUrl'> &\n  Pick<StreamsTableProps, 'onConnectToRoute' | 'getConnectToRoutePath'> & {\n    preCreateInstance: (open: boolean) => Promise<boolean>;\n    createDialogOpen: () => boolean;\n  };\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({\n  onConnectToRoute,\n  getConnectToRoutePath,\n  preCreateInstance,\n  createDialogOpen,\n  tokenEndPointUrl,\n}: OpenShiftStreamsProps) => {\n  dayjs.extend(localizedFormat);\n\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [isOpenCreateInstanceModalState, setIsOpenCreateInstanceModalState] = useState(createDialogOpen());\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkas, setKafkas] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [isDisplayKafkaEmptyState, setIsDisplayKafkaEmptyState] = useState<boolean>(false);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n\n  const updateSelectedKafkaInstance = () => {\n    if (kafkaInstanceItems && kafkaInstanceItems?.length > 0) {\n      const selectedKafkaItem = kafkaInstanceItems?.filter(\n        (kafka) => kafka?.id === selectedInstance?.instanceDetail?.id\n      )[0];\n      const newState: any = { ...selectedInstance, instanceDetail: selectedKafkaItem };\n      selectedKafkaItem && setSelectedInstance(newState);\n    }\n  };\n\n  useEffect(() => {\n    updateSelectedKafkaInstance();\n  }, [kafkaInstanceItems]);\n  const [isMaxCapacityReached, setIsMaxCapacityReached] = useState<boolean | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    fetchKafkaServiceStatus();\n  }, []);\n\n  const fetchKafkaServiceStatus = async () => {\n    const accessToken = await authContext?.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.serviceStatus().then((res) => {\n          const maxCapacityReached = res?.data?.kafkas?.max_capacity_reached || mainToggle;\n          setIsMaxCapacityReached(maxCapacityReached);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const setIsOpenCreateInstanceModal = async (open: boolean) => {\n    if (open) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(open);\n    }\n    setIsOpenCreateInstanceModalState(open);\n  };\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            const kafkaItemsLength = res?.data?.items?.length;\n            if (!kafkaItemsLength || kafkaItemsLength < 1) {\n              setIsDisplayKafkaEmptyState(true);\n            }\n          });\n        }\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchKafkasOnborading = async () => {\n    const accessToken = await authContext?.getToken();\n    const filter = loggedInUser ? `owner = ${loggedInUser}` : '';\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas('1', '1', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  /**\n   * This change is temporary for summit\n   * Todo: remove this code after summit\n   */\n  useEffect(() => {\n    fetchKafkasOnborading();\n  }, []);\n\n  useTimeout(() => fetchKafkasOnborading(), MAX_POLL_INTERVAL);\n\n  useTimeout(() => fetchKafkas(true), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  /**\n   * Show Unathorize page in case user is not authorize\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('access_permissions_needed'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('to_access_kafka_instances_contact_your_organization_administrators'),\n        }}\n      />\n    );\n  }\n\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const getBannerMessage = () => {\n    const isUserSameAsLoggedIn = getLoggedInUserKafkaInstance() !== undefined;\n    if (isMaxCapacityReached) {\n      if (isUserSameAsLoggedIn) {\n        return 'Instances are currently unavailable for creation.';\n      } else {\n        return (\n          <>\n            Instances are currently unavailable for creation, so check back later to see if any become available. In the\n            meantime,{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              data-testid=\"bannerStreams-actionTour\"\n              className=\"mk--openstreams__banner\"\n            >\n              take a tour\n            </Button>{' '}\n            to learn more about the service.\n          </>\n        );\n      }\n    } else {\n      if (isUserSameAsLoggedIn) {\n        return 'Instances are available for creation. You can deploy 1 instance at a time.';\n      } else {\n        return (\n          <>\n            Instances are available for creation. For help getting started, access the{' '}\n            <Button variant={ButtonVariant.link} isSmall isInline className=\"mk--openstreams__banner\">\n              quick start guide.\n            </Button>\n          </>\n        );\n      }\n    }\n  };\n\n  const renderBanner = () => {\n    return (\n      <>\n        {kafkaInstanceItems && (\n          <Banner isSticky variant={isMaxCapacityReached ? 'warning' : 'info'}>\n            {getBannerMessage()}\n          </Banner>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const getLoggedInUserKafkaInstance = () => {\n    const kafkaItem: KafkaRequest | undefined = kafkas?.filter((kafka) => kafka.owner === loggedInUser)[0];\n    return kafkaItem;\n  };\n\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const renderAlertMessage = () => {\n    const kafka = getLoggedInUserKafkaInstance();\n    if (kafka) {\n      return (\n        <Alert\n          variant=\"info\"\n          isInline\n          title={`${kafka?.name} was created on ${dayjs(kafka?.created_at).format('LLLL')}`}\n        >\n          This instance will expire 48 hours after creation\n        </Alert>\n      );\n    }\n    return <></>;\n  };\n\n  const getButtonTooltipContent = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    let content = '';\n    if (isDisabledCreateButton) {\n      if (isMaxCapacityReached && isKafkaInstanceExist) {\n        content = 'You can deploy 1 instance at a time.';\n      } else if (isMaxCapacityReached) {\n        content = 'Instances are currently unavailable for creation.';\n      } else {\n        content = 'You can deploy 1 instance at a time.';\n      }\n    }\n    return content;\n  };\n\n  const createInstanceButton = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    if (isDisabledCreateButton) {\n      const content = getButtonTooltipContent();\n\n      return (\n        <Tooltip content={content}>\n          <Button\n            data-testid=\"emptyStateStreams-buttonCreateKafka\"\n            variant={ButtonVariant.primary}\n            onClick={() => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModalState)}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Button\n        data-testid=\"emptyStateStreams-buttonCreateKafka\"\n        variant={ButtonVariant.primary}\n        onClick={() => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModalState)}\n      >\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  const renderStreamsTable = () => {\n    if (kafkaInstanceItems === undefined) {\n      return (\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <MASLoading />\n        </PageSection>\n      );\n    } else {\n      if (isDisplayKafkaEmptyState) {\n        return (\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <MASEmptyState\n              emptyStateProps={{\n                variant: MASEmptyStateVariant.NoItems,\n              }}\n              emptyStateBodyProps={{\n                body: t('create_a_kafka_instance_to_get_started'),\n              }}\n              titleProps={{ title: t('no_kafka_instances_yet') }}\n            >\n              {createInstanceButton()}\n            </MASEmptyState>\n            <CreateInstanceModal />\n          </PageSection>\n        );\n      } else {\n        return (\n          <PageSection\n            className=\"mk--main-page__page-section--table\"\n            variant={PageSectionVariants.light}\n            padding={{ default: 'noPadding' }}\n          >\n            {renderAlertMessage()}\n            <StreamsTableView\n              kafkaInstanceItems={kafkaInstanceItems}\n              mainToggle={mainToggle}\n              onViewConnection={onViewConnection}\n              onViewInstance={onViewInstance}\n              onConnectToRoute={onConnectToRoute}\n              getConnectToRoutePath={getConnectToRoutePath}\n              refresh={refreshKafkas}\n              kafkaDataLoaded={kafkaDataLoaded}\n              onDelete={onDelete}\n              page={page}\n              perPage={perPage}\n              total={kafkaInstancesList?.total}\n              expectedTotal={expectedTotal}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              setFilterSelected={setFilterSelected}\n              filterSelected={filterSelected}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              isDrawerOpen={selectedInstance !== null}\n              loggedInUser={loggedInUser}\n              isMaxCapacityReached={isMaxCapacityReached}\n              buttonTooltipContent={getButtonTooltipContent()}\n              isDisabledCreateButton={getLoggedInUserKafkaInstance() !== undefined || isMaxCapacityReached}\n            />\n          </PageSection>\n        );\n      }\n    }\n  };\n\n  return (\n    <>\n      <AlertProvider>\n        <CreateInstanceModalProvider\n          value={{\n            isModalOpen: isOpenCreateInstanceModalState,\n            setIsModalOpen: setIsOpenCreateInstanceModal,\n            onCreate,\n            cloudProviders,\n            mainToggle,\n            refresh: refreshKafkas,\n          }}\n        >\n          <InstanceDrawer\n            mainToggle={mainToggle}\n            isExpanded={selectedInstance != null}\n            activeTab={activeTab}\n            isLoading={instanceDetail === undefined}\n            instanceDetail={instanceDetail}\n            onClose={onCloseDrawer}\n            data-ouia-app-id=\"controlPlane-streams\"\n            getConnectToRoutePath={getConnectToRoutePath}\n            onConnectToRoute={onConnectToRoute}\n            tokenEndPointUrl={tokenEndPointUrl}\n            notRequiredDrawerContentBackground={isDisplayKafkaEmptyState}\n          >\n            {renderBanner()}\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <TextContent>\n                    <Text component=\"h1\">{t('kafka_instances')}</Text>\n                  </TextContent>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {renderStreamsTable()}\n          </InstanceDrawer>\n        </CreateInstanceModalProvider>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n"],"sourceRoot":""}