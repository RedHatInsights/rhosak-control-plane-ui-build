{"version":3,"file":"5964.5c4fa6c6.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerContent.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/contexts/InstanceDrawerContext.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/Pagination.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/StreamsTableConnected.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StatusColumn/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/hooks.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/NameFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/RegionFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/FilterSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StatusFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsToolbar/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/Unauthorized/Unauthorized.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KafkaEmptyState/KafkaEmptyState.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KasLayout/KasLayout.tsx"],"sourcesContent":["// A map of modal components to their lazy loaded implementations\nimport { FunctionComponent, LazyExoticComponent, lazy } from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateInstanceProps>>,\n      variant: \"medium\",\n      title: t(\"create_a_kafka_instance\"),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteInstanceProps>>,\n      variant: \"small\",\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<TransferOwnershipProps>>,\n      variant: \"medium\",\n      title: t(\"change_owner\"),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateServiceAccountProps>>,\n      variant: \"medium\",\n      title: t(\"serviceAccount.create_a_service_account\"),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteServiceAccountProps>>,\n      title: t(\"serviceAccount.delete_service_account\") + \"?\",\n      variant: \"small\",\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials\"\n          )\n      ) as LazyExoticComponent<\n        FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t(\"serviceAccount.reset_service_account_credentials\")}?`,\n      variant: \"medium\",\n    },\n  };\n};\n\nexport const KasModalLoader: FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","import { FunctionComponent, lazy, Suspense } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { InstanceStatus } from \"@app/utils\";\nimport { MASLoading } from \"@app/common\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { ConnectionTabProps } from \"@app/modules/InstanceDrawer/ConnectionTab\";\nimport { useInstanceDrawer } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\n\nexport const ResourcesTab = lazy(() => import(\"./ConnectionTab\"));\nexport const DetailsTab = lazy(() => import(\"./DetailsTab\"));\n\nexport type InstanceDrawerContentProps = Pick<\n  ConnectionTabProps,\n  \"tokenEndPointUrl\"\n>;\n\nexport const InstanceDrawerContent: FunctionComponent<\n  InstanceDrawerContentProps\n> = ({ tokenEndPointUrl }) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const { instanceDrawerTab, setInstanceDrawerTab, instanceDrawerInstance } =\n    useInstanceDrawer();\n\n  const selectTab = (tab: string | number) => {\n    if (tab === InstanceDrawerTab.CONNECTION) {\n      setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n    } else {\n      setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n    }\n  };\n\n  const getExternalServer = () => {\n    const { bootstrap_server_host } = instanceDrawerInstance || {};\n    return bootstrap_server_host?.endsWith(\":443\")\n      ? bootstrap_server_host\n      : `${bootstrap_server_host}:443`;\n  };\n\n  const isKafkaPending =\n    instanceDrawerInstance?.status === InstanceStatus.ACCEPTED ||\n    instanceDrawerInstance?.status === InstanceStatus.PREPARING;\n\n  return (\n    <Suspense fallback={<MASLoading />}>\n      <Tabs\n        activeKey={instanceDrawerTab.toString()}\n        onSelect={(_, tab) => selectTab(tab)}\n      >\n        <Tab\n          eventKey={InstanceDrawerTab.DETAILS.toString()}\n          title={<TabTitleText>{t(\"details\")}</TabTitleText>}\n        >\n          <DetailsTab />\n        </Tab>\n        <Tab\n          eventKey={InstanceDrawerTab.CONNECTION.toString()}\n          title={<TabTitleText>{t(\"connection\")}</TabTitleText>}\n          data-testid=\"drawerStreams-tabConnect\"\n        >\n          <ResourcesTab\n            externalServer={getExternalServer()}\n            isKafkaPending={isKafkaPending}\n            tokenEndPointUrl={tokenEndPointUrl}\n            instanceId={instanceDrawerInstance?.id}\n          />\n        </Tab>\n      </Tabs>\n    </Suspense>\n  );\n};\n","import { ReactElement, useMemo, VoidFunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n// eslint-disable-next-line no-restricted-imports\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport \"@patternfly/react-styles/css/utilities/Spacing/spacing.css\";\nimport \"@patternfly/react-styles/css/utilities/Alignment/alignment.css\";\nimport { MASDrawer, MASDrawerProps } from \"@app/common\";\nimport \"./InstanceDrawer.css\";\nimport {\n  InstanceDrawerContent,\n  InstanceDrawerContentProps,\n} from \"@app/modules/InstanceDrawer/InstanceDrawerContent\";\nimport { useInstanceDrawer } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\nimport { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  | \"drawerHeaderProps\"\n  | \"panelBodyContent\"\n  | \"[data-ouia-app-id]\"\n  | \"isExpanded\"\n  | \"isLoading\"\n  | \"onClose\"\n  | \"notRequiredDrawerContentBackground\"\n  | \"children\"\n> &\n  InstanceDrawerContentProps & {\n    renderContent: (props: {\n      openDrawer: () => void;\n      closeDrawer: () => void;\n      setInstance: (instance: KafkaRequest) => void;\n    }) => ReactElement;\n  };\n\nconst InstanceDrawer: VoidFunctionComponent<InstanceDrawerProps> = ({\n  renderContent,\n  \"data-ouia-app-id\": dataOuiaAppId,\n  tokenEndPointUrl,\n}) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const {\n    isInstanceDrawerOpen,\n    instanceDrawerInstance,\n    openInstanceDrawer,\n    closeInstanceDrawer,\n    setInstanceDrawerInstance,\n    noInstances,\n  } = useInstanceDrawer();\n\n  const content = useMemo(\n    () =>\n      renderContent({\n        closeDrawer: closeInstanceDrawer,\n        openDrawer: openInstanceDrawer,\n        setInstance: setInstanceDrawerInstance,\n      }),\n    [\n      closeInstanceDrawer,\n      openInstanceDrawer,\n      renderContent,\n      setInstanceDrawerInstance,\n    ]\n  );\n\n  return (\n    <MASDrawer\n      isExpanded={isInstanceDrawerOpen}\n      isLoading={instanceDrawerInstance === undefined}\n      onClose={closeInstanceDrawer}\n      panelBodyContent={\n        <InstanceDrawerContent tokenEndPointUrl={tokenEndPointUrl} />\n      }\n      drawerHeaderProps={{\n        text: { label: t(\"instance_name\") },\n        title: { value: instanceDrawerInstance?.name, headingLevel: \"h1\" },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={noInstances}\n    >\n      {content}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import { FunctionComponent, createContext, useContext, useState } from \"react\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\nimport { KafkaInstance } from \"@rhoas/app-services-ui-shared\";\n\nexport type InstanceDrawerContextProps = {\n  isInstanceDrawerOpen: boolean;\n  instanceDrawerTab: InstanceDrawerTab;\n  setInstanceDrawerTab: (tab: InstanceDrawerTab) => void;\n  openInstanceDrawer: (tab?: InstanceDrawerTab) => void;\n  closeInstanceDrawer: () => void;\n  instanceDrawerInstance: KafkaInstance | undefined;\n  setInstanceDrawerInstance: (instance: KafkaInstance) => void;\n  setNoInstances: (noInstances: boolean) => void;\n  noInstances: boolean;\n};\n\nexport const InstanceDrawerContext = createContext<\n  InstanceDrawerContextProps | undefined\n>(undefined);\n\nexport const useInstanceDrawer = (): InstanceDrawerContextProps => {\n  const answer = useContext(InstanceDrawerContext);\n  if (answer === undefined) {\n    throw new Error(\"must be used inside a InstanceDrawerContext provider\");\n  }\n  return answer;\n};\n\nexport type InstanceDrawerContextProviderProps = {\n  initialTab?: InstanceDrawerTab;\n  initialInstance?: KafkaInstance;\n  initialNoInstances?: boolean;\n};\n\nexport const InstanceDrawerContextProvider: FunctionComponent<\n  InstanceDrawerContextProviderProps\n> = ({ initialTab, initialInstance, initialNoInstances = false, children }) => {\n  const defaultTab = InstanceDrawerTab.DETAILS;\n  const [instanceDrawerTab, setInstanceDrawerTab] = useState<\n    InstanceDrawerTab | undefined\n  >(initialTab);\n  const [instanceDrawerInstance, setInstanceDrawerInstance] = useState<\n    KafkaInstance | undefined\n  >(initialInstance);\n  const [noInstances, setNoInstances] = useState<boolean>(initialNoInstances);\n  return (\n    <InstanceDrawerContext.Provider\n      value={{\n        isInstanceDrawerOpen: instanceDrawerTab !== undefined,\n        instanceDrawerTab:\n          instanceDrawerTab === undefined ? defaultTab : instanceDrawerTab,\n        setInstanceDrawerTab,\n        instanceDrawerInstance,\n        setInstanceDrawerInstance,\n        setNoInstances,\n        noInstances,\n        openInstanceDrawer: (tab) => {\n          if (tab) {\n            setInstanceDrawerTab(tab);\n          } else {\n            setInstanceDrawerTab(defaultTab);\n          }\n        },\n        closeInstanceDrawer: () => {\n          setInstanceDrawerTab(undefined);\n          setInstanceDrawerInstance(undefined);\n        },\n      }}\n    >\n      {children}\n    </InstanceDrawerContext.Provider>\n  );\n};\n","export enum InstanceDrawerTab {\n  DETAILS = \"details\",\n  CONNECTION = \"connection\",\n}\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { MASPagination } from \"@app/common\";\nimport { PaginationVariant } from \"@patternfly/react-core\";\n\nexport type PaginationProps = {\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  total,\n  page,\n  perPage,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  if (total > 0) {\n    return (\n      <MASPagination\n        widgetId=\"pagination-cloudProviderOptions-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        titles={{\n          paginationTitle: t(\"full_pagination\"),\n          perPageSuffix: t(\"per_page_suffix\"),\n          toFirstPage: t(\"to_first_page\"),\n          toPreviousPage: t(\"to_previous_page\"),\n          toLastPage: t(\"to_last_page\"),\n          toNextPage: t(\"to_next_page\"),\n          optionsToggle: t(\"options_toggle\"),\n          currPage: t(\"curr_page\"),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type NoResultsFoundProps = {\n  count: number;\n  dataLoaded: boolean;\n};\nexport const NoResultsFound: FunctionComponent<NoResultsFoundProps> = ({\n  count,\n  dataLoaded,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  if (count < 1 && dataLoaded) {\n    return (\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t(\"no_results_found\"),\n        }}\n        emptyStateBodyProps={{\n          body: t(\"adjust_your_filters_and_try_again\"),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent, MouseEvent, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  sortable,\n  SortByDirection,\n} from \"@patternfly/react-table\";\nimport { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n} from \"@app/utils\";\nimport { Skeleton } from \"@patternfly/react-core\";\nimport { Link } from \"react-router-dom\";\nimport {\n  StatusColumn,\n  StreamsToolbar,\n  StreamsToolbarProps,\n} from \"@app/modules/OpenshiftStreams/components\";\nimport { MASTable, MASTableProps } from \"@app/common\";\nimport { Pagination } from \"@app/modules/OpenshiftStreams/components/StreamsTable/Pagination\";\nimport { NoResultsFound } from \"@app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound\";\nimport { useInstanceDrawer } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\n\nexport type StreamsTableProps = Pick<\n  StreamsToolbarProps,\n  | \"page\"\n  | \"perPage\"\n  | \"total\"\n  | \"filterSelected\"\n  | \"setFilterSelected\"\n  | \"filteredValue\"\n  | \"setFilteredValue\"\n  | \"onCreate\"\n  | \"refresh\"\n  | \"handleCreateInstanceModal\"\n> & {\n  onDeleteInstance: (instance: KafkaRequest) => Promise<void>;\n  onChangeOwner: (instance: KafkaRequest) => Promise<void>;\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  loggedInUser: string | undefined;\n  expectedTotal: number;\n  kafkaDataLoaded: boolean;\n  kafkaInstanceItems?: KafkaRequest[];\n  isOrgAdmin?: boolean;\n  setOrderBy: (order: string) => void;\n  orderBy: string;\n};\nexport const StreamsTable: FunctionComponent<StreamsTableProps> = ({\n  onDeleteInstance,\n  onChangeOwner,\n  onViewInstance,\n  onViewConnection,\n  loggedInUser,\n  page,\n  perPage,\n  total,\n  expectedTotal,\n  kafkaDataLoaded,\n  kafkaInstanceItems,\n  isOrgAdmin,\n  setOrderBy,\n  orderBy,\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  onCreate,\n  refresh,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { instanceDrawerInstance } = useInstanceDrawer();\n\n  const cells = [\n    { title: t(\"name\"), transforms: [sortable] },\n    { title: t(\"cloud_provider\"), transforms: [sortable] },\n    { title: t(\"region\"), transforms: [sortable] },\n    { title: t(\"owner\"), transforms: [sortable] },\n    { title: t(\"status\"), transforms: [sortable] },\n    { title: t(\"time_created\"), transforms: [sortable] },\n  ];\n\n  const sortBy = useMemo((): ISortBy | undefined => {\n    const getIndexForSortParameter = (parameter: string) => {\n      switch (parameter.toLowerCase()) {\n        case \"name\":\n          return 0;\n        case \"cloud_provider\":\n          return 1;\n        case \"region\":\n          return 2;\n        case \"owner\":\n          return 3;\n        case \"status\":\n          return 4;\n        case \"created_at\":\n          return 5;\n        default:\n          return undefined;\n      }\n    };\n\n    const sort: string[] = orderBy?.split(\" \") || [];\n    if (sort.length > 1) {\n      return {\n        index: getIndexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  }, [orderBy]);\n\n  const rows = useMemo(() => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: cells.length,\n      });\n    }\n    kafkaInstanceItems?.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link to={`kafkas/${row?.id}/dashboard`}>{name}</Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t(\"ago\"))}\n                <br />\n                {instance_type === InstanceType?.eval && \"48 hours duration\"}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  }, [\n    page,\n    perPage,\n    expectedTotal,\n    kafkaDataLoaded,\n    kafkaInstanceItems,\n    cells.length,\n    t,\n  ]);\n\n  const actionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: \"auto\",\n          cursor: \"default\",\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t(\"view_details\"),\n        id: \"view-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionDetails\",\n        onClick: (event: MouseEvent) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"view-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_view_kafka\"),\n        },\n      } as IAction,\n      {\n        title: t(\"view_connection_information\"),\n        id: \"connect-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionConnection\",\n        onClick: (event: MouseEvent) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"connect-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_connect_kafka\"),\n        },\n      } as IAction,\n      {\n        title: t(\"change_owner\"),\n        id: \"change-owner\",\n        [\"data-testid\"]: \"tableStreams-actionChangeOwner\",\n        onClick: (event: MouseEvent) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, \"change-owner\"),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_change_owner\"),\n        },\n      } as IAction,\n      {\n        title: t(\"delete_instance\"),\n        id: \"delete-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionDelete\",\n        onClick: (event: MouseEvent) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"delete-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_delete_kafka\"),\n        },\n      } as IAction,\n    ];\n    return resolver;\n  };\n\n  const onSelectKebabDropdownOption = (\n    event: MouseEvent,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === \"view-instanceDrawerInstance\") {\n      onViewInstance(originalData);\n      //set selected row for view instanceDrawerInstance and connect instanceDrawerInstance\n    } else if (selectedOption === \"connect-instanceDrawerInstance\") {\n      onViewConnection(originalData);\n    } else if (selectedOption === \"change-owner\") {\n      onChangeOwner(originalData);\n    } else if (selectedOption === \"delete-instanceDrawerInstance\") {\n      deleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n\n    const previousNode =\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const deleteInstance = async (kafka: KafkaRequest) => {\n    await onDeleteInstance(kafka);\n  };\n\n  const onSort: OnSort = (_event, index, direction, extraData) => {\n    const getParameterForSortIndex = (index: number) => {\n      switch (index) {\n        case 0:\n          return \"name\";\n        case 1:\n          return \"cloud_provider\";\n        case 2:\n          return \"region\";\n        case 3:\n          return \"owner\";\n        case 4:\n          return \"status\";\n        case 5:\n          return \"created_at\";\n        default:\n          return \"\";\n      }\n    };\n\n    let myDirection = direction;\n    if (sortBy?.index !== index && extraData.property === \"time-created\") {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = SortByDirection.desc;\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const onRowClick: MASTableProps[\"onRowClick\"] = (event, _, row) => {\n    if (event.target instanceof HTMLElement) {\n      const tagName = event.target.tagName.toLowerCase();\n      // Open instance drawer on row click except kebab button click or opening the kafka instance\n      if (tagName === \"button\" || tagName === \"a\") {\n        return;\n      }\n    }\n    onViewInstance(row?.originalData);\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable\n        tableProps={{\n          cells,\n          rows,\n          \"aria-label\": t(\"cluster_instance_list\"),\n          actionResolver,\n          onSort,\n          sortBy,\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={instanceDrawerInstance?.name}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n        loggedInUser={loggedInUser}\n      />\n      <NoResultsFound\n        count={kafkaInstanceItems?.length || 0}\n        dataLoaded={kafkaDataLoaded}\n      />\n      <Pagination total={total} page={page} perPage={perPage} />\n    </>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\nexport function useTimeout(callback: () => void, delay: number): void {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import { SetStateAction, Dispatch, useEffect, useState } from \"react\";\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    // Opera 12.10 and Firefox 18 and later support\n    return \"visibilitychange\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msvisibilitychange\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitvisibilitychange\";\n  }\n  return \"\";\n}\nexport function getBrowserDocumentHiddenProp(): keyof XDocument | undefined {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    return \"hidden\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msHidden\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitHidden\";\n  }\n  return undefined;\n}\nexport function getIsDocumentHidden(): boolean {\n  const hiddenKey = getBrowserDocumentHiddenProp();\n  return hiddenKey !== undefined && !(document as XDocument)[hiddenKey];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: Dispatch<SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlert, useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n} from \"@rhoas/kafka-management-sdk\";\nimport { usePageVisibility } from \"@app/hooks/usePageVisibility\";\nimport { InstanceStatus, MAX_POLL_INTERVAL } from \"@app/utils\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useTimeout } from \"@app/hooks/useTimeout\";\n\nexport const KafkaStatusAlerts: FunctionComponent = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { addAlert } = useAlert() || {};\n  const auth = useAuth();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const { isVisible } = usePageVisibility();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  const fetchCurrentUserKafkas = useCallback(async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await apisService.getKafkas(\"\", \"\", \"\", filter).then((res) => {\n        const kafkaInstances = res.data;\n        setCurrentUserKafkas(kafkaInstances.items);\n      });\n    }\n  }, [auth, basePath, isVisible, loggedInUser]);\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [fetchCurrentUserKafkas, loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  const addAlertAfterSuccessDeletion = useCallback(() => {\n    const removeKafkaFromDeleted = (name: string) => {\n      const index = deletedKafkas.findIndex((k) => k === name);\n      if (index > -1) {\n        const prev = Object.assign([], deletedKafkas);\n        prev.splice(index, 1);\n        setDeletedKafkas(prev);\n      }\n    };\n\n    if (currentUserKafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserKafkas.filter(\n        (k) =>\n          k.status === InstanceStatus.DEPROVISION ||\n          k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || \"\");\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [\n        ...deletedKafkas,\n        ...notPresentKafkas,\n      ];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserKafkas?.findIndex(\n          (item) => item.name === k\n        );\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t(\"kafka_successfully_deleted\", { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  }, [addAlert, currentUserKafkas, deletedKafkas, t]);\n\n  const addAlertAfterSuccessCreation = useCallback(() => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign(\n        [],\n        currentUserKafkas\n      ).filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.READY ||\n          item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t(\"kafka_successfully_created\"),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t(\"kafka_success_message\", {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: \"toastCreateKafka-success\",\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t(\"kafka_not_created\"),\n                variant: AlertVariant.danger,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t(\"kafka_failed_message\", {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: \"toastCreateKafka-failed\",\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      currentUserKafkas?.filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.PROVISIONING ||\n          item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  }, [addAlert, currentUserKafkas, items, t]);\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [\n    addAlertAfterSuccessCreation,\n    addAlertAfterSuccessDeletion,\n    currentUserKafkas,\n  ]);\n\n  return <></>;\n};\n","import {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\n// eslint-disable-next-line no-restricted-imports\nimport dayjs from \"dayjs\";\nimport {\n  AlertVariant,\n  Card,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport { usePagination } from \"@app/common\";\nimport { useTimeout } from \"@app/hooks/useTimeout\";\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from \"@app/utils\";\nimport { usePageVisibility } from \"@app/hooks/usePageVisibility\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from \"@rhoas/kafka-management-sdk\";\nimport \"./StreamsTableConnected.css\";\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from \"@rhoas/app-services-ui-shared\";\nimport { useFederated } from \"@app/contexts\";\nimport \"@app/modules/styles.css\";\nimport {\n  FilterType,\n  KafkaEmptyState,\n  Unauthorized,\n} from \"@app/modules/OpenshiftStreams/components\";\nimport { useInstanceDrawer } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\nimport { StreamsTable } from \"@app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable\";\nimport { KafkaStatusAlerts } from \"@app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts\";\n\nexport type StreamsTableProps = {\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n};\n\nexport const StreamsTableConnected: FunctionComponent<StreamsTableProps> = ({\n  preCreateInstance,\n}: StreamsTableProps) => {\n  dayjs.extend(localizedFormat);\n  const { shouldOpenCreateModal } = useFederated() || {};\n\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = useMemo(\n    () => new URLSearchParams(location.search),\n    [location.search]\n  );\n  const { page = 1, perPage = 10 } = usePagination() || {};\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { addAlert } = useAlert() || {};\n  const { showModal: showCreateModal } =\n    useModal<ModalType.KasCreateInstance>();\n  const { showModal: showTransferOwnershipModal } =\n    useModal<ModalType.KasTransferOwnership>();\n  const { hideModal: hideDeleteModal, showModal: showDeleteModal } =\n    useModal<ModalType.KasDeleteInstance>();\n  const {\n    setInstanceDrawerTab,\n    setInstanceDrawerInstance,\n    instanceDrawerInstance,\n    setNoInstances,\n  } = useInstanceDrawer();\n  const history = useHistory();\n\n  // Kafka list state\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<\n    KafkaRequestList | undefined\n  >();\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [expectedTotal, setExpectedTotal] = useState<number>(3);\n\n  // filter and sort state\n  const [orderBy, setOrderBy] = useState<string>(\"created_at desc\");\n  const [filterSelected, setFilterSelected] = useState(\"name\");\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n  // user state\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  // States to sort out\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n\n  const handleCreateInstanceModal = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n\n    if (open) {\n      openCreateModal();\n    }\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setInstanceDrawerInstance(instance);\n    setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setInstanceDrawerInstance(instance);\n    setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n  };\n\n  const getFilterQuery = useCallback(() => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        let filterQuery = \"(\";\n        filterQuery += filterValue\n          .map((val) => {\n            const value = val.value.trim();\n            if (value === InstanceStatus.PROVISIONING) {\n              return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n            }\n            if (value === InstanceStatus.DEPROVISION) {\n              return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n            }\n            return value !== \"\"\n              ? `${filterKey} ${\n                  val.isExact === true ? `= ${value}` : `like %${value}%`\n                }`\n              : \"\";\n          })\n          .join(\" or \");\n        filterQuery += \")\";\n\n        filters.push(filterQuery);\n      }\n    });\n    return filters.join(\" and \");\n  }, [filteredValue]);\n\n  const handleServerError = (error: unknown) => {\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = useCallback(async () => {\n    const filterQuery = getFilterQuery();\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService\n          .getKafkas(\n            page?.toString(),\n            perPage?.toString(),\n            orderBy,\n            filterQuery\n          )\n          .then((res) => {\n            const kafkaInstances = res.data;\n            const kafkaItems = kafkaInstances?.items || [];\n            setKafkaInstancesList(kafkaInstances);\n\n            if (\n              kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal\n            ) {\n              setExpectedTotal(kafkaInstancesList.total);\n            }\n\n            if (\n              waitingForDelete &&\n              filteredValue.length < 1 &&\n              kafkaItems?.length == 0\n            ) {\n              setWaitingForDelete(false);\n            }\n\n            setKafkaDataLoaded(true);\n          });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  }, [\n    auth,\n    basePath,\n    expectedTotal,\n    filteredValue.length,\n    getFilterQuery,\n    isVisible,\n    kafkaInstancesList,\n    orderBy,\n    page,\n    perPage,\n    waitingForDelete,\n  ]);\n\n  const refreshKafkasAfterAction = useCallback(() => {\n    //set the page to laoding state\n    if (kafkaInstancesList?.size === 1) {\n      setKafkaDataLoaded(true);\n    } else {\n      setKafkaDataLoaded(false);\n    }\n    fetchKafkas();\n  }, [fetchKafkas, kafkaInstancesList]);\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = useCallback(() => {\n    setExpectedTotal(\n      (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) + 1\n    );\n  }, [kafkaInstancesList]);\n\n  const openCreateModal = useCallback(() => {\n    showCreateModal(ModalType.KasCreateInstance, {\n      onCreate: () => {\n        onCreate();\n        refreshKafkasAfterAction();\n      },\n    });\n  }, [onCreate, refreshKafkasAfterAction, showCreateModal]);\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    setExpectedTotal(\n      (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) - 1\n    );\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onChangeOwner = async (instance: KafkaRequest) => {\n    showTransferOwnershipModal(ModalType.KasTransferOwnership, {\n      kafka: instance,\n      refreshKafkas: refreshKafkasAfterAction,\n    });\n  };\n\n  const onDeleteInstance = async (kafka: KafkaRequest) => {\n    const doDelete = async () => {\n      await deleteInstance(kafka);\n      onDelete();\n    };\n    if (kafka.status === InstanceStatus.FAILED) {\n      await doDelete();\n    } else {\n      showDeleteModal(ModalType.KasDeleteInstance, {\n        onDelete: doDelete,\n        kafka,\n      });\n    }\n  };\n\n  const deleteInstance = async (instance: KafkaRequest) => {\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instanceDrawerInstance api call\n     */\n    if (instance.id === undefined) {\n      throw new Error(\"kafka instanceDrawerInstance id is not set\");\n    }\n    const accessToken = await auth?.kas.getToken();\n    const apisService = new DefaultApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    onDelete();\n    hideDeleteModal();\n\n    try {\n      await apisService.deleteKafkaById(instance.id, true).then(() => {\n        setWaitingForDelete(true);\n        refreshKafkasAfterAction();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert &&\n        addAlert({\n          title: t(\"common.something_went_wrong\"),\n          variant: AlertVariant.danger,\n          description: reason,\n        });\n    }\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (\n        kafkaInstancesList?.items !== undefined &&\n        kafkaInstancesList.size === 0\n      ) {\n        setSearchParam(\"page\", (page - 1).toString());\n        setSearchParam(\"perPage\", perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n  }, [\n    history,\n    kafkaInstancesList,\n    page,\n    perPage,\n    searchParams,\n    setSearchParam,\n  ]);\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [auth, page, perPage, filteredValue, orderBy, fetchKafkas]);\n\n  useEffect(() => {\n    if (kafkaInstancesList !== undefined && kafkaInstancesList?.size > 0) {\n      const selectedKafkaItem = kafkaInstancesList.items?.find(\n        (kafka) => kafka?.id === instanceDrawerInstance?.id\n      );\n      if (selectedKafkaItem !== undefined) {\n        setInstanceDrawerInstance(selectedKafkaItem);\n      }\n    }\n  }, [instanceDrawerInstance, kafkaInstancesList, setInstanceDrawerInstance]);\n\n  useEffect(() => {\n    setNoInstances(kafkaInstancesList?.size === 0);\n  }, [kafkaInstancesList, setNoInstances]);\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n    auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen =\n        shouldOpenCreateModal && (await shouldOpenCreateModal());\n      if (shouldOpen) {\n        openCreateModal();\n      }\n    };\n    openModal();\n  }, [openCreateModal, shouldOpenCreateModal]);\n\n  useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n  if (isUserUnauthorized) {\n    return <Unauthorized />;\n  }\n\n  const isDisplayKafkaEmptyState =\n    kafkaDataLoaded &&\n    filteredValue.length < 1 &&\n    kafkaInstancesList !== undefined &&\n    kafkaInstancesList?.total < 1;\n\n  if (isDisplayKafkaEmptyState) {\n    return (\n      <KafkaEmptyState handleCreateInstanceModal={handleCreateInstanceModal} />\n    );\n  } else if (isDisplayKafkaEmptyState !== undefined) {\n    return (\n      <PageSection\n        className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n        variant={PageSectionVariants.default}\n        padding={{ default: \"noPadding\" }}\n      >\n        <Card ouiaId=\"card-controlplane\">\n          <StreamsTable\n            onDeleteInstance={onDeleteInstance}\n            onViewInstance={onViewInstance}\n            onViewConnection={onViewConnection}\n            onChangeOwner={onChangeOwner}\n            loggedInUser={loggedInUser}\n            page={page}\n            perPage={perPage}\n            total={kafkaInstancesList?.total || 0}\n            isOrgAdmin={isOrgAdmin}\n            expectedTotal={expectedTotal}\n            kafkaDataLoaded={kafkaDataLoaded}\n            kafkaInstanceItems={kafkaInstancesList?.items}\n            setOrderBy={setOrderBy}\n            setFilterSelected={setFilterSelected}\n            setFilteredValue={setFilteredValue}\n            filteredValue={filteredValue}\n            handleCreateInstanceModal={handleCreateInstanceModal}\n            orderBy={orderBy}\n            filterSelected={filterSelected}\n            onCreate={onCreate}\n            refresh={refreshKafkasAfterAction}\n          />\n        </Card>\n        <KafkaStatusAlerts />\n      </PageSection>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, FlexItem, Spinner } from \"@patternfly/react-core\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/js/icons/check-circle-icon\";\nimport PendingIcon from \"@patternfly/react-icons/dist/js/icons/pending-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/js/icons/exclamation-circle-icon\";\nimport { statusOptions } from \"@app/utils/utils\";\nimport \"./StatusColumn.css\";\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const Status: FunctionComponent = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t(\"creation_pending\");\n    }\n  };\n\n  const StatusIcon: FunctionComponent = () => {\n    const statusIcon = getStatusIcon();\n    if (statusIcon) {\n      return <FlexItem spacer={{ default: \"spacerSm\" }}>{statusIcon}</FlexItem>;\n    }\n    return <></>;\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size=\"md\"\n            aria-label={instanceName}\n            aria-valuetext=\"Creation in progress\"\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <StatusIcon />\n      <FlexItem>\n        <Status />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { useTranslation } from \"react-i18next\";\nimport { ReactElement } from \"react\";\n\nexport const useTooltipContent = (\n  isMaxFilter: boolean,\n  fieldName?: string\n): ReactElement => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  if (isMaxFilter) {\n    return <div>{t(\"max_filter_message\")}</div>;\n  }\n  if (fieldName === \"owner\") {\n    return <div>{t(\"owner_field_invalid_message\", { name: fieldName })}</div>;\n  }\n  return <div>{t(\"input_field_invalid_message\", { name: fieldName })}</div>;\n};\n","import { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { cloudProviderOptions, KeyValueOptions } from \"@app/utils\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\n\nexport type CloudProviderFilterProps = FilterProps;\n\nexport const CloudProviderFilter: React.FunctionComponent<\n  CloudProviderFilterProps\n> = ({\n  getSelectionForFilter,\n  filterSelected,\n  onDeleteChipGroup,\n  onDeleteChip,\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const options: KeyValueOptions[] = cloudProviderOptions.map(\n    (cloudProvider) => {\n      return {\n        label: t(cloudProvider.value),\n        value: cloudProvider.value,\n        disabled: false,\n      };\n    }\n  );\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"cloud_provider\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip && onDeleteChip(\"cloud_provider\", chip, options)\n      }\n      deleteChipGroup={() =>\n        onDeleteChipGroup && onDeleteChipGroup(\"cloud_provider\")\n      }\n      categoryName={t(\"cloud_provider\")}\n      showToolbarItem={filterSelected === \"cloud_provider\"}\n    >\n      <CloudProviderSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype CloudProviderSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  options: KeyValueOptions[];\n};\n\nconst CloudProviderSelect: React.FunctionComponent<\n  CloudProviderSelectProps\n> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const [expanded, setExpanded] = useState(false);\n\n  const onToggle = () => {\n    setExpanded((prevState) => !prevState);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"cloud_provider\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue && removeFilterValue(\"cloud_provider\");\n    setExpanded(false);\n  };\n\n  if (filterSelected === \"cloud_provider\") {\n    return (\n      <Select\n        id=\"cloud-provider-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select cloud provider\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"cloud_provider\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_cloud_provider\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter &&\n              isDisabledSelectOption(\"cloud_provider\", option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { FunctionComponent, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  TextInputProps,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n\nexport type NameFilterProps = FilterProps;\n\nexport const NameFilter: FunctionComponent<NameFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [valid, setValid] = useState<boolean>(true);\n  const [value, setValue] = useState<string | undefined>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, \"name\");\n\n  const change = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onKeyPress: TextInputProps[\"onKeyPress\"] = (event) => {\n    if (event.key === \"Enter\" && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != \"\") {\n      if (validate(value)) {\n        updateFilter(\"name\", { value: value, isExact: false }, false);\n        setValue(\"\");\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const renderNameInput = () => {\n    const v = !valid || isMaxFilter;\n    const FilterTooltip: FunctionComponent = () => {\n      if (v) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter || !valid}\n            content={tooltipContent}\n            reference={inputRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    if (filterSelected?.toLowerCase() === \"name\") {\n      return (\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"filterText\"\n            type=\"search\"\n            aria-label=\"Search filter input\"\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            placeholder={t(\"filter_by_name_lower\")}\n            onChange={change}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={!valid || isMaxFilter}\n            onClick={() => onFilter()}\n            aria-label=\"Search instances\"\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"name\")}\n      deleteChip={(_category, chip) => onDeleteChip(\"name\", chip)}\n      deleteChipGroup={() => onDeleteChipGroup(\"name\")}\n      categoryName={t(\"name\")}\n      showToolbarItem={filterSelected?.toLowerCase() === \"name\"}\n    >\n      {renderNameInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { FunctionComponent, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  TextInputProps,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n\nexport type OwnerFilterProps = FilterProps;\nexport const OwnerFilter: FunctionComponent<OwnerFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChipGroup,\n  onDeleteChip,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, \"owner\");\n\n  const [value, setValue] = useState<string | undefined>();\n  const [valid, setValid] = useState<boolean>(true);\n\n  const validate = (value?: string) => {\n    return value ? !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value.trim()) : true;\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != \"\") {\n      if (validate(value)) {\n        updateFilter(\"owner\", { value: value, isExact: false }, false);\n        setValue(\"\");\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const onKeyPress: TextInputProps[\"onKeyPress\"] = (event) => {\n    if (event.key === \"Enter\" && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onChange = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const renderOwnerInput = () => {\n    if (filterSelected?.toLowerCase() === \"owner\") {\n      const v = !valid || isMaxFilter;\n\n      const FilterTooltip: FunctionComponent = () => {\n        if (v) {\n          return (\n            <Tooltip\n              isVisible={isMaxFilter || !valid}\n              content={tooltipContent}\n              reference={inputRef}\n            />\n          );\n        }\n        return <></>;\n      };\n\n      return (\n        <InputGroup>\n          <TextInput\n            name=\"owner\"\n            id=\"filterOwners\"\n            type=\"search\"\n            aria-label=\"Search filter input\"\n            placeholder={t(\"filter_by_owner\")}\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            isDisabled={v}\n            variant={ButtonVariant.control}\n            onClick={onFilter}\n            aria-label=\"Search owners\"\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"owner\")}\n      deleteChip={(_category, chip) => onDeleteChip(\"owner\", chip)}\n      deleteChipGroup={() => onDeleteChipGroup(\"owner\")}\n      categoryName={t(\"owner\")}\n      showToolbarItem={filterSelected?.toLowerCase() === \"owner\"}\n    >\n      {renderOwnerInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { cloudRegionOptions, KeyValueOptions } from \"@app/utils\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\n\nexport type RegionFilterProps = FilterProps;\n\nexport const RegionFilter: React.FunctionComponent<RegionFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  removeFilterValue,\n  isDisabledSelectOption,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const options = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"region\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) => onDeleteChip(\"region\", chip, options)}\n      deleteChipGroup={() => onDeleteChipGroup(\"region\")}\n      categoryName={t(\"region\")}\n      showToolbarItem={filterSelected === \"region\"}\n    >\n      <RegionSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype RegionSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  options: KeyValueOptions[];\n};\n\nconst RegionSelect: React.FunctionComponent<RegionSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"region\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue(\"region\");\n    setExpanded(false);\n  };\n\n  if (filterSelected === \"region\") {\n    return (\n      <Select\n        id=\"region-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select region\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"region\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_region\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption(\"region\", option.value)\n            );\n          };\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent, MouseEvent, ChangeEvent, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nexport type FilterSelectProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const FilterSelect: FunctionComponent<FilterSelectProps> = ({\n  setFilterSelected,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const onToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onSelect = (\n    _event: MouseEvent | ChangeEvent,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const options = [\n    { label: t(\"name\"), value: \"name\", disabled: false },\n    { label: t(\"cloud_provider\"), value: \"cloud_provider\", disabled: false },\n    { label: t(\"region\"), value: \"region\", disabled: false },\n    { label: t(\"owner\"), value: \"owner\", disabled: false },\n    { label: t(\"status\"), value: \"status\", disabled: false },\n  ];\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label=\"Select filter\"\n        onToggle={onToggle}\n        selections={filterSelected}\n        isOpen={isFilterExpanded}\n        onSelect={onSelect}\n      >\n        {options.map((option, index) => (\n          <SelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n          >\n            {option.label}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InstanceStatus, statusOptions, KeyValueOptions } from \"@app/utils\";\n\nexport type StatusFilter = FilterProps;\n\nexport const StatusFilter: React.FunctionComponent<StatusFilter> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"status\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip(\"status\", chip, statusFilterOptions)\n      }\n      deleteChipGroup={() => onDeleteChipGroup(\"status\")}\n      categoryName={t(\"status\")}\n      showToolbarItem={filterSelected === \"status\"}\n    >\n      <StatusSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        statusFilterOptions={statusFilterOptions}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype StatusSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  statusFilterOptions: KeyValueOptions[];\n};\n\nconst StatusSelect: React.FunctionComponent<StatusSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  statusFilterOptions,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const selectRef = useRef<Select>(null);\n\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"status\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n  };\n\n  const clear = () => {\n    removeFilterValue(\"status\");\n    setExpanded(false);\n  };\n  if (filterSelected === \"status\") {\n    return (\n      <Select\n        id=\"status-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select status\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"status\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_status\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {statusFilterOptions.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption(\"status\", option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { ToolbarChip, ToolbarGroup } from \"@patternfly/react-core\";\nimport { CloudProviderFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter\";\nimport { NameFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/NameFilter\";\nimport { OwnerFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter\";\nimport { RegionFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/RegionFilter\";\nimport { FilterSelect } from \"@app/modules/OpenshiftStreams/components/TableFilters/FilterSelect\";\nimport { StatusFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/StatusFilter\";\nimport { KeyValueOptions } from \"@app/utils\";\nimport {\n  FilterType,\n  FilterValue,\n} from \"@app/modules/OpenshiftStreams/components\";\n\nexport type StreamsFilterGroupProps = {\n  isMaxFilter: boolean;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const StreamsFilterGroup: FunctionComponent<StreamsFilterGroupProps> = ({\n  isMaxFilter,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n}) => {\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(\n      ({ filterKey }) => filterKey === key\n    );\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const updateFilter = (\n    key: string,\n    filter: FilterValue,\n    removeIfPresent: boolean\n  ) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex(\n          (f) => f.value === filter.value\n        ); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter(\n      (filter) => filter.filterKey === key\n    );\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (\n    category: string,\n    chip: string | ToolbarChip,\n    filterOptions?: KeyValueOptions[]\n  ) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    const prevFilterValue: FilterValue[] = Object.assign(\n      [],\n      newFilteredValue[filterIndex]?.filterValue\n    );\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter cloudProviderOptions\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find(\n        (option) => option.label === chip.toString()\n      )?.value;\n    }\n    /**\n     * Delete selected chip from filter cloudProviderOptions\n     */\n    const chipIndex = prevFilterValue.findIndex(\n      (val) => val.value === filterChip\n    );\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const removeFilteredValue = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex(\n      (filter) => filter.filterKey === value\n    );\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n  };\n\n  return (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <FilterSelect\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n        <NameFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <CloudProviderFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <RegionFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <OwnerFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <StatusFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n      </ToolbarGroup>\n    </>\n  );\n};\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\nimport FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\nimport { MASPagination, MASToolbar, ToolbarItemProps } from \"@app/common\";\nimport { InstanceStatus, MAX_FILTER_LIMIT } from \"@app/utils\";\nimport \"./StreamsToolbar.css\";\nimport { StreamsFilterGroup } from \"@app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup\";\nimport { FilterType } from \"@app/modules/OpenshiftStreams/components\";\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = \"name\",\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const handleMaxFilters = useCallback(() => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: FilterType) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === \"status\"\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.PROVISIONING\n            )\n          : [];\n      const deprovisionStatus =\n        filterKey === \"status\"\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.DEPROVISION\n            )\n          : [];\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  }, [filteredValue]);\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [handleMaxFilters]);\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateInstanceModal}\n          data-testid=\"tableStreams-buttonCreateKafka\"\n          ouiaId=\"button-create\"\n        >\n          {t(\"create_kafka_instance\")}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-cloudProviderOptions-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t(\"minimal_pagination\"),\n            perPageSuffix: t(\"per_page_suffix\"),\n            toFirstPage: t(\"to_first_page\"),\n            toPreviousPage: t(\"to_previous_page\"),\n            toLastPage: t(\"to_last_page\"),\n            toNextPage: t(\"to_next_page\"),\n            optionsToggle: t(\"options_toggle\"),\n            currPage: t(\"curr_page\"),\n          }}\n        />\n      ),\n      variant: \"pagination\",\n      alignment: { default: \"alignRight\" },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: \"instanceDrawerInstance-toolbar\",\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: \"md\",\n        inset: { xl: \"insetLg\" },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: \"md\" }}\n      toggleGroupItems={\n        <StreamsFilterGroup\n          isMaxFilter={isMaxFilter}\n          filteredValue={filteredValue}\n          setFilteredValue={setFilteredValue}\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n      }\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { MASEmptyState } from \"@app/common\";\nimport LockIcon from \"@patternfly/react-icons/dist/js/icons/lock-icon\";\n\nexport const Unauthorized: FunctionComponent = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: \"noPadding\" }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t(\"access_permissions_needed\"),\n          headingLevel: \"h2\",\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            \"to_access_kafka_instances_contact_your_organization_administrators\"\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n","import { FunctionComponent, useContext } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from \"@patternfly/quickstarts\";\nimport { Button, ButtonVariant, PageSection } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\n\nexport type KafkaEmptyStateProps = {\n  handleCreateInstanceModal: () => void;\n};\nexport const KafkaEmptyState: FunctionComponent<KafkaEmptyStateProps> = ({\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  return (\n    <PageSection padding={{ default: \"noPadding\" }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        emptyStateBodyProps={{\n          body: (\n            <>\n              <Trans\n                i18nKey=\"create_a_kafka_instance_to_get_started\"\n                ns={[\"kasTemporaryFixMe\"]}\n                components={[\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    key=\"btn-quick-start\"\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart(\"getting-started\")\n                    }\n                  />,\n                ]}\n              />\n            </>\n          ),\n        }}\n        titleProps={{ title: t(\"no_kafka_instances_yet\") }}\n      >\n        <Button\n          data-testid=\"emptyStateStreams-buttonCreateKafka\"\n          variant={ButtonVariant.primary}\n          onClick={() =>\n            handleCreateInstanceModal && handleCreateInstanceModal()\n          }\n          ouiaId=\"button-create\"\n        >\n          {t(\"create_kafka_instance\")}\n        </Button>\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n","import {\n  InstanceDrawer,\n  InstanceDrawerProps,\n} from \"@app/modules/InstanceDrawer\";\nimport { FunctionComponent, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isMobileTablet } from \"@app/utils\";\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nexport type KasLayoutProps = Pick<InstanceDrawerProps, \"tokenEndPointUrl\">;\n\nexport const KasLayout: FunctionComponent<KasLayoutProps> = ({\n  children,\n  tokenEndPointUrl,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      const localStorage = window.localStorage;\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem(\"openSessions\") || \"0\");\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem(\"openSessions\", `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        tokenEndPointUrl={tokenEndPointUrl}\n        renderContent={() => (\n          <main className=\"pf-c-page__main\">\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <TextContent>\n                    <Text component=\"h1\">{t(\"kafka_instances\")}</Text>\n                  </TextContent>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {children}\n          </main>\n        )}\n      />\n      <Modal\n        variant={ModalVariant.small}\n        title=\"Mobile experience\"\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n"],"names":["KasModalLoader","registerModals","useModal","t","useTranslation","ModalType","lazyComponent","lazy","variant","title","useKasModals","ResourcesTab","DetailsTab","InstanceDrawerContent","tokenEndPointUrl","instanceDrawerTab","setInstanceDrawerTab","instanceDrawerInstance","isKafkaPending","status","Suspense","fallback","Tabs","activeKey","toString","onSelect","_","tab","selectTab","Tab","eventKey","TabTitleText","externalServer","bootstrap_server_host","endsWith","getExternalServer","instanceId","id","InstanceDrawer","renderContent","dataOuiaAppId","isInstanceDrawerOpen","openInstanceDrawer","closeInstanceDrawer","setInstanceDrawerInstance","noInstances","content","useMemo","closeDrawer","openDrawer","setInstance","isExpanded","isLoading","undefined","onClose","panelBodyContent","drawerHeaderProps","text","label","value","name","headingLevel","notRequiredDrawerContentBackground","InstanceDrawerContext","createContext","useInstanceDrawer","answer","useContext","Error","InstanceDrawerContextProvider","initialTab","initialInstance","initialNoInstances","children","defaultTab","useState","setNoInstances","Provider","InstanceDrawerTab","Pagination","total","page","perPage","widgetId","itemCount","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","NoResultsFound","count","dataLoaded","emptyStateProps","titleProps","emptyStateBodyProps","body","StreamsTable","onDeleteInstance","onChangeOwner","onViewInstance","onViewConnection","loggedInUser","expectedTotal","kafkaDataLoaded","kafkaInstanceItems","isOrgAdmin","setOrderBy","orderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","onCreate","refresh","handleCreateInstanceModal","cells","transforms","sortable","sortBy","getIndexForSortParameter","parameter","toLowerCase","sort","split","length","index","direction","SortByDirection","rows","tableRow","loadingCount","forEach","row","cloud_provider","region","created_at","owner","instance_type","cloudProviderDisplayName","regionDisplayName","push","Link","to","instanceName","originalData","skeleton","Skeleton","onSelectKebabDropdownOption","event","selectedOption","deleteInstance","previousNode","target","parentElement","previousSibling","focus","kafka","tableProps","actionResolver","rowData","isUserSameAsLoggedIn","additionalProps","tooltip","isDisabled","style","pointerEvents","cursor","onClick","tooltipProps","position","onSort","_event","extraData","myDirection","property","getParameterForSortIndex","hasDefaultCustomRowWrapper","activeRow","onRowClick","HTMLElement","tagName","rowDataTestId","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","getIsDocumentHidden","hiddenKey","doc","document","hidden","msHidden","webkitHidden","getBrowserDocumentHiddenProp","usePageVisibility","isVisible","setIsVisible","onVisibilityChange","visibilityChange","getBrowserVisibilityProp","addEventListener","removeEventListener","KafkaStatusAlerts","addAlert","useAlert","auth","useAuth","deletedKafkas","setDeletedKafkas","currentUserKafkas","setCurrentUserKafkas","items","setItems","setLoggedInUser","kas","useConfig","apiBasePath","basePath","getUsername","then","username","fetchCurrentUserKafkas","useCallback","accessToken","getToken","filter","apisService","DefaultApi","Configuration","getKafkas","res","kafkaInstances","data","addAlertAfterSuccessDeletion","notPresentKafkas","k","findIndex","dk","map","allDeletedKafkas","item","prev","Object","assign","splice","removeKafkaFromDeleted","AlertVariant","addAlertAfterSuccessCreation","lastItemsState","JSON","parse","stringify","completedOrFailedItems","instances","cfItem","description","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","StreamsTableConnected","preCreateInstance","shouldOpenCreateModal","location","useLocation","searchParams","URLSearchParams","search","showModal","showCreateModal","showTransferOwnershipModal","hideModal","hideDeleteModal","showDeleteModal","history","useHistory","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","isUserUnauthorized","setIsUserUnauthorized","setIsOrgAdmin","waitingForDelete","setWaitingForDelete","open","openCreateModal","instance","getFilterQuery","filters","filterKey","filterValue","filterQuery","val","trim","isExact","join","fetchKafkas","kafkaItems","error","errorCode","response","code","handleServerError","refreshKafkasAfterAction","size","onDelete","setSearchParam","set","refreshKafkas","doDelete","deleteKafkaById","reason","selectedKafkaItem","find","isDisplayKafkaEmptyState","PageSection","className","PageSectionVariants","padding","default","Card","ouiaId","StatusColumn","getStatusIcon","Spinner","Flex","statusIcon","FlexItem","spacer","filteredstatus","st","useTooltipContent","isMaxFilter","fieldName","CloudProviderFilter","getSelectionForFilter","onDeleteChipGroup","onDeleteChip","updateFilter","removeFilterValue","isDisabledSelectOption","options","cloudProvider","disabled","ToolbarFilter","chips","deleteChip","_category","chip","deleteChipGroup","categoryName","showToolbarItem","CloudProviderSelect","selectRef","tooltipContent","FilterTooltip","Tooltip","reference","expanded","setExpanded","onToggle","prevState","selection","isPlaceholder","clear","Select","SelectVariant","selections","isOpen","placeholderText","ref","option","SelectOption","NameFilter","valid","setValid","setValue","inputRef","change","input","onKeyPress","key","onFilter","test","validate","v","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","Button","ButtonVariant","renderNameInput","OwnerFilter","renderOwnerInput","RegionFilter","RegionSelect","FilterSelect","isFilterExpanded","setIsFilterExpanded","ToolbarItem","StatusFilter","statusFilterOptions","s","StatusSelect","StreamsFilterGroup","optionValue","newFilterValue","newFilteredValue","removeIfPresent","filterIndex","f","filterValueIndex","selectedFilters","category","filterOptions","prevFilterValue","filterChip","chipIndex","removeFilteredValue","copyFilteredValue","ToolbarGroup","StreamsToolbar","setIsMaxFilter","handleMaxFilters","maxFilterCount","provisioningStatus","deprovisionStatus","toolbarItems","isCompact","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","toggleGroupItems","Unauthorized","isFilled","emptyStateIconProps","icon","KafkaEmptyState","qsContext","QuickStartContext","Trans","i18nKey","ns","components","isSmall","isInline","setActiveQuickStart","KasLayout","isMobileModalOpen","setIsMobileModalOpen","localStorage","window","parseInt","getItem","newCount","setItem","handleMobileModal","Level","LevelItem","TextContent","Text","component","Modal","ModalVariant","actions"],"sourceRoot":""}