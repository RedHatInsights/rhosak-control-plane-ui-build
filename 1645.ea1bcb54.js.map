{"version":3,"file":"1645.ea1bcb54.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/key-icon.js","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/Credentials /Credentials.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.KeyIconConfig = {\n  name: 'KeyIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M802,320 C748.980664,320 706,277.019336 706,224 C706,170.980664 748.980664,128 802,128 C855.019336,128 898,170.980664 898,224 C898,277.019336 855.019336,320 802,320 M704,0 C527.3,0 384,143.3 384,320 C383.937788,357.490503 390.505571,394.696657 403.4,429.9 L0,824.1 L0,1024 L192,1024 L192,896 L320,896 L320,768 L448,768 L597,622 C596.906403,621.881923 596.838304,621.745723 596.8,621.6 C631.220126,633.811107 667.47802,640.034477 704,640 C880.7,640 1024,496.7 1024,320 C1024,143.3 880.7,0 704,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.KeyIcon = require('../createIcon').createIcon(exports.KeyIconConfig);\nexports[\"default\"] = exports.KeyIcon;","import React, { useState } from 'react';\nimport {\n  Bullseye,\n  Button,\n  Checkbox,\n  ClipboardCopy,\n  EmptyStateVariant,\n  InputGroup,\n  InputGroupText,\n  Text,\n  TextContent,\n  TextVariants,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport KeyIcon from '@patternfly/react-icons/dist/js/icons/key-icon';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport { useTranslation } from 'react-i18next';\nimport { MASEmptyState } from '@app/common';\nimport './Credentials.css';\nimport { ServiceAccount } from '@rhoas/kafka-management-sdk';\n\ntype CredentialsProps = {\n  serviceAccount: ServiceAccount;\n  close: () => void;\n};\n\nconst Credentials: React.FunctionComponent<CredentialsProps> = ({\n  serviceAccount,\n  close,\n}) => {\n  const { t } = useTranslation();\n\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const confirm = (checked: boolean) => {\n    setConfirmationCheckbox(checked);\n  };\n\n  return (\n    <>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t('credentials_successfully_generated'),\n          headingLevel: 'h2',\n          size: TitleSizes.lg,\n        }}\n      >\n        <TextContent>\n          <Text component={TextVariants.small} className='pf-u-mt-lg'>\n            {t('connect_to_the_kafka_instance_using_this_clientID_and_secret')}\n          </Text>\n        </TextContent>\n        <InputGroup className='pf-u-mt-lg'>\n          <InputGroupText className='mk--generate-credential__empty-state--input-group'>\n            {t('client_id')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className='pf-u-w-100'\n            data-testid='modalCredentials-copyClientID'\n            textAriaLabel={t('client_id')}\n          >\n            {serviceAccount?.client_id}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className='pf-u-mt-md'>\n          <InputGroupText className='mk--generate-credential__empty-state--input-group'>\n            {t('common.client_secret')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className='pf-u-w-100'\n            data-testid='modalCredentials-copyClientSecret'\n            textAriaLabel={t('common.client_secret')}\n          >\n            {serviceAccount?.client_secret}\n          </ClipboardCopy>\n        </InputGroup>\n        <TextContent>\n          <Text component={TextVariants.small} className='pf-u-mt-lg'>\n            {t('create_service_account_credentials_warning_message')}\n          </Text>\n        </TextContent>\n        <Bullseye className='pf-u-mt-lg'>\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={confirm}\n            id='check-1'\n            name='check1'\n          />\n        </Bullseye>\n        <Button\n          variant='primary'\n          isDisabled={!confirmationCheckbox}\n          onClick={close}\n          data-testid='modalCredentials-buttonClose'\n        >\n          {t('close')}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n};\n\nexport { Credentials };\n\nexport default Credentials;\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant, Button, Modal } from '@patternfly/react-core';\nimport { isServiceApiError } from '@app/utils';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport {\n  Configuration,\n  SecurityApi,\n  ServiceAccount,\n} from '@rhoas/kafka-management-sdk';\nimport {\n  BaseModalProps,\n  ResetServiceAccountCredentialsProps,\n  useAlert,\n  useAuth,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport Credentials from '@app/modules/ServiceAccounts/components/Credentials /Credentials';\n\nenum Step {\n  Confirm = 'Confirm',\n  Credentials = 'Credentials',\n}\n\nconst ResetServiceAccountCredentials: React.FunctionComponent<\n  ResetServiceAccountCredentialsProps & BaseModalProps\n> = ({ serviceAccount, onReset, variant, title, hideModal }) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig() || { kas: {} };\n  const { addAlert } = useAlert() || {};\n\n  const [isModalLoading, setIsModalLoading] = useState(false);\n  const [step, setStep] = useState<Step>(Step.Confirm);\n  const [resetServiceAccount, setResetServiceAccount] = useState<\n    ServiceAccount | undefined\n  >();\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t('something_went_wrong'),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  const resetServiceAccountCreds = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        if (serviceAccount.id === undefined) {\n          throw new Error('id must not be undefined');\n        }\n        setIsModalLoading(true);\n        const response = await apisService.resetServiceAccountCreds(\n          serviceAccount.id\n        );\n        onReset && onReset();\n        setResetServiceAccount(response.data);\n        setStep(Step.Credentials);\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const StepConfirm: React.FunctionComponent = () => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: t('serviceAccount.client_secret_will_be_reset', {\n          serviceAccountId: serviceAccount.name,\n          client_id: serviceAccount.client_id,\n        }),\n      }}\n    />\n  );\n\n  const getModalActions = () => {\n    if (step === Step.Confirm) {\n      return [\n        <Button\n          key='create'\n          variant='primary'\n          type='submit'\n          onClick={resetServiceAccountCreds}\n          spinnerAriaValueText={t('common.submitting_request')}\n          isLoading={isModalLoading}\n        >\n          {t('serviceAccount.reset')}\n        </Button>,\n        <Button key='cancel' variant='link' onClick={handleModalToggle}>\n          {t('common.cancel')}\n        </Button>,\n      ];\n    }\n    return [];\n  };\n\n  const Body: React.FunctionComponent = () => {\n    if (step === Step.Confirm) {\n      return <StepConfirm />;\n    }\n    if (resetServiceAccount === undefined) {\n      throw new Error('resetServiceAccount must not be undefined');\n    }\n    return (\n      <Credentials serviceAccount={resetServiceAccount} close={hideModal} />\n    );\n  };\n\n  return (\n    <Modal\n      id='reset-service-account-modal'\n      variant={variant}\n      title={step === Step.Confirm ? title : ''}\n      isOpen={true}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={getModalActions()}\n    >\n      <Body />\n    </Modal>\n  );\n};\n\nexport { ResetServiceAccountCredentials };\nexport default ResetServiceAccountCredentials;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","serviceAccount","close","t","useTranslation","useState","confirmationCheckbox","setConfirmationCheckbox","emptyStateProps","variant","EmptyStateVariant","emptyStateIconProps","icon","titleProps","title","headingLevel","size","TitleSizes","TextContent","Text","component","TextVariants","className","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","textAriaLabel","client_id","client_secret","Bullseye","Checkbox","label","isChecked","onChange","checked","id","Button","isDisabled","onClick","Step","ResetServiceAccountCredentials","onReset","hideModal","auth","useAuth","basePath","useConfig","kas","addAlert","useAlert","isModalLoading","setIsModalLoading","Confirm","step","setStep","resetServiceAccount","setResetServiceAccount","resetServiceAccountCreds","getToken","accessToken","apisService","SecurityApi","Configuration","undefined","Error","response","data","Credentials","error","reason","AlertVariant","description","handleServerError","handleModalToggle","StepConfirm","dangerouslySetInnerHTML","__html","serviceAccountId","Modal","isOpen","onClose","appendTo","actions","key","type","spinnerAriaValueText","isLoading"],"sourceRoot":""}