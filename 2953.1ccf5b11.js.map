{"version":3,"file":"2953.1ccf5b11.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccounts.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccountsFederated.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsEmpty.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableConnected.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableSection.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/UserUnauthorized.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { ServiceAccountsTableConnected } from \"@app/modules/ServiceAccounts/components/ServiceAccountsTableConnected\";\nimport \"@app/modules/styles.css\";\n\nconst ServiceAccounts: FC = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <>\n      <PageSection\n        variant={PageSectionVariants.light}\n        className=\"pf-m-padding-on-xl\"\n        padding={{ default: \"noPadding\" }}\n      >\n        <TextContent>\n          <Text component=\"h1\"> {t(\"serviceAccount.service_accounts\")}</Text>\n          <Text component=\"p\">\n            {t(\"serviceAccount.service_accounts_title_header_info\")}\n          </Text>\n        </TextContent>\n      </PageSection>\n      <ServiceAccountsTableConnected />\n    </>\n  );\n};\n\nexport { ServiceAccounts };\n","import { FC } from \"react\";\nimport { ServiceAccounts } from \"./ServiceAccounts\";\nimport { ModalProvider } from \"@rhoas/app-services-ui-components\";\nimport { KasModalLoader } from \"@app/modals\";\n\n// Federation version of ServiceAccounts\n\nconst ServiceAccountsFederated: FC = () => {\n  return (\n    <ModalProvider>\n      <ServiceAccounts />\n      <KasModalLoader />\n    </ModalProvider>\n  );\n};\n\nexport default ServiceAccountsFederated;\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\nimport { ModalType, useModal } from \"@rhoas/app-services-ui-shared\";\n\nexport type ServiceAccountsEmptyProps = {\n  fetchServiceAccounts: () => Promise<void>;\n};\nexport const ServiceAccountsEmpty: FunctionComponent<\n  ServiceAccountsEmptyProps\n> = ({ fetchServiceAccounts }) => {\n  const { showModal } = useModal<ModalType.KasCreateServiceAccount>();\n\n  const handleCreateModal = () => {\n    showModal(ModalType.KasCreateServiceAccount, {\n      onCreate: fetchServiceAccounts,\n    });\n  };\n\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <PageSection padding={{ default: \"noPadding\" }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        titleProps={{\n          title: t(\"serviceAccount.you_do_not_have_any_service_accounts_yet\"),\n        }}\n        emptyStateBodyProps={{\n          body: t(\"serviceAccount.create_service_account_to_get_started\"),\n        }}\n        buttonProps={{\n          title: t(\"serviceAccount.create_service_account\"),\n          onClick: handleCreateModal,\n          [\"data-testid\"]: \"emptyStateStreams-buttonCreateServiceAccount\",\n        }}\n      />\n    </PageSection>\n  );\n};\n","import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport {\n  Configuration,\n  SecurityApi,\n  ServiceAccountList,\n  ServiceAccountListItem,\n} from \"@rhoas/kafka-management-sdk\";\nimport { ErrorCodes, isServiceApiError } from \"@app/utils\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { UserUnauthorized } from \"@app/modules/ServiceAccounts/components/UserUnauthorized\";\nimport { MASLoading } from \"@app/common\";\nimport { ServiceAccountsEmpty } from \"@app/modules/ServiceAccounts/components/ServiceAccountsEmpty\";\nimport { ServiceAccountsTableSection } from \"@app/modules/ServiceAccounts/components/ServiceAccountsTableSection\";\n\nexport const ServiceAccountsTableConnected: FunctionComponent = () => {\n  const auth = useAuth();\n  const config = useConfig();\n\n  const [serviceAccountItems, setServiceAccountItems] = useState<\n    ServiceAccountListItem[] | undefined\n  >();\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n\n  const handleServerError = (error: Error) => {\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      errorCode = error.response?.data?.code;\n    }\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    }\n  };\n\n  const fetchServiceAccounts = useCallback(async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && config) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath: config?.ams?.apiBasePath,\n          })\n        );\n        await apisService.getServiceAccounts().then((response) => {\n          const serviceAccounts: ServiceAccountList = response?.data;\n          const items = serviceAccounts?.items || [];\n          const sortedServiceAccounts: ServiceAccountListItem[] | undefined =\n            items?.sort((a, b) =>\n              a.created_at && b.created_at\n                ? b.created_at.localeCompare(a.created_at)\n                : -1\n            );\n          setServiceAccountItems(sortedServiceAccounts);\n        });\n      } catch (error: unknown) {\n        if (error instanceof Error) {\n          handleServerError(error);\n        }\n      }\n    }\n  }, [auth, config]);\n\n  useEffect(() => {\n    fetchServiceAccounts();\n  }, [fetchServiceAccounts]);\n\n  if (isUserUnauthorized) {\n    return <UserUnauthorized />;\n  }\n\n  if (serviceAccountItems === undefined) {\n    return (\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n      >\n        <MASLoading />\n      </PageSection>\n    );\n  }\n  if (serviceAccountItems.length < 1) {\n    return <ServiceAccountsEmpty fetchServiceAccounts={fetchServiceAccounts} />;\n  }\n  return (\n    <ServiceAccountsTableSection\n      fetchServiceAccounts={fetchServiceAccounts}\n      serviceAccountItems={serviceAccountItems}\n    />\n  );\n};\n","import { ServiceAccountListItem } from \"@rhoas/kafka-management-sdk\";\nimport { usePagination } from \"@app/common\";\nimport { FunctionComponent, useState } from \"react\";\nimport { Card, PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { ServiceAccountsTableView } from \"@app/modules/ServiceAccounts/components/ServiceAccountsTableView\";\nimport { ModalType, useModal } from \"@rhoas/app-services-ui-shared\";\n\nexport type ServiceAccountTableSectionProps = {\n  fetchServiceAccounts: () => Promise<void>;\n  serviceAccountItems: ServiceAccountListItem[];\n};\n\nexport const ServiceAccountsTableSection: FunctionComponent<\n  ServiceAccountTableSectionProps\n> = ({ fetchServiceAccounts, serviceAccountItems }) => {\n  const { showModal: showResetCredentialsModal } =\n    useModal<ModalType.KasResetServiceAccountCredentials>();\n  const { showModal: showCreateServiceAccountModal } =\n    useModal<ModalType.KasCreateServiceAccount>();\n  const { showModal: showDeleteServiceAccountModal } =\n    useModal<ModalType.KasDeleteServiceAccount>();\n\n  const [orderBy, setOrderBy] = useState<string>(\"name asc\");\n\n  const { page = 1, perPage = 10 } = usePagination() || {};\n\n  const onResetCredentials = (serviceAccount: ServiceAccountListItem) => {\n    showResetCredentialsModal(ModalType.KasResetServiceAccountCredentials, {\n      serviceAccount,\n    });\n  };\n\n  const onCreateServiceAccount = () => {\n    showCreateServiceAccountModal(ModalType.KasCreateServiceAccount, {\n      onCreate: fetchServiceAccounts,\n    });\n  };\n\n  const onDeleteServiceAccount = (serviceAccount: ServiceAccountListItem) => {\n    showDeleteServiceAccountModal(ModalType.KasDeleteServiceAccount, {\n      serviceAccount,\n      onDelete: fetchServiceAccounts,\n    });\n  };\n\n  return (\n    <PageSection\n      className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n      variant={PageSectionVariants.default}\n      padding={{ default: \"noPadding\" }}\n    >\n      <Card>\n        <ServiceAccountsTableView\n          page={page}\n          perPage={perPage}\n          expectedTotal={0}\n          serviceAccountsDataLoaded={true}\n          serviceAccountItems={serviceAccountItems}\n          orderBy={orderBy}\n          setOrderBy={setOrderBy}\n          onResetCredentials={onResetCredentials}\n          onDeleteServiceAccount={onDeleteServiceAccount}\n          onCreateServiceAccount={onCreateServiceAccount}\n        />\n      </Card>\n    </PageSection>\n  );\n};\n","import { FC, MouseEvent, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  cellWidth,\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  SortByDirection,\n} from \"@patternfly/react-table\";\nimport { Skeleton } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant, MASTable } from \"@app/common\";\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n} from \"@app/utils\";\nimport { ServiceAccountListItem } from \"@rhoas/kafka-management-sdk\";\nimport {\n  ServiceAccountsToolbar,\n  ServiceAccountsToolbarProps,\n} from \"./ServiceAccountsToolbar\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  onCreateServiceAccount: () => void;\n  page: number;\n  perPage: number;\n};\n\nconst ServiceAccountsTableView: FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  onCreateServiceAccount,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const auth = useAuth();\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  useEffect(() => {\n    auth?.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    auth?.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  const tableColumns = [\n    { title: t(\"common.name\") },\n    { title: t(\"common.clientID\") },\n    { title: t(\"common.owner\"), transforms: [cellWidth(20)] },\n    { title: t(\"time_created\") },\n  ];\n\n  const resetCredentials = (\n    event: MouseEvent,\n    originalData: ServiceAccountListItem\n  ) => {\n    onResetCredentials && onResetCredentials(originalData);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const deleteAccount = (\n    event: MouseEvent,\n    originalData: ServiceAccountListItem\n  ) => {\n    onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!serviceAccountsDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: tableColumns.length,\n      });\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, created_by, client_id, created_at } = row;\n      tableRow.push({\n        cells: [\n          name,\n          client_id,\n          created_by,\n          { title: getFormattedDate(created_at, t(\"ago\")) },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const buildActionResolver = (rowData: IRowData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn =\n      (loggedInUser !== undefined &&\n        originalData.created_by === loggedInUser) ||\n      (isOrgAdmin !== undefined && isOrgAdmin === true);\n\n    let additionalProps: Partial<IAction> = {};\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: \"auto\",\n          cursor: \"default\",\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t(\"common.reset_credentials\"),\n        id: \"reset-credentials\",\n        [\"data-testid\"]: \"tableServiceAccounts-actionResetCredentials\",\n        onClick: (event) =>\n          isUserSameAsLoggedIn && resetCredentials(event, originalData),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"serviceAccount.no_permission_to_reset_service_account\"),\n        },\n      } as IAction,\n      {\n        title: t(\"serviceAccount.delete_service_account\"),\n        id: \"delete-account\",\n        [\"data-testid\"]: \"tableServiceAccounts-actionDeleteAccount\",\n        onClick: (event) =>\n          isUserSameAsLoggedIn && deleteAccount(event, originalData),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"serviceAccount.no_permission_to_delete_service_account\"),\n        },\n      } as IAction,\n    ];\n    return resolver;\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return \"name\";\n      case 1:\n        return \"client_id\";\n      case 2:\n        return \"owner\";\n      case 3:\n        return \"description\";\n      case 4:\n        return \"created_at\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case \"name\":\n        return 0;\n      case \"client_id\":\n        return 1;\n      case \"owner\":\n        return 2;\n      case \"description\":\n        return 3;\n      case \"created_at\":\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort: OnSort = (_event, columnIndex, sortByDirection) => {\n    setOrderBy &&\n      setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(\" \") || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar onCreateServiceAccount={onCreateServiceAccount} />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          \"aria-label\": t(\"serviceAccount.service_account_list\"),\n          actionResolver: (rowData) => buildActionResolver(rowData),\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems &&\n        serviceAccountItems?.length < 1 &&\n        serviceAccountsDataLoaded && (\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoResult,\n            }}\n            titleProps={{\n              title: t(\"no_results_found\"),\n            }}\n            emptyStateBodyProps={{\n              body: t(\"adjust_your_filters_and_try_again\"),\n            }}\n          />\n        )}\n      {/* {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\nimport { MASToolbar, ToolbarItemProps } from \"@app/common\";\n\nexport type ServiceAccountsToolbarProps = {\n  onCreateServiceAccount: () => void;\n};\n\nconst ServiceAccountsToolbar: FC<ServiceAccountsToolbarProps> = ({\n  onCreateServiceAccount: onCreateServiceAccount,\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={onCreateServiceAccount}\n          data-testid={\"tableServiceAccounts-buttonCreateServiceAccount\"}\n        >\n          {t(\"serviceAccount.create_service_account\")}\n        </Button>\n      ),\n    },\n  ];\n  /**\n   * Todo: uncomment code when API start support pagination\n   */\n  // if (total && total > 0 && toolbarItems.length === 1) {\n  //   toolbarItems.push({\n  //     item: (\n  //       <MASPagination\n  //         widgetId=\"pagination-options-menu-top\"\n  //         itemCount={total}\n  //         page={page}\n  //         perPage={perPage}\n  //         isCompact={true}\n  //         titles={{\n  //           paginationTitle: t('minimal_pagination'),\n  //           perPageSuffix: t('per_page_suffix'),\n  //           toFirstPage: t('to_first_page'),\n  //           toPreviousPage: t('to_previous_page'),\n  //           toLastPage: t('to_last_page'),\n  //           toNextPage: t('to_next_page'),\n  //           optionsToggle: t('options_toggle'),\n  //           currPage: t('curr_page'),\n  //         }}\n  //       />\n  //     ),\n  //     variant: 'pagination',\n  //     alignment: { default: 'alignRight' },\n  //   });\n  // }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: \"instance-toolbar\",\n        collapseListedFiltersBreakpoint: \"md\",\n        inset: { xl: \"insetLg\" },\n      }}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { MASEmptyState } from \"@app/common\";\nimport LockIcon from \"@patternfly/react-icons/dist/js/icons/lock-icon\";\n\nexport const UserUnauthorized: FunctionComponent = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: \"noPadding\" }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t(\n            \"serviceAccount.unauthorized_access_to_service_accounts_title\"\n          ),\n          headingLevel: \"h2\",\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            \"serviceAccount.unauthorized_access_to_service_accounts_info\"\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n"],"names":["ServiceAccounts","t","useTranslation","PageSection","variant","PageSectionVariants","className","padding","default","TextContent","Text","component","ModalProvider","ServiceAccountsEmpty","fetchServiceAccounts","showModal","useModal","isFilled","emptyStateProps","titleProps","title","emptyStateBodyProps","body","buttonProps","onClick","ModalType","onCreate","ServiceAccountsTableConnected","auth","useAuth","config","useConfig","serviceAccountItems","setServiceAccountItems","useState","isUserUnauthorized","setIsUserUnauthorized","useCallback","accessToken","kas","getToken","apisService","SecurityApi","Configuration","basePath","ams","apiBasePath","getServiceAccounts","then","response","serviceAccounts","data","items","sortedServiceAccounts","sort","a","b","created_at","localeCompare","error","Error","errorCode","code","handleServerError","useEffect","undefined","length","ServiceAccountsTableSection","showResetCredentialsModal","showCreateServiceAccountModal","showDeleteServiceAccountModal","orderBy","setOrderBy","page","perPage","Card","expectedTotal","serviceAccountsDataLoaded","onResetCredentials","serviceAccount","onDeleteServiceAccount","onDelete","onCreateServiceAccount","ServiceAccountsTableView","loggedInUser","setLoggedInUser","isOrgAdmin","setIsOrgAdmin","getUsername","username","tableColumns","transforms","cellWidth","buildActionResolver","rowData","originalData","isUserSameAsLoggedIn","created_by","additionalProps","tooltip","isDisabled","style","pointerEvents","cursor","resolver","id","event","target","parentElement","previousSibling","focus","resetCredentials","tooltipProps","position","content","deleteAccount","getindexForSortParameter","parameter","toLowerCase","tableProps","cells","rows","tableRow","loadingCount","forEach","row","name","client_id","push","skeleton","Skeleton","preparedTableCells","actionResolver","onSort","_event","columnIndex","sortByDirection","index","getParameterForSortIndex","sortBy","split","direction","SortByDirection","ServiceAccountsToolbar","toolbarItems","item","Button","toolbarProps","collapseListedFiltersBreakpoint","inset","xl","UserUnauthorized","headingLevel","emptyStateIconProps","icon"],"sourceRoot":""}