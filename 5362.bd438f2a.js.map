{"version":3,"file":"5362.bd438f2a.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/esm/createIcon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/esm/icons/help-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/key-icon.js","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/Credentials /Credentials.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected.tsx","webpack://kas-ui/./src/app/models/service-account.ts","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateForm.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nexport var IconSize;\n(function (IconSize) {\n    IconSize[\"sm\"] = \"sm\";\n    IconSize[\"md\"] = \"md\";\n    IconSize[\"lg\"] = \"lg\";\n    IconSize[\"xl\"] = \"xl\";\n})(IconSize || (IconSize = {}));\nexport const getSize = (size) => {\n    switch (size) {\n        case IconSize.sm:\n            return '1em';\n        case IconSize.md:\n            return '1.5em';\n        case IconSize.lg:\n            return '2em';\n        case IconSize.xl:\n            return '3em';\n        default:\n            return '1em';\n    }\n};\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\nexport function createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {\n    var _a;\n    return _a = class SVGIcon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.id = `icon-title-${currentId++}`;\n            }\n            render() {\n                const _a = this.props, { size, color, title, noVerticalAlign } = _a, props = __rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n                const hasTitle = Boolean(title);\n                const heightWidth = getSize(size);\n                const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n                const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n                const viewBox = [xOffset, yOffset, width, height].join(' ');\n                return (React.createElement(\"svg\", Object.assign({ style: style, fill: color, height: heightWidth, width: heightWidth, viewBox: viewBox, \"aria-labelledby\": hasTitle ? this.id : null, \"aria-hidden\": hasTitle ? null : true, role: \"img\" }, props),\n                    hasTitle && React.createElement(\"title\", { id: this.id }, title),\n                    React.createElement(\"path\", { d: svgPath })));\n            }\n        },\n        _a.displayName = name,\n        _a.defaultProps = {\n            color: 'currentColor',\n            size: IconSize.sm,\n            noVerticalAlign: false\n        },\n        _a;\n}\n//# sourceMappingURL=createIcon.js.map","import { createIcon } from '../createIcon';\n\nexport const HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const HelpIcon = createIcon(HelpIconConfig);\n\nexport default HelpIcon;","\"use strict\"\nexports.__esModule = true;\nexports.KeyIconConfig = {\n  name: 'KeyIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M802,320 C748.980664,320 706,277.019336 706,224 C706,170.980664 748.980664,128 802,128 C855.019336,128 898,170.980664 898,224 C898,277.019336 855.019336,320 802,320 M704,0 C527.3,0 384,143.3 384,320 C383.937788,357.490503 390.505571,394.696657 403.4,429.9 L0,824.1 L0,1024 L192,1024 L192,896 L320,896 L320,768 L448,768 L597,622 C596.906403,621.881923 596.838304,621.745723 596.8,621.6 C631.220126,633.811107 667.47802,640.034477 704,640 C880.7,640 1024,496.7 1024,320 C1024,143.3 880.7,0 704,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.KeyIcon = require('../createIcon').createIcon(exports.KeyIconConfig);\nexports[\"default\"] = exports.KeyIcon;","import React, { useState } from 'react';\nimport {\n  Bullseye,\n  Button,\n  Checkbox,\n  ClipboardCopy,\n  EmptyStateVariant,\n  InputGroup,\n  InputGroupText,\n  Text,\n  TextContent,\n  TextVariants,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport KeyIcon from '@patternfly/react-icons/dist/js/icons/key-icon';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport { useTranslation } from 'react-i18next';\nimport { MASEmptyState } from '@app/common';\nimport './Credentials.css';\nimport { ServiceAccount } from '@rhoas/kafka-management-sdk';\n\ntype CredentialsProps = {\n  serviceAccount: ServiceAccount;\n  close: () => void;\n};\n\nconst Credentials: React.FunctionComponent<CredentialsProps> = ({\n  serviceAccount,\n  close,\n}) => {\n  const { t } = useTranslation();\n\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const confirm = (checked: boolean) => {\n    setConfirmationCheckbox(checked);\n  };\n\n  return (\n    <>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t('credentials_successfully_generated'),\n          headingLevel: 'h2',\n          size: TitleSizes.lg,\n        }}\n      >\n        <TextContent>\n          <Text component={TextVariants.small} className='pf-u-mt-lg'>\n            {t('connect_to_the_kafka_instance_using_this_clientID_and_secret')}\n          </Text>\n        </TextContent>\n        <InputGroup className='pf-u-mt-lg'>\n          <InputGroupText className='mk--generate-credential__empty-state--input-group'>\n            {t('client_id')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className='pf-u-w-100'\n            data-testid='modalCredentials-copyClientID'\n            textAriaLabel={t('client_id')}\n          >\n            {serviceAccount?.client_id}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className='pf-u-mt-md'>\n          <InputGroupText className='mk--generate-credential__empty-state--input-group'>\n            {t('common.client_secret')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className='pf-u-w-100'\n            data-testid='modalCredentials-copyClientSecret'\n            textAriaLabel={t('common.client_secret')}\n          >\n            {serviceAccount?.client_secret}\n          </ClipboardCopy>\n        </InputGroup>\n        <TextContent>\n          <Text component={TextVariants.small} className='pf-u-mt-lg'>\n            {t('create_service_account_credentials_warning_message')}\n          </Text>\n        </TextContent>\n        <Bullseye className='pf-u-mt-lg'>\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={confirm}\n            id='check-1'\n            name='check1'\n          />\n        </Bullseye>\n        <Button\n          variant='primary'\n          isDisabled={!confirmationCheckbox}\n          onClick={close}\n          data-testid='modalCredentials-buttonClose'\n        >\n          {t('close')}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n};\n\nexport { Credentials };\n\nexport default Credentials;\n","import React, { useState } from 'react';\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport {\n  Configuration,\n  SecurityApi,\n  ServiceAccount,\n} from '@rhoas/kafka-management-sdk';\nimport { useTranslation } from 'react-i18next';\nimport { getModalAppendTo, isServiceApiError } from '@app/utils';\nimport {\n  asServiceAccountRequest,\n  createEmptyNewServiceAccountRequest,\n  isServiceAccountRequestInvalid,\n  NewServiceAccountRequest,\n} from '@app/models';\nimport {\n  BaseModalProps,\n  CreateServiceAccountProps,\n  useAlert,\n  useAuth,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { CreateForm } from '@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateForm';\nimport Credentials from '@app/modules/ServiceAccounts/components/Credentials /Credentials';\n\nconst FORM_ID = 'create_service_account_form';\n\nenum Step {\n  CreateServiceAccount = 'CreateServiceAccount',\n  Credentials = 'Credentials',\n}\n\nconst CreateServiceAccountConnected: React.FunctionComponent<\n  CreateServiceAccountProps & BaseModalProps\n> = ({ onCreate, title, hideModal }) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig() || { kas: {} };\n  const { addAlert } = useAlert() || {};\n\n  const [serviceAccountRequest, setServiceAccountRequest] =\n    useState<NewServiceAccountRequest>(createEmptyNewServiceAccountRequest());\n  const [isCreationInProgress, setCreationInProgress] =\n    useState<boolean>(false);\n  const [step, setStep] = useState<Step>(Step.CreateServiceAccount);\n  const [serviceAccountResponse, setServiceAccountResponse] = useState<\n    ServiceAccount | undefined\n  >();\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t('something_went_wrong'),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  const createServiceAccount = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        setCreationInProgress(true);\n        const serviceAccount = await apisService\n          .createServiceAccount(asServiceAccountRequest(serviceAccountRequest))\n          .then((res) => res?.data);\n        setServiceAccountResponse(serviceAccount);\n        setStep(Step.Credentials);\n        addAlert &&\n          addAlert({\n            title: t('serviceAccount.service_account_creation_success_message'),\n            variant: AlertVariant.success,\n          });\n        onCreate && onCreate();\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    hideModal();\n  };\n\n  const getModalActions = () => {\n    if (step === Step.CreateServiceAccount) {\n      return [\n        <Button\n          key='submit'\n          variant='primary'\n          type='submit'\n          form={FORM_ID}\n          isDisabled={\n            isServiceAccountRequestInvalid(serviceAccountRequest) ||\n            isCreationInProgress\n          }\n          spinnerAriaValueText={t('submitting_request')}\n          isLoading={isCreationInProgress}\n          data-testid='modalCreateServiceAccount-buttonSubmit'\n        >\n          {'Create'}\n        </Button>,\n        <Button\n          key='cancel'\n          variant='link'\n          onClick={handleCreateModal}\n          data-testid='modalCreateServiceAccount-buttonCancel'\n        >\n          {t('cancel')}\n        </Button>,\n      ];\n    }\n    return [];\n  };\n\n  const Body: React.FunctionComponent = () => {\n    if (step === Step.CreateServiceAccount) {\n      return (\n        <CreateForm\n          createServiceAccount={createServiceAccount}\n          setServiceAccountRequest={setServiceAccountRequest}\n          serviceAccountRequest={serviceAccountRequest}\n          id={FORM_ID}\n        />\n      );\n    }\n    if (serviceAccountResponse === undefined) {\n      throw new Error('resetServiceAccount must not be undefined');\n    }\n    return (\n      <Credentials serviceAccount={serviceAccountResponse} close={hideModal} />\n    );\n  };\n\n  return (\n    <Modal\n      id='modalCreateSAccount'\n      variant={ModalVariant.medium}\n      title={step === Step.CreateServiceAccount ? title : ''}\n      isOpen={true}\n      onClose={handleCreateModal}\n      appendTo={getModalAppendTo}\n      actions={getModalActions()}\n    >\n      <Body />\n    </Modal>\n  );\n};\n\nexport { CreateServiceAccountConnected };\nexport default CreateServiceAccountConnected;\n","import { Validated } from '@app/models/validated';\nimport { ServiceAccountRequest } from '@rhoas/kafka-management-sdk';\n\nexport type NewServiceAccountRequest = {\n  name: Validated<string | undefined>;\n};\n\nexport const asServiceAccountRequest = (\n  value: NewServiceAccountRequest\n): ServiceAccountRequest => {\n  if (value.name.value === undefined) {\n    throw new Error('ServiceAccountRequest.name must not be undefined');\n  }\n  return {\n    name: value.name.value,\n  };\n};\n\nexport const isServiceAccountRequestValidated = (\n  value: NewServiceAccountRequest\n): boolean => {\n  return value.name.validated === 'success';\n};\n\nexport const isServiceAccountRequestInvalid = (\n  value: NewServiceAccountRequest\n): boolean => {\n  return value.name.validated === 'error';\n};\n\nexport const createEmptyNewServiceAccountRequest =\n  (): NewServiceAccountRequest => {\n    return {\n      name: {\n        value: '',\n      },\n    };\n  };\n","import {\n  createEmptyNewServiceAccountRequest,\n  isServiceAccountRequestInvalid,\n  NewServiceAccountRequest,\n} from '@app/models';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n} from '@app/utils';\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  FormGroup,\n  TextInput,\n  Popover,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\n\nexport type CreateFormProps = {\n  createServiceAccount: () => Promise<void>;\n  serviceAccountRequest: NewServiceAccountRequest;\n  setServiceAccountRequest: React.Dispatch<\n    React.SetStateAction<NewServiceAccountRequest>\n  >;\n  id: string;\n};\n\nexport const CreateForm: React.FunctionComponent<CreateFormProps> = ({\n  serviceAccountRequest,\n  createServiceAccount,\n  setServiceAccountRequest,\n  id,\n}) => {\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const validateName = (serviceAccountRequest: NewServiceAccountRequest) => {\n    //validate required field\n    if (\n      serviceAccountRequest.name.value === undefined ||\n      serviceAccountRequest.name.value.trim() === ''\n    ) {\n      serviceAccountRequest.name.validated = 'error';\n      serviceAccountRequest.name.errorMessage = t(\n        'common.this_is_a_required_field'\n      );\n    } else if (\n      serviceAccountRequest.name.value !== undefined &&\n      !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(\n        serviceAccountRequest.name.value.trim()\n      )\n    ) {\n      serviceAccountRequest.name.validated = 'error';\n      serviceAccountRequest.name.errorMessage = t(\n        'common.input_filed_invalid_helper_text'\n      );\n    }\n    //validate max length\n    else if (\n      serviceAccountRequest.name.value !== undefined &&\n      serviceAccountRequest.name.value.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH\n    ) {\n      serviceAccountRequest.name.validated = 'error';\n      serviceAccountRequest.name.errorMessage = t(\n        'serviceAccount.service_account_name_length_is_greater_than_expected',\n        {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        }\n      );\n    } else {\n      serviceAccountRequest.name.validated = 'success';\n    }\n    return serviceAccountRequest;\n  };\n\n  const setName = (name: string) => {\n    setServiceAccountRequest((prevState) => {\n      const value = {\n        ...prevState,\n        name: {\n          value: name,\n        },\n      };\n      return validateName(value);\n    });\n  };\n\n  const FormValidAlert: React.FunctionComponent = () => {\n    if (\n      formSubmitted &&\n      isServiceAccountRequestInvalid(serviceAccountRequest)\n    ) {\n      return (\n        <FormAlert>\n          <Alert\n            variant='danger'\n            title={t('common.form_invalid_alert')}\n            aria-live='polite'\n            isInline\n          />\n        </FormAlert>\n      );\n    }\n    return <></>;\n  };\n\n  const submit = (event) => {\n    event.preventDefault();\n    setFormSubmitted(true);\n    const validated = validateName(serviceAccountRequest);\n    setServiceAccountRequest({ ...validated });\n\n    if (!isServiceAccountRequestInvalid(validated)) {\n      createServiceAccount().then(() => resetForm());\n    }\n  };\n\n  const resetForm = () => {\n    setServiceAccountRequest(createEmptyNewServiceAccountRequest());\n  };\n\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <Form onSubmit={submit} id={id}>\n      <FormValidAlert />\n      <FormGroup\n        label={t('serviceAccount.short_description')}\n        isRequired\n        fieldId='text-input-short-description'\n        helperTextInvalid={serviceAccountRequest.name.errorMessage}\n        validated={serviceAccountRequest.name.validated}\n        helperText={t('common.input_filed_invalid_helper_text')}\n        labelIcon={\n          <Popover\n            headerContent={\n              <div>{t('serviceAccount.short_description_popover_title')}</div>\n            }\n            bodyContent={\n              <div>{t('serviceAccount.short_description_popover_body')}</div>\n            }\n          >\n            <button\n              aria-label={t('serviceAccount.short_description_popover_button')}\n              onClick={preventButtonSubmit}\n              className='pf-c-form__group-label-help'\n            >\n              <HelpIcon noVerticalAlign />\n            </button>\n          </Popover>\n        }\n      >\n        <TextInput\n          isRequired\n          type='text'\n          id='text-input-short-description'\n          name='text-input-short-description'\n          value={serviceAccountRequest.name.value}\n          onChange={setName}\n          validated={serviceAccountRequest.name.validated}\n          autoFocus={true}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n"],"names":["IconSize","currentId","createIcon","name","xOffset","yOffset","width","height","svgPath","_a","constructor","super","arguments","this","id","render","props","size","color","title","noVerticalAlign","__rest","hasTitle","Boolean","heightWidth","sm","md","lg","xl","getSize","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","Object","assign","fill","role","d","displayName","defaultProps","HelpIconConfig","HelpIcon","exports","serviceAccount","close","t","useTranslation","useState","confirmationCheckbox","setConfirmationCheckbox","emptyStateProps","variant","EmptyStateVariant","emptyStateIconProps","icon","titleProps","headingLevel","TitleSizes","TextContent","Text","component","TextVariants","className","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","textAriaLabel","client_id","client_secret","Bullseye","Checkbox","label","isChecked","onChange","checked","Button","isDisabled","onClick","Step","asServiceAccountRequest","value","undefined","Error","isServiceAccountRequestInvalid","validated","CreateForm","serviceAccountRequest","createServiceAccount","setServiceAccountRequest","formSubmitted","setFormSubmitted","validateName","trim","errorMessage","test","length","maxLength","resetForm","Form","onSubmit","event","preventDefault","then","FormAlert","Alert","isInline","FormGroup","isRequired","fieldId","helperTextInvalid","helperText","labelIcon","Popover","headerContent","bodyContent","TextInput","type","prevState","autoFocus","FORM_ID","CreateServiceAccountConnected","onCreate","hideModal","auth","useAuth","basePath","useConfig","kas","addAlert","useAlert","isCreationInProgress","setCreationInProgress","CreateServiceAccount","step","setStep","serviceAccountResponse","setServiceAccountResponse","getToken","accessToken","apisService","SecurityApi","Configuration","res","data","Credentials","AlertVariant","error","reason","response","description","handleServerError","handleCreateModal","Modal","ModalVariant","isOpen","onClose","appendTo","actions","key","form","spinnerAriaValueText","isLoading"],"sourceRoot":""}