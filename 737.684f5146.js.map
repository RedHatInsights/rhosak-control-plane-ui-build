{"version":3,"sources":["webpack://kas-ui/./src/app/models/OpenshiftStreamsModel.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/CreateInstanceModal/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/GenerateCredential.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ConnectionTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/DetailsTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts"],"names":["this","cloud_provider","multi_az","region","name","DrawerPanelContentInfo","DrawerPanelContent","DrawerHead","TextContent","Text","component","TextVariants","TextList","TextListVariants","TextListItem","TextListItemVariants","CreateInstanceModalContext","createContext","isModalOpen","setIsModalOpen","onCreate","mainToggle","refresh","cloudProviders","CreateInstanceModalProvider","Provider","useCreateInstanceModal","useContext","emptyProvider","kind","id","display_name","enabled","CreateInstanceModal","t","useTranslation","authContext","AuthContext","basePath","ApiContext","addAlert","newKafka","NewKafka","useState","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","fetchCloudRegions","provider","getToken","accessToken","undefined","listCloudProviderRegions","then","res","providerRegions","data","providers","concat","items","enabledRegions","filter","length","prevData","reason","response","AlertVariant","useEffect","enableCloudProviders","onCreateInstance","isValid","trim","test","message","maxLength","validateCreateForm","apisService","createKafka","toShowAlert","code","handleModalToggle","handleInstanceNameChange","handleCloudRegionChange","validRegion","getTileIcon","toLowerCase","size","color","className","onChangeAvailabilty","isSelected","event","value","currentTarget","onFormSubmit","preventDefault","createInstanceForm","isMultiSelected","Form","onSubmit","FormAlert","Alert","variant","title","isInline","FormGroup","label","helperText","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","TextInput","type","onChange","autoFocus","map","Tile","key","icon","onClick","cloudProvider","FormSelect","option","index","FormSelectOption","ToggleGroup","ToggleGroupItem","text","isDisabled","buttonId","Modal","ModalVariant","isOpen","onClose","actions","Button","spinnerAriaValueText","isLoading","Drawer","isStatic","DrawerContent","panelContent","DrawerContentBody","StatusColumn","filteredstatus","status","instanceName","Spinner","getStatusIcon","Flex","FlexItem","spacer","default","st","DeleteInstanceModal","modalProps","confirmButtonProps","cancelButtonProps","textProps","instanceStatus","selectedItemData","selectedInstanceName","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","htmlFor","dangerouslySetInnerHTML","__html","onKeyPress","StreamsToolbar","setFilterSelected","filterSelected","total","page","perPage","filteredValue","setFilteredValue","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","nameInputRef","useRef","ownerInputRef","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","regionFilterOptions","statusFilterOptions","updateFilter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","push","isInputValid","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","isDisabledSelectOption","optionValue","tooltipContent","toggleGroupItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","onSelect","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","ValidatedOptions","placeholder","input","ref","ButtonVariant","Tooltip","isVisible","content","reference","isPlaceholder","placeholderText","document","getElementById","toolbarItems","item","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","lg","toggleGroupProps","toggleIcon","breakpoint","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToInstance","getConnectToInstancePath","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","isDeleteModalOpen","setIsDeleteModalOpen","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","tableColumns","transforms","sortable","setItems","loggedInUser","setLoggedInUser","searchParams","URLSearchParams","location","search","history","setSearchParam","useCallback","set","getUsername","username","addAlertAfterSuccessDeletion","notPresentKafkas","kafka","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","incompleteKafkas","addAlertAfterSuccessCreation","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","renderNameLink","row","href","Link","to","e","instance","onDeleteInstance","instanceId","Error","deleteKafkaById","config","confirmActionLabel","description","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","tableProps","cells","rows","tableRow","loadingCount","i","Skeleton","date","created_at","owner","cloudProviderDisplayName","regionDisplayName","Date","formatDistance","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","style","pointerEvents","cursor","getActionResolver","onSort","myDirection","property","getParameterForSortIndex","sortBy","onRowClick","rowIndex","clickedEventType","tagName","emptyStateProps","EmptyStateVariant","emptyStateIconProps","titleProps","headingLevel","TitleSizes","emptyStateBodyProps","body","PaginationVariant","GenerateCredential","steps","isCreated","setIsCreated","setIsOpen","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","credential","setCredential","setIsLoading","error","setError","onMove","curr","_prev","handleChangeStep1","_checked","checked","handleChangeStep4","step1","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","bodyContent","step3","step4","clientID","InputGroupText","ClipboardCopy","isReadOnly","clientSecret","Bullseye","Checkbox","serviceAccountRequest","createServiceAccount","Wizard","isFinishedStep","unshift","nextButtonText","onNext","onBack","hideClose","ResourcesTab","externalServer","SampleCodeTab","ConnectionTab","activeKey","Tabs","isSecondary","Tab","eventKey","TabTitleText","DetailsTab","instanceDetail","updated_at","renderTextListItem","Grid","GridItem","span","Card","isFlat","CardBody","format","InstanceDrawer","activeTab","isExpanded","children","dataOuiaAppId","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","selectedTab","bootstrapServerHost","handleTab1Click","_","onSelectConnectionTab","panelBodyContent","endsWith","drawerHeaderProps","getIsDocumentHidden","doc","hidden","msHidden","webkitHidden","usePageVisibility","setIsVisible","onVisibilityChange","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","callback","delay","savedCallback","parseInt","get","has","isOpenCreateInstanceModal","setIsOpenCreateInstanceModal","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","isUserUnauthorized","setIsUserUnauthorized","fetchKafkas","justPoll","isValidToken","listKafkas","filters","join","kafkaInstances","errorCode","handleServerError","listCloudProviders","current","setTimeout","clearInterval","refreshKafkas","PageSection","PageSectionVariants","Level","LevelItem","Title","padding","buttonProps"],"mappings":"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","file":"737.684f5146.js","sourcesContent":["export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\n\nconst DrawerPanelContentInfo = () => (\n  <DrawerPanelContent>\n    <DrawerHead>\n      <TextContent>\n        <Text component={TextVariants.h2}>Cluster information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 4 MBps</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100 GB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Partitions</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Client connections</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 500</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Message size</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Availability</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>Multizone highly available</TextListItem>\n        </TextList>\n        <Text component={TextVariants.h2}>Cost information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Base Cluster</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$1.50/hr</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.02/MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.0002/GB/hr</TextListItem>\n        </TextList>\n      </TextContent>\n    </DrawerHead>\n  </DrawerPanelContent>\n);\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState, createContext } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../../../models/OpenshiftStreamsModel';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { isValidToken, ErrorCodes } from '@app/utils';\n\nexport type CreateInstanceModalProps = {\n  isModalOpen: boolean;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onCreate: () => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst CreateInstanceModalContext = createContext<CreateInstanceModalProps>({\n  isModalOpen: false,\n  setIsModalOpen: () => {},\n  onCreate: () => {},\n  mainToggle: false,\n  refresh: () => {},\n  cloudProviders: [],\n});\n\nexport const CreateInstanceModalProvider = CreateInstanceModalContext.Provider;\nexport const useCreateInstanceModal = () => useContext(CreateInstanceModalContext);\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { isModalOpen, setIsModalOpen, onCreate, cloudProviders, refresh, mainToggle } = useCreateInstanceModal();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData({ ...kafkaFormData, name: '', multi_az: true });\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    if (!region || region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = validateCreateForm();\n\n    const accessToken = await authContext?.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n    } else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n          });\n          onCreate();\n          await apisService.createKafka(true, kafkaFormData).then((res) => {\n            resetForm();\n            setIsModalOpen(false);\n            refresh();\n          });\n        } catch (error) {\n          let reason: string | undefined;\n          let toShowAlert = true;\n          if (isServiceApiError(error)) {\n            if (error.response?.data.code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n              setIsFormValid(false);\n              toShowAlert = false;\n              setNameValidated({\n                fieldState: 'error',\n                message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n              });\n            } else {\n              reason = error.response?.data.reason;\n            }\n          }\n          /**\n           * Todo: show user friendly message according to server code\n           * and translation for specific language\n           *\n           */\n          toShowAlert && addAlert(t('something_went_wrong'), AlertVariant.danger, reason, 'toastCreateKafka-failed');\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    resetForm();\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (name && name.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else {\n      if (isValid) {\n        if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n        if (nameValidated.fieldState === 'error') {\n          setNameValidated({ fieldState: 'default', message: '' });\n        }\n      } else {\n        setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n      }\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData({ ...kafkaFormData, multi_az: value === 'multi' });\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message != '' && <ExclamationCircleIcon />}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={handleInstanceNameChange}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map(\n            (provider: CloudProvider) =>\n              provider.enabled && (\n                <Tile\n                  key={`tile-${provider.name}`}\n                  title={provider?.display_name || ''}\n                  icon={getTileIcon(provider?.name)}\n                  isSelected={cloud_provider === provider.name}\n                  onClick={() => onCloudProviderSelect(provider)}\n                />\n              )\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={handleCloudRegionChange}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              (option: CloudRegion, index) =>\n                option.enabled && (\n                  <FormSelectOption\n                    key={index}\n                    value={option.id}\n                    label={option.id ? t(option.id) : option.display_name || ''}\n                  />\n                )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <ToggleGroupItem\n              text={t('single')}\n              value={'single'}\n              isDisabled\n              buttonId=\"single\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        id=\"modalCreateKafka\"\n        variant={ModalVariant.medium}\n        title={t('create_a_kafka_instance')}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"create\"\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={onCreateInstance}\n            isDisabled={!isFormValid || isCreationInProgress}\n            spinnerAriaValueText={t('submitting_request')}\n            isLoading={isCreationInProgress}\n            data-testid=\"modalCreateKafka-buttonSubmit\"\n          >\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle} data-testid=\"modalCreateKafka-buttonCancel\">\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {mainToggle === true ? (\n          <Drawer isStatic className=\"mk--create-instance-modal__drawer--content\">\n            <DrawerContent panelContent={<DrawerPanelContentInfo />}>\n              <DrawerContentBody>{createInstanceForm()}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        ) : (\n          createInstanceForm()\n        )}\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size=\"md\" aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const icon = getStatusIcon();\n  return (\n    <Flex>\n      {icon && <FlexItem spacer={{ default: 'spacerSm' }}>{icon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextInput } from '@patternfly/react-core';\nimport { MASDeleteModal, MASDeleteModalProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport type DeleteInstanceModalProps = MASDeleteModalProps & {\n  instanceStatus?: string;\n};\n\nexport const DeleteInstanceModal: React.FC<DeleteInstanceModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  instanceStatus,\n  selectedItemData,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n  return (\n    <MASDeleteModal\n      isModalOpen={isModalOpen}\n      modalProps={modalProps}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleModalToggle}\n      textProps={textProps}\n    >\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            onKeyPress={onKeyPress}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </MASDeleteModal>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { useCreateInstanceModal } from '../../components/CreateInstanceModal';\n\ntype StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n}) => {\n  const { isModalOpen, setIsModalOpen } = useCreateInstanceModal();\n  const { t } = useTranslation();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus = filterKey === 'status' && filterValue?.filter(({ value }) => value === 'provisioning');\n      if (provisioningStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onChangeSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"filterText\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label=\"Search instances\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <ToolbarItem>\n              <Select\n                id=\"cloud-provider-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select cloud provider\"\n                onToggle={onCloudProviderFilterToggle}\n                selections={getSelectionForFilter('cloud_provider')}\n                isOpen={isCloudProviderFilterExpanded}\n                onSelect={onCloudProviderFilterSelect}\n                placeholderText={t('filter_by_cloud_provider')}\n              >\n                {cloudProviderFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('cloud-provider-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n        >\n          {filterSelected === 'region' && (\n            <ToolbarItem>\n              <Select\n                id=\"region-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select region\"\n                onToggle={onRegionFilterToggle}\n                selections={getSelectionForFilter('region')}\n                isOpen={isRegionFilterExpanded}\n                onSelect={onRegionFilterSelect}\n                placeholderText={t('filter_by_region')}\n              >\n                {regionFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('region-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"filterOwners\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label=\"Search owners\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n        >\n          {filterSelected === 'status' && (\n            <ToolbarItem>\n              <Select\n                id=\"status-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select status\"\n                onToggle={onStatusFilterToggle}\n                selections={getSelectionForFilter('status')}\n                isOpen={isStatusFilterExpanded}\n                onSelect={onStatusFilterSelect}\n                placeholderText={t('filter_by_status')}\n              >\n                {statusFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('status-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={() => setIsModalOpen(!isModalOpen)}\n          data-testid={'tableStreams-buttonCreateKafka'}\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { AlertVariant, PaginationVariant, Skeleton, EmptyStateVariant, TitleSizes } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState } from '@app/common';\nimport { DefaultApi, KafkaRequest } from '../../../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { CreateInstanceModal } from '../CreateInstanceModal';\nimport { DeleteInstanceModal } from '../DeleteInstanceModal';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { InstanceStatus, isServiceApiError, getLoadingRowsCount } from '@app/utils';\nimport { useHistory } from 'react-router-dom';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { formatDistance } from 'date-fns';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n  mainToggle: boolean;\n  refresh: () => void;\n  page: number;\n  perPage: number;\n  total: number;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected: string;\n  setFilterSelected: (filterSelected: string) => void;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (\n    status === InstanceStatus.ACCEPTED ||\n    status === InstanceStatus.PROVISIONING ||\n    status === InstanceStatus.PREPARING\n  ) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToInstance,\n  getConnectToInstancePath,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n}: StreamsTableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<string>();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    // filter all kafkas with status as deprovision\n    const deprovisonedKafkas = kafkaInstanceItems.filter((kafka) => kafka.status === InstanceStatus.DEPROVISION);\n\n    // filter all new kafka which is not in deleteKafka state\n    const notPresentKafkas = deprovisonedKafkas\n      .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n      .map((k) => k.name || '');\n    // create new array by merging old and new kafka with status as deprovion\n    const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n    // update deleteKafka with new array\n    setDeletedKafkas(allDeletedKafkas);\n\n    // add alert for deleted kafkas which are completely deleted from the response\n    allDeletedKafkas.forEach((k) => {\n      if (kafkaInstanceItems.findIndex((item) => item.name === k) < 0) {\n        removeKafkaFromDeleted(k);\n        addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n      }\n    });\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-success'\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-failed'\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const onSelectKebabDropdownOption = (event: any, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n      },\n      {\n        title: t('connect_to_instance'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <>\n        {mainToggle ? (\n          <a href=\"http://uxd-mk-data-plane-cmolloy.apps.uxd-os-research.shz4.p1.openshiftapps.com/openshiftstreams\">\n            {name}\n          </a>\n        ) : (\n          <Link\n            to={() => getConnectToInstancePath(row as KafkaRequest)}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToInstance(row as KafkaRequest);\n            }}\n          >\n            {name}\n          </Link>\n        )}\n      </>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    const formatDate = (date) => {\n      date = typeof date === 'string' ? new Date(date) : date;\n      return (\n        <>\n          {formatDistance(date, new Date())} {t('ago')}\n        </>\n      );\n    };\n\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title: status === InstanceStatus.DEPROVISION ? name : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: formatDate(created_at),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    setIsDeleteModalOpen(false);\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: EmptyStateVariant.full,\n          }}\n          emptyStateIconProps={{\n            icon: SearchIcon,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n            headingLevel: 'h2',\n            size: TitleSizes.lg,\n          }}\n          emptyStateBodyProps={{\n            body: t('no_results_match_the_filter_criteria'),\n          }}\n        />\n      )}\n      {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n      <DeleteInstanceModal\n        isModalOpen={isDeleteModalOpen}\n        instanceStatus={selectedInstance?.status}\n        selectedItemData={selectedInstance}\n        handleModalToggle={() => setIsDeleteModalOpen(!isDeleteModalOpen)}\n        modalProps={{\n          title,\n        }}\n        confirmButtonProps={{\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        }}\n        textProps={{\n          description,\n        }}\n      />\n      <CreateInstanceModal />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React, { useState, FunctionComponent, useContext } from 'react';\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyStateVariant,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Popover,\n  Radio,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\nimport KeyIcon from '@patternfly/react-icons/dist/js/icons/key-icon';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DefaultApi, ServiceAccountRequest } from '../../../../../openapi/api';\nimport { MASEmptyState } from '@app/common';\n\ntype GenerateCredential = {\n  instanceName?: string;\n  mainToggle?: boolean;\n};\n\nconst GenerateCredential: FunctionComponent<GenerateCredential> = ({\n  instanceName = '',\n  mainToggle,\n}: GenerateCredential) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n  const [credential, setCredential] = useState<any | undefined>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState('');\n\n  const generateCredential = async () => {\n    const accessToken = await authContext?.getToken();\n    const serviceAccountRequest: ServiceAccountRequest = {\n      name: instanceName,\n    };\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.createServiceAccount(serviceAccountRequest).then((res) => {\n        setCredential(res?.data);\n        setIsLoading(false);\n        setIsOpen(true);\n      });\n    } catch (err) {\n      setIsLoading(false);\n      let reason;\n      if (isServiceApiError(err)) {\n        reason = err.response?.data.reason;\n      }\n      setError(reason);\n    }\n  };\n\n  const handleModalToggle = () => {\n    if (mainToggle) {\n      setIsOpen(true);\n      setIsLoading(false);\n    } else {\n      setIsLoading(true);\n      setError('');\n      setCredential(undefined);\n      generateCredential();\n    }\n  };\n\n  // useEffect(() => {\n  //   if (stepNo === 5) {\n  //     generateCredential();\n  //   }\n  // }, [stepNo]);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setIsCreated(!isCreated);\n    setCredential(undefined);\n    setConfirmationCheckbox(false);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, _prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (_checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (_checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      {mainToggle && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title=\"These credentials were not actually generated from this flow as it is part of the mock UI. For now, please turn off the mock UI to generate credentials.\"\n        />\n      )}\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t('credential_successfully_generated'),\n          headingLevel: 'h4',\n          size: TitleSizes.lg,\n        }}\n        emptyStateBodyProps={{\n          body: t('clientid_empty_state_body'),\n        }}\n      >\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t('client_id')}\n          </InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\" data-testid=\"modalCredentials-copyClientID\">\n            {mainToggle ? 'srvc-acct-962bc96e-4339-4aee-9505-040d5069c6a5' : credential?.clientID}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\" data-testid=\"modalCredentials-copyClientSecret\">\n            {mainToggle ? '441cdf77-083c-41d1-9050-c27a3b4247ac' : credential?.clientSecret}\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button\n          variant=\"primary\"\n          isDisabled={!confirmationCheckbox}\n          onClick={handleClose}\n          data-testid=\"modalCredentials-buttonClose\"\n        >\n          {t('close')}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n\n  const getSteps = () => {\n    const steps: WizardStep[] = [{ id: 5, name: t('finish'), component: clientID, isFinishedStep: true }];\n    if (mainToggle) {\n      steps.unshift(\n        { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n        { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n        { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n        { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') }\n      );\n    }\n    return steps;\n  };\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      <FlexItem className=\"pf-m-align-right\">\n        <Button\n          variant=\"secondary\"\n          onClick={handleModalToggle}\n          className=\"pf-u-ml-md\"\n          spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n          isLoading={isLoading}\n          data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n        >\n          {t('generate_credential')}\n        </Button>\n      </FlexItem>\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={getSteps()}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        hideClose={true}\n      />\n      {error && (\n        <FlexItem className=\"pf-m-grow\">\n          <Alert variant=\"danger\" isInline title={error} />\n        </FlexItem>\n      )}\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Flex, FlexItem, ClipboardCopy } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { GenerateCredential } from './GenerateCredential';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n  externalServer?: string;\n  instanceName?: string;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = ({\n  mainToggle,\n  externalServer,\n  instanceName,\n}: ResourcesTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n        <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_2')}</Text>\n        <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n          {t('external_server')}\n        </Text>\n      </TextContent>\n      <Flex>\n        <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n          <ClipboardCopy data-testid=\"drawerStreams-copyBootstrapURL\">{externalServer}</ClipboardCopy>\n        </FlexItem>\n        <GenerateCredential instanceName={instanceName} mainToggle={mainToggle} />\n      </Flex>\n      {mainToggle && (\n        <>\n          <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n            <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n            <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n          </TextContent>\n          <ClipboardCopy>https://:30123</ClipboardCopy>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport CopyIcon from '@patternfly/react-icons/dist/js/icons/copy-icon';\nimport { useTranslation } from 'react-i18next';\n\nexport const SampleCodeTab = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, TabsProps, Tab, TabTitleText } from '@patternfly/react-core';\nimport { ResourcesTab, ResourcesTabProps } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ConnectionTabProps = Pick<TabsProps, 'onSelect' | 'activeKey'> & ResourcesTabProps;\n\nexport const ConnectionTab: React.FC<ConnectionTabProps> = ({\n  onSelect,\n  externalServer,\n  instanceName,\n  mainToggle,\n  activeKey,\n}: ConnectionTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {mainToggle ? (\n        <div className=\"mas--details__drawer--tab-content pf-m-secondary\">\n          <Tabs activeKey={activeKey} isSecondary onSelect={onSelect}>\n            <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n              <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n            </Tab>\n            <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n              <SampleCodeTab />\n            </Tab>\n          </Tabs>\n        </div>\n      ) : (\n        <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport { KafkaRequest } from 'src/openapi';\n\nexport type DetailsTabProps = {\n  mainToggle?: boolean;\n  instanceDetail?: KafkaRequest;\n};\n\nexport const DetailsTab = ({ mainToggle, instanceDetail }: DetailsTabProps) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n\n  const { id, owner, created_at, updated_at } = instanceDetail || {};\n\n  const renderTextListItem = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mas--details__drawer--grid\">\n            <GridItem span={6} className=\"mas--details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItem(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItem(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItem(t('id'), id)}\n            {renderTextListItem(t('owner'), owner)}\n            {renderTextListItem(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItem(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { ConnectionTab } from './ConnectionTab';\nimport { DetailsTab, DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'\n> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n}) => {\n  dayjs.extend(localizedFormat);\n\n  const { t } = useTranslation();\n  const { name } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrapServerHost } = instanceDetail || {};\n    return bootstrapServerHost?.endsWith(':443') ? bootstrapServerHost : `${bootstrapServerHost}:443`;\n  };\n\n  const panelBodyContent = () => {\n    return (\n      <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n        <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n          <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>} data-testid=\"drawerStreams-tabConnect\">\n          <ConnectionTab\n            mainToggle={mainToggle}\n            activeKey={activeTab2Key}\n            instanceName={name}\n            externalServer={getExternalServer()}\n            onSelect={onSelectConnectionTab}\n          />\n        </Tab>\n      </Tabs>\n    );\n  };\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent()}\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import { useEffect, useState } from 'react';\n\nexport function getBrowserVisibilityProp() {\n  const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp() {\n    const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden() {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility() {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  });\n  return {isVisible,setIsVisible};\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { Level, LevelItem, PageSection, PageSectionVariants, Title, AlertVariant } from '@patternfly/react-core';\nimport {\n  StreamsTableView,\n  FilterType,\n  CreateInstanceModal,\n  InstanceDrawer,\n  CreateInstanceModalProvider,\n} from './components';\nimport { AlertProvider, useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport './OpenshiftStreams.css';\nimport { MASLoading, MASEmptyState, MASFullPageError } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { MAX_POLL_INTERVAL } from '@app/utils';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance, getConnectToInstancePath }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [isOpenCreateInstanceModal, setIsOpenCreateInstanceModal] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  // const [pollInterval, setPollInterval] = useState<number>(MAX_POLL_INTERVAL);\n\n  const drawerRef = React.createRef<any>();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken) && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n        }\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  useTimeout(() => fetchKafkas(true), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  /**\n   * Show Unathorize page in case user is not authorize\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('you_do_not_have_access_to_openshift_streams'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('contact_your_organization_administration_for_more_information'),\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <AlertProvider>\n        <CreateInstanceModalProvider\n          value={{\n            isModalOpen: isOpenCreateInstanceModal,\n            setIsModalOpen: setIsOpenCreateInstanceModal,\n            onCreate,\n            cloudProviders,\n            mainToggle,\n            refresh: refreshKafkas,\n          }}\n        >\n          <InstanceDrawer\n            mainToggle={mainToggle}\n            isExpanded={selectedInstance != null}\n            activeTab={activeTab}\n            isLoading={instanceDetail === undefined}\n            instanceDetail={instanceDetail}\n            onClose={onCloseDrawer}\n            data-ouia-app-id=\"controlPlane-streams\"\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <MASLoading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <MASEmptyState\n                  titleProps={{\n                    title: t('you_do_not_have_any_kafka_instances_yet'),\n                    headingLevel: 'h2',\n                  }}\n                  emptyStateBodyProps={{\n                    body: t('create_a_kafka_instance_to_get_started'),\n                  }}\n                  buttonProps={{\n                    title: t('create_a_kafka_instance'),\n                    onClick: () => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModal),\n                    ['data-testid']: 'emptyStateStreams-buttonCreateKafka',\n                  }}\n                />\n                <CreateInstanceModal />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  getConnectToInstancePath={getConnectToInstancePath}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                  isDrawerOpen={selectedInstance !== null}\n                />\n              </PageSection>\n            )}\n          </InstanceDrawer>\n        </CreateInstanceModalProvider>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n"],"sourceRoot":""}