{"version":3,"file":"5266.469d298d.js","mappings":"+IA8BO,SAASA,IACd,OAAQC,UAXFC,EAAiBD,cACG,IAAfC,EAAIC,OACN,cAC0B,IAAjBD,EAAIE,SACb,gBAC8B,IAArBF,EAAIG,aACb,eAEF,KATF,IACCH,EAcD,SAASI,IAIR,OAA4B,IAAAC,UAASP,KAApCQ,EAAS,KAAEC,EAAY,KACxBC,EAAqB,WAAM,OAAAD,EAAaT,MAQ9C,OAPA,IAAAW,YAAU,WACR,IAjCIT,EAiCEU,OAhCkB,KADpBV,EAAiBD,UACRE,OAEN,wBAC0B,IAAjBD,EAAIE,SACb,0BAC8B,IAArBF,EAAIG,aACb,yBAEF,GA0BL,OADAJ,SAASY,iBAAiBD,EAAkBF,GAAoB,GACzD,WACLT,SAASa,oBAAoBF,EAAkBF,MAEhD,IACI,CAAEF,UAAS,EAAEC,aAAY,K,sJC1B5BM,EAA+D,SAAC,G,IACpEC,EAAU,aACVC,EAAO,UACPC,EAAc,iBACdC,EAAU,aACVC,EAAS,YACTC,EAAQ,WACYC,EAAa,sBACjCC,EAAgB,mBAChBC,EAAkC,qCAElC,WAAa,KACL,IAAAC,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,KAAS,CACRP,WAAYA,EACZC,UAAWA,EACXH,QAASA,EACTU,iBACE,kBAACC,EAAA,GAAqB,CACpBZ,WAAYA,EACZE,eAAgBA,EAChBK,iBAAkBA,IAGtBM,kBAAmB,CACjBC,KAAM,CAAEC,MAAON,EAAE,kBACjBO,MAAO,CAAEC,MAAOf,MAAAA,OAAc,EAAdA,EAAgBgB,KAAMC,aAAc,OACrD,mBACiBb,EAClBE,mCAAoCA,GAEnCH,K,+CC3CKe,E,gEAHCC,EAAe,UAAW,WAAM,0CAChCC,EAAa,UAAW,WAAM,2CAE3C,SAAYF,GACV,oBACA,0BAFF,CAAYA,IAAAA,EAAkB,KAUvB,IAAMR,EACX,SAAC,G,IAgBWW,EAhBTvB,EAAU,aAAEE,EAAc,iBAAEK,EAAgB,mBACrCE,GAAM,IAAAC,kBAAgB,EAExB,GAA4B,IAAAnB,UAChCS,GAAcoB,EAAmBI,SAD5BC,EAAS,KAAEC,EAAY,KAmBxBC,GACJzB,MAAAA,OAAc,EAAdA,EAAgB0B,UAAW,gBAC3B1B,MAAAA,OAAc,EAAdA,EAAgB0B,UAAW,eAE7B,OACE,kBAAC,aAAc,CAACC,SAAU,kBAAC,KAAU,OACnC,kBAAC,EAAAC,KAAI,CACHC,UAAWN,EAAUO,WACrBC,SAAU,SAACC,EAAGC,GAAQ,OAvBV,SAACA,GACbA,IAAQf,EAAmBgB,WAC7BV,EAAaN,EAAmBgB,YAEhCV,EAAaN,EAAmBI,SAmBRa,CAAUF,KAEhC,kBAAC,EAAAG,IAAG,CACFC,SAAUnB,EAAmBI,QAAQQ,WACrChB,MAAO,kBAAC,EAAAwB,aAAY,KAAE/B,EAAE,aAExB,kBAACa,EAAU,CAACpB,eAAgBA,KAE9B,kBAAC,EAAAoC,IAAG,CACFC,SAAUnB,EAAmBgB,WAAWJ,WACxChB,MAAO,kBAAC,EAAAwB,aAAY,KAAE/B,EAAE,eAA6B,cACzC,4BAEZ,kBAACY,EAAY,CACXoB,gBA5BAlB,GAA0BrB,GAAkB,IAAE,uBAC/CqB,MAAAA,OAAqB,EAArBA,EAAuBmB,SAAS,SACnCnB,EACGA,EAAqB,QA0BpBI,eAAgBA,EAChBpB,iBAAkBA,S,wJClEzB,SAASoC,EAAcC,EAAaC,GACzC,IAAMC,GAAgB,IAAAC,WAEtB,IAAApD,YAAU,WACRmD,EAAcE,QAAUJ,IACvB,CAACA,KAEJ,IAAAjD,YAAU,WAIR,GAAc,OAAVkD,EAAgB,CAClB,IAAM,EAAKI,YAJb,WACEH,EAAcE,YAGcH,GAC5B,OAAO,WACLK,cAAc,OAIjB,CAACN,EAAUC,I,qECjBHM,EAAoB,SAC/BC,EACAC,GAEQ,IAAA5C,GAAM,IAAAC,kBAAgB,EAC9B,OAAI0C,EACK,6BAAM3C,EAAE,uBAEV,6BAAMA,EAAE,8BAA+B,CAAES,KAAMmC,MCK3CC,EACX,SAAC,G,MACCC,EAAqB,wBACrBC,EAAc,iBACdJ,EAAW,cACXK,EAAY,eACZC,EAAiB,oBACjBC,EAAsB,yBACtBC,EAAiB,oBACjBC,EAAY,eAEJpD,GAAM,IAAAC,kBAAgB,EACxBoD,GAAY,IAAAf,QAAe,MAC3BgB,EAAiBZ,EAAkBC,GAEnCY,EAAU,UAAyB,SAACC,GACxC,MAAO,CACLlD,MAAON,EAAEwD,EAAchD,OACvBA,MAAOgD,EAAchD,MACrBiD,UAAU,MAIRC,EAAyC,WAC7C,OAAIf,EAEA,kBAAC,EAAAgB,QAAO,CACN5E,UAAW4D,EACXiB,QAASN,EACTO,UAAWR,IAIV,sCAyET,OACE,kBAAC,EAAAS,cAAa,CACZC,MAA8C,QAAvC,EAAAjB,EAAsB,yBAAiB,eAAEkB,KAAI,SAACC,GAAQ,OAAAjE,EAAEiE,MAC/DC,WAAY,SAACC,EAAWC,GACtB,OAAAhB,EAAa,iBAAkBgB,EAAMb,IAEvCc,gBAAiB,WAAM,OAAAlB,EAAkB,mBACzCmB,aAActE,EAAE,kBAChBuE,gBAAoC,mBAAnBxB,GAEjB,mBAhFiD,WAC7C,OAA0B,IAAAjE,WAAS,GAAlC0F,EAAQ,KAAEC,EAAW,KAsBtBC,EAAQ,WACZzB,EAAkB,kBAClBwB,GAAY,IAGd,MAAuB,mBAAnB1B,EAEA,kBAAC,EAAA4B,OAAM,CACLC,GAAG,wBACHC,QAAS,EAAAC,cAAA,SAAsB,aACpB,wBACXC,SA/BW,WACfN,GAAY,SAACO,GAAc,OAACA,MA+BxBC,WAAYnC,EAAsB,kBAClCoC,OAAQV,EACRhD,SA9BW,SACf2D,EAGAC,EACAC,GAEIA,GAAeX,IACnB1B,EACE,iBACA,CAAExC,MAAO4E,EAAU7D,WAAY+D,SAAS,IACxC,GAEF/B,EAAQgC,OAAS,GAAKd,GAAY,IAkB9Be,gBAAiBxF,EAAE,4BACnByF,UAAU,sBACVC,IAAKrC,GAEJE,EAAQS,KAAI,SAAC2B,EAAQC,GAWpB,OACE,kBAAC,EAAAC,aAAY,CACXC,aAXEH,EAAOlC,UAITd,GACAO,EAAuB,iBAAkByC,EAAOnF,OAOhDuF,IAAKH,EACLpF,MAAOmF,EAAOnF,OAEd,kBAACkD,EAAa,MACbiC,EAAOrF,WAOb,uCAae,Q,WCnHf0F,EAAuD,SAAC,G,IACnElD,EAAqB,wBACrBM,EAAY,eACZD,EAAiB,oBACjBJ,EAAc,iBACdJ,EAAW,cACXK,EAAY,eAEJhD,GAAM,IAAAC,kBAAgB,EACxB,GAAoB,IAAAnB,WAAkB,GAArCmH,EAAK,KAAEC,EAAQ,KAChB,GAAoB,IAAApH,YAAnB0B,EAAK,KAAE2F,EAAQ,KAChBC,GAAW,IAAA9D,QAAyB,MACpCgB,EAAiBZ,EAAkBC,EAAa,QAEhD0D,EAAS,SAACC,GACdH,EAASG,IACRL,GAASC,GAAS,IASfK,EAAa,SAACC,GACA,UAAdA,EAAMT,KAAoBpD,GAC5B8D,KAIEA,EAAW,WACXjG,GAAyB,IAAhBA,EAAMkG,UAbJ,SAAClG,GAChB,OAAOA,GACH,qCAAqCmG,KAAKnG,EAAMkG,QAY9CE,CAASpG,GAIX0F,GAAS,IAHTlD,EAAa,OAAQ,CAAExC,MAAOA,EAAO8E,SAAS,IAAS,GACvDa,EAAS,OAoDf,OACE,kBAAC,EAAArC,cAAa,CACZC,MAAOjB,EAAsB,QAC7BoB,WAAY,SAACC,EAAWC,GAAS,OAAAhB,EAAa,OAAQgB,IACtDC,gBAAiB,WAAM,OAAAlB,EAAkB,SACzCmB,aAActE,EAAE,QAChBuE,gBAAmD,UAAlCxB,MAAAA,OAAc,EAAdA,EAAgB8D,gBAEjC,mBArDuC,WACzC,IAAMC,GAAKb,GAAStD,EAcpB,MAAsC,UAAlCI,MAAAA,OAAc,EAAdA,EAAgB8D,eAEhB,kBAAC,EAAAE,WAAU,KACT,kBAAC,EAAAC,UAAS,CACRvG,KAAK,OACLmE,GAAG,aACHqC,KAAK,SAAQ,aACF,sBACXC,UAAWJ,EAAI,EAAAK,iBAAA,MAAyB,EAAAA,iBAAA,QACxCC,YAAapH,EAAE,wBACfqH,SAAUhB,EACVE,WAAYA,EACZ/F,MAAOA,EACPkF,IAAKU,IAEP,kBAAC,EAAAkB,OAAM,CACLzC,QAAS,EAAA0C,cAAA,QACTzB,YAAaG,GAAStD,EACtB6E,QAAS,WAAM,OAAAf,KAAU,aACd,oBAEX,kBAAC,KAAU,OAEb,mBApCyC,WAC7C,OAAIK,EAEA,kBAAC,EAAAnD,QAAO,CACN5E,UAAW4D,IAAgBsD,EAC3BrC,QAASN,EACTO,UAAWuC,IAIV,uCA0BW,OAIb,uCAWK,QChGHqB,EAAyD,SAAC,G,IACrE3E,EAAqB,wBACrBK,EAAiB,oBACjBC,EAAY,eACZL,EAAc,iBACdJ,EAAW,cACXK,EAAY,eAEJhD,GAAM,IAAAC,kBAAgB,EACxBmG,GAAW,IAAA9D,QAAyB,MACpCgB,EAAiBZ,EAAkBC,EAAa,SAEhD,GAAoB,IAAA7D,YAAnB0B,EAAK,KAAE2F,EAAQ,KAChB,GAAoB,IAAArH,WAAkB,GAArCmH,EAAK,KAAEC,EAAQ,KAQhBO,EAAW,WACXjG,GAAyB,IAAhBA,EAAMkG,UAPJ,SAAClG,GAChB,OAAOA,GACH,qCAAqCmG,KAAKnG,EAAMkG,QAM9CE,CAASpG,GAIX0F,GAAS,IAHTlD,EAAa,QAAS,CAAExC,MAAOA,EAAO8E,SAAS,IAAS,GACxDa,EAAS,OAOTI,EAAa,SAACC,GACA,UAAdA,EAAMT,KAAoBpD,GAC5B8D,KAIEY,EAAW,SAACf,GAChBH,EAASG,IACRL,GAASC,GAAS,IAiDrB,OACE,kBAAC,EAAApC,cAAa,CACZC,MAAOjB,EAAsB,SAC7BoB,WAAY,SAACC,EAAWC,GAAS,OAAAhB,EAAa,QAASgB,IACvDC,gBAAiB,WAAM,OAAAlB,EAAkB,UACzCmB,aAActE,EAAE,SAChBuE,gBAAmD,WAAlCxB,MAAAA,OAAc,EAAdA,EAAgB8D,gBAEjC,mBAtDwC,WAC1C,GAAsC,WAAlC9D,MAAAA,OAAc,EAAdA,EAAgB8D,eAA2B,CAC7C,IAAM,GAAKZ,GAAStD,EAepB,OACE,kBAAC,EAAAoE,WAAU,KACT,kBAAC,EAAAC,UAAS,CACRvG,KAAK,QACLmE,GAAG,eACHqC,KAAK,SAAQ,aACF,sBACXG,YAAapH,EAAE,mBACfkH,UAAW,EAAI,EAAAC,iBAAA,MAAyB,EAAAA,iBAAA,QACxCE,SAAUA,EACVd,WAAYA,EACZ/F,MAAOA,EACPkF,IAAKU,IAEP,kBAAC,EAAAkB,OAAM,CACLxB,WAAY,EACZjB,QAAS,EAAA0C,cAAA,QACTC,QAASf,EAAQ,aACN,iBAEX,kBAAC,KAAU,OAEb,mBAnC2C,WAC7C,OAAI,EAEA,kBAAC,EAAA9C,QAAO,CACN5E,UAAW4D,IAAgBsD,EAC3BrC,QAASN,EACTO,UAAWuC,IAIV,uCAyBS,OAIpB,OAAO,uCAWM,QCjGJsB,EAA2D,SAAC,G,MACvE5E,EAAqB,wBACrBM,EAAY,eACZD,EAAiB,oBACjBF,EAAiB,oBACjBC,EAAsB,yBACtBP,EAAW,cACXI,EAAc,iBACdC,EAAY,eAEJhD,GAAM,IAAAC,kBAAgB,EACxBoD,GAAY,IAAAf,QAAe,MAC3BgB,EAAiBZ,EAAkBC,GAEnCY,EAAU,UAAuB,SAACoE,GACtC,MAAO,CAAErH,MAAON,EAAE2H,EAAOnH,OAAQA,MAAOmH,EAAOnH,MAAOiD,UAAU,MAG5DC,EAAyC,WAC7C,OAAIf,EAEA,kBAAC,EAAAgB,QAAO,CACN5E,UAAW4D,EACXiB,QAASN,EACTO,UAAWR,IAIV,sCAuET,OACE,kBAAC,EAAAS,cAAa,CACZC,MAAsC,QAA/B,EAAAjB,EAAsB,iBAAS,eAAEkB,KAAI,SAACC,GAAQ,OAAAjE,EAAEiE,MACvDC,WAAY,SAACC,EAAWC,GAAS,OAAAhB,EAAa,SAAUgB,EAAMb,IAC9Dc,gBAAiB,WAAM,OAAAlB,EAAkB,WACzCmB,aAActE,EAAE,UAChBuE,gBAAoC,WAAnBxB,GAEjB,mBA5E0C,WACtC,OAA0B,IAAAjE,WAAS,GAAlC0F,EAAQ,KAAEC,EAAW,KAsBtBC,EAAQ,WACZzB,EAAkB,UAClBwB,GAAY,IAGd,MAAuB,WAAnB1B,EAEA,kBAAC,EAAA4B,OAAM,CACLC,GAAG,gBACHC,QAAS,EAAAC,cAAA,SAAsB,aACpB,gBACXC,SA/BW,WACfN,GAAaD,IA+BTS,WAAYnC,EAAsB,UAClCoC,OAAQV,EACRhD,SA9BW,SACf2D,EAGAC,EACAC,GAEIA,GAAeX,IACnB1B,EACE,SACA,CAAExC,MAAO4E,EAAU7D,WAAY+D,SAAS,IACxC,GAEF/B,EAAQgC,OAAS,GAAKd,GAAY,IAkB9Be,gBAAiBxF,EAAE,oBACnByF,UAAU,sBACVC,IAAKrC,GAEJE,EAAQS,KAAI,SAAC2B,EAAQC,GASpB,OACE,kBAAC,EAAAC,aAAY,CACXC,aATEH,EAAOlC,UAITd,GAAeO,EAAuB,SAAUyC,EAAOnF,OAMvDuF,IAAKH,EACLpF,MAAOmF,EAAOnF,OAEd,kBAACkD,EAAa,MACbiC,EAAOrF,WAOb,uCAWQ,QC5GNsH,EAA2D,SAAC,G,IACvEC,EAAiB,oBACjB9E,EAAc,iBAEN/C,GAAM,IAAAC,kBAAgB,EACxB,GAA0C,IAAAnB,WAAS,GAAlDgJ,EAAgB,KAAEC,EAAmB,KActCxE,EAAU,CACd,CAAEjD,MAAON,EAAE,QAASQ,MAAO,OAAQiD,UAAU,GAC7C,CAAEnD,MAAON,EAAE,kBAAmBQ,MAAO,iBAAkBiD,UAAU,GACjE,CAAEnD,MAAON,EAAE,UAAWQ,MAAO,SAAUiD,UAAU,GACjD,CAAEnD,MAAON,EAAE,SAAUQ,MAAO,QAASiD,UAAU,GAC/C,CAAEnD,MAAON,EAAE,UAAWQ,MAAO,SAAUiD,UAAU,IAGnD,OACE,kBAAC,EAAAuE,YAAW,KACV,kBAAC,EAAArD,OAAM,CACLE,QAAS,EAAAC,cAAA,OAAoB,aAClB,gBACXC,SAzBW,WACfgD,GAAqBD,IAyBjB7C,WAAYlC,EACZmC,OAAQ4C,EACRtG,SAxBW,SACf2D,EACAC,GAEA2C,GAAqBD,GACrBD,EAAkBzC,MAAAA,OAAS,EAATA,EAAW7D,cAqBxBgC,EAAQS,KAAI,SAAC2B,EAAQC,GAAU,OAC9B,kBAAC,EAAAC,aAAY,CACXC,WAAYH,EAAOlC,SACnBsC,IAAKH,EACLpF,MAAOmF,EAAOnF,OAEbmF,EAAOrF,aC1CP2H,EAAsD,SAAC,G,MAClEnF,EAAqB,wBACrBM,EAAY,eACZD,EAAiB,oBACjBR,EAAW,cACXI,EAAc,iBACdC,EAAY,eACZC,EAAiB,oBACjBC,EAAsB,yBAEdlD,GAAM,IAAAC,kBAAgB,EACxBqD,EAAiBZ,EAAkBC,GAEnCU,GAAY,IAAAf,QAAe,MAE3B4F,EAAsB,aAExB,SAACC,GACC,OAAAA,EAAE3H,QAAU,gBACZ2H,EAAE3H,QAAU,gBAEfwD,KAAI,SAAC7C,GACJ,MAAO,CAAEb,MAAON,EAAEmB,EAAOX,OAAQA,MAAOW,EAAOX,MAAOiD,UAAU,MAG9DC,EAAyC,WAC7C,OAAIf,EAEA,kBAAC,EAAAgB,QAAO,CACN5E,UAAW4D,EACXiB,QAASN,EACTO,UAAWR,IAIV,sCAqET,OACE,kBAAC,EAAAS,cAAa,CACZC,MAAsC,QAA/B,EAAAjB,EAAsB,iBAAS,eAAEkB,KAAI,SAACC,GAAQ,OAAAjE,EAAEiE,MACvDC,WAAY,SAACC,EAAWC,GACtB,OAAAhB,EAAa,SAAUgB,EAAM8D,IAE/B7D,gBAAiB,WAAM,OAAAlB,EAAkB,WACzCmB,aAActE,EAAE,UAChBuE,gBAAoC,WAAnBxB,GAEjB,mBA5E0C,WACtC,OAA0B,IAAAjE,WAAS,GAAlC0F,EAAQ,KAAEC,EAAW,KAoBtBC,EAAQ,WACZzB,EAAkB,UAClBwB,GAAY,IAEd,MAAuB,WAAnB1B,EAEA,kBAAC,EAAA4B,OAAM,CACLC,GAAG,gBACHC,QAAS,EAAAC,cAAA,SAAsB,aACpB,gBACXC,SA7BW,WACfN,GAAaD,IA6BTS,WAAYnC,EAAsB,UAClCoC,OAAQV,EACRhD,SA5BW,SACf2D,EAGAC,EACAC,GAEIA,GAAeX,IACnB1B,EACE,SACA,CAAExC,MAAO4E,EAAU7D,WAAY+D,SAAS,IACxC,IAkBEE,gBAAiBxF,EAAE,oBACnByF,UAAU,sBACVC,IAAKrC,GAEJ6E,EAAoBlE,KAAI,SAAC2B,EAAQC,GAUhC,OACE,kBAAC,EAAAC,aAAY,CACXC,aAVEH,EAAOlC,UAITd,GAAeO,EAAuB,SAAUyC,EAAOnF,OAOvDuF,IAAKH,EACLpF,MAAOmF,EAAOnF,OAEd,kBAACkD,EAAa,MACbiC,EAAOrF,WAOb,uCAaQ,QC5GN8H,EACX,SAAC,G,IACCzF,EAAW,cACX0F,EAAa,gBACbC,EAAgB,mBAChBvF,EAAc,iBACd8E,EAAiB,oBAEX3E,EAAyB,SAAC6C,EAAawC,GAC3C,IAAIC,EACEC,EAAmBJ,MAAAA,OAAa,EAAbA,EAAeK,QACtC,SAAC,GAAkB,OAAP,cAAqB3C,KAEnC,GAAI0C,IAAoBA,MAAAA,OAAgB,EAAhBA,EAAkBlD,QAAS,EAAG,CAC5C,IAAAoD,EAAgBF,EAAiB,GAAE,YAC3CD,EAAiBG,MAAAA,OAAW,EAAXA,EAAaC,MAC5B,SAAC,GAAc,OAAP,UAAiBL,KAG7B,OAAKC,GAMDxF,EAAe,SACnB+C,EACA2C,EACAG,GAEA,IAAML,EAA+BM,OAAOC,OAAO,GAAIV,GACjDW,EAAcR,EAAeS,WAAU,SAACC,GAAM,OAAAA,EAAEC,YAAcpD,KACpE,GAAIiD,GAAe,EAAG,CAEpB,IAAML,EAAcH,EAAeQ,GACnC,GAAIL,EAAYA,aAAeA,EAAYA,YAAYpD,OAAS,EAAG,CAEjE,IAAM6D,EAAmBT,EAAYA,YAAYM,WAC/C,SAACC,GAAM,OAAAA,EAAE1I,QAAUkI,EAAOlI,SAE5B,GAAI4I,GAAoB,EAAG,CAEzB,IAAIP,EAGF,OAFAF,EAAYA,YAAYU,OAAOD,EAAkB,QAMnDZ,EAAeQ,GAAaL,YAAYW,KAAKZ,QAI/CF,EAAeQ,GAAaL,YAAc,CAACD,QAI7CF,EAAec,KAAK,CAAEH,UAAWpD,EAAK4C,YAAa,CAACD,KAEtDJ,EAAiBE,IAGb1F,EAAwB,SAACiD,GAC7B,IAAMwD,EAAkBlB,EAAcK,QACpC,SAACA,GAAW,OAAAA,EAAOS,YAAcpD,KAEnC,GAAIwD,EAAgBhE,OAAS,EAC3B,OAAOgE,EAAgB,GAAGZ,YAAY3E,KAAI,SAACC,GAAQ,OAAAA,EAAIzD,UAKrD4C,EAAe,SACnBoG,EACApF,EACAqF,G,QAEMhB,EAAiCK,OAAOC,OAAO,GAAIV,GACnDW,EAAcP,EAAiBQ,WACnC,SAACP,GAAW,OAAAA,EAAOS,YAAcK,KAE7BE,EAAiCZ,OAAOC,OAC5C,GAC6B,QAA7B,EAAAN,EAAiBO,UAAY,eAAEL,aAE7BgB,EAAiCvF,EAAK7C,WAItCkI,IAAiBA,MAAAA,OAAa,EAAbA,EAAelE,QAAS,IAC3CoE,EAEC,QAFY,EAAAF,MAAAA,OAAa,EAAbA,EAAeb,MAC1B,SAACjD,GAAW,OAAAA,EAAOrF,QAAU8D,EAAK7C,qBACnC,eAAEf,OAKL,IAAMoJ,EAAYF,EAAgBT,WAChC,SAAChF,GAAQ,OAAAA,EAAIzD,QAAUmJ,KAErBC,GAAa,IACfnB,EAAiBO,GAAaL,YAAYU,OAAOO,EAAW,GAC5DtB,EAAiBG,KAIftF,EAAoB,SAACqG,GACzB,IAAMf,EAAiCK,OAAOC,OAAO,GAAIV,GACnDW,EAAcP,EAAiBQ,WACnC,SAACP,GAAW,OAAAA,EAAOS,YAAcK,KAE/BR,GAAe,IACjBP,EAAiBY,OAAOL,EAAa,GACrCV,EAAiBG,KAIfoB,EAAsB,SAACrJ,GAC3B,IAAMsJ,EAAkChB,OAAOC,OAAO,GAAIV,GACpDW,EAAcc,EAAkBb,WACpC,SAACP,GAAW,OAAAA,EAAOS,YAAc3I,KAE/BwI,GAAe,GACjBc,EAAkBT,OAAOL,EAAa,GAExCV,EAAiBwB,IAGnB,OACE,oCACE,kBAAC,EAAAC,aAAY,CAAClF,QAAQ,gBACpB,kBAAC+C,EAAY,CACXC,kBAAmBA,EACnB9E,eAAgBA,IAElB,kBAACiD,EAAU,CACTrD,YAAaA,EACbI,eAAgBA,EAChBD,sBAAuBA,EACvBE,aAAcA,EACdI,aAAcA,EACdD,kBAAmBA,EACnBF,kBAAmB4G,EACnB3G,uBAAwBA,IAE1B,kBAACL,EAAmB,CAClBF,YAAaA,EACbI,eAAgBA,EAChBD,sBAAuBA,EACvBE,aAAcA,EACdI,aAAcA,EACdD,kBAAmBA,EACnBF,kBAAmB4G,EACnB3G,uBAAwBA,IAE1B,kBAACwE,EAAY,CACX/E,YAAaA,EACbI,eAAgBA,EAChBD,sBAAuBA,EACvBE,aAAcA,EACdI,aAAcA,EACdD,kBAAmBA,EACnBF,kBAAmB4G,EACnB3G,uBAAwBA,IAE1B,kBAACuE,EAAW,CACV9E,YAAaA,EACbI,eAAgBA,EAChBD,sBAAuBA,EACvBE,aAAcA,EACdI,aAAcA,EACdD,kBAAmBA,EACnBF,kBAAmB4G,EACnB3G,uBAAwBA,IAE1B,kBAAC+E,EAAY,CACXtF,YAAaA,EACbI,eAAgBA,EAChBD,sBAAuBA,EACvBE,aAAcA,EACdI,aAAcA,EACdD,kBAAmBA,EACnBF,kBAAmB4G,EACnB3G,uBAAwBA,OCtL9B8G,EAA+D,SAAC,G,IACpEnC,EAAiB,oBACjB,IAAA9E,eAAAA,OAAc,IAAG,SAAM,EACvBkH,EAAK,QACLC,EAAI,OACJC,EAAO,UACP9B,EAAa,gBACbC,EAAgB,mBAChB8B,EAAyB,4BAEjBpK,GAAM,IAAAC,kBAAgB,EACxB,GAAgC,IAAAnB,WAAkB,GAAjD6D,EAAW,KAAE0H,EAAc,MAElC,IAAAnL,YAAU,WACRoL,MACC,CAACjC,IAEJ,IAKMiC,EAAmB,WACvB,IAAIC,EAAiB,EACrBlC,MAAAA,GAAAA,EAAemC,SAAQ,SAAC9B,GACd,IAAAC,EAA2BD,EAAM,YAApBS,EAAcT,EAAM,UACnC+B,EACU,WAAdtB,EACIR,MAAAA,OAAW,EAAXA,EAAaD,QACX,SAAC,GAAc,OAAP,UAAiB,qBAE3B,GACAgC,EACU,WAAdvB,EACIR,MAAAA,OAAW,EAAXA,EAAaD,QACX,SAAC,GAAc,OAAP,UAAiB,oBAE3B,IAEF+B,MAAAA,OAAkB,EAAlBA,EAAoBlF,QAAS,IAAKmF,MAAAA,OAAiB,EAAjBA,EAAmBnF,QAAS,EAChEgF,IAAkB5B,MAAAA,OAAW,EAAXA,EAAapD,QAAS,GAExCkF,MAAAA,OAAkB,EAAlBA,EAAoBlF,QAAS,IAC7BmF,MAAAA,OAAiB,EAAjBA,EAAmBnF,QAAS,EAE5BgF,IAAkB5B,MAAAA,OAAW,EAAXA,EAAapD,QAAS,EAExCgF,GAAkB5B,MAAAA,OAAW,EAAXA,EAAapD,UAI/BgF,GAAkB,KACpBF,GAAe,GAEfA,GAAe,IAIbM,EAAmC,CACvC,CACEC,KACE,kBAAC,EAAAtD,OAAM,CACLzC,QAAQ,UACR2C,QAAS4C,EAAyB,cACrB,kCAEZpK,EAAE,4BAgCX,OA1BIiK,GAASA,EAAQ,GACnBU,EAAarB,KAAK,CAChBsB,KACE,kBAAC,KAAa,CACZC,SAAS,2CACTC,UAAWb,EACXC,KAAMA,EACNC,QAASA,EACTY,WAAW,EACXC,OAAQ,CACNC,gBAAiBjL,EAAE,sBACnBkL,cAAelL,EAAE,mBACjBmL,YAAanL,EAAE,iBACfoL,eAAgBpL,EAAE,oBAClBqL,WAAYrL,EAAE,gBACdsL,WAAYtL,EAAE,gBACduL,cAAevL,EAAE,kBACjBwL,SAAUxL,EAAE,gBAIlB6E,QAAS,aACT4G,UAAW,CAAEC,QAAS,gBAKxB,kBAAC,KAAU,CACTC,aAAc,CACZ/G,GAAI,mBACJgH,gBArFU,WACdtD,EAAiB,IACjB+B,GAAe,IAoFXwB,gCAAiC,KACjCC,MAAO,CAAEC,GAAI,YAEfC,iBAAkB,CAAEC,WAAY,kBAAC,KAAU,MAAKC,WAAY,MAC5DC,iBACE,kBAAC/D,EAAkB,CACjBzF,YAAaA,EACb0F,cAAeA,EACfC,iBAAkBA,EAClBT,kBAAmBA,EACnB9E,eAAgBA,IAGpB4H,aAAcA,K,4CC7HdyB,EAA2D,SAAC,G,IAChEjL,EAAM,SACNkL,EAAY,eAEJrM,GAAM,IAAAC,kBAAgB,EAqBxBqM,EAAgB,WACpB,OAAQnL,MAAAA,OAAM,EAANA,EAAQ0F,eACd,KAAK,cACH,OACE,kBAAC,KAAe,CAACpB,UAAU,0CAE/B,KAAK,cACH,OACE,kBAAC,KAAqB,CAACA,UAAU,uCAErC,KAAK,cACH,OAAO,kBAAC,KAAW,MACrB,KAAK,cACL,KAAK,cACH,OACE,kBAAC,EAAA8G,QAAO,CACNC,KAAK,KAAI,aACGH,EAAY,iBACT,yBAGrB,KAAK,cACL,KAAK,cACH,OACF,QACE,OAAO,kBAAC,KAAW,QAIzB,OACE,kBAAC,EAAAI,KAAI,KACH,mBAvCwC,WAC1C,IAAMC,EAAaJ,IACnB,OAAII,EACK,kBAAC,EAAAC,SAAQ,CAACC,OAAQ,CAAElB,QAAS,aAAegB,GAE9C,uCAkCM,MACX,kBAAC,EAAAC,SAAQ,KACP,mBApDkC,WACtC,IAAME,EAAiB,aACrB,SAACC,GAAO,OAAAA,EAAGtM,SAAUW,MAAAA,OAAM,EAANA,EAAQ0F,kBAE/B,OAA8B,IAA1BgG,EAAetH,OACVvF,EAAE6M,EAAe,GAAGrM,OAEpBR,EAAE,sBA6CA,S,sBCAT+M,EAA+D,SAAC,G,IACpEC,EAAkB,qBAClBC,EAAc,iBACdC,EAAgB,mBAChBC,EAAO,UACPjD,EAAI,OACJC,EAAO,UACPF,EAAK,QACLmD,EAAe,kBACfC,EAAQ,WACRC,EAAa,gBACbjF,EAAa,gBACbC,EAAgB,mBAChBT,EAAiB,oBACjB9E,EAAc,iBACdwK,EAAO,UACPC,EAAU,aACVC,EAAY,eACZC,EAAY,eACZC,EAAmB,sBACnBC,EAAiB,oBACjBC,EAAQ,WACRzD,EAAyB,4BAEnB0D,GAAO,IAAAC,WAEQC,KADL,IAAAC,cAAe,IAAE,KACQ,IAAE,YACnCjO,GAAM,IAAAC,kBAAgB,EACxBiO,EAAe,IAAIC,gBAAgBC,SAASC,QAC5CC,GAAU,IAAAC,cACRC,IAAa,IAAAC,aAAc,IAAE,SAC7BC,IAAqB,UAAkB,IAAE,iBAE3C,GAA2B,IAAAC,YAAzBC,EAAS,YAAEC,EAAS,YAItB,GAA0C,IAAA/P,UAE9C,IAFKgQ,EAAgB,KAAEC,EAAmB,KAGtC,GAA4B,IAAAjQ,YAA3BkQ,EAAS,KAAEC,EAAY,KACxB,GAAoC,IAAAnQ,UAAmB,IAAtDoQ,GAAa,KAAEC,GAAgB,KAChC,IAAoB,IAAArQ,UAA8B,IAAjDsQ,GAAK,MAAEC,GAAQ,MAChB,IAA8B,IAAAvQ,YAA7BwQ,GAAU,MAAEC,GAAa,MAE1BC,GAAe,CACnB,CAAEjP,MAAOP,EAAE,QAASyP,WAAY,CAAC,EAAAC,WACjC,CAAEnP,MAAOP,EAAE,kBAAmByP,WAAY,CAAC,EAAAC,WAC3C,CAAEnP,MAAOP,EAAE,UAAWyP,WAAY,CAAC,EAAAC,WACnC,CAAEnP,MAAOP,EAAE,SAAUyP,WAAY,CAAC,EAAAC,WAClC,CAAEnP,MAAOP,EAAE,UAAWyP,WAAY,CAAC,EAAAC,WACnC,CAAEnP,MAAOP,EAAE,gBAAiByP,WAAY,CAAC,EAAAC,aAG3C,IAAAxQ,YAAU,W,MACS,QAAjB,EAAA4O,EAAKwB,oBAAY,SAAEK,MAAK,SAACL,GAAe,OAAAC,GAAcD,QACrD,CAACxB,IAEJ,IASM8B,IAAiB,IAAAC,cACrB,SAACpP,EAAcD,GACb0N,EAAa4B,IAAIrP,EAAMD,EAAMe,cAE/B,CAAC2M,KAGH,IAAAhP,YAAU,WACHuO,GACHwB,EAAa,MAEd,CAACxB,IAEJ,IAAMsC,GAA+B,WACnC,GAAInC,EAAmB,CAErB,IAOMoC,EAPqCpC,EAAkBlF,QAC3D,SAACuH,GACC,OAAAA,EAAE9O,SAAW,kBACb8O,EAAE9O,SAAW,gBAKduH,QAAO,SAACuH,GAAM,OAAAf,GAAcjG,WAAU,SAACiH,GAAO,OAAAA,IAAOD,EAAExP,QAAQ,KAC/DuD,KAAI,SAACiM,GAAM,OAAAA,EAAExP,MAAQ,MAElB0P,GAAgB,0CACjBjB,IAAa,GACbc,GAAgB,GAGrBb,GAAiBgB,GAGjBA,EAAiB3F,SAAQ,SAACyF,IACLrC,MAAAA,OAAiB,EAAjBA,EAAmB3E,WACpC,SAAC2B,GAAS,OAAAA,EAAKnK,OAASwP,MAET,KAhDQ,SAACxP,GAC9B,IAAMmF,EAAQsJ,GAAcjG,WAAU,SAACgH,GAAM,OAAAA,IAAMxP,KACnD,GAAImF,GAAS,EAAG,CACd,IAAMwK,EAAOtH,OAAOC,OAAO,GAAImG,IAC/BkB,EAAK/G,OAAOzD,EAAO,GACnBuJ,GAAiBiB,IA4CbC,CAAuBJ,GACvBzB,GACEA,EAAS,CACPjO,MAAOP,EAAE,6BAA8B,CAAES,KAAMwP,IAC/CpL,QAAS,EAAAyL,aAAA,iBAuErB,IAAApR,YAAU,WACJgL,EAAO,GACyB,IAA9B8C,EAAmBzH,SACrBqK,GAAe,QAAS1F,EAAO,GAAG3I,YAClCqO,GAAe,UAAWzF,EAAQ5I,YAClC+M,EAAQhF,KAAK,CACX+E,OAAQH,EAAa3M,cAK3BwO,KA3EmC,WACnC,IAAMQ,EAAiCC,KAAKC,MAAMD,KAAKE,UAAUtB,KACjE,GAAIA,IAASA,GAAM7J,OAAS,EAAG,CAC7B,IAAM,EAAyBuD,OAAOC,OACpC,GACAiE,GACAtE,QACA,SAACkC,GACC,OAAAA,EAAKzJ,SAAW,YAChByJ,EAAKzJ,SAAW,eAEpBoP,EAAe/F,SAAQ,SAACI,G,QAChB+F,EAA4B,EAAuBjI,QACvD,SAACkI,GAAyB,OAAAhG,EAAKhG,KAAOgM,EAAOhM,MAE3C+L,GAAaA,EAAUpL,OAAS,IAC9BoL,EAAU,GAAGxP,SAAW,WAC1BqN,GACEA,EAAS,CACPjO,MAAOP,EAAE,8BACT6E,QAAS,EAAAyL,aAAA,QACTO,YACE,0BACEC,wBAAyB,CACvBC,OAAQ/Q,EAAE,wBAAyB,CACjCS,KAAkB,QAAZ,EAAAkQ,EAAU,UAAE,eAAElQ,UAK5BuQ,WAAY,6BAEPL,EAAU,GAAGxP,SAAW,aACjCqN,GACEA,EAAS,CACPjO,MAAOP,EAAE,qBACT6E,QAAS,EAAAyL,aAAA,OACTO,YACE,0BACEC,wBAAyB,CACvBC,OAAQ/Q,EAAE,uBAAwB,CAChCS,KAAkB,QAAZ,EAAAkQ,EAAU,UAAE,eAAElQ,UAK5BuQ,WAAY,gCAMxB,IAAMC,EAAmBnI,OAAOC,OAC9B,GACAiE,MAAAA,OAAkB,EAAlBA,EAAoBtE,QAClB,SAACkC,GACC,OAAAA,EAAKzJ,SAAW,mBAChByJ,EAAKzJ,SAAW,kBAGtBkO,GAAS4B,GAiBTC,KACC,CAAChH,EAAMC,EAAS6C,EAAoBY,IAEvC,IA2GQuD,GACAC,GA5GFC,GAA8B,SAClC7K,EACA8K,EACAC,G,UAEuB,kBAAnBA,GACFtE,EAAeqE,GAEfrC,EAAaqC,MAAAA,OAAY,EAAZA,EAAc7Q,OACC,qBAAnB8Q,GACTrE,EAAiBoE,GACjBrC,EAAaqC,MAAAA,OAAY,EAAZA,EAAc7Q,OACC,iBAAnB8Q,EACTC,GAAcF,GACc,oBAAnBC,GACTE,GAAuBH,GAGzB,IAAMI,EACuC,QAA3C,EAA4B,QAA5B,EAAa,QAAb,EAAAlL,MAAAA,OAAK,EAALA,EAAOmL,cAAM,eAAEC,qBAAa,eAAEA,qBAAa,eAAEC,gBAC3CH,MAAAA,GACDA,EAA6BI,SAoJ5BN,GAAgB,SAAOO,GAAsB,uD,iDACjDrD,GAAoBA,EAAiBqD,GACrChD,EAAoBgD,GACpBnD,EAAU,EAAAoD,UAAA,qBAAgC,CACxCC,MAAOF,EACPG,cAAe/E,I,WAIbsE,GAAyB,SAACM,GACtB,IAAA5Q,EAAW4Q,EAAQ,OAC3BhD,EAAoBgD,GAChB5Q,IAAW,YACbgR,GAAiBJ,GAEjBnD,EAAU,EAAAoD,UAAA,kBAA6B,CACrC3E,SAAU,WAAM,OAAA8E,GAAiBJ,IACjCE,MAAOF,KAKPI,GAAmB,SAAOJ,GAAsB,uD,iFAMpD,QAAmBK,KALbC,GAAavD,MAAAA,OAAgB,EAAhBA,EAAkBlK,MAAMmN,MAAAA,OAAQ,EAARA,EAAUnN,KAMnD,MAAM,IAAI0N,MAAM,gCAEE,SAAMxE,MAAAA,OAAI,EAAJA,EAAMyE,IAAIC,Y,OAA9BC,EAAc,SACdC,EAAc,IAAI,EAAAC,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXzE,SAAQ,KAGZX,IACAwB,I,iBAGE,O,sBAAA,GAAM6D,EAAYG,gBAAgBR,GAAY,GAAM1C,MAAK,WACvDV,OAAamD,GACbzE,GAAoB,GACpBR,IACA4B,OAAoBqD,O,cAJtB,S,+BAOIU,OAAM,GACN,QAAkB,KACpBA,EAAuB,QAAd,IAAMC,gBAAQ,eAAEC,KAAKF,QAOhCtE,GACEA,EAAS,CACPjO,MAAOP,EAAE,+BACT6E,QAAS,EAAAyL,aAAA,OACTO,YAAaiC,I,+BAwBfG,GAA2B,SAACC,GAChC,OAAQA,EAAUrM,eAChB,IAAK,OACH,OAAO,EACT,IAAK,iBACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,aACH,OAAO,EACT,QACE,SAmBAsM,GAAY,WAChB,IAAMC,GAAiB7F,MAAAA,OAAO,EAAPA,EAAS8F,MAAM,OAAQ,GAC9C,GAAID,EAAK7N,OAAS,EAChB,MAAO,CACLK,MAAOqN,GAAyBG,EAAK,IACrCE,UACEF,EAAK,KAAO,EAAAG,gBAAA,IACR,EAAAA,gBAAA,IACA,EAAAA,gBAAA,OA8DZ,OACE,oCACE,kBAACvJ,EAAc,CACbjH,eAAgBA,EAChB8E,kBAAmBA,EACnBoC,MAAOA,EACPC,KAAMA,EACNC,QAASA,EACT9B,cAAeA,EACfC,iBAAkBA,EAClBuF,SAAUA,EACVV,QAASA,EACT/C,0BAA2BA,IAE7B,kBAAC,KAAQ,CACPoJ,WAAY,CACVC,MAAOjE,GACPkE,MA7QAvC,GAAgD,GAChDC,IAAuB,QAC3BlH,EACAC,EACAmD,GAEGF,GAOLJ,EAAmBxC,SAAQ,SAACmJ,GAExB,IAAAlT,EAOEkT,EAAG,KANLC,EAMED,EAAG,eALLhM,EAKEgM,EAAG,OAJLE,EAIEF,EAAG,WAHLxS,EAGEwS,EAAG,OAFLG,EAEEH,EAAG,MADLI,EACEJ,EAAG,cACDK,EAA2BhU,EAAE4T,GAC7BK,EAAoBjU,EAAE2H,GAC5BwJ,GAAS7H,KAAK,CACZmK,MAAO,CACL,CACElT,MACEY,IAAW,kBACXA,IAAW,WAAuB,EAGhC,kBAAC,EAAA+S,KAAI,CAACC,GAAI,WAAUR,MAAAA,OAAG,EAAHA,EAAK/O,KAAOnE,IAGtCuT,EACAC,EACAH,EACA,CACEvT,MAAO,kBAAC6L,EAAY,CAACjL,OAAQA,EAAQkL,aAAc5L,KAErD,CACEF,MACE,qCACG,QAAiBsT,EAAY7T,EAAE,QAChC,6BACC+T,KAA8B,OAAZ,WAAY,IAAZ,UAAY,EAAZ,YAAsB,uBAKjDzC,aAAcqC,OAGXxC,KAhDE,QAAmB,CACxBC,aAAY,GACZgD,SAAU,kBAAC,EAAAC,SAAQ,MACnB9O,OAAQiK,GAAajK,UAoQnB,aAAcvF,EAAE,yBAChBsU,eArNe,SAACC,GACtB,OA7IwB,SAACA,G,YACzB,IAAKnH,EACH,MAAO,GAET,IAAMkE,EAA6BiD,EAAQjD,aAC3C,GACEA,EAAanQ,SAAW,kBACxBmQ,EAAanQ,SAAW,aAExB,MAAO,GAET,IAEIqT,EAFEC,EACJnD,EAAawC,QAAUpG,GAAgB4B,GAkEzC,OAhEKmF,IACHD,EAAkB,CAChBE,SAAS,EACT5O,YAAY,EACZ6O,MAAO,CACLC,cAAe,OACfC,OAAQ,aAI6B,E,iCAEvCtU,MAAOP,EAAE,gBACT4E,GAAI,iBAAe,EAClB,eAAgB,6BACjB,EAAA4C,QAAS,SAAChB,GACR,OAAAiO,GACApD,GAA4B7K,EAAO8K,EAAc,kBAAgB,GAChEkD,GAAe,CAClBM,aAAc,CACZC,SAAU,OACVnR,QAAS5D,EAAE,mC,iCAIbO,MAAOP,EAAE,+BACT4E,GAAI,oBAAkB,EACrB,eAAgB,gCACjB,EAAA4C,QAAS,SAAChB,GACR,OAAAiO,GACApD,GAA4B7K,EAAO8K,EAAc,qBAAmB,GACnEkD,GAAe,CAClBM,aAAc,CACZC,SAAU,OACVnR,QAAS5D,EAAE,sC,iCAIbO,MAAOP,EAAE,gBACT4E,GAAI,gBAAc,EACjB,eAAgB,iCACjB,EAAA4C,QAAS,SAAChB,GACR,OAAAiO,GACApD,GAA4B7K,EAAO8K,EAAc,iBAAe,GAC/DkD,GAAe,CAClBM,aAAc,CACZC,SAAU,OACVnR,QAAS5D,EAAE,qC,iCAIbO,MAAOP,EAAE,mBACT4E,GAAI,mBAAiB,EACpB,eAAgB,4BACjB,EAAA4C,QAAS,SAAChB,GACR,OAAAiO,GACApD,GAA4B7K,EAAO8K,EAAc,oBAAkB,GAClEkD,GAAe,CAClBM,aAAc,CACZC,SAAU,OACVnR,QAAS5D,EAAE,qCAmEVgV,CAAkBT,IAqNnBU,OAzGO,SACb9P,EACAS,EACA0N,EACA4B,G,MAEIC,EAAc7B,GACH,QAAX,EAAAH,YAAW,eAAEvN,SAAUA,GAAgC,iBAAvBsP,EAAUE,WAG5CD,EAAc,QAEhB3H,EAlD+B,SAAC5H,GAChC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,iBACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,aACT,QACE,MAAO,IAmCGyP,CAAyBzP,GAAM,IAAIuP,IA8F3CG,OAAQnC,KACRoC,4BAA4B,GAE9BvG,UAAWA,EACXwG,WAjFa,SAAChP,EAAYiP,EAAkB9B,G,QACxCrC,EAAiBqC,EAAG,aACtB+B,EAAgC,QAAb,EAAAlP,MAAAA,OAAK,EAALA,EAAOmL,cAAM,eAAE1K,KAClC0O,EAAuB,QAAb,EAAAnP,MAAAA,OAAK,EAALA,EAAOmL,cAAM,eAAEgE,QAGN,WAArBD,GAA4D,OAA3BC,MAAAA,OAAO,EAAPA,EAAS9O,iBAC5CoG,EAAeqE,GACfrC,EAAaqC,MAAAA,OAAY,EAAZA,EAAc7Q,QA0EzBmV,cAAc,mBACdlI,aAAcA,IAEhB,mBAzEoD,WACtD,OAAIV,EAAmBzH,OAAS,GAAK6H,EAEjC,kBAAC,KAAa,CACZyI,gBAAiB,CACfhR,QAAS,eAEXiR,WAAY,CACVvV,MAAOP,EAAE,qBAEX+V,oBAAqB,CACnBC,KAAMhW,EAAE,wCAKT,uCAyDkB,MACvB,mBAvDwC,WAC1C,OAAIiK,EAAQ,EAER,kBAAC,KAAa,CACZY,SAAS,8CACTC,UAAWb,EACXpF,QAAS,EAAAoR,kBAAA,OACT/L,KAAMA,EACNC,QAASA,EACTa,OAAQ,CACNC,gBAAiBjL,EAAE,mBACnBkL,cAAelL,EAAE,mBACjBmL,YAAanL,EAAE,iBACfoL,eAAgBpL,EAAE,oBAClBqL,WAAYrL,EAAE,gBACdsL,WAAYtL,EAAE,gBACduL,cAAevL,EAAE,kBACjBwL,SAAUxL,EAAE,gBAKb,uCAiCM,Q,gCCxkBXkW,G,SAAmE,SAAC,G,IACxEC,EAAiB,oBACjBrW,EAAgB,mBAEhB,WAAa,KACL,IAAAsW,IAA0B,UAAkB,IAAE,sBAEhDtI,GAAO,IAAAC,WAEQC,KADL,IAAAC,cAAe,IAAE,KACQ,IAAE,YACnClP,GAAc,EAAAF,EAAA,MAAmB,UACnCuP,GAAW,IAAAiI,eACXnI,EAAe,IAAIC,gBAAgBC,EAASC,QAC5C,GAA6B,WAAmB,GAA9C,IAAAnE,KAAAA,OAAI,IAAG,IAAC,EAAE,IAAAC,QAAAA,OAAO,IAAG,KAAE,EACxBmM,EAAapI,EAAaqI,IAAI,gBAC5BvW,GAAM,IAAAC,kBAAgB,EACtBuO,IAAa,IAAAC,aAAc,IAAE,SAC7BG,GAAc,IAAAD,YAAuC,UACvD6H,EAAeC,OAAOD,aACtBE,EACJ,eAAiB,EAAAC,mBAGb,GAA8C,IAAA7X,YAA7CkO,EAAkB,KAAE4J,EAAqB,KAG1C,GACJ,IAAA9X,UAA2B,IADtB+X,EAAkB,KAAEC,EAAqB,KAE1C,GAAwC,IAAAhY,WAAS,GAAhDsO,EAAe,KAAE2J,EAAkB,KACpC,GAAwB,IAAAjY,UAAiB,mBAAxCyO,EAAO,KAAEC,EAAU,KACpB,GACJ,IAAA1O,YADKgQ,EAAgB,KAAEC,GAAmB,KAGtC,IAAoC,IAAAjQ,UAAiB,GAApDwO,GAAa,MAAE0J,GAAgB,MAChC,IAA0D,IAAAlY,eAE9DsT,GAFK6E,GAAwB,MAAEC,GAA2B,MAGtD,IAAsC,IAAApY,UAAS,QAA9CiE,GAAc,MAAE8E,GAAiB,MAClC,IAAoC,IAAA/I,UAAuB,IAA1DuJ,GAAa,MAAEC,GAAgB,MAChC,IAA8C,IAAAxJ,WAAkB,GAA/DqY,GAAkB,MAAEC,GAAqB,MAC1C,IAA4C,IAAAtY,WAAkB,GAA7DuY,GAAiB,MAAEC,GAAoB,MACxC,IAA0C,IAAAxY,WAAkB,GAA3DyY,GAAgB,MAAE5J,GAAmB,MACtC,IAAkC,IAAA7O,eACtCsT,GADK1E,GAAY,MAAE8J,GAAe,MAG9B,IAA4C,IAAA1Y,YAA3C2Y,GAAiB,MAAEC,GAAoB,MAGxC,GAAgC5I,GAAoB,GAAlD9N,GAAS,aAAEvB,GAAc,mBAejC,IAAAP,YAAU,WACR,IAAI,WACEsX,EAAc,CAChB,IAAMmB,EAAQC,SAASpB,EAAaqB,QAAQ,iBAAmB,KACzDC,EAAWH,EAAQ,EACrBA,EAAQ,IACVnB,EAAauB,QAAQ,eAAgB,GAAGD,GACxCR,IAAqB,OAI1B,IAEH,IAAMU,GAAoB,WACxBV,IAAsBD,MAGxB,IAAAnY,YAAU,YACU,gD,8EAEd,EAAAkX,GAA0B,GAAMA,KAAhC,M,OAAyB,EAAC,S,wBADZ,GAGd6B,K,aAIH,CAAC7B,IAEJ,IAAM6B,GAAoB,WACxBrJ,EAAU,EAAAoD,UAAA,kBAA6B,CACrCnE,SAAU,WACRA,KACAqE,SAKA9H,GAA4B,kE,8EAE5B+L,EAGK,GAAMA,GAAkB,IAH7B,M,OAGF+B,EAAO,S,wBAGLA,IACFC,KACAF,M,YAQEhL,GAAiB,SAAC8E,GACtBhD,GAAoB,CAClBtP,eAAgBsS,EAChB/Q,UAAW,gBAITkM,GAAmB,SAAC6E,GACxBhD,GAAoB,CAClBtP,eAAgBsS,EAChB/Q,UAAW,mBAkCToX,GAAoB,SAACC,G,UACrBvF,EACAwF,GACA,QAAkBD,KACpBvF,EAAuB,QAAd,EAAAuF,EAAMtF,gBAAQ,eAAEC,KAAKF,OAC9BwF,EAAgC,QAApB,EAAc,QAAd,EAAAD,EAAMtF,gBAAQ,eAAEC,YAAI,eAAEuF,MAGhCD,IAAc,uBAChBlB,IAAsB,GAEtB5I,GACEA,EAAS,CACP3J,QAAS,EAAAyL,aAAA,OACT/P,MAAOP,EAAE,+BACT6Q,YAAaiC,KAMf0F,GAAc,kE,2EAEE,OApDdC,EAAoB,GAC1BpQ,GAAcmC,SAAQ,SAAC9B,GACb,IAAAS,EAA2BT,EAAM,UAAtBC,EAAgBD,EAAM,YACzC,GAAIC,GAAeA,EAAYpD,OAAS,EAAG,CACzC,IAAImT,EAAc,IAClBA,GAAe/P,EACZ3E,KAAI,SAACC,GACJ,IAAMzD,EAAQyD,EAAIzD,MAAMkG,OACxB,OAAIlG,IAAU,kBACF2I,EAAS,MAAM,eAAwB,OAAOA,EAAS,MAAM,kBAErE3I,IAAU,iBACF2I,EAAS,MAAM,iBAA0B,OAAOA,EAAS,MAAM,aAE1D,KAAV3I,EACA2I,EAAS,MACM,IAAhBlF,EAAIqB,QAAmB,KAAK9E,EAAU,SAASA,EAAK,KAEtD,MAELmY,KAAK,QACRD,GAAe,IAEfD,EAAQnP,KAAKoP,OA4BXA,EAzBCD,EAAQE,KAAK,SA0BA,GAAM7K,MAAAA,OAAI,EAAJA,EAAMyE,IAAIC,Y,YAA9BC,EAAc,YAED1T,EAAf,Y,iBASA,O,sBAAA,GAPoB,IAAI,EAAA4T,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXzE,SAAQ,KAKT4K,UACC1O,MAAAA,OAAI,EAAJA,EAAM3I,WACN4I,MAAAA,OAAO,EAAPA,EAAS5I,WACTgM,EACAmL,GAED/I,MAAK,SAACkJ,GACL,IAAMC,EAAiBD,EAAI7F,KACrB+F,GAAaD,MAAAA,OAAc,EAAdA,EAAgB1J,QAAS,GAC5C0H,EAAsBgC,GACtBlC,EAAsBmC,QAGU3G,KAA9ByE,MAAAA,OAAkB,EAAlBA,EAAoB5M,QACpB4M,EAAmB5M,MAAQqD,IAE3B0J,GAAiBH,EAAmB5M,OAIpCsN,IACAlP,GAAc9C,OAAS,GACD,IAAtBwT,MAAAA,OAAU,EAAVA,EAAYxT,UAEZ2R,IAA4B,GAC5BvJ,IAAoB,IAGtBoJ,GAAmB,O,cA7BvB,S,+BAgCAqB,GAAkB,G,uBAhGD,IACfK,UA6HR,IAAAvZ,YAAU,aACH8N,IAAsBA,MAAAA,OAAkB,EAAlBA,EAAoBzH,SAAU,KA1BlC,gD,yEACH,SAAMuI,MAAAA,OAAI,EAAJA,EAAMyE,IAAIC,Y,YAA9BC,EAAc,YACD1T,EAAf,Y,iBASA,O,sBAAA,GAPoB,IAAI,EAAA4T,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXzE,SAAQ,KAIM4K,UAAU,IAAK,KAAKjJ,MAAK,SAACkJ,G,QACpCG,EAAmC,QAAhB,EAAS,QAAT,EAAAH,MAAAA,OAAG,EAAHA,EAAK7F,YAAI,eAAE5D,aAAK,eAAE7J,OAEzC2R,IADG8B,GAAoBA,EAAmB,O,cAF9C,S,+BASAZ,GAAkB,G,gCASrB,CAACpL,IAEJ,IAAMmL,GAAyB,kE,2EACT,SAAMrK,MAAAA,OAAI,EAAJA,EAAMyE,IAAIC,Y,UAA9BC,EAAc,SACd/J,EAAS,WAAWgF,IACtB+E,IAAe1T,EAAf,Y,iBAQA,O,sBAAA,GANoB,IAAI,EAAA4T,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXzE,SAAQ,KAGM4K,UAAU,GAAI,GAAI,GAAIlQ,GAAQiH,MAAK,SAACkJ,GACpD,IAAMC,EAAiBD,EAAI7F,KAC3B0E,GAAqBoB,EAAe1J,W,cAFtC,S,+BAKAgJ,GAAkB,G,gCAKxB,IAAAlZ,YAAU,WACRwO,IAAgByK,OACf,CAACzK,KAEJxL,GAAW,WAAM,OAAAiW,OAA0B,OAE3C,IAAAjZ,YAAU,WACR6X,GAAmB,GACnByB,OACC,CAAC1K,EAAM5D,EAAMC,EAAS9B,GAAekF,KAExC,IAAArO,YAAU,WACRsZ,OACC,KAEH,IAAAtZ,YAAU,YA1P0B,WAClC,GAAI8N,IAAsBA,MAAAA,OAAkB,EAAlBA,EAAoBzH,QAAS,EAAG,CACxD,IAAM0T,EAAoBjM,MAAAA,OAAkB,EAAlBA,EAAoBtE,QAC5C,SAACuJ,GAAK,MAAK,OAAAA,MAAAA,OAAK,EAALA,EAAOrN,OAAuC,QAAhC,EAAAkK,MAAAA,OAAgB,EAAhBA,EAAkBrP,sBAAc,eAAEmF,OAC3D,GACIsU,GAAQ,gCACTpK,GAAgB,CACnBrP,eAAgBwZ,IAElBA,GAAqBlK,GAAoBmK,IAkP3CC,KACC,CAACnM,KAEJ,IAAA9N,YAAU,W,MACU,QAAlB,EAAA4O,EAAKsL,qBAAa,SAAEzJ,MAAK,SAAC0J,GAAa,OAAA7B,GAAgB6B,QACtD,CAACvL,IAEJ5L,GAAW,WAAM,OAAAsW,OAAe,MAEhC,IAAMtG,GAAgB,WAEhBlF,GAAqD,KAA/BA,MAAAA,OAAkB,EAAlBA,EAAoBzH,QAC5CwR,GAAmB,GAEnBA,GAAmB,GAErByB,MAII3K,GAAW,WACfmJ,GAAiBH,EAAmB5M,MAAQ,IAIxCoD,GAAW,WACf0J,GAAmB,GACnBC,GAAiBH,EAAmB5M,MAAQ,IAG9C,GAAIkN,GACF,OACE,kBAAC,EAAAmC,YAAW,CACVzU,QAAS,EAAA0U,oBAAA,QACTC,QAAS,CAAE9N,QAAS,aACpB+N,UAAQ,GAER,kBAAC,KAAa,CACZ3D,WAAY,CACVvV,MAAOP,EAAE,6BACTU,aAAc,MAEhBgZ,oBAAqB,CACnBC,KAAM,MAER5D,oBAAqB,CACnBC,KAAMhW,EACJ,0EAmGZ,OACE,oCACE,kBAACV,EAAA,EAAc,CACbI,WAAgC,MAApBoP,EACZvP,WAAYyB,GACZrB,eAA8ByS,IAAnB3S,GACXA,eAAgBA,GAChBD,QApVgB,WACpBuP,GAAoB,OAmVM,mBACL,uBACjBjP,iBAAkBA,EAClBC,mCAAoCkX,IAEpC,0BAAMxR,UAAU,mBACd,kBAAC,EAAA6T,YAAW,CAACzU,QAAS,EAAA0U,oBAAA,OACpB,kBAAC,EAAAK,MAAK,KACJ,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAU,MAAMha,EAAE,6BA3GXoS,IAAvBpF,EAEA,kBAAC,EAAAsM,YAAW,CACVzU,QAAS,EAAA0U,oBAAA,MACTC,QAAS,CAAE9N,QAAS,cAEpB,kBAAC,KAAU,OAGNuL,GAEP,kBAAC,EAAAqC,YAAW,CAACE,QAAS,CAAE9N,QAAS,aAAe+N,UAAQ,GACtD,kBAAC,KAAa,CACZ5D,gBAAiB,CACfhR,QAAS,cAEXkR,oBAAqB,CACnBC,KACE,oCACE,kBAAC,EAAAiE,MAAK,CACJC,QAAQ,yCACRC,WAAY,CACV,kBAAC,EAAA7S,OAAM,CACLzC,QAAS,EAAA0C,cAAA,KACT6S,SAAO,EACPC,UAAQ,EACRtU,IAAI,kBACJyB,QAAS,WACP,OAAAkP,EAAU4D,qBACV5D,EAAU4D,oBAAoB,2BAQ5CxE,WAAY,CAAEvV,MAAOP,EAAE,4BAEvB,kBAAC,EAAAsH,OAAM,eACO,sCACZzC,QAAS,EAAA0C,cAAA,QACTC,QAAS,WAAM,OAAA4C,OAEdpK,EAAE,2B,KAMFgN,QAAmDoF,IAA7B6E,GAE7B,kBAAC,EAAAqC,YAAW,CACV7T,UAAU,wDACVZ,QAAS,EAAA0U,oBAAA,QACTC,QAAS,CAAE9N,QAAS,cAEpB,kBAAC,EAAA6O,KAAI,KACH,kBAACxN,EAAgB,CACfC,mBAAoBA,EACpBsJ,WAAYA,EACZpJ,iBAAkBA,GAClBD,eAAgBA,GAChBE,QAAS+E,GACT9E,gBAAiBA,EACjBO,oBAAqBA,GACrBN,SAAUA,GACVnD,KAAMA,EACNC,QAASA,EACTF,MAAO4M,MAAAA,OAAkB,EAAlBA,EAAoB5M,MAC3BqD,cAAeA,GACfjF,cAAeA,GACfC,iBAAkBA,GAClBT,kBAAmBA,GACnB9E,eAAgBA,GAChBwK,QAASA,EACTC,WAAYA,EACZC,aAAmC,OAArBqB,EACdpB,aAAcA,GACdE,kBAAmB6J,GACnB5J,SAAUA,GACVzD,0BAA2BA,OAM9B,uCA4BL,kBAAC,EAAAoQ,MAAK,CACJ3V,QAAS,EAAA4V,aAAA,MACTla,MAAM,oBACN2E,OAAQmS,GACR7X,QAAS,WAAM,OAAAwY,MACf0C,QAAS,CACP,kBAAC,EAAApT,OAAM,CACLvB,IAAI,UACJlB,QAAQ,UACR2C,QAAS,WAAM,OAAAwQ,OAAmB,QAIrC","sources":["webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerContent.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/hooks.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/CloudProviderFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/NameFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/OwnerFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/RegionFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/FilterSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/StatusFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/Filters/StreamsFilterGroup.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawerProps, MASDrawer } from '@app/common';\nimport { DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\nimport {\n  InstanceDrawerContent,\n  InstanceDrawerContentProps,\n} from '@app/modules/InstanceDrawer/InstanceDrawerContent';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'\n> &\n  DetailsTabProps &\n  InstanceDrawerContentProps;\n\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  initialTab,\n  onClose,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  tokenEndPointUrl,\n  notRequiredDrawerContentBackground,\n}) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={\n        <InstanceDrawerContent\n          initialTab={initialTab}\n          instanceDetail={instanceDetail}\n          tokenEndPointUrl={tokenEndPointUrl}\n        />\n      }\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: instanceDetail?.name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import { DetailsTabProps } from '@app/modules/InstanceDrawer/DetailsTab';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/utils';\nimport { MASLoading } from '@app/common';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { ConnectionTabProps } from '@app/modules/InstanceDrawer/ConnectionTab';\n\nexport const ResourcesTab = React.lazy(() => import('./ConnectionTab'));\nexport const DetailsTab = React.lazy(() => import('./DetailsTab'));\n\nexport enum InstanceDrawerTabs {\n  DETAILS = 'details',\n  CONNECTION = 'connection',\n}\n\nexport type InstanceDrawerContentProps = DetailsTabProps &\n  Pick<ConnectionTabProps, 'tokenEndPointUrl'> & {\n    initialTab?: InstanceDrawerTabs;\n  };\n\nexport const InstanceDrawerContent: React.FunctionComponent<InstanceDrawerContentProps> =\n  ({ initialTab, instanceDetail, tokenEndPointUrl }) => {\n    const { t } = useTranslation();\n\n    const [activeTab, setActiveTab] = useState<InstanceDrawerTabs>(\n      initialTab || InstanceDrawerTabs.DETAILS\n    );\n\n    const selectTab = (tab: string | number) => {\n      if (tab === InstanceDrawerTabs.CONNECTION) {\n        setActiveTab(InstanceDrawerTabs.CONNECTION);\n      } else {\n        setActiveTab(InstanceDrawerTabs.DETAILS);\n      }\n    };\n\n    const getExternalServer = () => {\n      const { bootstrap_server_host } = instanceDetail || {};\n      return bootstrap_server_host?.endsWith(':443')\n        ? bootstrap_server_host\n        : `${bootstrap_server_host}:443`;\n    };\n\n    const isKafkaPending =\n      instanceDetail?.status === InstanceStatus.ACCEPTED ||\n      instanceDetail?.status === InstanceStatus.PREPARING;\n\n    return (\n      <React.Suspense fallback={<MASLoading />}>\n        <Tabs\n          activeKey={activeTab.toString()}\n          onSelect={(_, tab) => selectTab(tab)}\n        >\n          <Tab\n            eventKey={InstanceDrawerTabs.DETAILS.toString()}\n            title={<TabTitleText>{t('details')}</TabTitleText>}\n          >\n            <DetailsTab instanceDetail={instanceDetail} />\n          </Tab>\n          <Tab\n            eventKey={InstanceDrawerTabs.CONNECTION.toString()}\n            title={<TabTitleText>{t('connection')}</TabTitleText>}\n            data-testid='drawerStreams-tabConnect'\n          >\n            <ResourcesTab\n              externalServer={getExternalServer()}\n              isKafkaPending={isKafkaPending}\n              tokenEndPointUrl={tokenEndPointUrl}\n            />\n          </Tab>\n        </Tabs>\n      </React.Suspense>\n    );\n  };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import { useTranslation } from 'react-i18next';\nimport React from 'react';\n\nexport const useTooltipContent = (\n  isMaxFilter: boolean,\n  fieldName?: string\n): React.ReactElement => {\n  const { t } = useTranslation();\n  if (isMaxFilter) {\n    return <div>{t('max_filter_message')}</div>;\n  }\n  return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n};\n","import React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { cloudProviderOptions } from '@app/utils';\nimport { FilterProps } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/types';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/hooks';\n\nexport type CloudProviderFilterProps = FilterProps;\n\nexport const CloudProviderFilter: React.FunctionComponent<CloudProviderFilterProps> =\n  ({\n    getSelectionForFilter,\n    filterSelected,\n    isMaxFilter,\n    updateFilter,\n    removeFilterValue,\n    isDisabledSelectOption,\n    onDeleteChipGroup,\n    onDeleteChip,\n  }) => {\n    const { t } = useTranslation();\n    const selectRef = useRef<Select>(null);\n    const tooltipContent = useTooltipContent(isMaxFilter);\n\n    const options = cloudProviderOptions.map((cloudProvider) => {\n      return {\n        label: t(cloudProvider.value),\n        value: cloudProvider.value,\n        disabled: false,\n      };\n    });\n\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (isMaxFilter) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter}\n            content={tooltipContent}\n            reference={selectRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    const CloudProviderSelect: React.FunctionComponent = () => {\n      const [expanded, setExpanded] = useState(false);\n\n      const onToggle = () => {\n        setExpanded((prevState) => !prevState);\n      };\n\n      const onSelect = (\n        _event:\n          | React.MouseEvent<Element, MouseEvent>\n          | React.ChangeEvent<Element>,\n        selection: string | SelectOptionObject,\n        isPlaceholder?: boolean | undefined\n      ) => {\n        if (isPlaceholder) clear();\n        updateFilter(\n          'cloud_provider',\n          { value: selection.toString(), isExact: true },\n          true\n        );\n        options.length < 2 && setExpanded(false);\n      };\n\n      const clear = () => {\n        removeFilterValue('cloud_provider');\n        setExpanded(false);\n      };\n\n      if (filterSelected === 'cloud_provider') {\n        return (\n          <Select\n            id='cloud-provider-select'\n            variant={SelectVariant.checkbox}\n            aria-label='Select cloud provider'\n            onToggle={onToggle}\n            selections={getSelectionForFilter('cloud_provider')}\n            isOpen={expanded}\n            onSelect={onSelect}\n            placeholderText={t('filter_by_cloud_provider')}\n            className='select-custom-width'\n            ref={selectRef}\n          >\n            {options.map((option, index) => {\n              const isDisabled = () => {\n                if (option.disabled) {\n                  return true;\n                }\n                return (\n                  isMaxFilter &&\n                  isDisabledSelectOption('cloud_provider', option.value)\n                );\n              };\n\n              return (\n                <SelectOption\n                  isDisabled={isDisabled()}\n                  key={index}\n                  value={option.value}\n                >\n                  <FilterTooltip />\n                  {option.label}\n                </SelectOption>\n              );\n            })}\n          </Select>\n        );\n      }\n      return <></>;\n    };\n\n    return (\n      <ToolbarFilter\n        chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n        deleteChip={(_category, chip) =>\n          onDeleteChip('cloud_provider', chip, options)\n        }\n        deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n        categoryName={t('cloud_provider')}\n        showToolbarItem={filterSelected === 'cloud_provider'}\n      >\n        <CloudProviderSelect />\n      </ToolbarFilter>\n    );\n  };\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type NameFilterProps = FilterProps;\n\nexport const NameFilter: React.FunctionComponent<NameFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const [valid, setValid] = useState<boolean>(true);\n  const [value, setValue] = useState<string | undefined>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'name');\n\n  const change = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('name', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const NameInput: React.FunctionComponent = () => {\n    const v = !valid || isMaxFilter;\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (v) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter || !valid}\n            content={tooltipContent}\n            reference={inputRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    if (filterSelected?.toLowerCase() === 'name') {\n      return (\n        <InputGroup>\n          <TextInput\n            name='name'\n            id='filterText'\n            type='search'\n            aria-label='Search filter input'\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            placeholder={t('filter_by_name_lower')}\n            onChange={change}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={!valid || isMaxFilter}\n            onClick={() => onFilter()}\n            aria-label='Search instances'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('name')}\n      deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('name')}\n      categoryName={t('name')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n    >\n      <NameInput />\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type OwnerFilterProps = FilterProps;\nexport const OwnerFilter: React.FunctionComponent<OwnerFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChipGroup,\n  onDeleteChip,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'owner');\n\n  const [value, setValue] = useState<string | undefined>();\n  const [valid, setValid] = useState<boolean>(true);\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('owner', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onChange = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const OwnerInput: React.FunctionComponent = () => {\n    if (filterSelected?.toLowerCase() === 'owner') {\n      const v = !valid || isMaxFilter;\n\n      const FilterTooltip: React.FunctionComponent = () => {\n        if (v) {\n          return (\n            <Tooltip\n              isVisible={isMaxFilter || !valid}\n              content={tooltipContent}\n              reference={inputRef}\n            />\n          );\n        }\n        return <></>;\n      };\n\n      return (\n        <InputGroup>\n          <TextInput\n            name='owner'\n            id='filterOwners'\n            type='search'\n            aria-label='Search filter input'\n            placeholder={t('filter_by_owner')}\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            isDisabled={v}\n            variant={ButtonVariant.control}\n            onClick={onFilter}\n            aria-label='Search owners'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('owner')}\n      deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('owner')}\n      categoryName={t('owner')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n    >\n      <OwnerInput />\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/hooks';\nimport { cloudRegionOptions } from '@app/utils';\n\nexport type RegionFilterProps = FilterProps;\n\nexport const RegionFilter: React.FunctionComponent<RegionFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  removeFilterValue,\n  isDisabledSelectOption,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n\n  const options = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const RegionSelect: React.FunctionComponent = () => {\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggle = () => {\n      setExpanded(!expanded);\n    };\n\n    const onSelect = (\n      _event:\n        | React.MouseEvent<Element, MouseEvent>\n        | React.ChangeEvent<Element>,\n      selection: string | SelectOptionObject,\n      isPlaceholder?: boolean | undefined\n    ) => {\n      if (isPlaceholder) clear();\n      updateFilter(\n        'region',\n        { value: selection.toString(), isExact: true },\n        true\n      );\n      options.length < 2 && setExpanded(false);\n    };\n\n    const clear = () => {\n      removeFilterValue('region');\n      setExpanded(false);\n    };\n\n    if (filterSelected === 'region') {\n      return (\n        <Select\n          id='region-select'\n          variant={SelectVariant.checkbox}\n          aria-label='Select region'\n          onToggle={onToggle}\n          selections={getSelectionForFilter('region')}\n          isOpen={expanded}\n          onSelect={onSelect}\n          placeholderText={t('filter_by_region')}\n          className='select-custom-width'\n          ref={selectRef}\n        >\n          {options.map((option, index) => {\n            const isDisabled = () => {\n              if (option.disabled) {\n                return true;\n              }\n              return (\n                isMaxFilter && isDisabledSelectOption('region', option.value)\n              );\n            };\n            return (\n              <SelectOption\n                isDisabled={isDisabled()}\n                key={index}\n                value={option.value}\n              >\n                <FilterTooltip />\n                {option.label}\n              </SelectOption>\n            );\n          })}\n        </Select>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('region')?.map((val) => t(val))}\n      deleteChip={(_category, chip) => onDeleteChip('region', chip, options)}\n      deleteChipGroup={() => onDeleteChipGroup('region')}\n      categoryName={t('region')}\n      showToolbarItem={filterSelected === 'region'}\n    >\n      <RegionSelect />\n    </ToolbarFilter>\n  );\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\nexport type FilterSelectProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const FilterSelect: React.FunctionComponent<FilterSelectProps> = ({\n  setFilterSelected,\n  filterSelected,\n}) => {\n  const { t } = useTranslation();\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const onToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent | React.ChangeEvent,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const options = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label='Select filter'\n        onToggle={onToggle}\n        selections={filterSelected}\n        isOpen={isFilterExpanded}\n        onSelect={onSelect}\n      >\n        {options.map((option, index) => (\n          <SelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n          >\n            {option.label}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/hooks';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { InstanceStatus, statusOptions } from '@app/utils';\n\nexport type StatusFilter = FilterProps;\n\nexport const StatusFilter: React.FunctionComponent<StatusFilter> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation();\n  const tooltipContent = useTooltipContent(isMaxFilter);\n\n  const selectRef = useRef<Select>(null);\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const StatusSelect: React.FunctionComponent = () => {\n    const [expanded, setExpanded] = useState(false);\n    const onToggle = () => {\n      setExpanded(!expanded);\n    };\n\n    const onSelect = (\n      _event:\n        | React.MouseEvent<Element, MouseEvent>\n        | React.ChangeEvent<Element>,\n      selection: string | SelectOptionObject,\n      isPlaceholder?: boolean | undefined\n    ) => {\n      if (isPlaceholder) clear();\n      updateFilter(\n        'status',\n        { value: selection.toString(), isExact: true },\n        true\n      );\n    };\n\n    const clear = () => {\n      removeFilterValue('status');\n      setExpanded(false);\n    };\n    if (filterSelected === 'status') {\n      return (\n        <Select\n          id='status-select'\n          variant={SelectVariant.checkbox}\n          aria-label='Select status'\n          onToggle={onToggle}\n          selections={getSelectionForFilter('status')}\n          isOpen={expanded}\n          onSelect={onSelect}\n          placeholderText={t('filter_by_status')}\n          className='select-custom-width'\n          ref={selectRef}\n        >\n          {statusFilterOptions.map((option, index) => {\n            const isDisabled = () => {\n              if (option.disabled) {\n                return true;\n              }\n              return (\n                isMaxFilter && isDisabledSelectOption('status', option.value)\n              );\n            };\n\n            return (\n              <SelectOption\n                isDisabled={isDisabled()}\n                key={index}\n                value={option.value}\n              >\n                <FilterTooltip />\n                {option.label}\n              </SelectOption>\n            );\n          })}\n        </Select>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('status')?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip('status', chip, statusFilterOptions)\n      }\n      deleteChipGroup={() => onDeleteChipGroup('status')}\n      categoryName={t('status')}\n      showToolbarItem={filterSelected === 'status'}\n    >\n      <StatusSelect />\n    </ToolbarFilter>\n  );\n};\n","import {\n  FilterType,\n  FilterValue,\n} from '@app/modules/OpenshiftStreams/components';\nimport React from 'react';\nimport { ToolbarChip, ToolbarGroup } from '@patternfly/react-core';\nimport { CloudProviderFilter } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/CloudProviderFilter';\nimport { NameFilter } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/NameFilter';\nimport { OwnerFilter } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/OwnerFilter';\nimport { RegionFilter } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/RegionFilter';\nimport { FilterSelect } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/FilterSelect';\nimport { StatusFilter } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/StatusFilter';\nimport { KeyValueOptions } from '@app/utils';\n\nexport type StreamsFilterGroupProps = {\n  isMaxFilter: boolean;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const StreamsFilterGroup: React.FunctionComponent<StreamsFilterGroupProps> =\n  ({\n    isMaxFilter,\n    filteredValue,\n    setFilteredValue,\n    filterSelected,\n    setFilterSelected,\n  }) => {\n    const isDisabledSelectOption = (key: string, optionValue: string) => {\n      let newFilterValue: FilterValue | undefined;\n      const newFilteredValue = filteredValue?.filter(\n        ({ filterKey }) => filterKey === key\n      );\n      if (newFilteredValue && newFilteredValue?.length > 0) {\n        const { filterValue } = newFilteredValue[0];\n        newFilterValue = filterValue?.find(\n          ({ value }) => value === optionValue\n        );\n      }\n      if (!newFilterValue) {\n        return true;\n      }\n      return false;\n    };\n\n    const updateFilter = (\n      key: string,\n      filter: FilterValue,\n      removeIfPresent: boolean\n    ) => {\n      const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n      const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n      if (filterIndex > -1) {\n        // if filter is present with the current key\n        const filterValue = newFilterValue[filterIndex];\n        if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n          // if some filters are already there in applied filter for same key\n          const filterValueIndex = filterValue.filterValue.findIndex(\n            (f) => f.value === filter.value\n          ); // index of current filter value in applied filter\n          if (filterValueIndex > -1) {\n            // filter value is already present\n            if (removeIfPresent) {\n              filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n            } else {\n              return; // skip the duplicate values\n            }\n          } else {\n            // add the filter value to the current applied filter\n            newFilterValue[filterIndex].filterValue.push(filter);\n          }\n        } else {\n          // add the filter value to current applied filter\n          newFilterValue[filterIndex].filterValue = [filter];\n        }\n      } else {\n        // add filter with key and value to the applied filter\n        newFilterValue.push({ filterKey: key, filterValue: [filter] });\n      }\n      setFilteredValue(newFilterValue);\n    };\n\n    const getSelectionForFilter = (key: string) => {\n      const selectedFilters = filteredValue.filter(\n        (filter) => filter.filterKey === key\n      );\n      if (selectedFilters.length > 0) {\n        return selectedFilters[0].filterValue.map((val) => val.value);\n      }\n      return;\n    };\n\n    const onDeleteChip = (\n      category: string,\n      chip: string | ToolbarChip,\n      filterOptions?: KeyValueOptions[]\n    ) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      const prevFilterValue: FilterValue[] = Object.assign(\n        [],\n        newFilteredValue[filterIndex]?.filterValue\n      );\n      let filterChip: string | undefined = chip.toString();\n      /**\n       * Filter chip from filter cloudProviderOptions\n       */\n      if (filterOptions && filterOptions?.length > 0) {\n        filterChip = filterOptions?.find(\n          (option) => option.label === chip.toString()\n        )?.value;\n      }\n      /**\n       * Delete selected chip from filter cloudProviderOptions\n       */\n      const chipIndex = prevFilterValue.findIndex(\n        (val) => val.value === filterChip\n      );\n      if (chipIndex >= 0) {\n        newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const onDeleteChipGroup = (category: string) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      if (filterIndex >= 0) {\n        newFilteredValue.splice(filterIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const removeFilteredValue = (value: string) => {\n      const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = copyFilteredValue.findIndex(\n        (filter) => filter.filterKey === value\n      );\n      if (filterIndex >= 0) {\n        copyFilteredValue.splice(filterIndex, 1);\n      }\n      setFilteredValue(copyFilteredValue);\n    };\n\n    return (\n      <>\n        <ToolbarGroup variant='filter-group'>\n          <FilterSelect\n            setFilterSelected={setFilterSelected}\n            filterSelected={filterSelected}\n          />\n          <NameFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <CloudProviderFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <RegionFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <OwnerFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <StatusFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n        </ToolbarGroup>\n      </>\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { FilterType } from './StreamsTableView';\nimport { InstanceStatus, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { StreamsFilterGroup } from '@app/modules/OpenshiftStreams/components/StreamsTableView/Filters/StreamsFilterGroup';\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: FilterType) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.PROVISIONING\n            )\n          : [];\n      const deprovisionStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.DEPROVISION\n            )\n          : [];\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant='primary'\n          onClick={handleCreateInstanceModal}\n          data-testid={'tableStreams-buttonCreateKafka'}\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='pagination-cloudProviderOptions-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={\n        <StreamsFilterGroup\n          isMaxFilter={isMaxFilter}\n          filteredValue={filteredValue}\n          setFilteredValue={setFilteredValue}\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n      }\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: React.FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation();\n\n  const Status: React.FunctionComponent = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const StatusIcon: React.FunctionComponent = () => {\n    const statusIcon = getStatusIcon();\n    if (statusIcon) {\n      return <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>;\n    }\n    return <></>;\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className='mk--instances__table--icon--completed' />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className='mk--instances__table--icon--failed' />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size='md'\n            aria-label={instanceName}\n            aria-valuetext='Creation in progress'\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <StatusIcon />\n      <FlexItem>\n        <Status />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory } from 'react-router-dom';\nimport {\n  IAction,\n  IExtraColumnData,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n  isServiceApiError,\n} from '@app/utils';\nimport {\n  MASEmptyState,\n  MASEmptyStateVariant,\n  MASPagination,\n  MASTable,\n} from '@app/common';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n} from '@rhoas/kafka-management-sdk';\nimport './StatusColumn.css';\nimport { StreamsToolbar, StreamsToolbarProps } from './StreamsToolbar';\nimport { StatusColumn } from './StatusColumn';\nimport {\n  AlertVariant,\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\nimport { useFederated } from '@app/contexts';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = StreamsToolbarProps & {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: (arg0?: boolean) => void;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n  loggedInUser: string | undefined;\n  setWaitingForDelete: (arg0: boolean) => void;\n  currentUserkafkas: KafkaRequest[] | undefined;\n};\n\nconst StreamsTableView: React.FunctionComponent<StreamsTableProps> = ({\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n  loggedInUser,\n  setWaitingForDelete,\n  currentUserkafkas,\n  onCreate,\n  handleCreateInstanceModal,\n}) => {\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { t } = useTranslation();\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n  const { addAlert } = useAlert() || {};\n  const { setKafkaInstance } = useFederated() || {};\n\n  const { showModal, hideModal } = useModal<\n    ModalType.KasDeleteInstance | ModalType.KasTransferOwnership\n  >();\n  //states\n  const [selectedInstance, setSelectedInstance] = useState<\n    KafkaRequest | undefined\n  >({});\n  const [activeRow, setActiveRow] = useState<string>();\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  useEffect(() => {\n    auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    if (currentUserkafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserkafkas.filter(\n        (k) =>\n          k.status === InstanceStatus.DEPROVISION ||\n          k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [\n        ...deletedKafkas,\n        ...notPresentKafkas,\n      ];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserkafkas?.findIndex(\n          (item) => item.name === k\n        );\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t('kafka_successfully_deleted', { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign(\n        [],\n        kafkaInstanceItems\n      ).filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.READY ||\n          item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_successfully_created'),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_success_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-success',\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_not_created'),\n                variant: AlertVariant.danger,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_failed_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.PROVISIONING ||\n          item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems, currentUserkafkas]);\n\n  const onSelectKebabDropdownOption = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'change-owner') {\n      onChangeOwner(originalData);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    const previousNode =\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const getActionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('change_owner'),\n        id: 'change-owner',\n        ['data-testid']: 'tableStreams-actionChangeOwner',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'change-owner'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_change_owner'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: tableColumns.length,\n      });\n    }\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link to={`kafkas/${row?.id}`}>{name}</Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t('ago'))}\n                <br />\n                {instance_type === InstanceType?.eval && '48 hours duration'}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData) => {\n    return getActionResolver(rowData);\n  };\n\n  const onChangeOwner = async (instance: KafkaRequest) => {\n    setKafkaInstance && setKafkaInstance(instance);\n    setSelectedInstance(instance);\n    showModal(ModalType.KasTransferOwnership, {\n      kafka: instance,\n      refreshKafkas: refresh,\n    });\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      showModal(ModalType.KasDeleteInstance, {\n        onDelete: () => onDeleteInstance(instance),\n        kafka: instance,\n      });\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n    const accessToken = await auth?.kas.getToken();\n    const apisService = new DefaultApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    onDelete();\n    hideModal();\n\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        setWaitingForDelete(true);\n        refresh();\n        setSelectedInstance(undefined);\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert &&\n        addAlert({\n          title: t('common.something_went_wrong'),\n          variant: AlertVariant.danger,\n          description: reason,\n        });\n    }\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (\n    _event: any,\n    index: number,\n    direction: string,\n    extraData: IExtraColumnData\n  ) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  const StreamsTableEmptyState: React.FunctionComponent = () => {\n    if (kafkaInstanceItems.length < 1 && kafkaDataLoaded) {\n      return (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const Pagination: React.FunctionComponent = () => {\n    if (total > 0) {\n      return (\n        <MASPagination\n          widgetId='pagination-cloudProviderOptions-menu-bottom'\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId='tableStreams-row'\n        loggedInUser={loggedInUser}\n      />\n      <StreamsTableEmptyState />\n      <Pagination />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Trans, useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Card,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport {\n  MASEmptyState,\n  MASEmptyStateVariant,\n  MASLoading,\n  usePagination,\n} from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  isMobileTablet,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport {\n  FilterType,\n  InstanceDrawer,\n  InstanceDrawerProps,\n  StreamsTableView,\n} from './components';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from '@rhoas/kafka-management-sdk';\nimport './OpenshiftStreams.css';\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport { useFederated } from '@app/contexts';\nimport { InstanceDrawerTabs } from '@app/modules/InstanceDrawer/InstanceDrawerContent';\nimport '@app/modules/styles.css';\n\nexport type OpenShiftStreamsProps = Pick<\n  InstanceDrawerProps,\n  'tokenEndPointUrl'\n> & {\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: InstanceDrawerTabs.DETAILS | InstanceDrawerTabs.CONNECTION;\n};\n\nconst OpenshiftStreams: React.FunctionComponent<OpenShiftStreamsProps> = ({\n  preCreateInstance,\n  tokenEndPointUrl,\n}: OpenShiftStreamsProps) => {\n  dayjs.extend(localizedFormat);\n  const { shouldOpenCreateModal } = useFederated() || {};\n\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const { page = 1, perPage = 10 } = usePagination() || {};\n  const mainToggle = searchParams.has('user-testing');\n  const { t } = useTranslation();\n  const { addAlert } = useAlert() || {};\n  const { showModal } = useModal<ModalType.KasCreateInstance>();\n  const localStorage = window.localStorage;\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n\n  // States\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [kafkaInstancesList, setKafkaInstancesList] =\n    useState<KafkaRequestList>({} as KafkaRequestList);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] =\n    useState<SelectedInstance | null>();\n  // state to store the expected total kafka instances based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n  const [isDisplayKafkaEmptyState, setIsDisplayKafkaEmptyState] = useState<\n    boolean | undefined\n  >(undefined);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const updateSelectedKafkaInstance = () => {\n    if (kafkaInstanceItems && kafkaInstanceItems?.length > 0) {\n      const selectedKafkaItem = kafkaInstanceItems?.filter(\n        (kafka) => kafka?.id === selectedInstance?.instanceDetail?.id\n      )[0];\n      const newState: any = {\n        ...selectedInstance,\n        instanceDetail: selectedKafkaItem,\n      };\n      selectedKafkaItem && setSelectedInstance(newState);\n    }\n  };\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem('openSessions') || '0');\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen =\n        shouldOpenCreateModal && (await shouldOpenCreateModal());\n      if (shouldOpen) {\n        handleCreateModal();\n      }\n    };\n    openModal();\n  }, [shouldOpenCreateModal]);\n\n  const handleCreateModal = () => {\n    showModal(ModalType.KasCreateInstance, {\n      onCreate: () => {\n        onCreate();\n        refreshKafkas();\n      },\n    });\n  };\n\n  const handleCreateInstanceModal = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n\n    if (open) {\n      fetchCurrentUserKafkas();\n      handleCreateModal();\n    }\n  };\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({\n      instanceDetail: instance,\n      activeTab: InstanceDrawerTabs.DETAILS,\n    });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({\n      instanceDetail: instance,\n      activeTab: InstanceDrawerTabs.CONNECTION,\n    });\n  };\n\n  const getFilterQuery = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        let filterQuery = '(';\n        filterQuery += filterValue\n          .map((val) => {\n            const value = val.value.trim();\n            if (value === InstanceStatus.PROVISIONING) {\n              return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n            }\n            if (value === InstanceStatus.DEPROVISION) {\n              return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n            }\n            return value !== ''\n              ? `${filterKey} ${\n                  val.isExact === true ? `= ${value}` : `like %${value}%`\n                }`\n              : '';\n          })\n          .join(' or ');\n        filterQuery += ')';\n\n        filters.push(filterQuery);\n      }\n    });\n    return filters.join(' and ');\n  };\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert &&\n        addAlert({\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description: reason,\n        });\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    const filterQuery = getFilterQuery();\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService\n          .getKafkas(\n            page?.toString(),\n            perPage?.toString(),\n            orderBy,\n            filterQuery\n          )\n          .then((res) => {\n            const kafkaInstances = res.data;\n            const kafkaItems = kafkaInstances?.items || [];\n            setKafkaInstancesList(kafkaInstances);\n            setKafkaInstanceItems(kafkaItems);\n\n            if (\n              kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal\n            ) {\n              setExpectedTotal(kafkaInstancesList.total);\n            }\n\n            if (\n              waitingForDelete &&\n              filteredValue.length < 1 &&\n              kafkaItems?.length == 0\n            ) {\n              setIsDisplayKafkaEmptyState(true);\n              setWaitingForDelete(false);\n            }\n\n            setKafkaDataLoaded(true);\n          });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchSingleKafka = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService.getKafkas('1', '1').then((res) => {\n          const kafkaItemsLength = res?.data?.items?.length;\n          if (!kafkaItemsLength || kafkaItemsLength < 1) {\n            setIsDisplayKafkaEmptyState(true);\n          } else {\n            setIsDisplayKafkaEmptyState(false);\n          }\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!kafkaInstanceItems || kafkaInstanceItems?.length <= 1) {\n      fetchSingleKafka();\n    }\n  }, [kafkaInstanceItems]);\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getKafkas('', '', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setCurrentUserKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [auth, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchKafkas();\n  }, []);\n\n  useEffect(() => {\n    updateSelectedKafkaInstance();\n  }, [kafkaInstanceItems]);\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    if (kafkaInstanceItems && kafkaInstanceItems?.length === 1) {\n      setKafkaDataLoaded(true);\n    } else {\n      setKafkaDataLoaded(false);\n    }\n    fetchKafkas();\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = () => {\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  if (isUserUnauthorized) {\n    return (\n      <PageSection\n        variant={PageSectionVariants.default}\n        padding={{ default: 'noPadding' }}\n        isFilled\n      >\n        <MASEmptyState\n          titleProps={{\n            title: t('access_permissions_needed'),\n            headingLevel: 'h2',\n          }}\n          emptyStateIconProps={{\n            icon: LockIcon,\n          }}\n          emptyStateBodyProps={{\n            body: t(\n              'to_access_kafka_instances_contact_your_organization_administrators'\n            ),\n          }}\n        />\n      </PageSection>\n    );\n  }\n\n  const renderStreamsTable = () => {\n    if (kafkaInstanceItems === undefined) {\n      return (\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (isDisplayKafkaEmptyState) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoItems,\n            }}\n            emptyStateBodyProps={{\n              body: (\n                <>\n                  <Trans\n                    i18nKey='create_a_kafka_instance_to_get_started'\n                    components={[\n                      <Button\n                        variant={ButtonVariant.link}\n                        isSmall\n                        isInline\n                        key='btn-quick-start'\n                        onClick={() =>\n                          qsContext.setActiveQuickStart &&\n                          qsContext.setActiveQuickStart('getting-started')\n                        }\n                      />,\n                    ]}\n                  />\n                </>\n              ),\n            }}\n            titleProps={{ title: t('no_kafka_instances_yet') }}\n          >\n            <Button\n              data-testid='emptyStateStreams-buttonCreateKafka'\n              variant={ButtonVariant.primary}\n              onClick={() => handleCreateInstanceModal()}\n            >\n              {t('create_kafka_instance')}\n            </Button>\n          </MASEmptyState>\n          )\n        </PageSection>\n      );\n    } else if (kafkaInstanceItems && isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className='mk--main-page__page-section--table pf-m-padding-on-xl'\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card>\n            <StreamsTableView\n              kafkaInstanceItems={kafkaInstanceItems}\n              mainToggle={mainToggle}\n              onViewConnection={onViewConnection}\n              onViewInstance={onViewInstance}\n              refresh={refreshKafkas}\n              kafkaDataLoaded={kafkaDataLoaded}\n              setWaitingForDelete={setWaitingForDelete}\n              onDelete={onDelete}\n              page={page}\n              perPage={perPage}\n              total={kafkaInstancesList?.total}\n              expectedTotal={expectedTotal}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              setFilterSelected={setFilterSelected}\n              filterSelected={filterSelected}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              isDrawerOpen={selectedInstance !== null}\n              loggedInUser={loggedInUser}\n              currentUserkafkas={currentUserKafkas}\n              onCreate={onCreate}\n              handleCreateInstanceModal={handleCreateInstanceModal}\n            />\n          </Card>\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        isExpanded={selectedInstance != null}\n        initialTab={activeTab}\n        isLoading={instanceDetail === undefined}\n        instanceDetail={instanceDetail}\n        onClose={onCloseDrawer}\n        data-ouia-app-id='controlPlane-streams'\n        tokenEndPointUrl={tokenEndPointUrl}\n        notRequiredDrawerContentBackground={isDisplayKafkaEmptyState}\n      >\n        <main className='pf-c-page__main'>\n          <PageSection variant={PageSectionVariants.light}>\n            <Level>\n              <LevelItem>\n                <TextContent>\n                  <Text component='h1'>{t('kafka_instances')}</Text>\n                </TextContent>\n              </LevelItem>\n            </Level>\n          </PageSection>\n          {renderStreamsTable()}\n        </main>\n      </InstanceDrawer>\n      <Modal\n        variant={ModalVariant.small}\n        title='Mobile experience'\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n"],"names":["getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","InstanceDrawer","initialTab","onClose","instanceDetail","isExpanded","isLoading","children","dataOuiaAppId","tokenEndPointUrl","notRequiredDrawerContentBackground","t","useTranslation","panelBodyContent","InstanceDrawerContent","drawerHeaderProps","text","label","title","value","name","headingLevel","InstanceDrawerTabs","ResourcesTab","DetailsTab","bootstrap_server_host","DETAILS","activeTab","setActiveTab","isKafkaPending","status","fallback","Tabs","activeKey","toString","onSelect","_","tab","CONNECTION","selectTab","Tab","eventKey","TabTitleText","externalServer","endsWith","useTimeout","callback","delay","savedCallback","useRef","current","setTimeout","clearInterval","useTooltipContent","isMaxFilter","fieldName","CloudProviderFilter","getSelectionForFilter","filterSelected","updateFilter","removeFilterValue","isDisabledSelectOption","onDeleteChipGroup","onDeleteChip","selectRef","tooltipContent","options","cloudProvider","disabled","FilterTooltip","Tooltip","content","reference","ToolbarFilter","chips","map","val","deleteChip","_category","chip","deleteChipGroup","categoryName","showToolbarItem","expanded","setExpanded","clear","Select","id","variant","SelectVariant","onToggle","prevState","selections","isOpen","_event","selection","isPlaceholder","isExact","length","placeholderText","className","ref","option","index","SelectOption","isDisabled","key","NameFilter","valid","setValid","setValue","inputRef","change","input","onKeyPress","event","onFilter","trim","test","validate","toLowerCase","v","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","Button","ButtonVariant","onClick","OwnerFilter","RegionFilter","region","FilterSelect","setFilterSelected","isFilterExpanded","setIsFilterExpanded","ToolbarItem","StatusFilter","statusFilterOptions","s","StreamsFilterGroup","filteredValue","setFilteredValue","optionValue","newFilterValue","newFilteredValue","filter","filterValue","find","removeIfPresent","Object","assign","filterIndex","findIndex","f","filterKey","filterValueIndex","splice","push","selectedFilters","category","filterOptions","prevFilterValue","filterChip","chipIndex","removeFilteredValue","copyFilteredValue","ToolbarGroup","StreamsToolbar","total","page","perPage","handleCreateInstanceModal","setIsMaxFilter","handleMaxFilters","maxFilterCount","forEach","provisioningStatus","deprovisionStatus","toolbarItems","item","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","default","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","toggleGroupItems","StatusColumn","instanceName","getStatusIcon","Spinner","size","Flex","statusIcon","FlexItem","spacer","filteredstatus","st","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","refresh","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","loggedInUser","setWaitingForDelete","currentUserkafkas","onCreate","auth","useAuth","basePath","useConfig","searchParams","URLSearchParams","location","search","history","useHistory","addAlert","useAlert","setKafkaInstance","useModal","showModal","hideModal","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","items","setItems","isOrgAdmin","setIsOrgAdmin","tableColumns","transforms","sortable","then","setSearchParam","useCallback","set","addAlertAfterSuccessDeletion","notPresentKafkas","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","AlertVariant","lastItemsState","JSON","parse","stringify","instances","cfItem","description","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","addAlertAfterSuccessCreation","tableRow","loadingCount","onSelectKebabDropdownOption","originalData","selectedOption","onChangeOwner","onSelectDeleteInstance","previousNode","target","parentElement","previousSibling","focus","instance","ModalType","kafka","refreshKafkas","onDeleteInstance","undefined","instanceId","Error","kas","getToken","accessToken","apisService","DefaultApi","Configuration","deleteKafkaById","reason","response","data","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","tableProps","cells","rows","row","cloud_provider","created_at","owner","instance_type","cloudProviderDisplayName","regionDisplayName","Link","to","skeleton","Skeleton","actionResolver","rowData","additionalProps","isUserSameAsLoggedIn","tooltip","style","pointerEvents","cursor","tooltipProps","position","getActionResolver","onSort","extraData","myDirection","property","getParameterForSortIndex","sortBy","hasDefaultCustomRowWrapper","onRowClick","rowIndex","clickedEventType","tagName","rowDataTestId","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant","OpenshiftStreams","preCreateInstance","shouldOpenCreateModal","useLocation","mainToggle","has","localStorage","window","qsContext","QuickStartContext","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","isDisplayKafkaEmptyState","setIsDisplayKafkaEmptyState","isUserUnauthorized","setIsUserUnauthorized","isMobileModalOpen","setIsMobileModalOpen","waitingForDelete","setLoggedInUser","currentUserKafkas","setCurrentUserKafkas","count","parseInt","getItem","newCount","setItem","handleMobileModal","handleCreateModal","open","fetchCurrentUserKafkas","handleServerError","error","errorCode","code","fetchKafkas","filters","filterQuery","join","getKafkas","res","kafkaInstances","kafkaItems","kafkaItemsLength","selectedKafkaItem","newState","updateSelectedKafkaInstance","getUsername","username","PageSection","PageSectionVariants","padding","isFilled","emptyStateIconProps","icon","Level","LevelItem","TextContent","Text","component","Trans","i18nKey","components","isSmall","isInline","setActiveQuickStart","Card","Modal","ModalVariant","actions"],"sourceRoot":""}