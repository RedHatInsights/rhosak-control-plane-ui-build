{"version":3,"sources":["webpack://kas-ui/./src/app/common/MASDeleteModal/MASDeleteModal.tsx","webpack://kas-ui/./src/app/common/MASLoading/MASLoading.tsx","webpack://kas-ui/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://kas-ui/./src/app/common/MASPagination/MASPagination.tsx","webpack://kas-ui/./src/app/common/MASTable/CustomRowWrapper.tsx","webpack://kas-ui/./src/app/common/MASTable/MASTable.tsx","webpack://kas-ui/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://kas-ui/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://kas-ui/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://kas-ui/./src/app/components/ErrorBoundary/UnexpectedError.tsx","webpack://kas-ui/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/i18n/i18n.ts","webpack://kas-ui/./src/openapi/base.ts"],"names":["MASDeleteModal","isModalOpen","modalProps","confirmButtonProps","cancelButtonProps","handleModalToggle","textProps","children","selectedItemData","variant","ModalVariant","titleIconVariant","ariaLabel","title","showClose","restModalProps","id","key","buttonConfirmVariant","ButtonVariant","onClickConfirmButton","isDisabledConfirmButton","label","confirmActionLabel","restConfirmButtonProps","cancelButtonId","cancelButtonKey","cancelButtonVariant","cancelActionLabel","restCancelButtonProps","className","description","restTextProps","Modal","isOpen","onClose","actions","Button","onClick","isDisabled","Text","dangerouslySetInnerHTML","__html","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","MASDrawer","isLoading","drawerPanelContentProps","drawerHeaderProps","isExpanded","panelBodyContent","onExpand","dataOuiaAppId","hidden","widths","restDrawerPanelContentProps","text","Drawer","DrawerContent","panelContent","DrawerPanelContent","default","DrawerHead","TextContent","component","TextVariants","Title","headingLevel","size","TitleSizes","value","DrawerActions","DrawerCloseButton","DrawerPanelBody","MASPagination","page","perPage","itemCount","PaginationVariant","isCompact","titles","restProps","history","location","searchParams","URLSearchParams","search","setSearchParam","useCallback","name","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","CustomRowWrapperContext","createContext","activeRow","onRowClick","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","trRef","rowProps","row","props","rowIndex","originalData","isRowDeleted","status","tabIndex","ref","css","undefined","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","rowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","toggleIcon","breakpoint","toolbarToggleGroupProps","ToolbarContent","ToolbarToggleGroup","map","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","body","dataTestId","Alert","isLiveRegion","AlertVariant","variantLabel","actionClose","AlertActionCloseButton","DeleteInstanceModal","instanceStatus","t","useTranslation","selectedInstanceName","useState","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","toLowerCase","htmlFor","TextInput","type","onChange","onKeyPress","autoFocus","UnexpectedError","updateState","PageSection","padding","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","ExclamationCircleIcon","titleProps","emptyStateBodyProps","StatusColumn","filteredstatus","instanceName","CheckCircleIcon","PendingIcon","IconSize","getStatusIcon","Flex","FlexItem","spacer","st","length","StreamsToolbar","setFilterSelected","filterSelected","total","filteredValue","setFilteredValue","setIsModalOpen","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","nameInputRef","useRef","ownerInputRef","mainFilterOptions","disabled","useEffect","handleMaxFilters","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","option","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","isInputValid","test","trim","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","find","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","isDisabledSelectOption","optionValue","tooltipContent","ToolbarGroup","Select","SelectVariant","onToggle","selections","onSelect","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","validated","ValidatedOptions","placeholder","input","SearchIcon","Tooltip","isVisible","content","reference","isPlaceholder","placeholderText","document","getElementById","widgetId","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","lg","FilterIcon","pseudolocalizationEnabled","window","get","enabled","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","format","lng","options","Intl","NumberFormat","Date","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","Error"],"mappings":"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","file":"495.c5147e76.js","sourcesContent":["import React from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  Text,\n  ButtonProps,\n  TextProps,\n} from '@patternfly/react-core';\nimport './MASDeleteModal.css';\n\nexport type MASDeleteModalProps = {\n  isModalOpen: boolean;\n  modalProps: Omit<ModalProps, 'children' | 'ref'>;\n  handleModalToggle: () => void;\n  children?: React.ReactNode;\n  selectedItemData?: any;\n  confirmButtonProps?: Omit<ButtonProps, 'children' | 'onClick'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n    onClick?: (data?: any) => Promise<void> | void;\n  };\n  cancelButtonProps?: Omit<ButtonProps, 'children'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n  };\n  textProps?: Omit<TextProps, 'children'> & {\n    description?: string;\n  };\n};\n\nexport const MASDeleteModal: React.FC<MASDeleteModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  children,\n  selectedItemData = '',\n}: MASDeleteModalProps) => {\n  const {\n    variant = ModalVariant.small,\n    titleIconVariant = 'warning',\n    ['aria-label']: ariaLabel,\n    title,\n    showClose = true,\n    ...restModalProps\n  } = modalProps || {};\n\n  const {\n    id = 'mas--confirm__button',\n    key = 'confirm-button',\n    variant: buttonConfirmVariant = ButtonVariant.danger,\n    onClick: onClickConfirmButton,\n    isDisabled: isDisabledConfirmButton,\n    label: confirmActionLabel = 'Delete',\n    ...restConfirmButtonProps\n  } = confirmButtonProps || {};\n\n  const {\n    id: cancelButtonId = 'mas--cancel__button',\n    key: cancelButtonKey = '\"cancel-button',\n    variant: cancelButtonVariant = ButtonVariant.link,\n    onClick: onClickCancelButton,\n    isDisabled: isDisabledCancelButton,\n    label: cancelActionLabel = 'Cancel',\n    ...restCancelButtonProps\n  } = cancelButtonProps || {};\n\n  const { className = 'mas--delete-item__modal--text', description, ...restTextProps } = textProps || {};\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={ariaLabel}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={showClose}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          id={id}\n          key={key}\n          variant={buttonConfirmVariant}\n          onClick={() => onClickConfirmButton && onClickConfirmButton(selectedItemData)}\n          isDisabled={isDisabledConfirmButton}\n          {...restConfirmButtonProps}\n        >\n          {confirmActionLabel}\n        </Button>,\n        <Button\n          id={cancelButtonId}\n          key={cancelButtonKey}\n          variant={cancelButtonVariant}\n          onClick={handleModalToggle}\n          {...restCancelButtonProps}\n        >\n          {cancelActionLabel}\n        </Button>,\n      ]}\n      {...restModalProps}\n    >\n      {description && (\n        <Text className={className} dangerouslySetInnerHTML={{ __html: description || '' }} {...restTextProps} />\n      )}\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/common';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps: {\n    text: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  'data-ouia-app-id': dataOuiaAppId,\n}: MASDrawerProps) => {\n  const { hidden = false, widths, ...restDrawerPanelContentProps } = drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = () => {\n    return (\n      <DrawerPanelContent widths={widths || { default: 'width_50' }} hidden={hidden} {...restDrawerPanelContentProps}>\n        {isLoading ? (\n          <MASLoading />\n        ) : (\n          <>\n            <DrawerHead>\n              <TextContent>\n                <Text component={text?.component || TextVariants.small} className={text?.className || 'pf-u-mb-0'}>\n                  {text?.label}\n                </Text>\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'pf-u-mt-0'}\n                >\n                  {title?.value}\n                </Title>\n              </TextContent>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <DrawerPanelBody>{panelBodyContent}</DrawerPanelBody>\n          </>\n        )}\n      </DrawerPanelContent>\n    );\n  };\n\n  return (\n    <Drawer isExpanded={isExpanded} onExpand={onExpand} data-ouia-app-id={dataOuiaAppId}>\n      <DrawerContent panelContent={panelContent()}>{children}</DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport interface PaginationProps extends Omit<PFPaginationProps, 'children' | 'ref'> {}\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { createContext, useContext } from 'react';\nimport { InstanceStatus } from '@app/utils';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick: (event: any, rowIndex: number, row: any) => void;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => {},\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps) => {\n  const { activeRow, onRowClick } = useContext(CustomRowWrapperContext);\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n  const isRowDeleted = originalData?.status === InstanceStatus.DEPROVISION;\n\n  return (\n    <tr\n      tabIndex={0}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        isRowDeleted ? 'pf-m-disabled' : 'pf-m-selectable',\n        activeRow && activeRow === originalData?.name && 'pf-m-selected'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: any) => !isRowDeleted && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { CustomRowWrapper, CustomRowWrapperProvider, CustomRowWrapperContextProps } from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'>;\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    rowWrapper,\n    ...restProps\n  } = tableProps;\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n      }}\n    >\n      <PFTable\n        className={css('mas--streams-table-view__table', className)}\n        rowWrapper={rowWrapper || CustomRowWrapper}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar as PFToolbar,\n  ToolbarProps as PFToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport interface ToolbarItemProps extends Omit<PFToolbarItemProps, 'children'> {\n  item: JSX.Element;\n}\ninterface ToolbarProps {\n  toolbarProps: Omit<PFToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems: JSX.Element;\n  toolbarItems: ToolbarItemProps[];\n}\n\nconst MASToolbar: React.FunctionComponent<ToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n  const { toggleIcon, breakpoint = 'md', ...toolbarToggleGroupProps } = toggleGroupProps;\n  return (\n    <>\n      <PFToolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={toggleIcon} breakpoint={breakpoint} {...toolbarToggleGroupProps}>\n            {toggleGroupItems}\n          </ToolbarToggleGroup>\n          {toolbarItems.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </PFToolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type AlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string | React.ReactElement;\n  dataTestId?: string;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body, dataTestId }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n          data-testid={dataTestId}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextInput } from '@patternfly/react-core';\nimport { MASDeleteModal, MASDeleteModalProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport type DeleteInstanceModalProps = MASDeleteModalProps & {\n  instanceStatus?: string;\n};\n\nexport const DeleteInstanceModal: React.FC<DeleteInstanceModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  instanceStatus,\n  selectedItemData,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n  return (\n    <MASDeleteModal\n      isModalOpen={isModalOpen}\n      modalProps={modalProps}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleModalToggle}\n      textProps={textProps}\n    >\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            onKeyPress={onKeyPress}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </MASDeleteModal>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, TitleSizes, Button, EmptyStateVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './UnexpectedError.css';\nimport { MASEmptyState } from '@app/common';\n\ntype UnexpectedError = {\n  updateState: (hasError: boolean) => void;\n};\n\nconst UnexpectedError = ({ updateState }: UnexpectedError) => {\n  const { t } = useTranslation();\n\n  const GoHomeBtn = () => {\n    const history = useHistory();\n    function handleClick() {\n      updateState(false);\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('go_to_openshift_streams')}</Button>;\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.full,\n        }}\n        emptyStateIconProps={{\n          icon: ExclamationCircleIcon,\n          className: 'icon-color',\n        }}\n        titleProps={{\n          title: t('something_went_wrong'),\n          headingLevel: 'h1',\n          size: TitleSizes.lg,\n        }}\n        emptyStateBodyProps={{\n          body: t('unexpected_error'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { UnexpectedError };\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size={IconSize.md} aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const icon = getStatusIcon();\n  return (\n    <Flex>\n      {icon && <FlexItem spacer={{ default: 'spacerSm' }}>{icon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { useCreateInstanceModal } from '@app/components';\n\ntype StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n}) => {\n  const { isModalOpen, setIsModalOpen } = useCreateInstanceModal();\n  const { t } = useTranslation();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus = filterKey === 'status' && filterValue?.filter(({ value }) => value === 'provisioning');\n      if (provisioningStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onChangeSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"filterText\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label=\"Search instances\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <ToolbarItem>\n              <Select\n                id=\"cloud-provider-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select cloud provider\"\n                onToggle={onCloudProviderFilterToggle}\n                selections={getSelectionForFilter('cloud_provider')}\n                isOpen={isCloudProviderFilterExpanded}\n                onSelect={onCloudProviderFilterSelect}\n                placeholderText={t('filter_by_cloud_provider')}\n              >\n                {cloudProviderFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('cloud-provider-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n        >\n          {filterSelected === 'region' && (\n            <ToolbarItem>\n              <Select\n                id=\"region-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select region\"\n                onToggle={onRegionFilterToggle}\n                selections={getSelectionForFilter('region')}\n                isOpen={isRegionFilterExpanded}\n                onSelect={onRegionFilterSelect}\n                placeholderText={t('filter_by_region')}\n              >\n                {regionFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('region-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"filterOwners\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label=\"Search owners\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n        >\n          {filterSelected === 'status' && (\n            <ToolbarItem>\n              <Select\n                id=\"status-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select status\"\n                onToggle={onStatusFilterToggle}\n                selections={getSelectionForFilter('status')}\n                isOpen={isStatusFilterExpanded}\n                onSelect={onStatusFilterSelect}\n                placeholderText={t('filter_by_status')}\n              >\n                {statusFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('status-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={() => setIsModalOpen(!isModalOpen)}\n          data-testid={'tableStreams-buttonCreateKafka'}\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: FilterIcon, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const window: Window & {\n  windowError: string;\n};\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: '~',\n      keySeparator: false,\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        // window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        // console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\ni18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n"],"sourceRoot":""}