{"version":3,"file":"7963.70ee4bdd.js","mappings":"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","sources":["webpack://kas-ui/./src/app/common/MASErrorBoundary/MASErrorBoundary.tsx","webpack://kas-ui/./src/app/common/MASLoading/MASLoading.tsx","webpack://kas-ui/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccounts.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccountsFederated.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsEmpty.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableConnected.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableSection.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/UserUnauthorized.tsx"],"sourcesContent":["import { Component, ErrorInfo, ReactNode } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { withTranslation, WithTranslation } from \"react-i18next\";\nimport { PageSection, Button } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\nimport \"./MASErrorBoundary.css\";\n\ntype Props = WithTranslation &\n  RouteComponentProps & {\n    children?: ReactNode;\n  };\n\ntype State = {\n  hasError?: boolean;\n};\n\nclass MASErrorBoundary extends Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"error:\", error, errorInfo);\n  }\n\n  onClickButton = () => {\n    const { history } = this.props;\n    this.setState({ hasError: false });\n    history && history.push(\"/\");\n  };\n\n  render() {\n    const { t } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <PageSection padding={{ default: \"noPadding\" }} isFilled>\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.UnexpectedError,\n            }}\n            emptyStateIconProps={{\n              className: \"icon-color\",\n            }}\n            titleProps={{\n              title: t(\"common.something_went_wrong\"),\n            }}\n            emptyStateBodyProps={{\n              body: t(\"unexpected_error\"),\n            }}\n          >\n            <Button onClick={this.onClickButton}>\n              {t(\"go_to_kafka_instances\")}\n            </Button>\n          </MASEmptyState>\n        </PageSection>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nconst MASErrorBoundaryComponent = withRouter(\n  withTranslation()(MASErrorBoundary)\n);\nexport { MASErrorBoundaryComponent as MASErrorBoundary };\n","import { FunctionComponent } from \"react\";\nimport {\n  Bullseye,\n  BullseyeProps,\n  Spinner,\n  SpinnerProps,\n} from \"@patternfly/react-core\";\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, \"children\">;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import { ReactNode, FC } from \"react\";\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from \"@patternfly/react-core\";\nimport { MASLoading } from \"@app/common\";\nimport \"./MASDrawer.css\";\n\nexport type MASDrawerProps = DrawerProps & {\n  children: ReactNode;\n  panelBodyContent?: ReactNode;\n  onClose: () => void;\n  drawerData?: unknown;\n  isLoading?: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, \"children\">;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, \"children\" | \"ref\"> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, \"children\"> & {\n      value: string | undefined;\n    };\n  };\n  [\"data-ouia-app-id\"]?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: ReactNode;\n};\n\nexport const MASDrawer: FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  \"data-ouia-app-id\": dataOuiaAppId,\n  inlineAlertMessage,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } =\n    drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent\n      widths={widths || { default: \"width_50\" }}\n      {...restDrawerPanelContentProps}\n    >\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text\n                  component={text?.component || TextVariants.small}\n                  className={text?.className || \"pf-u-mb-0\"}\n                >\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || \"h2\"}\n                  size={title?.size || TitleSizes[\"xl\"]}\n                  className={title?.className || \"pf-u-mt-0\"}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      onExpand={onExpand}\n      data-ouia-app-id={dataOuiaAppId}\n      data-testid=\"mk--instance__drawer\"\n      className=\"kas-drawer\"\n    >\n      <DrawerContent\n        panelContent={panelContent}\n        className={\n          notRequiredDrawerContentBackground ? \"pf-m-no-background\" : \"\"\n        }\n      >\n        <DrawerContentBody className=\"pf-u-display-flex pf-u-flex-direction-column\">\n          {\" \"}\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport default MASDrawer;\n","// A map of modal components to their lazy loaded implementations\nimport { FunctionComponent, LazyExoticComponent, lazy } from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateInstanceProps>>,\n      variant: \"medium\",\n      title: t(\"create_a_kafka_instance\"),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteInstanceProps>>,\n      variant: \"small\",\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<TransferOwnershipProps>>,\n      variant: \"medium\",\n      title: t(\"change_owner\"),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateServiceAccountProps>>,\n      variant: \"medium\",\n      title: t(\"serviceAccount.create_a_service_account\"),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteServiceAccountProps>>,\n      title: t(\"serviceAccount.delete_service_account\") + \"?\",\n      variant: \"small\",\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials\"\n          )\n      ) as LazyExoticComponent<\n        FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t(\"serviceAccount.reset_service_account_credentials\")}?`,\n      variant: \"medium\",\n    },\n  };\n};\n\nexport const KasModalLoader: FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { ServiceAccountsTableConnected } from \"@app/modules/ServiceAccounts/components/ServiceAccountsTableConnected\";\nimport \"@app/modules/styles.css\";\n\nconst ServiceAccounts: FC = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <>\n      <PageSection\n        variant={PageSectionVariants.light}\n        className=\"pf-m-padding-on-xl\"\n        padding={{ default: \"noPadding\" }}\n      >\n        <TextContent>\n          <Text component=\"h1\"> {t(\"serviceAccount.service_accounts\")}</Text>\n          <Text component=\"p\">\n            {t(\"serviceAccount.service_accounts_title_header_info\")}\n          </Text>\n        </TextContent>\n      </PageSection>\n      <ServiceAccountsTableConnected />\n    </>\n  );\n};\n\nexport { ServiceAccounts };\n","import { FC } from \"react\";\nimport { ServiceAccounts } from \"./ServiceAccounts\";\nimport { ModalProvider } from \"@rhoas/app-services-ui-components\";\nimport { KasModalLoader } from \"@app/modals\";\n\n// Federation version of ServiceAccounts\n\nconst ServiceAccountsFederated: FC = () => {\n  return (\n    <ModalProvider>\n      <ServiceAccounts />\n      <KasModalLoader />\n    </ModalProvider>\n  );\n};\n\nexport default ServiceAccountsFederated;\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\nimport { ModalType, useModal } from \"@rhoas/app-services-ui-shared\";\n\nexport type ServiceAccountsEmptyProps = {\n  fetchServiceAccounts: () => Promise<void>;\n};\nexport const ServiceAccountsEmpty: FunctionComponent<\n  ServiceAccountsEmptyProps\n> = ({ fetchServiceAccounts }) => {\n  const { showModal } = useModal<ModalType.KasCreateServiceAccount>();\n\n  const handleCreateModal = () => {\n    showModal(ModalType.KasCreateServiceAccount, {\n      onCreate: fetchServiceAccounts,\n    });\n  };\n\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <PageSection padding={{ default: \"noPadding\" }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        titleProps={{\n          title: t(\"serviceAccount.you_do_not_have_any_service_accounts_yet\"),\n        }}\n        emptyStateBodyProps={{\n          body: t(\"serviceAccount.create_service_account_to_get_started\"),\n        }}\n        buttonProps={{\n          title: t(\"serviceAccount.create_service_account\"),\n          onClick: handleCreateModal,\n          [\"data-testid\"]: \"emptyStateStreams-buttonCreateServiceAccount\",\n        }}\n      />\n    </PageSection>\n  );\n};\n","import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport {\n  Configuration,\n  ServiceAccountsApi,\n  ServiceAccountData,\n} from \"@rhoas/service-accounts-sdk\";\n\nimport { ErrorCodes, isServiceApiError } from \"@app/utils\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { UserUnauthorized } from \"@app/modules/ServiceAccounts/components/UserUnauthorized\";\nimport { MASLoading } from \"@app/common\";\nimport { ServiceAccountsEmpty } from \"@app/modules/ServiceAccounts/components/ServiceAccountsEmpty\";\nimport { ServiceAccountsTableSection } from \"@app/modules/ServiceAccounts/components/ServiceAccountsTableSection\";\n\nexport const ServiceAccountsTableConnected: FunctionComponent = () => {\n  const auth = useAuth();\n  const config = useConfig();\n\n  const [serviceAccountItems, setServiceAccountItems] = useState<\n    ServiceAccountData[] | undefined\n  >();\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n\n  const handleServerError = (error: Error) => {\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      errorCode = error.response?.data?.code;\n    }\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    }\n  };\n\n  const fetchServiceAccounts = useCallback(async () => {\n    const accessToken = await auth?.sas_ui.getToken();\n    if (accessToken && config) {\n      try {\n        const apisService = new ServiceAccountsApi(\n          new Configuration({\n            accessToken,\n            basePath: config?.sas_ui.apiBasePath,\n          })\n        );\n        await apisService.getServiceAccounts().then((response) => {\n          const serviceAccounts: ServiceAccountData[] = response?.data;\n          const sortedServiceAccounts: ServiceAccountData[] | undefined =\n            serviceAccounts?.sort((a, b) =>\n              a.createdAt && b.createdAt\n                ? String(b.createdAt).localeCompare(String(a.createdAt))\n                : -1\n            );\n          setServiceAccountItems(sortedServiceAccounts);\n        });\n      } catch (error: unknown) {\n        if (error instanceof Error) {\n          handleServerError(error);\n        }\n      }\n    }\n  }, [auth, config]);\n\n  useEffect(() => {\n    fetchServiceAccounts();\n  }, [fetchServiceAccounts]);\n\n  if (isUserUnauthorized) {\n    return <UserUnauthorized />;\n  }\n\n  if (serviceAccountItems === undefined) {\n    return (\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: \"noPadding\" }}\n      >\n        <MASLoading />\n      </PageSection>\n    );\n  }\n  if (serviceAccountItems.length < 1) {\n    return <ServiceAccountsEmpty fetchServiceAccounts={fetchServiceAccounts} />;\n  }\n  return (\n    <ServiceAccountsTableSection\n      fetchServiceAccounts={fetchServiceAccounts}\n      serviceAccountItems={serviceAccountItems}\n    />\n  );\n};\n","import { usePagination } from \"@app/common\";\nimport { FunctionComponent, useState } from \"react\";\nimport { Card, PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { ServiceAccountsTableView } from \"@app/modules/ServiceAccounts/components/ServiceAccountsTableView\";\nimport { ModalType, useModal } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceAccountData } from \"@rhoas/service-accounts-sdk\";\n\nexport type ServiceAccountTableSectionProps = {\n  fetchServiceAccounts: () => Promise<void>;\n  serviceAccountItems: ServiceAccountData[];\n};\n\nexport const ServiceAccountsTableSection: FunctionComponent<\n  ServiceAccountTableSectionProps\n> = ({ fetchServiceAccounts, serviceAccountItems }) => {\n  const { showModal: showResetCredentialsModal } =\n    useModal<ModalType.KasResetServiceAccountCredentials>();\n  const { showModal: showCreateServiceAccountModal } =\n    useModal<ModalType.KasCreateServiceAccount>();\n  const { showModal: showDeleteServiceAccountModal } =\n    useModal<ModalType.KasDeleteServiceAccount>();\n\n  const [orderBy, setOrderBy] = useState<string>(\"name asc\");\n\n  const { page = 1, perPage = 10 } = usePagination() || {};\n\n  const onResetCredentials = (serviceAccount: ServiceAccountData) => {\n    showResetCredentialsModal(ModalType.KasResetServiceAccountCredentials, {\n      serviceAccount,\n    });\n  };\n\n  const onCreateServiceAccount = () => {\n    showCreateServiceAccountModal(ModalType.KasCreateServiceAccount, {\n      onCreate: fetchServiceAccounts,\n    });\n  };\n\n  const onDeleteServiceAccount = (serviceAccount: ServiceAccountData) => {\n    showDeleteServiceAccountModal(ModalType.KasDeleteServiceAccount, {\n      serviceAccount,\n      onDelete: fetchServiceAccounts,\n    });\n  };\n\n  return (\n    <PageSection\n      className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n      variant={PageSectionVariants.default}\n      padding={{ default: \"noPadding\" }}\n      data-ouia-component-id={\"page-ServiceAccounts\"}\n    >\n      <Card>\n        <ServiceAccountsTableView\n          page={page}\n          perPage={perPage}\n          expectedTotal={0}\n          serviceAccountsDataLoaded={true}\n          serviceAccountItems={serviceAccountItems}\n          orderBy={orderBy}\n          setOrderBy={setOrderBy}\n          onResetCredentials={onResetCredentials}\n          onDeleteServiceAccount={onDeleteServiceAccount}\n          onCreateServiceAccount={onCreateServiceAccount}\n        />\n      </Card>\n    </PageSection>\n  );\n};\n","import { FC, MouseEvent, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  cellWidth,\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  SortByDirection,\n} from \"@patternfly/react-table\";\nimport { Skeleton } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant, MASTable } from \"@app/common\";\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n} from \"@app/utils\";\nimport {\n  ServiceAccountsToolbar,\n  ServiceAccountsToolbarProps,\n} from \"./ServiceAccountsToolbar\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceAccountData } from \"@rhoas/service-accounts-sdk\";\nimport { format } from \"date-fns\";\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountData[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountData) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountData) => void;\n  onCreateServiceAccount: () => void;\n  page: number;\n  perPage: number;\n};\n\nconst ServiceAccountsTableView: FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  onCreateServiceAccount,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const auth = useAuth();\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  useEffect(() => {\n    auth?.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    auth?.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  const tableColumns = [\n    { title: t(\"common.name\") },\n    { title: t(\"common.clientID\") },\n    { title: t(\"common.owner\"), transforms: [cellWidth(20)] },\n    { title: t(\"time_created\") },\n  ];\n\n  const resetCredentials = (\n    event: MouseEvent,\n    originalData: ServiceAccountData\n  ) => {\n    onResetCredentials && onResetCredentials(originalData);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const deleteAccount = (\n    event: MouseEvent,\n    originalData: ServiceAccountData\n  ) => {\n    onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!serviceAccountsDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: tableColumns.length,\n      });\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, createdBy, clientId, createdAt } = row;\n\n      const dateTime = format(new Date(createdAt * 1000), \"PPpp\");\n      tableRow.push({\n        cells: [\n          name,\n          clientId,\n          createdBy,\n          { title: getFormattedDate(dateTime, t(\"ago\")) },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const buildActionResolver = (rowData: IRowData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountData = rowData.originalData;\n    const isUserSameAsLoggedIn =\n      (loggedInUser !== undefined && originalData.createdBy === loggedInUser) ||\n      (isOrgAdmin !== undefined && isOrgAdmin === true);\n\n    let additionalProps: Partial<IAction> = {};\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: \"auto\",\n          cursor: \"default\",\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t(\"common.reset_credentials\"),\n        id: \"reset-credentials\",\n        [\"data-testid\"]: \"tableServiceAccounts-actionResetCredentials\",\n        [\"data-ouia-component-id\"]: \"kebab-menu-reset-creds\",\n        onClick: (event) =>\n          isUserSameAsLoggedIn && resetCredentials(event, originalData),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"serviceAccount.no_permission_to_reset_service_account\"),\n        },\n      } as IAction,\n      {\n        title: t(\"serviceAccount.delete_service_account\"),\n        id: \"delete-account\",\n        [\"data-testid\"]: \"tableServiceAccounts-actionDeleteAccount\",\n        [\"data-ouia-component-id\"]: \"kebab-menu-delete-sa\",\n        onClick: (event) =>\n          isUserSameAsLoggedIn && deleteAccount(event, originalData),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"serviceAccount.no_permission_to_delete_service_account\"),\n        },\n      } as IAction,\n    ];\n    return resolver;\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return \"name\";\n      case 1:\n        return \"client_id\";\n      case 2:\n        return \"owner\";\n      case 3:\n        return \"description\";\n      case 4:\n        return \"created_at\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case \"name\":\n        return 0;\n      case \"client_id\":\n        return 1;\n      case \"owner\":\n        return 2;\n      case \"description\":\n        return 3;\n      case \"created_at\":\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort: OnSort = (_event, columnIndex, sortByDirection) => {\n    setOrderBy &&\n      setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(\" \") || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar onCreateServiceAccount={onCreateServiceAccount} />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          \"aria-label\": t(\"serviceAccount.service_account_list\"),\n          actionResolver: (rowData) => buildActionResolver(rowData),\n          onSort: onSort,\n          sortBy: sortBy(),\n          ouiaId: \"table\",\n        }}\n      />\n      {serviceAccountItems &&\n        serviceAccountItems?.length < 1 &&\n        serviceAccountsDataLoaded && (\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoResult,\n            }}\n            titleProps={{\n              title: t(\"no_results_found\"),\n            }}\n            emptyStateBodyProps={{\n              body: t(\"adjust_your_filters_and_try_again\"),\n            }}\n          />\n        )}\n      {/* {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n","import { FC } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\nimport { MASToolbar, ToolbarItemProps } from \"@app/common\";\n\nexport type ServiceAccountsToolbarProps = {\n  onCreateServiceAccount: () => void;\n};\n\nconst ServiceAccountsToolbar: FC<ServiceAccountsToolbarProps> = ({\n  onCreateServiceAccount: onCreateServiceAccount,\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={onCreateServiceAccount}\n          data-testid={\"tableServiceAccounts-buttonCreateServiceAccount\"}\n          ouiaId={\"button-create-account\"}\n        >\n          {t(\"serviceAccount.create_service_account\")}\n        </Button>\n      ),\n    },\n  ];\n  /**\n   * Todo: uncomment code when API start support pagination\n   */\n  // if (total && total > 0 && toolbarItems.length === 1) {\n  //   toolbarItems.push({\n  //     item: (\n  //       <MASPagination\n  //         widgetId=\"pagination-options-menu-top\"\n  //         itemCount={total}\n  //         page={page}\n  //         perPage={perPage}\n  //         isCompact={true}\n  //         titles={{\n  //           paginationTitle: t('minimal_pagination'),\n  //           perPageSuffix: t('per_page_suffix'),\n  //           toFirstPage: t('to_first_page'),\n  //           toPreviousPage: t('to_previous_page'),\n  //           toLastPage: t('to_last_page'),\n  //           toNextPage: t('to_next_page'),\n  //           optionsToggle: t('options_toggle'),\n  //           currPage: t('curr_page'),\n  //         }}\n  //       />\n  //     ),\n  //     variant: 'pagination',\n  //     alignment: { default: 'alignRight' },\n  //   });\n  // }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: \"instance-toolbar\",\n        collapseListedFiltersBreakpoint: \"md\",\n        inset: { xl: \"insetLg\" },\n      }}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { MASEmptyState } from \"@app/common\";\nimport LockIcon from \"@patternfly/react-icons/dist/js/icons/lock-icon\";\n\nexport const UserUnauthorized: FunctionComponent = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: \"noPadding\" }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t(\n            \"serviceAccount.unauthorized_access_to_service_accounts_title\"\n          ),\n          headingLevel: \"h2\",\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            \"serviceAccount.unauthorized_access_to_service_accounts_info\"\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n"],"names":["Component","state","hasError","onClickButton","history","this","props","setState","push","static","componentDidCatch","error","errorInfo","console","render","t","PageSection","padding","default","isFilled","MASEmptyState","emptyStateProps","variant","emptyStateIconProps","className","titleProps","title","emptyStateBodyProps","body","Button","onClick","children","withRouter","withTranslation","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","onClose","isLoading","drawerPanelContentProps","drawerHeaderProps","isExpanded","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","widths","restDrawerPanelContentProps","text","panelContent","DrawerPanelContent","DrawerHead","TextContent","label","Text","component","TextVariants","value","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","KasModalLoader","registerModals","useModal","useTranslation","ModalType","lazyComponent","lazy","useKasModals","ServiceAccounts","PageSectionVariants","ModalProvider","ServiceAccountsEmpty","fetchServiceAccounts","showModal","buttonProps","onCreate","ServiceAccountsTableConnected","auth","useAuth","config","useConfig","serviceAccountItems","setServiceAccountItems","useState","isUserUnauthorized","setIsUserUnauthorized","useCallback","accessToken","sas_ui","getToken","apisService","ServiceAccountsApi","Configuration","basePath","apiBasePath","getServiceAccounts","then","response","serviceAccounts","data","sortedServiceAccounts","sort","a","b","createdAt","String","localeCompare","Error","errorCode","code","handleServerError","useEffect","undefined","length","ServiceAccountsTableSection","showResetCredentialsModal","showCreateServiceAccountModal","showDeleteServiceAccountModal","orderBy","setOrderBy","page","perPage","Card","expectedTotal","serviceAccountsDataLoaded","onResetCredentials","serviceAccount","onDeleteServiceAccount","onDelete","onCreateServiceAccount","ServiceAccountsTableView","loggedInUser","setLoggedInUser","isOrgAdmin","setIsOrgAdmin","getUsername","username","tableColumns","transforms","cellWidth","buildActionResolver","rowData","originalData","isUserSameAsLoggedIn","createdBy","additionalProps","tooltip","isDisabled","style","pointerEvents","cursor","resolver","id","event","target","parentElement","previousSibling","focus","resetCredentials","tooltipProps","position","content","deleteAccount","getindexForSortParameter","parameter","toLowerCase","tableProps","cells","rows","tableRow","loadingCount","forEach","row","name","clientId","dateTime","Date","skeleton","Skeleton","preparedTableCells","actionResolver","onSort","_event","columnIndex","sortByDirection","index","getParameterForSortIndex","sortBy","split","direction","SortByDirection","ouiaId","ServiceAccountsToolbar","toolbarItems","item","toolbarProps","collapseListedFiltersBreakpoint","inset","xl","UserUnauthorized","icon"],"sourceRoot":""}