{"version":3,"sources":["webpack://kas-ui/./src/app/common/MASAlerts/MASAlertToastGroup.tsx","webpack://kas-ui/./src/app/common/MASCreateModal/MASCreateModal.tsx","webpack://kas-ui/./src/app/common/MASDeleteModal/MASDeleteModal.tsx","webpack://kas-ui/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://kas-ui/./src/app/common/MASGenerateCredentialsModal/MASGenerateCredentialsModal.tsx","webpack://kas-ui/./src/app/common/MASLoading/MASLoading.tsx","webpack://kas-ui/./src/app/common/MASPagination/MASPagination.tsx","webpack://kas-ui/./src/app/common/MASTable/CustomRowWrapper.tsx","webpack://kas-ui/./src/app/common/MASTable/MASTable.tsx","webpack://kas-ui/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://kas-ui/./src/app/models/openshiftStreamsModel.ts","webpack://kas-ui/./src/app/models/serviceAccountsModel.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ConnectionTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/DetailsTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccount.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/ResetServiceAccount/ResetServiceAccount.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/openapi/base.ts","webpack://kas-ui/./src/openapi/api.ts"],"names":["MASAlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","map","key","variant","title","body","dataTestId","Alert","isLiveRegion","AlertVariant","variantLabel","actionClose","AlertActionCloseButton","onClose","MASCreateModal","isModalOpen","children","handleModalToggle","onCreate","isFormValid","isCreationInProgress","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","id","t","useTranslation","Modal","ModalVariant","isOpen","appendTo","actions","Button","type","onClick","isDisabled","spinnerAriaValueText","isLoading","MASDeleteModal","modalProps","confirmButtonProps","cancelButtonProps","textProps","selectedItemData","textInputProps","titleIconVariant","ariaLabel","showClose","restModalProps","buttonConfirmVariant","ButtonVariant","onClickConfirmButton","isDisabledConfirmButton","label","confirmActionLabel","restConfirmButtonProps","cancelButtonId","cancelButtonKey","cancelButtonVariant","cancelActionLabel","restCancelButtonProps","className","description","restTextProps","value","onChange","onKeyPress","showTextInput","restInputFieldProps","Text","dangerouslySetInnerHTML","__html","htmlFor","TextInput","name","autoFocus","MASDrawer","drawerPanelContentProps","drawerHeaderProps","isExpanded","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","widths","restDrawerPanelContentProps","text","panelContent","DrawerPanelContent","default","DrawerHead","TextContent","component","TextVariants","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","MASGenerateCredentialsModal","store","hideModal","credential","useState","confirmationCheckbox","setConfirmationCheckbox","handleClose","generateCredentials","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","titleProps","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","textAriaLabel","clientID","clientSecret","Bullseye","Checkbox","isChecked","checked","MASLoading","bullseyeProps","spinnerProps","Spinner","MASPagination","page","perPage","itemCount","PaginationVariant","isCompact","titles","restProps","history","location","searchParams","URLSearchParams","search","setSearchParam","useCallback","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","rowDataTestId","trRef","rowProps","row","props","rowIndex","originalData","isRowDeleted","status","isLoggedInUserOwner","owner","isRowDisabled","tabIndex","undefined","ref","css","hidden","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","hasDefaultCustomRowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","breakpoint","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","this","cloud_provider","multi_az","region","ResourcesTab","mainToggle","externalServer","instance","isKafkaPending","onConnectToRoute","getConnectToRoutePath","tokenEndPointUrl","showModal","Skeleton","fontSize","Link","to","e","preventDefault","isInline","Label","color","Popover","bodyContent","SampleCodeTab","ConnectionTab","onSelect","activeKey","Tabs","isSecondary","Tab","eventKey","TabTitleText","DetailsTab","instanceDetail","created_at","updated_at","renderTextListItem","TextListItem","TextListItemVariants","Grid","GridItem","span","Card","isFlat","CardBody","TextList","TextListVariants","format","InstanceDrawer","activeTab","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","useEffect","selectedTab","toLowerCase","bootstrapServerHost","handleTab1Click","onSelectConnectionTab","endsWith","StreamsToolbar","setFilterSelected","filterSelected","total","filteredValue","setFilteredValue","isDisabledCreateButton","buttonTooltipContent","labelWithTooltip","refresh","cloudProviders","nameInputRef","useRef","ownerInputRef","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","statusFilterOptions","s","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","isInputValid","test","trim","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","find","option","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","deprovisionStatus","isDisabledSelectOption","optionValue","tooltipContent","ToolbarGroup","Select","SelectVariant","onToggle","selections","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","showToolbarItem","validated","ValidatedOptions","placeholder","input","Tooltip","isVisible","content","reference","isPlaceholder","placeholderText","document","getElementById","handleCreateModal","isAriaDisabled","widgetId","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","xl","StatusColumn","filteredstatus","instanceName","statusIcon","getStatusIcon","Flex","FlexItem","spacer","st","getDeleteInstanceModalConfig","isMaxCapacityReached","config","additionalMessage","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","setWaitingForDelete","currentUserkafkas","auth","useAuth","basePath","useConfig","addAlert","useAlert","selectedInstance","setSelectedInstance","setActiveRow","deletedKafkas","setDeletedKafkas","items","setItems","tableColumns","transforms","sortable","addAlertAfterSuccessDeletion","notPresentKafkas","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","incompleteKafkas","addAlertAfterSuccessCreation","tableRow","loadingCount","onSelectKebabDropdownOption","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","renderNameLink","onDeleteInstance","instanceStatus","instanceId","Error","kas","getToken","accessToken","apisService","deleteKafkaById","then","reason","response","data","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","cloudProviderDisplayName","regionDisplayName","skeleton","rowData","_extraData","additionalProps","isUserSameAsLoggedIn","tooltip","style","pointerEvents","cursor","tooltipProps","position","getActionResolver","extraData","myDirection","property","getParameterForSortIndex","clickedEventType","tagName","emptyStateBodyProps","DrawerPanelContentInfo","qsContext","QuickStartContext","sm","lg","hasGutter","isSmall","marginTop","setActiveQuickStart","emptyProvider","kind","display_name","enabled","CreateInstance","newKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","setIsFormValid","setCreationInProgress","resetForm","prevState","fetchCloudRegions","provider","listCloudProviderRegions","res","providerRegions","enabledRegions","p","unshift","onCreateInstance","isValid","message","maxLength","validateCreateForm","createKafka","code","isMultiSelected","onChangeValidateName","onChangeCloudRegion","getTileIcon","onChangeAvailabilty","isSelected","currentTarget","onFormSubmit","flex","Form","onSubmit","FormAlert","FormGroup","helperText","helperTextInvalid","isRequired","fieldId","Tile","FormSelect","FormSelectOption","ToggleGroup","ToggleGroupItem","buttonId","Divider","isVertical","DeleteInstance","DeleteInstanceModal","selectedInstanceName","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","DeleteInstanceConnected","setIsOpenDeleteInstanceModal","setIsMaxCapacityReached","setIsLoading","fetchKafkaServiceStatus","onCloseModal","handleServerError","error","serviceStatus","maxCapacityReached","kafkas","max_capacity_reached","CreateServiceAccount","newServiceAccount","N","fetchServiceAccounts","descriptionValidated","setDescriptionValidated","serviceAccountFormData","setServiceAccountFormData","descMessage","descFieldState","handleTextInputName","handleTextInputDescription","createServiceAccount","TextArea","DeleteServiceAccount","serviceAccountToDelete","serviceAccount","serviceAccountId","deleteServiceAccount","ResetServiceAccount","serviceAccountToReset","isModalLoading","setIsModalLoading","resetServiceAccount","resetServiceAccountCreds","ErrorCodes","isServiceApiError","BASE_PATH","replace","configuration","axios","field","msg","DefaultApiAxiosParamCreator","async","kafkaRequestPayload","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","needsSerialization","url","serviceAccountRequest","localVarPath","encodeURIComponent","String","getKafkaById","getMetricsByInstantQuery","filters","getMetricsByRangeQuery","duration","interval","getServiceAccountById","listCloudProviders","listKafkas","listServiceAccounts","versionMetadata","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","BaseAPI"],"mappings":"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","file":"228.89ba36fb.js","sourcesContent":["import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type MASAlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string | React.ReactElement;\n  dataTestId?: string;\n  skipAutoClose?: boolean;\n};\n\ntype AlertToastGroupProps = {\n  alerts: MASAlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport const MASAlertToastGroup: React.FunctionComponent<AlertToastGroupProps> = ({ alerts, onCloseAlert }: AlertToastGroupProps) => {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body, dataTestId }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n          data-testid={dataTestId}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport { Button, Modal, ModalVariant } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { getModalAppendTo } from '@app/utils/utils';\n\nexport type MASCreateModalProps = {\n  id?: string;\n  isModalOpen: boolean;\n  children?: React.ReactNode;\n  title: string;\n  handleModalToggle: () => void;\n  onCreate: () => void;\n  isFormValid: boolean;\n  isCreationInProgress: boolean;\n  primaryButtonTitle: string;\n  dataTestIdSubmit?: string;\n  dataTestIdCancel?: string;\n};\n\nexport const MASCreateModal: React.FunctionComponent<MASCreateModalProps> = ({\n  isModalOpen,\n  children,\n  title,\n  handleModalToggle,\n  onCreate,\n  isFormValid,\n  isCreationInProgress,\n  primaryButtonTitle,\n  dataTestIdSubmit,\n  dataTestIdCancel,\n  id = 'modalCreateKafka',\n}: MASCreateModalProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      id={id}\n      variant={ModalVariant.medium}\n      title={title}\n      isOpen={isModalOpen}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={onCreate}\n          isDisabled={!isFormValid || isCreationInProgress}\n          spinnerAriaValueText={t('submitting_request')}\n          isLoading={isCreationInProgress}\n          data-testid={dataTestIdSubmit}\n        >\n          {primaryButtonTitle}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle} data-testid={dataTestIdCancel}>\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  Text,\n  ButtonProps,\n  TextProps,\n  TextInput,\n  TextInputProps,\n} from '@patternfly/react-core';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport './MASDeleteModal.css';\n\nexport type MASDeleteModalProps = {\n  isModalOpen: boolean;\n  title: string;\n  modalProps?: Omit<ModalProps, 'children' | 'ref'>;\n  handleModalToggle: () => void;\n  children?: React.ReactNode;\n  selectedItemData?: any;\n  confirmButtonProps?: Omit<ButtonProps, 'children' | 'onClick'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n    onClick?: (data?: any) => Promise<void> | void;\n    'data-testid'?: string;\n  };\n  cancelButtonProps?: Omit<ButtonProps, 'children'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n  };\n  textProps?: Omit<TextProps, 'children'> & {\n    description?: string;\n  };\n  textInputProps?: TextInputProps & {\n    showTextInput: boolean;\n    label: string;\n    value: string | undefined;\n  };\n};\n\nexport const MASDeleteModal: React.FC<MASDeleteModalProps> = ({\n  isModalOpen,\n  title,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  children,\n  selectedItemData = '',\n  textInputProps,\n}: MASDeleteModalProps) => {\n  const {\n    variant = ModalVariant.small,\n    titleIconVariant = 'warning',\n    ['aria-label']: ariaLabel,\n    showClose = true,\n    ...restModalProps\n  } = modalProps || {};\n\n  const {\n    id = 'mas--confirm__button',\n    key = 'confirm-button',\n    variant: buttonConfirmVariant = ButtonVariant.danger,\n    onClick: onClickConfirmButton,\n    isDisabled: isDisabledConfirmButton,\n    label: confirmActionLabel = 'Delete',\n    isLoading,\n    ...restConfirmButtonProps\n  } = confirmButtonProps || {};\n\n  const {\n    id: cancelButtonId = 'mas--cancel__button',\n    key: cancelButtonKey = '\"cancel-button',\n    variant: cancelButtonVariant = ButtonVariant.link,\n    label: cancelActionLabel = 'Cancel',\n    ...restCancelButtonProps\n  } = cancelButtonProps || {};\n\n  const { className = 'mas--delete-item__modal--text', description, ...restTextProps } = textProps || {};\n  const { label = '', value, onChange, onKeyPress, showTextInput, ...restInputFieldProps } = textInputProps || {};\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={ariaLabel}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={showClose}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          id={id}\n          key={key}\n          variant={buttonConfirmVariant}\n          onClick={() => onClickConfirmButton && onClickConfirmButton(selectedItemData)}\n          isDisabled={isDisabledConfirmButton}\n          isLoading={isLoading}\n          {...restConfirmButtonProps}\n        >\n          {confirmActionLabel}\n        </Button>,\n        <Button\n          id={cancelButtonId}\n          key={cancelButtonKey}\n          variant={cancelButtonVariant}\n          onClick={handleModalToggle}\n          {...restCancelButtonProps}\n        >\n          {cancelActionLabel}\n        </Button>,\n      ]}\n      {...restModalProps}\n    >\n      {description && (\n        <Text className={className} dangerouslySetInnerHTML={{ __html: description || '' }} {...restTextProps} />\n      )}\n      {showTextInput && (\n        <>\n          <label htmlFor=\"mas-name-input\" dangerouslySetInnerHTML={{ __html: label }} />\n          <TextInput\n            id=\"mas--name__input\"\n            name=\"mas-name-input\"\n            type=\"text\"\n            value={value}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            autoFocus={true}\n            {...restInputFieldProps}\n          />\n        </>\n      )}\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/common';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading?: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: React.ReactNode;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n  inlineAlertMessage,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } = drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent widths={widths || { default: 'width_50' }} {...restDrawerPanelContentProps}>\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text component={text?.component || TextVariants.small} className={text?.className || 'pf-u-mb-0'}>\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'pf-u-mt-0'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer isExpanded={isExpanded} onExpand={onExpand} data-ouia-app-id={dataOuiaAppId}>\n      <DrawerContent\n        panelContent={panelContent}\n        className={notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''}\n      >\n        <DrawerContentBody className=\"pf-u-display-flex pf-u-flex-direction-column\"> {children}</DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyStateVariant,\n  InputGroup,\n  InputGroupText,\n  TitleSizes,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport KeyIcon from '@patternfly/react-icons/dist/js/icons/key-icon';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport { useTranslation } from 'react-i18next';\nimport { MASEmptyState, MASLoading, useRootModalContext } from '@app/common';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport './MASGenerateCredentialsModal.css';\n\nconst MASGenerateCredentialsModal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { store, hideModal } = useRootModalContext();\n  const { credential, isLoading, title } = store?.modalProps || {};\n\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const handleClose = () => {\n    hideModal();\n    setConfirmationCheckbox(false);\n  };\n\n  const handleChangeCheckbox = (checked: boolean) => {\n    setConfirmationCheckbox(checked);\n  };\n\n  const generateCredentials = (\n    <>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t('credentials_successfully_generated'),\n          headingLevel: 'h2',\n          size: TitleSizes.lg,\n        }}\n      >\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t('connect_to_the_kafka_instance_using_this_clientID_and_secret')}\n          </Text>\n        </TextContent>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t('client_id')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientID\"\n            textAriaLabel={t('client_id')}\n          >\n            {credential?.clientID}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t('common.client_secret')}\n          </InputGroupText>\n          <ClipboardCopy\n            isReadOnly\n            className=\"pf-u-w-100\"\n            data-testid=\"modalCredentials-copyClientSecret\"\n            textAriaLabel={t('common.client_secret')}\n          >\n            {credential?.clientSecret}\n          </ClipboardCopy>\n        </InputGroup>\n        <TextContent>\n          <Text component={TextVariants.small} className=\"pf-u-mt-lg\">\n            {t('create_service_account_credentials_warning_message')}\n          </Text>\n        </TextContent>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button\n          variant=\"primary\"\n          isDisabled={!confirmationCheckbox}\n          onClick={handleClose}\n          data-testid=\"modalCredentials-buttonClose\"\n        >\n          {t('close')}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={title || t('serviceAccount.create_a_service_account')}\n      isOpen={true}\n      onClose={handleClose}\n      showClose={false}\n      appendTo={getModalAppendTo}\n    >\n      {isLoading ? <MASLoading /> : generateCredentials}\n    </Modal>\n  );\n};\n\nexport { MASGenerateCredentialsModal };\n","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport type PaginationProps = Omit<PFPaginationProps, 'children' | 'ref'>;\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: unknown, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: unknown, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { createContext, useContext } from 'react';\nimport { InstanceStatus } from '@app/utils';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (event: MouseEvent, rowIndex: number, row: any) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => {},\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps) => {\n  const { activeRow, onRowClick, rowDataTestId, loggedInUser } = useContext(CustomRowWrapperContext);\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n  const isRowDeleted =\n    originalData?.status === InstanceStatus.DEPROVISION || originalData?.status === InstanceStatus.DELETED;\n  const isLoggedInUserOwner = loggedInUser === originalData?.owner;\n  const isRowDisabled = isRowDeleted || !isLoggedInUserOwner;\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={!isRowDisabled ? 0 : undefined}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        isRowDeleted ? 'pf-m-disabled' : isLoggedInUserOwner && 'pf-m-selectable',\n        !isRowDisabled && activeRow && activeRow === originalData?.name && 'pf-m-selected'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: MouseEvent) => !isRowDisabled && onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { CustomRowWrapper, CustomRowWrapperProvider, CustomRowWrapperContextProps } from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    hasDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    hasDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (hasDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(hasDefaultCustomRowWrapper && 'mas--streams-table-view__table', className)}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: JSX.Element;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: any;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          { toggleGroupProps && (\n            <ToolbarToggleGroup toggleIcon={toggleGroupProps.toggleIcon} breakpoint='md' {...toggleGroupProps}>\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = true;\n    this.region = '';\n    this.name = '';\n  }\n}\n","export class NewServiceAccount {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  TextContent,\n  Text,\n  TextVariants,\n  ClipboardCopy,\n  Label,\n  Popover,\n  Skeleton,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport { useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { KafkaRequest } from '@openapi/api';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n  externalServer?: string;\n  instance: KafkaRequest | undefined;\n  isKafkaPending?: boolean;\n  onConnectToRoute: (data: KafkaRequest, routePath: string) => void;\n  getConnectToRoutePath: (data: KafkaRequest, routePath: string) => string;\n  tokenEndPointUrl: string;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = ({\n  mainToggle,\n  externalServer,\n  instance = {},\n  isKafkaPending,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  tokenEndPointUrl,\n}: ResourcesTabProps) => {\n  const { t } = useTranslation();\n  const { showModal } = useRootModalContext();\n\n  const handleCreateServiceAccountModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_ACCOUNT);\n  };\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-lg\">\n          {t('bootstrap_server')}\n        </Text>\n        <Text component={TextVariants.small}>{t('bootstrap_server_description')}</Text>\n      </TextContent>\n      {isKafkaPending ? (\n        <Skeleton fontSize=\"2xl\" />\n      ) : (\n        <ClipboardCopy data-testid=\"drawerStreams-copyBootstrapURL\" textAriaLabel={t('bootstrap_server')}>\n          {externalServer}\n        </ClipboardCopy>\n      )}\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t('serviceAccount.service_accounts_small')}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t('serviceAccount.create_service_account_to_generate_credentials')}{' '}\n          <Link\n            to={() => getConnectToRoutePath(instance, 'service-accounts')}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToRoute(instance, 'service-accounts');\n            }}\n            data-testid=\"tableStreams-linkKafka\"\n          >\n            {t('serviceAccount.service_accounts')}\n          </Link>{' '}\n          {t('common.page')}.\n        </Text>\n      </TextContent>\n      <Button\n        variant=\"secondary\"\n        onClick={handleCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n        isInline\n      >\n        {t('serviceAccount.create_service_account')}\n      </Button>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t('common.authentication_method')}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t('common.sasl_oauthbearer')} <Label color=\"green\">{t('common.recommended')}</Label>\n          <Popover\n            aria-label={t('common.sasl_oauthbearer')}\n            bodyContent={<div>{t('serviceAccount.sasl_oauthbearer_popover_content')}</div>}\n          >\n            <Button variant={ButtonVariant.plain} aria-label={t('more_info_about_sasl_oauthbearer')}>\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>{t('serviceAccount.sasl_oauthbearer_description')}</Text>\n        <Text component={TextVariants.h6} className=\"pf-u-mt-md\">\n          {t('common.token_endpoint_url')}\n        </Text>\n        {isKafkaPending ? <Skeleton fontSize=\"2xl\" /> : <ClipboardCopy>{tokenEndPointUrl}</ClipboardCopy>}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t('common.sasl_plain')}\n        </Text>\n        <Text component={TextVariants.small}>{t('serviceAccount.sasl_plain_description')}</Text>\n      </TextContent>\n      {mainToggle && (\n        <>\n          <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n            <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n            <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n          </TextContent>\n          <ClipboardCopy>https://:30123</ClipboardCopy>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport CopyIcon from '@patternfly/react-icons/dist/js/icons/copy-icon';\n\nexport const SampleCodeTab: React.FunctionComponent = () => {\n\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n          {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n          <div className=\"pf-c-code-editor__tab\">\n            <span className=\"pf-c-code-editor__tab-text\">Java</span>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n          </div>\n        </div>\n      </div>\n      <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n          {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">\n              bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n              sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n            </pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, TabsProps, Tab, TabTitleText } from '@patternfly/react-core';\nimport { ResourcesTab, ResourcesTabProps } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ConnectionTabProps = Pick<TabsProps, 'onSelect' | 'activeKey'> & ResourcesTabProps;\n\nexport const ConnectionTab: React.FC<ConnectionTabProps> = ({\n  onSelect,\n  externalServer,\n  instance,\n  mainToggle,\n  activeKey,\n  isKafkaPending,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  tokenEndPointUrl,\n}: ConnectionTabProps) => {\n\n  const { t } = useTranslation();\n\n  return (\n    mainToggle ? (\n      <div className=\"mas--details__drawer--tab-content pf-m-secondary\">\n        <Tabs activeKey={activeKey} isSecondary onSelect={onSelect}>\n          <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n            <ResourcesTab\n              externalServer={externalServer}\n              instance={instance}\n              mainToggle={mainToggle}\n              isKafkaPending={isKafkaPending}\n              getConnectToRoutePath={getConnectToRoutePath}\n              onConnectToRoute={onConnectToRoute}\n              tokenEndPointUrl={tokenEndPointUrl}\n            />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n            <SampleCodeTab />\n          </Tab>\n        </Tabs>\n      </div>\n    ) : (\n      <ResourcesTab\n        externalServer={externalServer}\n        instance={instance}\n        mainToggle={mainToggle}\n        isKafkaPending={isKafkaPending}\n        getConnectToRoutePath={getConnectToRoutePath}\n        onConnectToRoute={onConnectToRoute}\n        tokenEndPointUrl={tokenEndPointUrl}\n      />\n    )\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport { KafkaRequest } from 'src/openapi';\n\nexport type DetailsTabProps = {\n  mainToggle?: boolean;\n  instanceDetail?: KafkaRequest;\n};\n\nexport const DetailsTab: React.FunctionComponent<DetailsTabProps> = ({ mainToggle, instanceDetail }: DetailsTabProps) => {\n\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n  const { id, owner, created_at, updated_at } = instanceDetail || {};\n\n  const renderTextListItem = (title: string, value?: string) => (\n    value &&\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n    </>\n  );\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {mainToggle && (\n        <Grid className=\"mas--details__drawer--grid\">\n          <GridItem span={6} className=\"mas--details__drawer--grid--column-one\">\n            <Card isFlat>\n              <CardBody>\n                <TextContent>\n                  <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                    {t('topics')}\n                  </Text>\n                  <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                    10\n                  </Text>\n                </TextContent>\n              </CardBody>\n            </Card>\n          </GridItem>\n          <GridItem span={6}>\n            <Card isFlat>\n              <CardBody>\n                <TextContent>\n                  <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                    {t('consumer_groups')}\n                  </Text>\n                  <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                    8\n                  </Text>\n                </TextContent>\n              </CardBody>\n            </Card>\n          </GridItem>\n        </Grid>\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {renderTextListItem(t('cloud_provider'), t('amazon_web_services'))}\n          {renderTextListItem(t('region'), t('us_east_north_virginia'))}\n          {renderTextListItem(t('id'), id)}\n          {renderTextListItem(t('owner'), owner)}\n          {renderTextListItem(t('created'), dayjs(created_at).format('LLLL'))}\n          {renderTextListItem(t('updated'), dayjs(updated_at).format('LLLL'))}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { Tabs, Tab, TabTitleText, Alert, AlertVariant } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\nimport { ConnectionTab, ConnectionTabProps } from './ConnectionTab';\nimport { DetailsTab, DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\n\nexport type InstanceDrawerProps = Pick<\n  ConnectionTabProps,\n  'getConnectToRoutePath' | 'onConnectToRoute' | 'tokenEndPointUrl'\n> &\n  Omit<MASDrawerProps, 'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\n\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  getConnectToRoutePath,\n  onConnectToRoute,\n  tokenEndPointUrl,\n  notRequiredDrawerContentBackground,\n}) => {\n\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n  const { name, status } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrapServerHost } = instanceDetail || {};\n    return bootstrapServerHost?.endsWith(':443') ? bootstrapServerHost : `${bootstrapServerHost}:443`;\n  };\n\n  const isKafkaPending = status === InstanceStatus.ACCEPTED || status === InstanceStatus.PREPARING;\n\n  const panelBodyContent = () => {\n    return (\n      <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n        <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n          <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>} data-testid=\"drawerStreams-tabConnect\">\n          <ConnectionTab\n            mainToggle={mainToggle}\n            activeKey={activeTab2Key}\n            instance={instanceDetail}\n            externalServer={getExternalServer()}\n            onSelect={onSelectConnectionTab}\n            isKafkaPending={isKafkaPending}\n            getConnectToRoutePath={getConnectToRoutePath}\n            onConnectToRoute={onConnectToRoute}\n            tokenEndPointUrl={tokenEndPointUrl}\n          />\n        </Tab>\n      </Tabs>\n    );\n  };\n\n  const alertMessage = () => {\n    if (isKafkaPending) {\n      return (\n        <Alert\n          isInline\n          variant={AlertVariant.info}\n          title={t('kafka_instance_not_ready_inline_message')}\n          className=\"pf-u-mt-sm\"\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent()}\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      inlineAlertMessage={alertMessage()}\n      notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useState, useRef, useEffect, ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT, InstanceStatus } from '@app/utils';\nimport { CloudProvider } from '../../../../../openapi';\nimport './StreamsToolbar.css';\n\n/**\n * Todo: remove props isDisabledCreateButton, buttonTooltipContent and labelWithTooltip after summit\n */\nexport type StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  isDisabledCreateButton?: boolean;\n  buttonTooltipContent?: string | undefined;\n  labelWithTooltip?: ReactElement | undefined;\n  onCreate?: () => void;\n  refresh?: () => void;\n  cloudProviders?: Array<CloudProvider>;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  isDisabledCreateButton,\n  buttonTooltipContent,\n  labelWithTooltip,\n  onCreate,\n  refresh,\n  cloudProviders,\n}) => {\n  const { t } = useTranslation();\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n  const { showModal } = useRootModalContext();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((s) => s.value !== InstanceStatus.PREPARING && s.value !== InstanceStatus.DELETED)\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status' && filterValue?.filter(({ value }) => value === InstanceStatus.PROVISIONING);\n      const deprovisionStatus =\n        filterKey === 'status' && filterValue?.filter(({ value }) => value === InstanceStatus.DEPROVISION);\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (provisioningStatus?.length > 0 || deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <Select\n          variant={SelectVariant.single}\n          aria-label=\"Select filter\"\n          onToggle={onFilterToggle}\n          selections={filterSelected}\n          isOpen={isFilterExpanded}\n          onSelect={onChangeSelect}\n        >\n          {mainFilterOptions.map((option, index) => (\n            <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n              {option.label}\n            </SelectOption>\n          ))}\n        </Select>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"name\"\n                id=\"filterText\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                placeholder={t('filter_by_name_lower')}\n                onChange={onNameInputChange}\n                onKeyPress={onInputPress}\n                value={nameInputValue}\n                ref={nameInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                isDisabled={!isNameValid || isMaxFilter}\n                onClick={() => onFilter('name')}\n                aria-label=\"Search instances\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isNameValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isNameValid}\n                  content={tooltipContent('name')}\n                  reference={nameInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n          showToolbarItem={filterSelected === 'cloud_provider'}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <Select\n              id=\"cloud-provider-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select cloud provider\"\n              onToggle={onCloudProviderFilterToggle}\n              selections={getSelectionForFilter('cloud_provider')}\n              isOpen={isCloudProviderFilterExpanded}\n              onSelect={onCloudProviderFilterSelect}\n              placeholderText={t('filter_by_cloud_provider')}\n              className=\"select-custom-width\"\n            >\n              {cloudProviderFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={\n                    option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                  }\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('cloud-provider-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n          showToolbarItem={filterSelected === 'region'}\n        >\n          {filterSelected === 'region' && (\n            <Select\n              id=\"region-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select region\"\n              onToggle={onRegionFilterToggle}\n              selections={getSelectionForFilter('region')}\n              isOpen={isRegionFilterExpanded}\n              onSelect={onRegionFilterSelect}\n              placeholderText={t('filter_by_region')}\n              className=\"select-custom-width\"\n            >\n              {regionFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('region-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"owner\"\n                id=\"filterOwners\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                placeholder={t('filter_by_owner')}\n                validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                onChange={onOwnerInputChange}\n                onKeyPress={onInputPress}\n                value={ownerInputValue}\n                ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                isDisabled={!isOwnerValid || isMaxFilter}\n                variant={ButtonVariant.control}\n                onClick={() => onFilter('owner')}\n                aria-label=\"Search owners\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isOwnerValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isOwnerValid}\n                  content={tooltipContent('owner')}\n                  reference={ownerInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n          showToolbarItem={filterSelected === 'status'}\n        >\n          {filterSelected === 'status' && (\n            <Select\n              id=\"status-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select status\"\n              onToggle={onStatusFilterToggle}\n              selections={getSelectionForFilter('status')}\n              isOpen={isStatusFilterExpanded}\n              onSelect={onStatusFilterSelect}\n              placeholderText={t('filter_by_status')}\n              className=\"select-custom-width\"\n            >\n              {statusFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('status-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const handleCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_KAFKA_INSTANCE, {\n      onCreate,\n      cloudProviders,\n      refresh,\n    });\n  };\n\n  const createButton = () => {\n    if (isDisabledCreateButton) {\n      return (\n        <Tooltip content={buttonTooltipContent}>\n          <Button\n            variant=\"primary\"\n            onClick={handleCreateModal}\n            data-testid={'tableStreams-buttonCreateKafka'}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n    return (\n      <Button variant=\"primary\" onClick={handleCreateModal} data-testid={'tableStreams-buttonCreateKafka'}>\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: createButton(),\n    },\n    {\n      item: labelWithTooltip,\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length > 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: React.FunctionComponent<StatusColumnProps> = ({ status, instanceName }) => {\n  const { t } = useTranslation();\n\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size=\"md\" aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const statusIcon = getStatusIcon();\n\n  return (\n    <Flex>\n      {statusIcon && <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { useHistory, Link } from 'react-router-dom';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { AlertVariant, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport { InstanceStatus, isServiceApiError, getLoadingRowsCount, getFormattedDate, getSkeletonForRows } from '@app/utils';\nimport {\n  MASPagination,\n  MASTable,\n  MASEmptyState,\n  MASEmptyStateVariant,\n  useRootModalContext,\n  MODAL_TYPES,\n} from '@app/common';\nimport { DefaultApi, KafkaRequest } from '@openapi/api';\nimport './StatusColumn.css';\nimport { StreamsToolbar, StreamsToolbarProps } from './StreamsToolbar';\nimport { StatusColumn } from './StatusColumn';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = StreamsToolbarProps & {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToRoute: (data: KafkaRequest, routePath: string) => void;\n  getConnectToRoutePath: (data: KafkaRequest, routePath: string) => string;\n  mainToggle: boolean;\n  refresh: (arg0?: boolean) => void;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n  loggedInUser: string | undefined;\n  isMaxCapacityReached?: boolean | undefined;\n  setWaitingForDelete: (arg0: boolean) => void;\n  currentUserkafkas: KafkaRequest[] | undefined;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined,\n  isMaxCapacityReached?: boolean | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const additionalMessage = isMaxCapacityReached\n    ? ' You might not be able to create a new instance because all of them are currently provisioned by other users.'\n    : '';\n\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_complete', { instanceName }) + additionalMessage;\n  } else if (\n    status === InstanceStatus.ACCEPTED ||\n    status === InstanceStatus.PROVISIONING ||\n    status === InstanceStatus.PREPARING\n  ) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName }) + additionalMessage;\n  }\n  return config;\n};\n\nconst StreamsTableView: React.FunctionComponent<StreamsTableProps> = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n  isMaxCapacityReached,\n  buttonTooltipContent,\n  isDisabledCreateButton,\n  loggedInUser,\n  labelWithTooltip,\n  setWaitingForDelete,\n  currentUserkafkas,\n  cloudProviders,\n  onCreate,\n}) => {\n\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { t } = useTranslation();\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n  const { addAlert } = useAlert();\n\n  const { showModal, hideModal } = useRootModalContext();\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<string>();\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    if (currentUserkafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserkafkas.filter(\n        (k) => k.status === InstanceStatus.DEPROVISION || k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserkafkas?.findIndex((item) => item.name === k);\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-success'\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-failed'\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems, currentUserkafkas]);\n\n  const onSelectKebabDropdownOption = (event: React.ChangeEvent<HTMLSelectElement>, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION || originalData.status === InstanceStatus.DELETED) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <Link\n        to={() => getConnectToRoutePath(row as KafkaRequest, `kafkas/${row?.id}`)}\n        onClick={(e) => {\n          e.preventDefault();\n          onConnectToRoute(row as KafkaRequest, `kafkas/${row?.id}`);\n        }}\n        data-testid=\"tableStreams-linkKafka\"\n      >\n        {name}\n      </Link>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({ loadingCount, skeleton: <Skeleton />, length: tableColumns.length });\n    }\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION || status !== InstanceStatus.READY\n                ? name\n                : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: getFormattedDate(created_at, t('ago')),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status, name } = instance;\n    setSelectedInstance(instance);\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n        t,\n        status,\n        name,\n        isMaxCapacityReached\n      );\n\n      showModal(MODAL_TYPES.DELETE_KAFKA_INSTANCE, {\n        instanceStatus: status,\n        selectedItemData: instance,\n        title,\n        confirmButtonProps: {\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        },\n        textProps: {\n          description,\n        },\n      });\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n    const accessToken = await auth?.kas.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    hideModal();\n\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        setWaitingForDelete(true);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        isDisabledCreateButton={isDisabledCreateButton}\n        buttonTooltipContent={buttonTooltipContent}\n        labelWithTooltip={labelWithTooltip}\n        cloudProviders={cloudProviders}\n        onCreate={onCreate}\n        refresh={refresh}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n        loggedInUser={loggedInUser}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { QuickStartContext, QuickStartContextValues } from '@cloudmosaic/quickstarts';\n\nconst DrawerPanelContentInfo: React.FunctionComponent = () => {\n\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues = React.useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>{t('common.instance_information')}</Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.duration')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>48 hours</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.ingress_egress')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 2 MB/second each</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.storage')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 60 GB</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.partitions')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.client_connections')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.connection_rate')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 50 connections/second</TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>{t('common.message_size')}</TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          </GridItem>\n        </Grid>\n        <Button isSmall isInline variant={ButtonVariant.link} style={{ marginTop: '20px' }} onClick={() => (qsContext.setActiveQuickStart && qsContext.setActiveQuickStart(\"getting-started\"))}>\n          {t('common.quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { DrawerPanelContentInfo };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  AlertVariant,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n  Flex,\n  FlexItem,\n  Divider,\n  Tooltip,\n} from '@patternfly/react-core';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { MASCreateModal, useRootModalContext } from '@app/common';\nimport { ErrorCodes } from '@app/utils';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../../../openapi';\nimport { NewKafka, FormDataValidationState } from '../../../../models';\nimport './CreateInstance.css';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstance: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { store, hideModal } = useRootModalContext();\n  const { onCreate, refresh, cloudProviders } = store?.modalProps || {};\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n  const newKafka: NewKafka = new NewKafka();\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData((prevState) => ({ ...prevState, name: '', multi_az: true }));\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await auth?.kas.getToken();\n    const id = provider.id;\n\n    if (accessToken && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data?.items || [];\n          const enabledRegions = providerRegions?.filter((p: CloudProvider) => p.enabled);\n          //set default selected region if there is one region\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevState) => ({ ...prevState, region }));\n          }\n          //add empty provider on top in region list\n          enabledRegions.unshift(emptyProvider);\n          setCloudRegions(enabledRegions);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (cloudProviders.length > 0 && cloudProviders[0].name) {\n      setKafkaFormData((prevState) => ({ ...prevState, cloud_provider: cloudProviders[0].name }));\n      fetchCloudRegions(cloudProviders[0]);\n    }\n  }, [cloudProviders, fetchCloudRegions]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    setKafkaFormData((prevState) => ({ ...prevState, cloud_provider: cloudProvider.name || '' }));\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    //validate required field\n    if (!name?.trim()) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    //validate regex\n    else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n    //validate max length\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    //validate required field\n    if (!region.trim()) {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.kas.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        onCreate();\n        setCreationInProgress(true);\n\n        await apisService.createKafka(true, kafkaFormData).then(() => {\n          resetForm();\n          hideModal();\n          refresh();\n        });\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code, reason } = error?.response?.data || {};\n\n          if (code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n            setIsFormValid(false);\n            setNameValidated({\n              fieldState: 'error',\n              message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n            });\n          } else {\n            addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason, 'toastCreateKafka-failed');\n          }\n        }\n\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && cloudRegionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, cloudRegionValidated.fieldState]);\n\n  const onChangeValidateName = (name: string) => {\n    let isValid = true;\n    setKafkaFormData((prevState) => ({ ...prevState, name }));\n\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name?.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const onChangeCloudRegion = (region: string) => {\n    setKafkaFormData((prevState) => ({ ...prevState, region }));\n    if (region && cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData((prevState) => ({ ...prevState, multi_az: value === 'multi' }));\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={onChangeValidateName}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map((provider: CloudProvider) => {\n            const { name, display_name = '' } = provider;\n            return (\n              <Tile\n                key={`tile-${name}`}\n                title={display_name}\n                icon={getTileIcon(name)}\n                isSelected={cloud_provider === name}\n                onClick={() => onCloudProviderSelect(provider)}\n              />\n            );\n          })}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n          isRequired\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={onChangeCloudRegion}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(({ id, display_name = '' }: CloudRegion, index) => (\n              <FormSelectOption key={index} value={id} label={id ? t(id) : display_name} />\n            ))}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <Tooltip content={t('kafkaInstance.availabilty_zones_tooltip_message')}>\n              <ToggleGroupItem\n                text={t('single')}\n                value={'single'}\n                isDisabled\n                buttonId=\"single\"\n                isSelected={isMultiSelected}\n                onChange={onChangeAvailabilty}\n              />\n            </Tooltip>\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n              reference={() => document.getElementById('multi')}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      isModalOpen={true}\n      title={t('create_a_kafka_instance')}\n      handleModalToggle={handleModalToggle}\n      onCreate={onCreateInstance}\n      isFormValid={isFormValid}\n      primaryButtonTitle={t('create_instance')}\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateKafka-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateKafka-buttonCancel\"\n    >\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        title=\"Your preview instance will expire after 48 hours.\"\n        aria-live=\"polite\"\n        isInline\n      />\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>{createInstanceForm()}</FlexItem>\n        <Divider isVertical />\n        <FlexItem flex={{ default: 'flex_1' }} className=\"mk--create-instance-modal__sidebar--content\">\n          <DrawerPanelContentInfo />\n        </FlexItem>\n      </Flex>\n    </MASCreateModal>\n  );\n};\n\nexport { CreateInstance };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASDeleteModal, useRootModalContext } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport const DeleteInstance: React.FunctionComponent = () => {\n  const { store, hideModal } = useRootModalContext();\n  const props = { ...store?.modalProps, hideModal };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport const DeleteInstanceModal = (props) => {\n  const {\n    title,\n    confirmButtonProps,\n    cancelButtonProps,\n    textProps,\n    instanceStatus,\n    selectedItemData,\n    onClose,\n    hideModal,\n  } = props || {};\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n\n  const handleToggle = () => {\n    setInstanceNameInput('');\n    hideModal();\n    onClose && onClose();\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteKafka-buttonDelete',\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleToggle}\n      textProps={textProps}\n      selectedItemData={selectedItemData}\n      textInputProps={{\n        showTextInput: instanceStatus === InstanceStatus.READY,\n        label: t('instance_name_label', { name: selectedInstanceName }),\n        value: instanceNameInput,\n        onChange: handleInstanceName,\n        onKeyPress,\n        autoFocus: true,\n      }}\n    ></MASDeleteModal>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { useAuth, useConfig, useAlert } from '@bf2/ui-shared';\nimport { getDeleteInstanceModalConfig } from '@app/modules/OpenshiftStreams/components';\nimport { useRootModalContext } from '@app/common';\nimport { DefaultApi } from '@openapi/api';\nimport { DeleteInstanceModal } from './DeleteInstance';\nimport { isServiceApiError } from '@app/utils';\n\nconst DeleteInstanceConnected = () => {\n  const { addAlert } = useAlert();\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { store, hideModal } = useRootModalContext();\n  const { selectedItemData: instanceDetail, onConnectToRoute, setIsOpenDeleteInstanceModal } = store?.modalProps || {};\n  const { status, name, id } = instanceDetail || {};\n  const [isMaxCapacityReached, setIsMaxCapacityReached] = useState<boolean | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    status,\n    name,\n    isMaxCapacityReached\n  );\n\n  useEffect(() => {\n    fetchKafkaServiceStatus();\n  }, []);\n\n  const onCloseModal = () => {\n    setIsOpenDeleteInstanceModal && setIsOpenDeleteInstanceModal(false);\n  };\n\n  const onDeleteInstance = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && id) {\n      try {\n        setIsLoading(true);\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.deleteKafkaById(id, true).then((res) => {\n          setIsLoading(false);\n          onCloseModal();\n          //redirect on kafka list page\n          onConnectToRoute && onConnectToRoute({}, 'kafkas');\n        });\n      } catch (error) {\n        setIsLoading(false);\n        handleServerError(error);\n      }\n    }\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const fetchKafkaServiceStatus = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.serviceStatus().then((res) => {\n          const maxCapacityReached = res?.data?.kafkas?.max_capacity_reached;\n          setIsMaxCapacityReached(maxCapacityReached);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const props = {\n    ...store?.modalProps,\n    hideModal,\n    title,\n    confirmButtonProps: {\n      onClick: onDeleteInstance,\n      label: confirmActionLabel,\n      isLoading,\n    },\n    textProps: {\n      description,\n    },\n    onClose: onCloseModal,\n    instanceStatus: status,\n  };\n\n  return <DeleteInstanceModal {...props} />;\n};\n\nexport { DeleteInstanceConnected };\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Form, FormAlert, FormGroup, TextInput, TextArea, AlertVariant } from '@patternfly/react-core';\nimport { DefaultApi } from '@openapi/api';\nimport { NewServiceAccount, FormDataValidationState } from '../../../../models';\nimport { MASCreateModal, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError, MAX_SERVICE_ACCOUNT_NAME_LENGTH, MAX_SERVICE_ACCOUNT_DESC_LENGTH } from '@app/utils';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nconst CreateServiceAccount: React.FunctionComponent = () => {\n  const newServiceAccount: NewServiceAccount = new NewServiceAccount();\n  const { store, showModal, hideModal } = useRootModalContext();\n  const { fetchServiceAccounts } = store?.modalProps || {};\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [descriptionValidated, setDescriptionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [serviceAccountFormData, setServiceAccountFormData] = useState<NewServiceAccount>(newServiceAccount);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setNameValidated({ fieldState: 'default' });\n    setDescriptionValidated({ fieldState: 'default' });\n    setServiceAccountFormData(newServiceAccount);\n    setIsFormValid(true);\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && descriptionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, descriptionValidated.fieldState]);\n\n  const handleTextInputName = (name: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, name });\n    let isValid = true;\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name && name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const handleTextInputDescription = (description: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, description });\n    let isValid = true;\n    if (description && !/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n    }\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_description_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    } else if (isValid && descriptionValidated.fieldState === 'error') {\n      setDescriptionValidated({\n        fieldState: 'default',\n        message: '',\n      });\n    } else if (!isValid) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, description } = serviceAccountFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.input_filed_invalid_helper_text'),\n      });\n    } else if (!/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n\n    if (name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    }\n\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    }\n\n    return isValid;\n  };\n\n  const createServiceAccount = async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.kas.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setCreationInProgress(true);\n        await apisService.createServiceAccount(serviceAccountFormData).then((res) => {\n          const credential = res?.data;\n          //close current modal i.e. create service account\n          hideModal();\n          //open generate credential modal\n          showModal(MODAL_TYPES.GENERATE_CREDENTIALS, { credential });\n          resetForm();\n          addAlert(t('serviceAccount.service_account_creation_success_message'), AlertVariant.success);\n          fetchServiceAccounts && fetchServiceAccounts();\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    resetForm();\n    hideModal();\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    createServiceAccount();\n  };\n\n  const createForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, description } = serviceAccountFormData;\n    const { message: descMessage, fieldState: descFieldState } = descriptionValidated;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"text-input-name\"\n          helperTextInvalid={message}\n          validated={fieldState}\n          helperText={t('common.input_filed_invalid_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-name\"\n            name=\"text-input-name\"\n            value={name}\n            onChange={handleTextInputName}\n            validated={fieldState}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Description\"\n          fieldId=\"text-input-description\"\n          helperTextInvalid={descMessage}\n          validated={descFieldState}\n          helperText={t('common.input_text_area_invalid_helper_text')}\n        >\n          <TextArea\n            id=\"text-input-description\"\n            name=\"text-input-description\"\n            value={description}\n            onChange={handleTextInputDescription}\n            validated={descFieldState}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      id=\"modalCreateSAccount\"\n      isModalOpen={true}\n      title={t('serviceAccount.create_a_service_account')}\n      handleModalToggle={handleCreateModal}\n      onCreate={createServiceAccount}\n      isFormValid={isFormValid}\n      primaryButtonTitle=\"Create\"\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateServiceAccount-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateServiceAccount-buttonCancel\"\n    >\n      {createForm()}\n    </MASCreateModal>\n  );\n};\n\nexport { CreateServiceAccount };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { MASDeleteModal, useRootModalContext } from '@app/common';\nimport { isServiceApiError } from '@app/utils';\nimport { DefaultApi, ServiceAccountListItem } from '@openapi/api';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nconst DeleteServiceAccount: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n  const { store, hideModal } = useRootModalContext();\n  const { fetchServiceAccounts, serviceAccountToDelete } = store?.modalProps || {};\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const deleteServiceAccount = async (serviceAccount: ServiceAccountListItem | undefined) => {\n    const serviceAccountId = serviceAccount?.id;\n    if (serviceAccountId === undefined) {\n      throw new Error('service account id not defined');\n    }\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath,\n      });\n      setIsLoading(true);\n\n      try {\n        await apisService.deleteServiceAccount(serviceAccountId).then(() => {\n          handleModalToggle();\n          setIsLoading(false);\n\n          addAlert(\n            t('serviceAccount.service_account_successfully_deleted', { name: serviceAccount?.name }),\n            AlertVariant.success\n          );\n          fetchServiceAccounts();\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        handleModalToggle();\n        setIsLoading(false);\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      handleModalToggle={handleModalToggle}\n      title={t('serviceAccount.delete_service_account') + '?'}\n      confirmButtonProps={{\n        onClick: () => deleteServiceAccount(serviceAccountToDelete),\n        label: 'Delete',\n        isLoading,\n      }}\n    >\n      <p><b>{serviceAccountToDelete?.name}</b> {t('serviceAccount.will_be_deleted')}</p>\n    </MASDeleteModal>\n  );\n};\n\nexport { DeleteServiceAccount };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal, ModalVariant, AlertVariant } from '@patternfly/react-core';\nimport { useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { isServiceApiError } from '@app/utils';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport { DefaultApi } from '@openapi/api';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nconst ResetServiceAccount: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { addAlert } = useAlert();\n  const { store, showModal, hideModal } = useRootModalContext();\n  const { serviceAccountToReset } = store?.modalProps || {};\n\n  const [isModalLoading, setIsModalLoading] = useState(false);\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n  };\n\n  const resetServiceAccount = async (serviceAccount) => {\n    const serviceAccountId = serviceAccount?.id;\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        setIsModalLoading(true);\n        await apisService.resetServiceAccountCreds(serviceAccountId).then((response) => {\n          const credential = response?.data;\n          hideModal(); // Close first modal\n          setIsModalLoading(false);\n          showModal(MODAL_TYPES.GENERATE_CREDENTIALS, {\n            credential,\n            title: t('serviceAccount.reset_service_account_credentials'),\n          });\n        });\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const serviceAccountId = serviceAccountToReset?.name;\n  const clientID = serviceAccountToReset?.clientID;\n\n  return (\n    <Modal\n      id=\"reset-service-account-modal\"\n      variant={ModalVariant.medium}\n      title={`${t('serviceAccount.reset_service_account_credentials')}?`}\n      isOpen={true}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={() => resetServiceAccount(serviceAccountToReset)}\n          spinnerAriaValueText={t('common.submitting_request')}\n          isLoading={isModalLoading}\n        >\n          {t('serviceAccount.reset')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <span\n        dangerouslySetInnerHTML={{\n          __html: t('serviceAccount.client_secret_will_be_reset', { serviceAccountId, clientID }),\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport { ResetServiceAccount };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = \"KAFKAS-MGMT-4\",\n  DUPLICATE_INSTANCE_NAME = \"KAFKAS-MGMT-36\"\n}\n\nexport {\n  ErrorCodes,\n  isServiceApiError\n}\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface InstantQuery\n */\nexport interface InstantQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof InstantQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryList\n */\nexport interface MetricsInstantQueryList extends MetricsInstantQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryListAllOf\n */\nexport interface MetricsInstantQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryList\n */\nexport interface MetricsRangeQueryList extends MetricsRangeQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryListAllOf\n */\nexport interface MetricsRangeQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface RangeQuery\n */\nexport interface RangeQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof RangeQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof RangeQuery\n     */\n    values?: Array<Values>;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: string;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * Schema for the service status response body\n * @export\n * @interface ServiceStatus\n */\nexport interface ServiceStatus {\n    /**\n     * \n     * @type {ServiceStatusKafkas}\n     * @memberof ServiceStatus\n     */\n    kafkas?: ServiceStatusKafkas;\n}\n/**\n * The kafka resource api status\n * @export\n * @interface ServiceStatusKafkas\n */\nexport interface ServiceStatusKafkas {\n    /**\n     * Indicates whether we have reached kafka maximum capacity\n     * @type {boolean}\n     * @memberof ServiceStatusKafkas\n     */\n    max_capacity_reached: boolean;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface VersionMetadata\n */\nexport interface VersionMetadata {\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    href?: string;\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadata\n     */\n    collections?: Array<ObjectReference>;\n}\n/**\n * \n * @export\n * @interface VersionMetadataAllOf\n */\nexport interface VersionMetadataAllOf {\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadataAllOf\n     */\n    collections?: Array<ObjectReference>;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByInstantQuery.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getServiceAccountById.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/status`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByInstantQuery(id, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getServiceAccountById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async serviceStatus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceStatus>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).serviceStatus(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async versionMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionMetadata>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).versionMetadata(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {\n            return DefaultApiFp(configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {\n            return DefaultApiFp(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus(options?: any): AxiosPromise<ServiceStatus> {\n            return DefaultApiFp(configuration).serviceStatus(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata(options?: any): AxiosPromise<VersionMetadata> {\n            return DefaultApiFp(configuration).versionMetadata(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    serviceStatus(options?: any): AxiosPromise<ServiceStatus>;\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    versionMetadata(options?: any): AxiosPromise<VersionMetadata>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getServiceAccountById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public serviceStatus(options?: any) {\n        return DefaultApiFp(this.configuration).serviceStatus(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public versionMetadata(options?: any) {\n        return DefaultApiFp(this.configuration).versionMetadata(options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"],"sourceRoot":""}