{"version":3,"file":"5964.6a3aa92a.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/Pagination.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/StreamsTableConnected.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StatusColumn/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/hooks.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/NameFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/RegionFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/FilterSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StatusFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsToolbar/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/Unauthorized/Unauthorized.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KafkaEmptyState/KafkaEmptyState.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KasLayout/KasLayout.tsx"],"sourcesContent":["// A map of modal components to their lazy loaded implementations\nimport { FunctionComponent, LazyExoticComponent, lazy } from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateInstanceProps>>,\n      variant: \"medium\",\n      title: t(\"create_a_kafka_instance\"),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteInstanceProps>>,\n      variant: \"small\",\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<TransferOwnershipProps>>,\n      variant: \"medium\",\n      title: t(\"change_owner\"),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateServiceAccountProps>>,\n      variant: \"medium\",\n      title: t(\"serviceAccount.create_a_service_account\"),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteServiceAccountProps>>,\n      title: t(\"serviceAccount.delete_service_account\") + \"?\",\n      variant: \"small\",\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials\"\n          )\n      ) as LazyExoticComponent<\n        FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t(\"serviceAccount.reset_service_account_credentials\")}?`,\n      variant: \"medium\",\n    },\n  };\n};\n\nexport const KasModalLoader: FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","export enum InstanceDrawerTab {\n  DETAILS = \"details\",\n  CONNECTION = \"connection\",\n}\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { MASPagination } from \"@app/common\";\nimport { PaginationVariant } from \"@patternfly/react-core\";\n\nexport type PaginationProps = {\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nexport const Pagination: FunctionComponent<PaginationProps> = ({\n  total,\n  page,\n  perPage,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  if (total > 0) {\n    return (\n      <MASPagination\n        widgetId=\"pagination-cloudProviderOptions-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        titles={{\n          paginationTitle: t(\"full_pagination\"),\n          perPageSuffix: t(\"per_page_suffix\"),\n          toFirstPage: t(\"to_first_page\"),\n          toPreviousPage: t(\"to_previous_page\"),\n          toLastPage: t(\"to_last_page\"),\n          toNextPage: t(\"to_next_page\"),\n          optionsToggle: t(\"options_toggle\"),\n          currPage: t(\"curr_page\"),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\nimport { useTranslation } from \"react-i18next\";\n\nexport type NoResultsFoundProps = {\n  count: number;\n  dataLoaded: boolean;\n};\nexport const NoResultsFound: FunctionComponent<NoResultsFoundProps> = ({\n  count,\n  dataLoaded,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  if (count < 1 && dataLoaded) {\n    return (\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t(\"no_results_found\"),\n        }}\n        emptyStateBodyProps={{\n          body: t(\"adjust_your_filters_and_try_again\"),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent, MouseEvent, useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  sortable,\n  SortByDirection,\n} from \"@patternfly/react-table\";\nimport { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n} from \"@app/utils\";\nimport { Skeleton } from \"@patternfly/react-core\";\nimport { Link } from \"react-router-dom\";\nimport {\n  StatusColumn,\n  StreamsToolbar,\n  StreamsToolbarProps,\n} from \"@app/modules/OpenshiftStreams/components\";\nimport { MASTable, MASTableProps } from \"@app/common\";\nimport { Pagination } from \"@app/modules/OpenshiftStreams/components/StreamsTable/Pagination\";\nimport { NoResultsFound } from \"@app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound\";\nimport { FormatDate } from \"@rhoas/app-services-ui-components\";\nimport { add } from \"date-fns\";\n\nexport type StreamsTableProps = Pick<\n  StreamsToolbarProps,\n  | \"page\"\n  | \"perPage\"\n  | \"total\"\n  | \"filterSelected\"\n  | \"setFilterSelected\"\n  | \"filteredValue\"\n  | \"setFilteredValue\"\n  | \"onCreate\"\n  | \"refresh\"\n  | \"handleCreateInstanceModal\"\n> & {\n  onDeleteInstance: (instance: KafkaRequest) => Promise<void>;\n  onChangeOwner: (instance: KafkaRequest) => Promise<void>;\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  loggedInUser: string | undefined;\n  expectedTotal: number;\n  kafkaDataLoaded: boolean;\n  kafkaInstanceItems?: KafkaRequest[];\n  isOrgAdmin?: boolean;\n  setOrderBy: (order: string) => void;\n  orderBy: string;\n  selectedInstanceName: string | undefined;\n};\nexport const StreamsTable: FunctionComponent<StreamsTableProps> = ({\n  onDeleteInstance,\n  onChangeOwner,\n  onViewInstance,\n  onViewConnection,\n  loggedInUser,\n  page,\n  perPage,\n  total,\n  expectedTotal,\n  kafkaDataLoaded,\n  kafkaInstanceItems,\n  isOrgAdmin,\n  setOrderBy,\n  orderBy,\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  onCreate,\n  refresh,\n  handleCreateInstanceModal,\n  selectedInstanceName,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const cells = [\n    { title: t(\"name\"), transforms: [sortable] },\n    { title: t(\"cloud_provider\"), transforms: [sortable] },\n    { title: t(\"region\"), transforms: [sortable] },\n    { title: t(\"owner\"), transforms: [sortable] },\n    { title: t(\"status\"), transforms: [sortable] },\n    { title: t(\"time_created\"), transforms: [sortable] },\n  ];\n\n  const sortBy = useMemo((): ISortBy | undefined => {\n    const getIndexForSortParameter = (parameter: string) => {\n      switch (parameter.toLowerCase()) {\n        case \"name\":\n          return 0;\n        case \"cloud_provider\":\n          return 1;\n        case \"region\":\n          return 2;\n        case \"owner\":\n          return 3;\n        case \"status\":\n          return 4;\n        case \"created_at\":\n          return 5;\n        default:\n          return undefined;\n      }\n    };\n\n    const sort: string[] = orderBy?.split(\" \") || [];\n    if (sort.length > 1) {\n      return {\n        index: getIndexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  }, [orderBy]);\n\n  const rows = useMemo(() => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: cells.length,\n      });\n    }\n    kafkaInstanceItems?.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link to={`kafkas/${row?.id}/dashboard`}>{name}</Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t(\"ago\"))}\n                <br />\n                {(instance_type === InstanceType?.developer ||\n                  instance_type === InstanceType?.eval) && (\n                  <Trans\n                    i18nKey=\"common.expires_in\"\n                    ns={[\"kasTemporaryFixMe\"]}\n                    components={{\n                      time: (\n                        <FormatDate\n                          date={add(new Date(created_at), { days: 2 })}\n                          format=\"expiration\"\n                        />\n                      ),\n                    }}\n                  />\n                )}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  }, [\n    page,\n    perPage,\n    expectedTotal,\n    kafkaDataLoaded,\n    kafkaInstanceItems,\n    cells.length,\n    t,\n  ]);\n\n  const actionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: \"auto\",\n          cursor: \"default\",\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t(\"view_details\"),\n        id: \"view-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionDetails\",\n        onClick: (event: MouseEvent) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"view-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_view_kafka\"),\n        },\n      } as IAction,\n      {\n        title: t(\"view_connection_information\"),\n        id: \"connect-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionConnection\",\n        onClick: (event: MouseEvent) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"connect-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_connect_kafka\"),\n        },\n      } as IAction,\n      {\n        title: t(\"change_owner\"),\n        id: \"change-owner\",\n        [\"data-testid\"]: \"tableStreams-actionChangeOwner\",\n        onClick: (event: MouseEvent) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, \"change-owner\"),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_change_owner\"),\n        },\n      } as IAction,\n      {\n        title: t(\"delete_instance\"),\n        id: \"delete-instanceDrawerInstance\",\n        [\"data-testid\"]: \"tableStreams-actionDelete\",\n        onClick: (event: MouseEvent) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            \"delete-instanceDrawerInstance\"\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: \"left\",\n          content: t(\"no_permission_to_delete_kafka\"),\n        },\n      } as IAction,\n    ];\n    return resolver;\n  };\n\n  const onSelectKebabDropdownOption = (\n    event: MouseEvent,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === \"view-instanceDrawerInstance\") {\n      onViewInstance(originalData);\n      //set selected row for view instanceDrawerInstance and connect instanceDrawerInstance\n    } else if (selectedOption === \"connect-instanceDrawerInstance\") {\n      onViewConnection(originalData);\n    } else if (selectedOption === \"change-owner\") {\n      onChangeOwner(originalData);\n    } else if (selectedOption === \"delete-instanceDrawerInstance\") {\n      deleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n\n    const previousNode =\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const deleteInstance = async (kafka: KafkaRequest) => {\n    await onDeleteInstance(kafka);\n  };\n\n  const onSort: OnSort = (_event, index, direction, extraData) => {\n    const getParameterForSortIndex = (index: number) => {\n      switch (index) {\n        case 0:\n          return \"name\";\n        case 1:\n          return \"cloud_provider\";\n        case 2:\n          return \"region\";\n        case 3:\n          return \"owner\";\n        case 4:\n          return \"status\";\n        case 5:\n          return \"created_at\";\n        default:\n          return \"\";\n      }\n    };\n\n    let myDirection = direction;\n    if (sortBy?.index !== index && extraData.property === \"time-created\") {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = SortByDirection.desc;\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const onRowClick: MASTableProps[\"onRowClick\"] = (event, _, row) => {\n    if (event.target instanceof HTMLElement) {\n      const tagName = event.target.tagName.toLowerCase();\n      // Open instance drawer on row click except kebab button click or opening the kafka instance\n      if (tagName === \"button\" || tagName === \"a\") {\n        return;\n      }\n    }\n    onViewInstance(row?.originalData);\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable\n        tableProps={{\n          cells,\n          rows,\n          \"aria-label\": t(\"cluster_instance_list\"),\n          actionResolver,\n          onSort,\n          sortBy,\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={selectedInstanceName}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n        loggedInUser={loggedInUser}\n      />\n      <NoResultsFound\n        count={kafkaInstanceItems?.length || 0}\n        dataLoaded={kafkaDataLoaded}\n      />\n      <Pagination total={total} page={page} perPage={perPage} />\n    </>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\nexport function useTimeout(callback: () => void, delay: number): void {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import { SetStateAction, Dispatch, useEffect, useState } from \"react\";\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    // Opera 12.10 and Firefox 18 and later support\n    return \"visibilitychange\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msvisibilitychange\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitvisibilitychange\";\n  }\n  return \"\";\n}\nexport function getBrowserDocumentHiddenProp(): keyof XDocument | undefined {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    return \"hidden\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msHidden\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitHidden\";\n  }\n  return undefined;\n}\nexport function getIsDocumentHidden(): boolean {\n  const hiddenKey = getBrowserDocumentHiddenProp();\n  return hiddenKey !== undefined && !(document as XDocument)[hiddenKey];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: Dispatch<SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlert, useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n} from \"@rhoas/kafka-management-sdk\";\nimport { usePageVisibility } from \"@app/hooks/usePageVisibility\";\nimport { InstanceStatus, MAX_POLL_INTERVAL } from \"@app/utils\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useTimeout } from \"@app/hooks/useTimeout\";\n\nexport const KafkaStatusAlerts: FunctionComponent = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { addAlert } = useAlert() || {};\n  const auth = useAuth();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const { isVisible } = usePageVisibility();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  const fetchCurrentUserKafkas = useCallback(async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await apisService.getKafkas(\"\", \"\", \"\", filter).then((res) => {\n        const kafkaInstances = res.data;\n        setCurrentUserKafkas(kafkaInstances.items);\n      });\n    }\n  }, [auth, basePath, isVisible, loggedInUser]);\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [fetchCurrentUserKafkas, loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  const addAlertAfterSuccessDeletion = useCallback(() => {\n    const removeKafkaFromDeleted = (name: string) => {\n      const index = deletedKafkas.findIndex((k) => k === name);\n      if (index > -1) {\n        const prev = Object.assign([], deletedKafkas);\n        prev.splice(index, 1);\n        setDeletedKafkas(prev);\n      }\n    };\n\n    if (currentUserKafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserKafkas.filter(\n        (k) =>\n          k.status === InstanceStatus.DEPROVISION ||\n          k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || \"\");\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [\n        ...deletedKafkas,\n        ...notPresentKafkas,\n      ];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserKafkas?.findIndex(\n          (item) => item.name === k\n        );\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t(\"kafka_successfully_deleted\", { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  }, [addAlert, currentUserKafkas, deletedKafkas, t]);\n\n  const addAlertAfterSuccessCreation = useCallback(() => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign(\n        [],\n        currentUserKafkas\n      ).filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.READY ||\n          item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t(\"kafka_successfully_created\"),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t(\"kafka_success_message\", {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: \"toastCreateKafka-success\",\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t(\"kafka_not_created\"),\n                variant: AlertVariant.danger,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t(\"kafka_failed_message\", {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: \"toastCreateKafka-failed\",\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      currentUserKafkas?.filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.PROVISIONING ||\n          item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  }, [addAlert, currentUserKafkas, items, t]);\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [\n    addAlertAfterSuccessCreation,\n    addAlertAfterSuccessDeletion,\n    currentUserKafkas,\n  ]);\n\n  return <></>;\n};\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  VoidFunctionComponent,\n} from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Card,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport { usePagination } from \"@app/common\";\nimport { useTimeout } from \"@app/hooks/useTimeout\";\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from \"@app/utils\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from \"@rhoas/kafka-management-sdk\";\nimport \"./StreamsTableConnected.css\";\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from \"@rhoas/app-services-ui-shared\";\nimport { FederatedProps, useFederated } from \"@app/contexts\";\nimport \"@app/modules/styles.css\";\nimport {\n  FilterType,\n  KafkaEmptyState,\n  Unauthorized,\n} from \"@app/modules/OpenshiftStreams/components\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\nimport { StreamsTable } from \"@app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable\";\nimport { KafkaStatusAlerts } from \"@app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts\";\nimport { useInstanceDrawer } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\n\nexport type StreamsTableProps = Pick<FederatedProps, \"preCreateInstance\">;\n\nexport const StreamsTableConnected: VoidFunctionComponent<\n  StreamsTableProps\n> = ({ preCreateInstance }: StreamsTableProps) => {\n  const { shouldOpenCreateModal } = useFederated() || {};\n\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const location = useLocation();\n  const searchParams = useMemo(\n    () => new URLSearchParams(location.search),\n    [location.search]\n  );\n  const { page = 1, perPage = 10, setPage } = usePagination() || {};\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { addAlert } = useAlert() || {};\n  const { showModal: showCreateModal } =\n    useModal<ModalType.KasCreateInstance>();\n  const { showModal: showTransferOwnershipModal } =\n    useModal<ModalType.KasTransferOwnership>();\n  const { hideModal: hideDeleteModal, showModal: showDeleteModal } =\n    useModal<ModalType.KasDeleteInstance>();\n\n  const history = useHistory();\n\n  const {\n    drawerInstance,\n    closeDrawer,\n    openDrawer,\n    setDrawerActiveTab,\n    setDrawerInstance,\n  } = useInstanceDrawer();\n\n  // Kafka list state\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<\n    KafkaRequestList | undefined\n  >();\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [expectedTotal, setExpectedTotal] = useState<number>(3);\n\n  // filter and sort state\n  const [orderBy, setOrderBy] = useState<string>(\"created_at desc\");\n  const [filterSelected, setFilterSelected] = useState(\"name\");\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n  // user state\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  // States to sort out\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n\n  const [shouldRefresh, setShouldRefresh] = useState(false);\n\n  const handleCreateInstanceModal = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n\n    if (open) {\n      openCreateModal();\n    }\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setDrawerInstance(instance.id!);\n    setDrawerActiveTab(InstanceDrawerTab.DETAILS);\n    openDrawer();\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setDrawerInstance(instance.id!);\n    setDrawerActiveTab(InstanceDrawerTab.CONNECTION);\n    openDrawer();\n  };\n\n  const getFilterQuery = useCallback(() => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        let filterQuery = \"(\";\n        filterQuery += filterValue\n          .map((val) => {\n            const value = val.value.trim();\n            if (value === InstanceStatus.PROVISIONING) {\n              return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n            }\n            if (value === InstanceStatus.DEPROVISION) {\n              return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n            }\n            return value !== \"\"\n              ? `${filterKey} ${\n                  val.isExact === true ? `= ${value}` : `like %${value}%`\n                }`\n              : \"\";\n          })\n          .join(\" or \");\n        filterQuery += \")\";\n\n        filters.push(filterQuery);\n      }\n    });\n    return filters.join(\" and \");\n  }, [filteredValue]);\n\n  const handleServerError = (error: unknown) => {\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = useCallback(\n    async (isPolling = false) => {\n      const filterQuery = getFilterQuery();\n      const accessToken = await auth?.kas.getToken();\n\n      if (accessToken) {\n        try {\n          const apisService = new DefaultApi(\n            new Configuration({\n              accessToken,\n              basePath,\n            })\n          );\n\n          if (!isPolling) {\n            setKafkaDataLoaded(false);\n          }\n          setShouldRefresh(false);\n\n          await apisService\n            .getKafkas(\n              page?.toString(),\n              perPage?.toString(),\n              orderBy,\n              filterQuery\n            )\n            .then((res) => {\n              const kafkaInstances = res.data;\n              const kafkaItems = kafkaInstances?.items || [];\n              setKafkaInstancesList(kafkaInstances);\n\n              if (\n                kafkaInstancesList?.total !== undefined &&\n                kafkaInstancesList.total > expectedTotal\n              ) {\n                setExpectedTotal(kafkaInstancesList.total);\n              }\n\n              if (\n                waitingForDelete &&\n                filteredValue.length < 1 &&\n                kafkaItems?.length == 0\n              ) {\n                setWaitingForDelete(false);\n              }\n            })\n            .finally(() => setKafkaDataLoaded(true));\n        } catch (error) {\n          handleServerError(error);\n        }\n      }\n    },\n    [\n      auth,\n      basePath,\n      expectedTotal,\n      filteredValue,\n      getFilterQuery,\n      kafkaInstancesList,\n      orderBy,\n      page,\n      perPage,\n      waitingForDelete,\n    ]\n  );\n\n  const onSearch = useCallback(\n    (filter: FilterType[]) => {\n      setFilteredValue(filter);\n      setPage && setPage(1);\n    },\n    [setPage]\n  );\n\n  const refreshKafkasAfterAction = useCallback(() => {\n    setShouldRefresh(true);\n  }, []);\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = useCallback(() => {\n    setExpectedTotal(\n      (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) + 1\n    );\n  }, [kafkaInstancesList]);\n\n  const openCreateModal = useCallback(() => {\n    showCreateModal(ModalType.KasCreateInstance, {\n      onCreate: () => {\n        onCreate();\n        refreshKafkasAfterAction();\n      },\n    });\n  }, [onCreate, refreshKafkasAfterAction, showCreateModal]);\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setExpectedTotal(\n      (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) - 1\n    );\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onChangeOwner = async (instance: KafkaRequest) => {\n    showTransferOwnershipModal(ModalType.KasTransferOwnership, {\n      kafka: instance,\n      refreshKafkas: refreshKafkasAfterAction,\n    });\n  };\n\n  const onDeleteInstance = async (kafka: KafkaRequest) => {\n    const doDelete = async () => {\n      await deleteInstance(kafka);\n      onDelete();\n    };\n    if (kafka.status === InstanceStatus.FAILED) {\n      await doDelete();\n    } else {\n      showDeleteModal(ModalType.KasDeleteInstance, {\n        onDelete: doDelete,\n        kafka,\n      });\n    }\n  };\n\n  const deleteInstance = async (instance: KafkaRequest) => {\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instanceDrawerInstance api call\n     */\n    if (instance.id === undefined) {\n      throw new Error(\"kafka instanceDrawerInstance id is not set\");\n    }\n    const accessToken = await auth?.kas.getToken();\n    const apisService = new DefaultApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    onDelete();\n    hideDeleteModal();\n\n    try {\n      await apisService.deleteKafkaById(instance.id, true).then(() => {\n        setWaitingForDelete(true);\n        refreshKafkasAfterAction();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert &&\n        addAlert({\n          title: t(\"common.something_went_wrong\"),\n          variant: AlertVariant.danger,\n          description: reason,\n        });\n    }\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (\n        kafkaInstancesList?.items !== undefined &&\n        kafkaInstancesList.size === 0\n      ) {\n        setSearchParam(\"page\", (page - 1).toString());\n        setSearchParam(\"perPage\", perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n  }, [\n    history,\n    kafkaInstancesList,\n    page,\n    perPage,\n    searchParams,\n    setSearchParam,\n  ]);\n\n  const mounted = useRef(false);\n\n  useEffect(() => {\n    if (mounted.current === false || shouldRefresh) {\n      mounted.current = true;\n      fetchKafkas();\n    }\n  }, [fetchKafkas, shouldRefresh]);\n\n  // refresh the data when interacting with the UI in a way that will make the displayed data change\n  useEffect(() => {\n    refreshKafkasAfterAction();\n  }, [\n    page,\n    perPage,\n    orderBy,\n    searchParams,\n    refreshKafkasAfterAction,\n    filteredValue,\n  ]);\n\n  useEffect(() => {\n    // close the drawer if the selected instance isn't visible in the list\n    if (\n      kafkaInstancesList !== undefined &&\n      kafkaInstancesList?.size > 0 &&\n      drawerInstance\n    ) {\n      const selectedKafkaItem = kafkaInstancesList.items?.find(\n        (kafka) => kafka?.id === drawerInstance?.id\n      );\n      if (selectedKafkaItem === undefined) {\n        closeDrawer();\n      }\n    }\n  }, [\n    closeDrawer,\n    drawerInstance,\n    drawerInstance?.id,\n    kafkaInstancesList,\n    openDrawer,\n  ]);\n\n  useEffect(() => {\n    if (kafkaInstancesList?.size === 0) {\n      closeDrawer();\n    }\n  }, [kafkaInstancesList, closeDrawer]);\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n    auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen =\n        shouldOpenCreateModal && (await shouldOpenCreateModal());\n      if (shouldOpen) {\n        openCreateModal();\n      }\n    };\n    openModal();\n  }, [openCreateModal, shouldOpenCreateModal]);\n\n  useTimeout(() => fetchKafkas(true), MAX_POLL_INTERVAL);\n\n  if (isUserUnauthorized) {\n    return <Unauthorized />;\n  }\n\n  const isDisplayKafkaEmptyState =\n    kafkaDataLoaded &&\n    filteredValue.length < 1 &&\n    kafkaInstancesList !== undefined &&\n    kafkaInstancesList?.total < 1;\n\n  if (isDisplayKafkaEmptyState) {\n    return (\n      <KafkaEmptyState handleCreateInstanceModal={handleCreateInstanceModal} />\n    );\n  } else if (isDisplayKafkaEmptyState !== undefined) {\n    return (\n      <PageSection\n        className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n        variant={PageSectionVariants.default}\n        padding={{ default: \"noPadding\" }}\n      >\n        <Card ouiaId=\"card-controlplane\">\n          <StreamsTable\n            onDeleteInstance={onDeleteInstance}\n            onViewInstance={onViewInstance}\n            onViewConnection={onViewConnection}\n            onChangeOwner={onChangeOwner}\n            loggedInUser={loggedInUser}\n            page={page}\n            perPage={perPage}\n            total={kafkaInstancesList?.total || 0}\n            isOrgAdmin={isOrgAdmin}\n            expectedTotal={expectedTotal}\n            kafkaDataLoaded={kafkaDataLoaded}\n            kafkaInstanceItems={kafkaInstancesList?.items}\n            setOrderBy={setOrderBy}\n            setFilterSelected={setFilterSelected}\n            setFilteredValue={onSearch}\n            filteredValue={filteredValue}\n            handleCreateInstanceModal={handleCreateInstanceModal}\n            orderBy={orderBy}\n            filterSelected={filterSelected}\n            onCreate={onCreate}\n            refresh={refreshKafkasAfterAction}\n            selectedInstanceName={drawerInstance?.name}\n          />\n        </Card>\n        <KafkaStatusAlerts />\n      </PageSection>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, FlexItem, Spinner } from \"@patternfly/react-core\";\nimport CheckCircleIcon from \"@patternfly/react-icons/dist/js/icons/check-circle-icon\";\nimport PendingIcon from \"@patternfly/react-icons/dist/js/icons/pending-icon\";\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/js/icons/exclamation-circle-icon\";\nimport { statusOptions } from \"@app/utils/utils\";\nimport \"./StatusColumn.css\";\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const Status: FunctionComponent = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t(\"creation_pending\");\n    }\n  };\n\n  const StatusIcon: FunctionComponent = () => {\n    const statusIcon = getStatusIcon();\n    if (statusIcon) {\n      return <FlexItem spacer={{ default: \"spacerSm\" }}>{statusIcon}</FlexItem>;\n    }\n    return <></>;\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size=\"md\"\n            aria-label={instanceName}\n            aria-valuetext=\"Creation in progress\"\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <StatusIcon />\n      <FlexItem>\n        <Status />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { useTranslation } from \"react-i18next\";\nimport { ReactElement } from \"react\";\n\nexport const useTooltipContent = (\n  isMaxFilter: boolean,\n  fieldName?: string\n): ReactElement => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  if (isMaxFilter) {\n    return <div>{t(\"max_filter_message\")}</div>;\n  }\n  if (fieldName === \"owner\") {\n    return <div>{t(\"owner_field_invalid_message\", { name: fieldName })}</div>;\n  }\n  return <div>{t(\"input_field_invalid_message\", { name: fieldName })}</div>;\n};\n","import { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { cloudProviderOptions, KeyValueOptions } from \"@app/utils\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\n\nexport type CloudProviderFilterProps = FilterProps;\n\nexport const CloudProviderFilter: React.FunctionComponent<\n  CloudProviderFilterProps\n> = ({\n  getSelectionForFilter,\n  filterSelected,\n  onDeleteChipGroup,\n  onDeleteChip,\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const options: KeyValueOptions[] = cloudProviderOptions.map(\n    (cloudProvider) => {\n      return {\n        label: t(cloudProvider.value),\n        value: cloudProvider.value,\n        disabled: false,\n      };\n    }\n  );\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"cloud_provider\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip && onDeleteChip(\"cloud_provider\", chip, options)\n      }\n      deleteChipGroup={() =>\n        onDeleteChipGroup && onDeleteChipGroup(\"cloud_provider\")\n      }\n      categoryName={t(\"cloud_provider\")}\n      showToolbarItem={filterSelected === \"cloud_provider\"}\n    >\n      <CloudProviderSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype CloudProviderSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  options: KeyValueOptions[];\n};\n\nconst CloudProviderSelect: React.FunctionComponent<\n  CloudProviderSelectProps\n> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const [expanded, setExpanded] = useState(false);\n\n  const onToggle = () => {\n    setExpanded((prevState) => !prevState);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"cloud_provider\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue && removeFilterValue(\"cloud_provider\");\n    setExpanded(false);\n  };\n\n  if (filterSelected === \"cloud_provider\") {\n    return (\n      <Select\n        id=\"cloud-provider-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select cloud provider\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"cloud_provider\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_cloud_provider\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter &&\n              isDisabledSelectOption(\"cloud_provider\", option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { FunctionComponent, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  TextInputProps,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n\nexport type NameFilterProps = FilterProps;\n\nexport const NameFilter: FunctionComponent<NameFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [valid, setValid] = useState<boolean>(true);\n  const [value, setValue] = useState<string | undefined>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, \"name\");\n\n  const change = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onKeyPress: TextInputProps[\"onKeyPress\"] = (event) => {\n    if (event.key === \"Enter\" && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != \"\") {\n      if (validate(value)) {\n        updateFilter(\"name\", { value: value, isExact: false }, false);\n        setValue(\"\");\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const renderNameInput = () => {\n    const v = !valid || isMaxFilter;\n    const FilterTooltip: FunctionComponent = () => {\n      if (v) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter || !valid}\n            content={tooltipContent}\n            reference={inputRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    if (filterSelected?.toLowerCase() === \"name\") {\n      return (\n        <InputGroup>\n          <TextInput\n            name=\"name\"\n            id=\"filterText\"\n            type=\"search\"\n            aria-label=\"Search filter input\"\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            placeholder={t(\"filter_by_name_lower\")}\n            onChange={change}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={!valid || isMaxFilter}\n            onClick={() => onFilter()}\n            aria-label=\"Search instances\"\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"name\")}\n      deleteChip={(_category, chip) => onDeleteChip(\"name\", chip)}\n      deleteChipGroup={() => onDeleteChipGroup(\"name\")}\n      categoryName={t(\"name\")}\n      showToolbarItem={filterSelected?.toLowerCase() === \"name\"}\n    >\n      {renderNameInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { FunctionComponent, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  TextInputProps,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport SearchIcon from \"@patternfly/react-icons/dist/js/icons/search-icon\";\n\nexport type OwnerFilterProps = FilterProps;\nexport const OwnerFilter: FunctionComponent<OwnerFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChipGroup,\n  onDeleteChip,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, \"owner\");\n\n  const [value, setValue] = useState<string | undefined>();\n  const [valid, setValid] = useState<boolean>(true);\n\n  const validate = (value?: string) => {\n    return value ? !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value.trim()) : true;\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != \"\") {\n      if (validate(value)) {\n        updateFilter(\"owner\", { value: value, isExact: false }, false);\n        setValue(\"\");\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const onKeyPress: TextInputProps[\"onKeyPress\"] = (event) => {\n    if (event.key === \"Enter\" && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onChange = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const renderOwnerInput = () => {\n    if (filterSelected?.toLowerCase() === \"owner\") {\n      const v = !valid || isMaxFilter;\n\n      const FilterTooltip: FunctionComponent = () => {\n        if (v) {\n          return (\n            <Tooltip\n              isVisible={isMaxFilter || !valid}\n              content={tooltipContent}\n              reference={inputRef}\n            />\n          );\n        }\n        return <></>;\n      };\n\n      return (\n        <InputGroup>\n          <TextInput\n            name=\"owner\"\n            id=\"filterOwners\"\n            type=\"search\"\n            aria-label=\"Search filter input\"\n            placeholder={t(\"filter_by_owner\")}\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            isDisabled={v}\n            variant={ButtonVariant.control}\n            onClick={onFilter}\n            aria-label=\"Search owners\"\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"owner\")}\n      deleteChip={(_category, chip) => onDeleteChip(\"owner\", chip)}\n      deleteChipGroup={() => onDeleteChipGroup(\"owner\")}\n      categoryName={t(\"owner\")}\n      showToolbarItem={filterSelected?.toLowerCase() === \"owner\"}\n    >\n      {renderOwnerInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { cloudRegionOptions, KeyValueOptions } from \"@app/utils\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\n\nexport type RegionFilterProps = FilterProps;\n\nexport const RegionFilter: React.FunctionComponent<RegionFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  removeFilterValue,\n  isDisabledSelectOption,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const options = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"region\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) => onDeleteChip(\"region\", chip, options)}\n      deleteChipGroup={() => onDeleteChipGroup(\"region\")}\n      categoryName={t(\"region\")}\n      showToolbarItem={filterSelected === \"region\"}\n    >\n      <RegionSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype RegionSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  options: KeyValueOptions[];\n};\n\nconst RegionSelect: React.FunctionComponent<RegionSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"region\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue(\"region\");\n    setExpanded(false);\n  };\n\n  if (filterSelected === \"region\") {\n    return (\n      <Select\n        id=\"region-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select region\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"region\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_region\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption(\"region\", option.value)\n            );\n          };\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent, MouseEvent, ChangeEvent, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nexport type FilterSelectProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const FilterSelect: FunctionComponent<FilterSelectProps> = ({\n  setFilterSelected,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const onToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onSelect = (\n    _event: MouseEvent | ChangeEvent,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const options = [\n    { label: t(\"name\"), value: \"name\", disabled: false },\n    { label: t(\"cloud_provider\"), value: \"cloud_provider\", disabled: false },\n    { label: t(\"region\"), value: \"region\", disabled: false },\n    { label: t(\"owner\"), value: \"owner\", disabled: false },\n    { label: t(\"status\"), value: \"status\", disabled: false },\n  ];\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label=\"Select filter\"\n        onToggle={onToggle}\n        selections={filterSelected}\n        isOpen={isFilterExpanded}\n        onSelect={onSelect}\n      >\n        {options.map((option, index) => (\n          <SelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n          >\n            {option.label}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { FilterProps } from \"@app/modules/OpenshiftStreams/components/TableFilters/types\";\nimport { useRef, useState } from \"react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTooltipContent } from \"@app/modules/OpenshiftStreams/components/TableFilters/hooks\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InstanceStatus, statusOptions, KeyValueOptions } from \"@app/utils\";\n\nexport type StatusFilter = FilterProps;\n\nexport const StatusFilter: React.FunctionComponent<StatusFilter> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter(\"status\")?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip(\"status\", chip, statusFilterOptions)\n      }\n      deleteChipGroup={() => onDeleteChipGroup(\"status\")}\n      categoryName={t(\"status\")}\n      showToolbarItem={filterSelected === \"status\"}\n    >\n      <StatusSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        statusFilterOptions={statusFilterOptions}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype StatusSelectProps = Pick<\n  FilterProps,\n  | \"updateFilter\"\n  | \"isMaxFilter\"\n  | \"removeFilterValue\"\n  | \"isDisabledSelectOption\"\n  | \"getSelectionForFilter\"\n  | \"filterSelected\"\n> & {\n  statusFilterOptions: KeyValueOptions[];\n};\n\nconst StatusSelect: React.FunctionComponent<StatusSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  statusFilterOptions,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const selectRef = useRef<Select>(null);\n\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      \"status\",\n      { value: selection.toString(), isExact: true },\n      true\n    );\n  };\n\n  const clear = () => {\n    removeFilterValue(\"status\");\n    setExpanded(false);\n  };\n  if (filterSelected === \"status\") {\n    return (\n      <Select\n        id=\"status-select\"\n        variant={SelectVariant.checkbox}\n        aria-label=\"Select status\"\n        onToggle={onToggle}\n        selections={getSelectionForFilter(\"status\")}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t(\"filter_by_status\")}\n        className=\"select-custom-width\"\n        ref={selectRef}\n      >\n        {statusFilterOptions.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption(\"status\", option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import { FunctionComponent } from \"react\";\nimport { ToolbarChip, ToolbarGroup } from \"@patternfly/react-core\";\nimport { CloudProviderFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter\";\nimport { NameFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/NameFilter\";\nimport { OwnerFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter\";\nimport { RegionFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/RegionFilter\";\nimport { FilterSelect } from \"@app/modules/OpenshiftStreams/components/TableFilters/FilterSelect\";\nimport { StatusFilter } from \"@app/modules/OpenshiftStreams/components/TableFilters/StatusFilter\";\nimport { KeyValueOptions } from \"@app/utils\";\nimport {\n  FilterType,\n  FilterValue,\n} from \"@app/modules/OpenshiftStreams/components\";\n\nexport type StreamsFilterGroupProps = {\n  isMaxFilter: boolean;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const StreamsFilterGroup: FunctionComponent<StreamsFilterGroupProps> = ({\n  isMaxFilter,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n}) => {\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(\n      ({ filterKey }) => filterKey === key\n    );\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const updateFilter = (\n    key: string,\n    filter: FilterValue,\n    removeIfPresent: boolean\n  ) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex(\n          (f) => f.value === filter.value\n        ); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter(\n      (filter) => filter.filterKey === key\n    );\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (\n    category: string,\n    chip: string | ToolbarChip,\n    filterOptions?: KeyValueOptions[]\n  ) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    const prevFilterValue: FilterValue[] = Object.assign(\n      [],\n      newFilteredValue[filterIndex]?.filterValue\n    );\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter cloudProviderOptions\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find(\n        (option) => option.label === chip.toString()\n      )?.value;\n    }\n    /**\n     * Delete selected chip from filter cloudProviderOptions\n     */\n    const chipIndex = prevFilterValue.findIndex(\n      (val) => val.value === filterChip\n    );\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const removeFilteredValue = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex(\n      (filter) => filter.filterKey === value\n    );\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n  };\n\n  return (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <FilterSelect\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n        <NameFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <CloudProviderFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <RegionFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <OwnerFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n        <StatusFilter\n          isMaxFilter={isMaxFilter}\n          filterSelected={filterSelected}\n          getSelectionForFilter={getSelectionForFilter}\n          updateFilter={updateFilter}\n          onDeleteChip={onDeleteChip}\n          onDeleteChipGroup={onDeleteChipGroup}\n          removeFilterValue={removeFilteredValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n        />\n      </ToolbarGroup>\n    </>\n  );\n};\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\nimport FilterIcon from \"@patternfly/react-icons/dist/js/icons/filter-icon\";\nimport { MASPagination, MASToolbar, ToolbarItemProps } from \"@app/common\";\nimport { InstanceStatus, MAX_FILTER_LIMIT } from \"@app/utils\";\nimport \"./StreamsToolbar.css\";\nimport { StreamsFilterGroup } from \"@app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup\";\nimport { FilterType } from \"@app/modules/OpenshiftStreams/components\";\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = \"name\",\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const handleMaxFilters = useCallback(() => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: FilterType) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === \"status\"\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.PROVISIONING\n            )\n          : [];\n      const deprovisionStatus =\n        filterKey === \"status\"\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.DEPROVISION\n            )\n          : [];\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  }, [filteredValue]);\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [handleMaxFilters]);\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateInstanceModal}\n          data-testid=\"tableStreams-buttonCreateKafka\"\n          ouiaId=\"button-create\"\n        >\n          {t(\"create_kafka_instance\")}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-cloudProviderOptions-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t(\"minimal_pagination\"),\n            perPageSuffix: t(\"per_page_suffix\"),\n            toFirstPage: t(\"to_first_page\"),\n            toPreviousPage: t(\"to_previous_page\"),\n            toLastPage: t(\"to_last_page\"),\n            toNextPage: t(\"to_next_page\"),\n            optionsToggle: t(\"options_toggle\"),\n            currPage: t(\"curr_page\"),\n          }}\n        />\n      ),\n      variant: \"pagination\",\n      alignment: { default: \"alignRight\" },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: \"instanceDrawerInstance-toolbar\",\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: \"md\",\n        inset: { xl: \"insetLg\" },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: \"md\" }}\n      toggleGroupItems={\n        <StreamsFilterGroup\n          isMaxFilter={isMaxFilter}\n          filteredValue={filteredValue}\n          setFilteredValue={setFilteredValue}\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n      }\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { MASEmptyState } from \"@app/common\";\nimport LockIcon from \"@patternfly/react-icons/dist/js/icons/lock-icon\";\n\nexport const Unauthorized: FunctionComponent = () => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: \"noPadding\" }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t(\"access_permissions_needed\"),\n          headingLevel: \"h2\",\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            \"to_access_kafka_instances_contact_your_organization_administrators\"\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n","import { FunctionComponent, useContext } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from \"@patternfly/quickstarts\";\nimport { Button, ButtonVariant, PageSection } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\n\nexport type KafkaEmptyStateProps = {\n  handleCreateInstanceModal: () => void;\n};\nexport const KafkaEmptyState: FunctionComponent<KafkaEmptyStateProps> = ({\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  return (\n    <PageSection padding={{ default: \"noPadding\" }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        emptyStateBodyProps={{\n          body: (\n            <>\n              <Trans\n                i18nKey=\"create_a_kafka_instance_to_get_started\"\n                ns={[\"kasTemporaryFixMe\"]}\n                components={[\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    key=\"btn-quick-start\"\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart(\"getting-started\")\n                    }\n                  />,\n                ]}\n              />\n            </>\n          ),\n        }}\n        titleProps={{ title: t(\"no_kafka_instances_yet\") }}\n      >\n        <Button\n          data-testid=\"emptyStateStreams-buttonCreateKafka\"\n          variant={ButtonVariant.primary}\n          onClick={() =>\n            handleCreateInstanceModal && handleCreateInstanceModal()\n          }\n          ouiaId=\"button-create\"\n        >\n          {t(\"create_kafka_instance\")}\n        </Button>\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isMobileTablet } from \"@app/utils\";\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nexport const KasLayout: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      const localStorage = window.localStorage;\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem(\"openSessions\") || \"0\");\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem(\"openSessions\", `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  return (\n    <>\n      <main className=\"pf-c-page__main\">\n        <PageSection variant={PageSectionVariants.light}>\n          <Level>\n            <LevelItem>\n              <TextContent>\n                <Text component=\"h1\">{t(\"kafka_instances\")}</Text>\n              </TextContent>\n            </LevelItem>\n          </Level>\n        </PageSection>\n        {children}\n      </main>\n      <Modal\n        variant={ModalVariant.small}\n        title=\"Mobile experience\"\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n"],"names":["KasModalLoader","registerModals","useModal","t","useTranslation","ModalType","lazyComponent","lazy","variant","title","useKasModals","InstanceDrawerTab","Pagination","total","page","perPage","widgetId","itemCount","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","NoResultsFound","count","dataLoaded","emptyStateProps","titleProps","emptyStateBodyProps","body","StreamsTable","onDeleteInstance","onChangeOwner","onViewInstance","onViewConnection","loggedInUser","expectedTotal","kafkaDataLoaded","kafkaInstanceItems","isOrgAdmin","setOrderBy","orderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","onCreate","refresh","handleCreateInstanceModal","selectedInstanceName","cells","transforms","sortable","sortBy","useMemo","getIndexForSortParameter","parameter","toLowerCase","sort","split","length","index","direction","SortByDirection","rows","tableRow","loadingCount","forEach","row","name","cloud_provider","region","created_at","status","owner","instance_type","cloudProviderDisplayName","regionDisplayName","push","Link","to","id","instanceName","Trans","i18nKey","ns","components","time","FormatDate","date","add","Date","days","format","originalData","skeleton","Skeleton","onSelectKebabDropdownOption","event","selectedOption","deleteInstance","previousNode","target","parentElement","previousSibling","focus","kafka","tableProps","actionResolver","rowData","isUserSameAsLoggedIn","additionalProps","tooltip","isDisabled","style","pointerEvents","cursor","onClick","tooltipProps","position","content","onSort","_event","extraData","myDirection","property","getParameterForSortIndex","hasDefaultCustomRowWrapper","activeRow","onRowClick","_","HTMLElement","tagName","rowDataTestId","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","getIsDocumentHidden","hiddenKey","doc","document","hidden","msHidden","webkitHidden","getBrowserDocumentHiddenProp","undefined","usePageVisibility","isVisible","setIsVisible","useState","onVisibilityChange","visibilityChange","getBrowserVisibilityProp","addEventListener","removeEventListener","KafkaStatusAlerts","addAlert","useAlert","auth","useAuth","deletedKafkas","setDeletedKafkas","currentUserKafkas","setCurrentUserKafkas","items","setItems","setLoggedInUser","kas","useConfig","apiBasePath","basePath","getUsername","then","username","fetchCurrentUserKafkas","useCallback","accessToken","getToken","filter","apisService","DefaultApi","Configuration","getKafkas","res","kafkaInstances","data","addAlertAfterSuccessDeletion","notPresentKafkas","k","findIndex","dk","map","allDeletedKafkas","item","prev","Object","assign","splice","removeKafkaFromDeleted","AlertVariant","addAlertAfterSuccessCreation","lastItemsState","JSON","parse","stringify","completedOrFailedItems","instances","cfItem","description","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","StreamsTableConnected","preCreateInstance","shouldOpenCreateModal","location","useLocation","searchParams","URLSearchParams","search","setPage","showModal","showCreateModal","showTransferOwnershipModal","hideModal","hideDeleteModal","showDeleteModal","history","useHistory","drawerInstance","closeDrawer","openDrawer","setDrawerActiveTab","setDrawerInstance","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","isUserUnauthorized","setIsUserUnauthorized","setIsOrgAdmin","waitingForDelete","setWaitingForDelete","shouldRefresh","setShouldRefresh","open","openCreateModal","instance","getFilterQuery","filters","filterKey","filterValue","filterQuery","val","value","trim","isExact","join","fetchKafkas","isPolling","toString","kafkaItems","finally","error","errorCode","response","code","handleServerError","onSearch","refreshKafkasAfterAction","onDelete","setSearchParam","set","refreshKafkas","doDelete","Error","deleteKafkaById","reason","size","mounted","find","isDisplayKafkaEmptyState","PageSection","className","PageSectionVariants","padding","default","Card","ouiaId","StatusColumn","getStatusIcon","Spinner","Flex","statusIcon","FlexItem","spacer","filteredstatus","st","useTooltipContent","isMaxFilter","fieldName","CloudProviderFilter","getSelectionForFilter","onDeleteChipGroup","onDeleteChip","updateFilter","removeFilterValue","isDisabledSelectOption","options","cloudProvider","label","disabled","ToolbarFilter","chips","deleteChip","_category","chip","deleteChipGroup","categoryName","showToolbarItem","CloudProviderSelect","selectRef","tooltipContent","FilterTooltip","Tooltip","reference","expanded","setExpanded","onToggle","prevState","onSelect","selection","isPlaceholder","clear","Select","SelectVariant","selections","isOpen","placeholderText","ref","option","SelectOption","NameFilter","valid","setValid","setValue","inputRef","change","input","onKeyPress","key","onFilter","test","validate","v","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","Button","ButtonVariant","renderNameInput","OwnerFilter","renderOwnerInput","RegionFilter","RegionSelect","FilterSelect","isFilterExpanded","setIsFilterExpanded","ToolbarItem","StatusFilter","statusFilterOptions","s","StatusSelect","StreamsFilterGroup","optionValue","newFilterValue","newFilteredValue","removeIfPresent","filterIndex","f","filterValueIndex","selectedFilters","category","filterOptions","prevFilterValue","filterChip","chipIndex","removeFilteredValue","copyFilteredValue","ToolbarGroup","StreamsToolbar","setIsMaxFilter","handleMaxFilters","maxFilterCount","provisioningStatus","deprovisionStatus","toolbarItems","isCompact","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","toggleGroupItems","Unauthorized","isFilled","headingLevel","emptyStateIconProps","icon","KafkaEmptyState","qsContext","useContext","QuickStartContext","isSmall","isInline","setActiveQuickStart","KasLayout","children","isMobileModalOpen","setIsMobileModalOpen","localStorage","window","parseInt","getItem","newCount","setItem","handleMobileModal","Level","LevelItem","TextContent","Text","component","Modal","ModalVariant","onClose","actions"],"sourceRoot":""}