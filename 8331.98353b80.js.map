{"version":3,"file":"8331.98353b80.js","mappings":"qNAUO,MAAMA,GAAe,IAAAC,OAAK,IAAM,kCAS1BC,EAET,EAAGC,WAAUC,YAAWC,eAAcC,uBACxC,MAAM,EAAEC,IAAM,IAAAC,gBAAe,CAAC,sBASxBC,EACJN,EAASO,SAAW,eACpBP,EAASO,SAAW,eAEtB,OACE,SAAC,EAAAC,SAAQ,eAACC,UAAU,SAAC,KAAU,KAAG,WAChC,UAAC,EAAAC,KAAI,eACHC,UAAWV,EACXW,SAAU,CAACC,EAAGC,IAAQZ,EAAaY,IAAyB,YAE5D,SAAC,EAAAC,IAAG,eACFC,SAAU,YACVC,OAAO,SAAC,EAAAC,aAAY,UAAEd,EAAE,cAA0B,WAElD,SAAC,EAAAe,gBAAe,CACdC,GAAIpB,EAASoB,GACbC,MAAOrB,EAASqB,MAChBC,WAAW,IAAAC,UAASvB,EAASwB,YAC7BC,WAAW,IAAAF,UAASvB,EAAS0B,YAC7BC,YAAY,IAAAC,WAAS,IAAAL,UAASvB,EAASwB,YAAa,IACpDK,KAAM7B,EAAS6B,KAAKC,aACpBC,SACG/B,EAAS6B,KAAKG,2BAA2BC,OAAS,GAAK,QAE1DC,QACGlC,EAAS6B,KAAKM,0BAA0BF,OAAS,GAAK,QAEzDG,QAASC,KAAKC,OACXtC,EAAS6B,KAAKU,wBAAwBN,OAAS,GAAK,YAEvDO,cAAexC,EAAS6B,KAAKY,eAC7BC,YAAa1C,EAAS6B,KAAKc,sBAC3BC,eAAgB5C,EAAS6B,KAAKgB,gCAC9BC,aAAc9C,EAAS6B,KAAKkB,iBAAiBd,OAAS,GAAK,QAC3De,OAAQ5C,EAAEJ,EAASgD,QACnBC,aAC6B,aAA3BjD,EAASkD,cAA+B,WAAa,OAEvDC,eAAe,QAGnB,SAAC,EAAApC,IAAG,eACFC,SAAU,0BACVC,OAAO,SAAC,EAAAC,aAAY,UAAEd,EAAE,gBAA6B,cACzC,4BAA0B,WAEtC,SAACP,EAAY,CACXuD,eAtDgB,MACxB,MAAM,sBAAEC,GAA0BrD,EAClC,OAAOqD,aAAqB,EAArBA,EAAuBC,SAAS,SACnCD,EACA,GAAGA,SAkDiBE,GAChBjD,eAAgBA,EAChBH,iBAAkBA,EAClBqD,WAAYxD,EAASoB,gBCpEpBqC,EAAyD,EACpE,mBAAoBC,EACpBC,eACAC,iBACAC,qBACAC,kBACAC,cACA5D,mBACA6D,eAEA,MAAM,EAAE5D,IAAM,IAAAC,gBAAe,CAAC,sBAE9B,OACE,SAAC,KAAS,eACR4D,WAAYN,EACZO,eAA8BC,IAAnBP,EACXQ,QAASL,EACTM,iBACET,IACE,SAAC7D,EAAqB,CACpBI,iBAAkBA,EAClBF,UAAW6D,GAAmB,YAC9B9D,SAAU4D,EACV1D,aAAc2D,IAIpBS,kBAAmB,CACjBC,KAAM,CAAEC,MAAOpE,EAAE,kBACjBa,MAAO,CAAEwD,MAAOb,aAAc,EAAdA,EAAgBc,KAAMC,aAAc,OACrD,mBACiBjB,EAClBkB,wCAAuDT,IAAnBP,GAA4B,UAE/DI,O,sGCrCP,MAWA,EATK,I,IAAA,SAAEA,GAAQ,EAAKa,GAAK,cAApB,cACH,OACE,UAAC,EAAAC,cAAa,YACZ,SAAC,IAAc,iBAAKD,EAAK,UAAGb,MAC5B,SAAC,IAAc,S,gBChBrB,IAAYe,E,iBAAZ,SAAYA,GACV,oBACA,0BAFF,CAAYA,IAAAA,EAAiB","sources":["webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerContent.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerFederated.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts"],"sourcesContent":["import { FunctionComponent, lazy, Suspense } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { addHours, parseISO } from \"date-fns\";\nimport { InstanceStatus } from \"@app/utils\";\nimport { MASLoading } from \"@app/common\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\nimport { KafkaDetailsTab } from \"@rhoas/app-services-ui-components\";\nimport { InstanceDrawerContextProps } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\n\nexport const ResourcesTab = lazy(() => import(\"./ConnectionTab\"));\n\nexport type InstanceDrawerContentProps = {\n  instance: NonNullable<InstanceDrawerContextProps[\"drawerInstance\"]>;\n  activeTab: InstanceDrawerTab;\n  setActiveTab: (tab: InstanceDrawerTab) => void;\n  tokenEndPointUrl: string;\n};\n\nexport const InstanceDrawerContent: FunctionComponent<\n  InstanceDrawerContentProps\n> = ({ instance, activeTab, setActiveTab, tokenEndPointUrl }) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  const getExternalServer = () => {\n    const { bootstrap_server_host } = instance;\n    return bootstrap_server_host?.endsWith(\":443\")\n      ? bootstrap_server_host\n      : `${bootstrap_server_host}:443`;\n  };\n\n  const isKafkaPending =\n    instance.status === InstanceStatus.ACCEPTED ||\n    instance.status === InstanceStatus.PREPARING;\n\n  return (\n    <Suspense fallback={<MASLoading />}>\n      <Tabs\n        activeKey={activeTab}\n        onSelect={(_, tab) => setActiveTab(tab as InstanceDrawerTab)}\n      >\n        <Tab\n          eventKey={InstanceDrawerTab.DETAILS}\n          title={<TabTitleText>{t(\"details\")}</TabTitleText>}\n        >\n          <KafkaDetailsTab\n            id={instance.id}\n            owner={instance.owner}\n            createdAt={parseISO(instance.created_at)}\n            updatedAt={parseISO(instance.updated_at)}\n            expiryDate={addHours(parseISO(instance.created_at), 48)}\n            size={instance.size.display_name}\n            ingress={\n              (instance.size.ingress_throughput_per_sec.bytes || 0) / 1048576\n            }\n            egress={\n              (instance.size.egress_throughput_per_sec.bytes || 0) / 1048576\n            }\n            storage={Math.round(\n              (instance.size.max_data_retention_size.bytes || 0) / 1073741824\n            )}\n            maxPartitions={instance.size.max_partitions}\n            connections={instance.size.total_max_connections}\n            connectionRate={instance.size.max_connection_attempts_per_sec}\n            messageSize={(instance.size.max_message_size.bytes || 0) / 1048576}\n            region={t(instance.region)}\n            instanceType={\n              instance.instance_type === \"standard\" ? \"standard\" : \"eval\"\n            }\n            isLoadingSize={false}\n          />\n        </Tab>\n        <Tab\n          eventKey={InstanceDrawerTab.CONNECTION.toString()}\n          title={<TabTitleText>{t(\"connection\")}</TabTitleText>}\n          data-testid=\"drawerStreams-tabConnect\"\n        >\n          <ResourcesTab\n            externalServer={getExternalServer()}\n            isKafkaPending={isKafkaPending}\n            tokenEndPointUrl={tokenEndPointUrl}\n            instanceId={instance.id}\n          />\n        </Tab>\n      </Tabs>\n    </Suspense>\n  );\n};\n","import { FunctionComponent } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { InstanceDrawerContent } from \"@app/modules/InstanceDrawer/InstanceDrawerContent\";\n\nimport \"./InstanceDrawer.css\";\nimport { MASDrawer } from \"@app/common\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\nimport { InstanceDrawerContextProps } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\n\nexport type InstanceDrawerProps = {\n  \"data-ouia-app-id\": string;\n} & InstanceDrawerContextProps;\n\nexport const InstanceDrawer: FunctionComponent<InstanceDrawerProps> = ({\n  \"data-ouia-app-id\": dataOuiaAppId,\n  isDrawerOpen,\n  drawerInstance,\n  setDrawerActiveTab,\n  drawerActiveTab,\n  closeDrawer,\n  tokenEndPointUrl,\n  children,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n\n  return (\n    <MASDrawer\n      isExpanded={isDrawerOpen}\n      isLoading={drawerInstance === undefined}\n      onClose={closeDrawer}\n      panelBodyContent={\n        drawerInstance && (\n          <InstanceDrawerContent\n            tokenEndPointUrl={tokenEndPointUrl}\n            activeTab={drawerActiveTab || InstanceDrawerTab.DETAILS}\n            instance={drawerInstance}\n            setActiveTab={setDrawerActiveTab}\n          />\n        )\n      }\n      drawerHeaderProps={{\n        text: { label: t(\"instance_name\") },\n        title: { value: drawerInstance?.name, headingLevel: \"h1\" },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={drawerInstance === undefined}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n","import { FunctionComponent } from \"react\";\nimport {\n  InstanceDrawer,\n  InstanceDrawerProps,\n} from \"@app/modules/InstanceDrawer/InstanceDrawer\";\nimport { ModalProvider } from \"@rhoas/app-services-ui-components\";\nimport { KasModalLoader } from \"@app/modals\";\n\nexport type InstanceDrawerFederatedProps = InstanceDrawerProps;\n\nconst InstanceDrawerFederated: FunctionComponent<\n  InstanceDrawerFederatedProps\n> = ({ children, ...props }) => {\n  return (\n    <ModalProvider>\n      <InstanceDrawer {...props}>{children}</InstanceDrawer>\n      <KasModalLoader />\n    </ModalProvider>\n  );\n};\n\nexport default InstanceDrawerFederated;\n","export enum InstanceDrawerTab {\n  DETAILS = \"details\",\n  CONNECTION = \"connection\",\n}\n"],"names":["ResourcesTab","lazy","InstanceDrawerContent","instance","activeTab","setActiveTab","tokenEndPointUrl","t","useTranslation","isKafkaPending","status","Suspense","fallback","Tabs","activeKey","onSelect","_","tab","Tab","eventKey","title","TabTitleText","KafkaDetailsTab","id","owner","createdAt","parseISO","created_at","updatedAt","updated_at","expiryDate","addHours","size","display_name","ingress","ingress_throughput_per_sec","bytes","egress","egress_throughput_per_sec","storage","Math","round","max_data_retention_size","maxPartitions","max_partitions","connections","total_max_connections","connectionRate","max_connection_attempts_per_sec","messageSize","max_message_size","region","instanceType","instance_type","isLoadingSize","externalServer","bootstrap_server_host","endsWith","getExternalServer","instanceId","InstanceDrawer","dataOuiaAppId","isDrawerOpen","drawerInstance","setDrawerActiveTab","drawerActiveTab","closeDrawer","children","isExpanded","isLoading","undefined","onClose","panelBodyContent","drawerHeaderProps","text","label","value","name","headingLevel","notRequiredDrawerContentBackground","props","ModalProvider","InstanceDrawerTab"],"sourceRoot":""}