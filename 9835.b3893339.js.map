{"version":3,"file":"9835.b3893339.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useAMSQuota.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useAvailableProvidersAndDefault.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateInstance.ts","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useGetAvailableSizes.ts"],"sourcesContent":["import {\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaValue,\n  QuotaType,\n} from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { InstanceType } from \"@app/utils\";\n\n/**\n * Hook that fetches available entitelemts from AMS\n *\n * @returns\n */\nexport const useAMSQuota = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  // TODO we need this details to be shared to from app-servies-ui\n  const quotaProductId = \"RHOSAK\";\n  const trialQuotaProductId = \"RHOSAKTrial\";\n  const resourceName = \"rhosak\";\n\n  return async () => {\n    const accessToken = await auth?.ams.getToken();\n    const ams = new AppServicesApi({\n      accessToken,\n      basePath: config?.ams.apiBasePath || \"\",\n    } as Configuration);\n\n    const account = await ams.apiAccountsMgmtV1CurrentAccountGet();\n    const orgId = account?.data?.organization?.id;\n    const quotaData = new Map<QuotaType, QuotaValue>();\n    // TODO remove service down and other values. Use different model?\n    const filteredQuota: Quota = {\n      loading: true,\n      isServiceDown: false,\n      data: undefined,\n    };\n\n    if (!orgId) {\n      console.error(\"useQuota\", \"orgId is not defined\");\n      filteredQuota.loading = false;\n      filteredQuota.isServiceDown = true;\n      return filteredQuota;\n    }\n\n    try {\n      const response =\n        await ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n          orgId,\n          undefined,\n          true\n        );\n\n      const quota = response?.data?.items?.find((q) =>\n        q.related_resources?.find(\n          (r) =>\n            r.resource_name === resourceName && r.product === quotaProductId\n        )\n      );\n      const trialQuota = response?.data?.items?.find((q) =>\n        q.related_resources?.find(\n          (r) =>\n            r.resource_name === resourceName &&\n            r.product === trialQuotaProductId\n        )\n      );\n\n      // TODO logic here should include marketplace vs standard billing model.\n      // We need to pick standard\n      if (quota && quota.allowed > 0) {\n        const remaining = quota?.allowed - quota?.consumed;\n        quotaData?.set(QuotaType.kas, {\n          allowed: quota?.allowed,\n          consumed: quota?.consumed,\n          remaining: remaining < 0 ? 0 : remaining,\n        });\n      }\n\n      if (trialQuota) {\n        quotaData?.set(QuotaType.kasTrial, {\n          allowed: trialQuota?.allowed,\n          consumed: trialQuota?.consumed,\n          remaining: trialQuota?.allowed - trialQuota?.consumed,\n        });\n      }\n\n      filteredQuota.loading = false;\n      filteredQuota.data = quotaData;\n    } catch (error) {\n      filteredQuota.loading = false;\n      filteredQuota.isServiceDown = true;\n      console.error(error);\n    }\n\n    return filteredQuota;\n  };\n};\n\n// Helper methods for busines logic handled in the UI\nexport function convertQuotaToInstanceType(\n  quota: Map<QuotaType, QuotaValue> | undefined\n) {\n  let kasQuota: QuotaValue | undefined;\n  try {\n    kasQuota = quota?.get(QuotaType?.kas);\n  } catch (e) {\n    console.error(\"useAvailableProvidersAndDefault\", \"quota?.get exception\", e);\n  }\n  if (kasQuota !== undefined && kasQuota.remaining >= 0) {\n    return InstanceType.standard;\n  } else {\n    return InstanceType.developer;\n  }\n}\n\nexport function getQuotaType(quota: Map<QuotaType, QuotaValue> | undefined) {\n  let kasQuota: QuotaValue | undefined;\n  try {\n    kasQuota = quota?.get(QuotaType?.kas);\n  } catch (e) {\n    console.error(\"useAvailableProvidersAndDefault\", \"quota?.get exception\", e);\n  }\n\n  if (kasQuota !== undefined && kasQuota.remaining >= 0) {\n    return \"standard\";\n  }\n\n  return \"trial\";\n}\n","import { CreateKafkaInstanceWithSizesTypes } from \"@rhoas/app-services-ui-components\";\nimport { useAuth, useConfig, QuotaType } from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { InstanceType } from \"@app/utils\";\nimport {\n  convertQuotaToInstanceType,\n  getQuotaType,\n  useAMSQuota,\n} from \"./useAMSQuota\";\n\n/**\n * Hooks for fetching available providers and their regions\n *\n * @returns\n */\nexport const useAvailableProvidersAndDefault = () => {\n  const { kas, getUsername } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const getQuota = useAMSQuota();\n\n  function getApi() {\n    return new DefaultApi(\n      new Configuration({\n        accessToken: kas.getToken(),\n        basePath,\n      })\n    );\n  }\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchRegions = async (id: string, instance_type: string) => {\n    const apisService = getApi();\n    const res = await apisService.getCloudProviderRegions(id);\n\n    if (!res?.data?.items) {\n      return [];\n    }\n\n    const regionsForInstance = res.data.items.filter(\n      (p) =>\n        p.enabled && p.capacity.some((c) => c.instance_type === instance_type)\n    );\n\n    return regionsForInstance.map((r) => {\n      const max_capacity_reached = r.capacity?.some(\n        (c) => c.available_sizes?.length === 0\n      );\n\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: r.id!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        displayName: r.display_name!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        isDisabled: max_capacity_reached,\n        capacity: r.capacity,\n      };\n    });\n  };\n\n  const fetchProviders = async (instance_type: string) => {\n    try {\n      const apisService = getApi();\n      const res = await apisService.getCloudProviders();\n      const allProviders = res?.data?.items || [];\n      return await Promise.all(\n        allProviders\n          .filter((p) => p.enabled)\n          .map(async (provider) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const regions = await fetchRegions(provider.id!, instance_type);\n            return {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              id: provider.id!,\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              displayName: provider.display_name!,\n              regions,\n            };\n          })\n      );\n    } catch (e) {\n      console.error(\"useAvailableProvidersAndDefault\", \"fetchProvider\", e);\n      return Promise.reject(e);\n    }\n  };\n\n  // TODO - this logic should not exist and be replaced with AMS quota.\n  const fetchUserHasTrialInstance = async (): Promise<boolean> => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const loggedInUser = await getUsername()!;\n      const filter = `owner = ${loggedInUser}`;\n      const apisService = getApi();\n      const res = await apisService.getKafkas(\"\", \"\", \"\", filter);\n      if (res.data.items) {\n        return res.data.items.some(\n          (k) =>\n            k?.instance_type === InstanceType?.eval ||\n            k?.instance_type === InstanceType?.developer\n        );\n      }\n    } catch (e) {\n      console.error(\n        \"useAvailableProvidersAndDefault\",\n        \"fetchUserHasTrialInstance\",\n        e\n      );\n    }\n    return false;\n  };\n\n  return async function () {\n    try {\n      const quota = await getQuota();\n      const plan = getQuotaType(\n        quota.data\n      ) as CreateKafkaInstanceWithSizesTypes.Plan;\n      const instanceType = convertQuotaToInstanceType(quota.data);\n      const kasQuota = quota?.data?.get(QuotaType?.kas);\n\n      const hasTrialRunning = await fetchUserHasTrialInstance();\n      const availableProviders = await fetchProviders(instanceType);\n      let defaultProvider:\n        | CreateKafkaInstanceWithSizesTypes.Provider\n        | undefined;\n      try {\n        defaultProvider =\n          availableProviders.length === 1\n            ? availableProviders[0].id\n            : undefined;\n      } catch (e) {\n        console.error(\n          \"useAvailableProvidersAndDefault\",\n          \"defaultProvider error\",\n          e\n        );\n      }\n\n      const instanceAvailability =\n        ((): CreateKafkaInstanceWithSizesTypes.InstanceAvailability => {\n          switch (true) {\n            case kasQuota !== undefined && kasQuota.remaining > 0:\n              return \"standard-available\";\n            case kasQuota !== undefined && kasQuota.remaining === 0:\n              return \"over-quota\";\n            case hasTrialRunning:\n              return \"trial-used\";\n            default:\n              return \"trial-available\";\n          }\n        })();\n\n      return {\n        defaultProvider,\n        availableProviders,\n        instanceAvailability,\n        maxStreamingUnits: kasQuota?.allowed || 0,\n        remainingQuota: kasQuota?.remaining || 0,\n        plan,\n      };\n    } catch (e) {\n      console.error(\"useAvailableProvidersAndDefault\", e);\n      return Promise.reject(e);\n    }\n  };\n};\n","import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport { CreateKafkaInstanceWithSizesTypes } from \"@rhoas/app-services-ui-components\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes } from \"@app/utils\";\nimport { convertQuotaToInstanceType, useAMSQuota } from \"./useAMSQuota\";\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceWithSizesTypes.OnCreateKafka => {\n    const auth = useAuth();\n    const getQuota = useAMSQuota();\n    const {\n      kas: { apiBasePath: basePath },\n    } = useConfig();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken: auth?.kas.getToken(),\n          basePath,\n        })\n      );\n      const quota = await getQuota();\n      const instanceType = convertQuotaToInstanceType(quota.data);\n\n      try {\n        const kafkaRequest = asKafkaRequestPayload(\n          createEmptyNewKafkaRequestPayload()\n        );\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = instanceType + \".\" + data.sizeId;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (instanceType) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"trial-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"over-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    multi_az: kafkaRequest.multi_az.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n","import { InstanceType } from \"@app/utils\";\nimport { CreateKafkaInstanceWithSizesTypes } from \"@rhoas/app-services-ui-components\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { SupportedKafkaSize } from \"@rhoas/kafka-management-sdk/dist/generated/model/supported-kafka-size\";\n\n/**\n * Return list of the instance types available for the current user\n *\n * @returns {Promise<InstanceType[]>}\n */\nexport type SizesData = CreateKafkaInstanceWithSizesTypes.GetSizesData;\n\nexport function useGetAvailableSizes() {\n  const { kas } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  return async (\n    provider: string,\n    region: string,\n    availableSizes: string[]\n  ): Promise<CreateKafkaInstanceWithSizesTypes.GetSizesData> => {\n    const api = new DefaultApi(\n      new Configuration({\n        accessToken: kas.getToken(),\n        basePath,\n      })\n    );\n\n    const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n      provider,\n      region\n    );\n    if (!sizes?.data?.instance_types) {\n      throw new Error(`No instance_types from backend`);\n    }\n\n    const standardSizes = sizes?.data?.instance_types.find(\n      (i) => i.id === InstanceType.standard\n    )?.sizes;\n    const trialSizes =\n      sizes?.data?.instance_types.find((i) => i.id === InstanceType.developer)\n        ?.sizes || [];\n    const trialSize =\n      trialSizes.length > 0\n        ? (trialSizes[trialSizes.length - 1] as Required<SupportedKafkaSize>)\n        : undefined;\n    if (!(standardSizes && trialSize)) {\n      throw new Error(\n        `No standard sizes or trial size: ${standardSizes} ${trialSize}`\n      );\n    }\n    const componentSizes =\n      standardSizes.map<CreateKafkaInstanceWithSizesTypes.Size>(\n        (sizeFromApi) => {\n          const s = sizeFromApi as Required<SupportedKafkaSize>;\n          return {\n            id: s.id,\n            displayName: s.display_name,\n            quota: s.quota_consumed,\n            ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n            egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n            storage: Math.round(\n              (s.max_data_retention_size.bytes || 0) / 1073741824\n            ),\n            connections: s.total_max_connections,\n            connectionRate: s.max_connection_attempts_per_sec,\n            maxPartitions: s.max_partitions,\n            messageSize: (s.max_message_size.bytes || 0) / 1048576,\n            status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n            trialDurationHours: undefined,\n            isDisabled: !availableSizes.includes(`standard.${s.id}`),\n          };\n        }\n      );\n    return {\n      standard: componentSizes,\n      trial: {\n        id: trialSize.id,\n        displayName: trialSize.display_name,\n        quota: 0,\n        ingress: (trialSize.ingress_throughput_per_sec.bytes || 0) / 1048576,\n        egress: (trialSize.egress_throughput_per_sec.bytes || 0) / 1048576,\n        storage: Math.round(\n          (trialSize.max_data_retention_size.bytes || 0) / 1073741824\n        ),\n        connections: trialSize.total_max_connections,\n        connectionRate: trialSize.max_connection_attempts_per_sec,\n        maxPartitions: trialSize.max_partitions,\n        messageSize: (trialSize.max_message_size.bytes || 0) / 1048576,\n        status: trialSize.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n        trialDurationHours: trialSize.lifespan_seconds\n          ? trialSize.lifespan_seconds / 60 / 60\n          : undefined,\n        isDisabled: !availableSizes.includes(`developer.${trialSize.id}`),\n      },\n    };\n  };\n}\n"],"names":["useAMSQuota","config","useConfig","auth","useAuth","resourceName","accessToken","ams","getToken","AppServicesApi","basePath","apiBasePath","account","apiAccountsMgmtV1CurrentAccountGet","orgId","data","organization","id","quotaData","Map","filteredQuota","loading","isServiceDown","undefined","console","error","response","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","quota","items","find","q","related_resources","r","resource_name","product","trialQuota","allowed","remaining","consumed","set","QuotaType","convertQuotaToInstanceType","kasQuota","get","e","useAvailableProvidersAndDefault","kas","getUsername","getQuota","getApi","DefaultApi","Configuration","fetchProviders","instance_type","apisService","res","getCloudProviders","allProviders","Promise","all","filter","p","enabled","map","provider","regions","getCloudProviderRegions","capacity","some","c","max_capacity_reached","available_sizes","length","displayName","display_name","isDisabled","fetchRegions","reject","plan","getQuotaType","instanceType","hasTrialRunning","getKafkas","k","availableProviders","defaultProvider","instanceAvailability","maxStreamingUnits","remainingQuota","useCreateInstance","onSuccess","onError","kafkaRequest","name","value","Error","region","multi_az","cloud_provider","asKafkaRequestPayload","sizeId","createKafka","code","useGetAvailableSizes","availableSizes","api","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","standardSizes","i","trialSizes","trialSize","standard","sizeFromApi","s","quota_consumed","ingress","ingress_throughput_per_sec","bytes","egress","egress_throughput_per_sec","storage","Math","round","max_data_retention_size","connections","total_max_connections","connectionRate","max_connection_attempts_per_sec","maxPartitions","max_partitions","messageSize","max_message_size","status","maturity_status","trialDurationHours","includes","trial","lifespan_seconds"],"sourceRoot":""}