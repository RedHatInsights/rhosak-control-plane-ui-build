{"version":3,"file":"4360.b36268e6.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/aws-icon.js","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/InstanceInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/QuotaAlert.tsx","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudRegionsSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudProviderTiles.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceForm.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.AwsIconConfig = {\n  name: 'AwsIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.37 637.37 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.AwsIcon = require('../createIcon').createIcon(exports.AwsIconConfig);\nexports[\"default\"] = exports.AwsIcon;","import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\n\nexport type InstanceInfoProps = {\n  isKasTrial?: boolean;\n};\n\nconst InstanceInfo: React.FC<InstanceInfoProps> = ({ isKasTrial }) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>\n        {t('common.instance_information')}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          {isKasTrial && (\n            <GridItem>\n              <TextListItem component={TextListItemVariants.dt}>\n                {t('common.duration')}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {t('common.duration_value')}\n              </TextListItem>\n            </GridItem>\n          )}\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.ingress_egress')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.ingress_egress_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.storage')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.storage_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.partitions')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.partitions_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.client_connections')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.client_connections_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.connection_rate')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.connection_rate_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.message_size')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.message_size_value')}\n            </TextListItem>\n          </GridItem>\n        </Grid>\n        <Button\n          isSmall\n          isInline\n          variant={ButtonVariant.link}\n          style={{ marginTop: '20px' }}\n          onClick={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart('getting-started')\n          }\n        >\n          {t('common.quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { InstanceInfo };\n","import React from 'react';\nimport { Alert, AlertVariant, Spinner } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Quota, QuotaType } from '@rhoas/app-services-ui-shared';\n\nexport type QuotaAlertProps = {\n  quota: Quota | undefined;\n  hasKafkaCreationFailed?: boolean;\n  loadingQuota: boolean;\n  userHasTrialInstance?: boolean;\n  isKasTrial?: boolean;\n};\n\nexport const QuotaAlert: React.FC<QuotaAlertProps> = ({\n  quota,\n  hasKafkaCreationFailed,\n  userHasTrialInstance,\n}) => {\n  const { t } = useTranslation();\n\n  if (quota === undefined || quota.loading) {\n    return (\n      <Alert\n        className='pf-u-mb-md'\n        variant={AlertVariant.info}\n        title={t('instance_checking_message')}\n        aria-live='polite'\n        isInline\n        customIcon={\n          <Spinner size='md' aria-valuetext='Checking kafka availability' />\n        }\n      />\n    );\n  }\n\n  type QuotaAlertProps = {\n    titleKey: string;\n    messageKey: string;\n    variant: AlertVariant;\n  };\n\n  const getQuotaAlertProps = (): QuotaAlertProps | undefined => {\n    const kasQuota = quota.data?.get(QuotaType?.kas);\n    const kasTrial = quota.data?.get(QuotaType?.kasTrial);\n\n    //if kafka creation failed for quota related\n    if (hasKafkaCreationFailed) {\n      return {\n        variant: AlertVariant.danger,\n        titleKey: 'kafka_creation_failed_alert_title',\n        messageKey: kasQuota\n          ? 'standard_kafka_creation_failed_alert_message'\n          : 'trial_kafka_creation_failed_alert_message',\n      };\n    }\n\n    //if service down or any error\n    if (quota.isServiceDown) {\n      return {\n        titleKey: 'something_went_wrong',\n        variant: AlertVariant.danger,\n        messageKey: 'ams_service_down_message',\n      };\n    }\n\n    //trial quota flows\n    //if user has no standard quota and already has a trial instance\n    if (!kasQuota && kasTrial && userHasTrialInstance) {\n      return {\n        titleKey: 'trial_kafka_title',\n        variant: AlertVariant.warning,\n        messageKey: 'deploy_one_instance_alert_message',\n      };\n    }\n    //if user has no standard quota and no trial quota\n    if (!kasQuota && !kasTrial) {\n      return {\n        variant: AlertVariant.warning,\n        titleKey: 'no_quota_kafka_alert_title',\n        messageKey: 'no_quota_kafka_alert_message',\n      };\n    }\n    //if user has no standard quota and trial instances are available\n    if (!kasQuota && kasTrial && !userHasTrialInstance) {\n      return {\n        variant: AlertVariant.info,\n        titleKey: 'trial_quota_kafka_title',\n        messageKey: '',\n      };\n    }\n\n    //standard quota flows\n    //if user has standard quota but all allowed instances are already provisioned\n    if (kasQuota && kasQuota?.remaining === 0) {\n      return {\n        variant: AlertVariant.warning,\n        titleKey: 'standard_kafka_alert_title',\n        messageKey: 'standard_kafka_alert_message',\n      };\n    }\n    return undefined;\n  };\n\n  const alertProps = getQuotaAlertProps();\n\n  if (alertProps === undefined) {\n    return <></>;\n  }\n\n  return (\n    <Alert\n      className='pf-u-mb-md'\n      variant={alertProps.variant}\n      title={t(alertProps.titleKey)}\n      aria-live='polite'\n      isInline\n    >\n      {t(alertProps.messageKey)}\n    </Alert>\n  );\n};\n","import { KafkaRequestPayload } from '@rhoas/kafka-management-sdk';\nimport { Validated } from '@app/models/validated';\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error('kafkaRequest.name must not be undefined');\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error('kafkaRequest.region must not be undefined');\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error('kafkaRequest.multi_az must not be undefined');\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error('kafkaRequest.cloud_provider must not be undefined');\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    multi_az: kafkaRequest.multi_az.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === 'error' ||\n    value.region.validated === 'error' ||\n    value.cloud_provider.validated === 'error' ||\n    value.multi_az.validated === 'error'\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: '',\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: '',\n    },\n    name: {\n      value: '',\n    },\n  };\n};\n","import { NewKafkaRequestPayload } from '@app/models';\nimport { CloudRegion } from '@rhoas/kafka-management-sdk';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FormSelect, FormSelectOption, Skeleton } from '@patternfly/react-core';\n\nexport type CloudRegionProps = {\n  kafkaRequest: NewKafkaRequestPayload;\n  selectCloudRegion: (region: string) => void;\n  cloudRegions: CloudRegion[] | undefined;\n};\n\nexport const CloudRegionSelect: React.FunctionComponent<CloudRegionProps> = ({\n  kafkaRequest,\n  selectCloudRegion,\n  cloudRegions,\n}) => {\n  const { t } = useTranslation();\n  if (cloudRegions === undefined) {\n    return <Skeleton fontSize='2xl' />;\n  }\n  return (\n    <FormSelect\n      validated={kafkaRequest.region.validated}\n      value={kafkaRequest.region.value}\n      onChange={selectCloudRegion}\n      id='cloud-region-select'\n      name='cloud-region'\n      aria-label={t('cloud_region')}\n      isDisabled={cloudRegions === undefined}\n    >\n      {[\n        <FormSelectOption\n          value=''\n          key='placeholder'\n          label={t('please_select')}\n        />,\n        (cloudRegions || []).map(\n          ({ id, display_name = '' }: CloudRegion, index) => {\n            return (\n              <FormSelectOption\n                key={index}\n                value={id}\n                label={id ? t(id) : display_name}\n              />\n            );\n          }\n        ),\n      ]}\n    </FormSelect>\n  );\n};\n","import { CloudProvider } from '@rhoas/kafka-management-sdk';\nimport { NewKafkaRequestPayload } from '@app/models';\nimport React from 'react';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport { Skeleton, Tile } from '@patternfly/react-core';\n\nexport type CloudProvidersTileProps = {\n  cloudProviders?: CloudProvider[];\n  kafkaRequest: NewKafkaRequestPayload;\n  selectCloudProvider: (cloudProvider: CloudProvider) => void;\n};\n\nexport const CloudProvidersTiles: React.FunctionComponent<CloudProvidersTileProps> =\n  ({ cloudProviders, kafkaRequest, selectCloudProvider }) => {\n    const getTileIcon = (provider?: string) => {\n      switch (provider?.toLowerCase()) {\n        case 'aws':\n          return (\n            <AwsIcon\n              size='lg'\n              color='black'\n              className='mk--create-instance__tile--icon'\n            />\n          );\n        default:\n          return;\n      }\n    };\n\n    if (cloudProviders === undefined) {\n      return (\n        <Skeleton\n          className='pf-m-text-4xl'\n          screenreaderText='Loading contents'\n        />\n      );\n    }\n\n    return (\n      <>\n        {cloudProviders.map((provider: CloudProvider) => {\n          return (\n            <Tile\n              key={`tile-${provider.name}`}\n              title={provider.display_name || ''}\n              icon={getTileIcon(provider.name)}\n              isSelected={kafkaRequest.cloud_provider.value === provider.name}\n              onClick={() => selectCloudProvider(provider)}\n            />\n          );\n        })}\n      </>\n    );\n  };\n","import {\n  createEmptyNewKafkaRequestPayload,\n  isKafkaRequestInvalid,\n  NewKafkaRequestPayload,\n} from '@app/models';\nimport { CloudProvider, CloudRegion } from '@rhoas/kafka-management-sdk';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils';\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  FormGroup,\n  TextInput,\n  ToggleGroup,\n  ToggleGroupItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { CloudRegionSelect } from '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudRegionsSelect';\nimport {\n  CloudProvidersTileProps,\n  CloudProvidersTiles,\n} from '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudProviderTiles';\n\nexport type CreateInstanceFormProps = Pick<\n  CloudProvidersTileProps,\n  'cloudProviders'\n> & {\n  createInstance: () => Promise<void>;\n  kafkaRequest: NewKafkaRequestPayload;\n  setKafkaRequest: React.Dispatch<React.SetStateAction<NewKafkaRequestPayload>>;\n  getCloudRegions: (id: string) => Promise<CloudRegion[] | undefined>;\n  id: string;\n};\n\nexport const CreateInstanceForm: React.FunctionComponent<CreateInstanceFormProps> =\n  ({\n    createInstance,\n    kafkaRequest,\n    setKafkaRequest,\n    cloudProviders,\n    getCloudRegions: fetchCloudRegions,\n    id,\n  }) => {\n    const { t } = useTranslation();\n\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [cloudRegions, setCloudRegions] = useState<\n      CloudRegion[] | undefined\n    >();\n\n    const validateName = (kafkaRequest: NewKafkaRequestPayload) => {\n      //validate required field\n      if (\n        kafkaRequest.name.value === undefined ||\n        kafkaRequest.name.value.trim() === ''\n      ) {\n        kafkaRequest.name.validated = 'error';\n        kafkaRequest.name.errorMessage = t('common.this_is_a_required_field');\n      }\n      //validate regex\n      else if (\n        !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(kafkaRequest.name.value.trim())\n      ) {\n        kafkaRequest.name.validated = 'error';\n        kafkaRequest.name.errorMessage = t(\n          'common.input_filed_invalid_helper_text'\n        );\n      }\n      //validate max length\n      else if (kafkaRequest.name.value.length > MAX_INSTANCE_NAME_LENGTH) {\n        kafkaRequest.name.validated = 'error';\n        kafkaRequest.name.errorMessage = t('length_is_greater_than_expected', {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        });\n      }\n      return kafkaRequest;\n    };\n\n    const validateCloudRegion = (kafkaRequest: NewKafkaRequestPayload) => {\n      if (\n        kafkaRequest.region.value === undefined ||\n        kafkaRequest.region.value.trim() === ''\n      ) {\n        kafkaRequest.region.validated = 'error';\n        kafkaRequest.region.errorMessage = t('common.this_is_a_required_field');\n      }\n      return kafkaRequest;\n    };\n\n    const validateMultiAz = (kafkaRequest: NewKafkaRequestPayload) => {\n      return kafkaRequest;\n    };\n\n    const validateCloudProvider = (kafkaRequest: NewKafkaRequestPayload) => {\n      return kafkaRequest;\n    };\n\n    const submit = (event) => {\n      event.preventDefault();\n      setFormSubmitted(true);\n      const validated = validateMultiAz(\n        validateCloudProvider(validateCloudRegion(validateName(kafkaRequest)))\n      );\n      setKafkaRequest({ ...validated });\n\n      if (!isKafkaRequestInvalid(validated)) {\n        createInstance().then(() => resetForm());\n      }\n    };\n\n    const resetForm = () => {\n      setFormSubmitted(false);\n      setKafkaRequest(createEmptyNewKafkaRequestPayload());\n    };\n\n    const setName = (name: string) => {\n      setKafkaRequest((prevState) => {\n        const value = {\n          ...prevState,\n          name: {\n            value: name,\n          },\n        };\n        return validateName(value);\n      });\n    };\n\n    const selectCloudProvider = (cloudProvider: CloudProvider) => {\n      setKafkaRequest((prevState) => {\n        const kafkaRequest = {\n          ...prevState,\n          cloud_provider: {\n            value: cloudProvider.name || '',\n          },\n        };\n        return validateCloudProvider(kafkaRequest);\n      });\n    };\n\n    const selectCloudRegion = (region: string) => {\n      setKafkaRequest((prevState) => {\n        const kafkaRequest = {\n          ...prevState,\n          region: {\n            value: region || '',\n          },\n        };\n        return validateCloudRegion(kafkaRequest);\n      });\n    };\n\n    const selectAz = (selected: boolean) => {\n      setKafkaRequest((prevState) => {\n        const kafkaRequest = {\n          ...prevState,\n          multi_az: {\n            value: selected,\n          },\n        };\n        return validateMultiAz(kafkaRequest);\n      });\n    };\n\n    useEffect(() => {\n      if (\n        cloudProviders !== undefined &&\n        cloudProviders.length > 0 &&\n        cloudProviders[0].name\n      ) {\n        selectCloudProvider(cloudProviders[0]);\n      }\n    }, [cloudProviders]);\n\n    useEffect(() => {\n      selectAz(true);\n    }, []);\n\n    useEffect(() => {\n      const loadCloudRegions = async (cloudProvider: string) => {\n        const cloudRegions = await fetchCloudRegions(cloudProvider);\n        //set default selected region if there is one region\n        if (\n          cloudRegions !== undefined &&\n          cloudRegions.length === 1 &&\n          cloudRegions[0].id !== undefined\n        ) {\n          selectCloudRegion(cloudRegions[0].id);\n        }\n        setCloudRegions(cloudRegions);\n      };\n      if (kafkaRequest.cloud_provider.value !== undefined) {\n        loadCloudRegions(kafkaRequest.cloud_provider.value);\n      }\n    }, [kafkaRequest.cloud_provider]);\n\n    const FormValidAlert: React.FunctionComponent = () => {\n      if (formSubmitted && isKafkaRequestInvalid(kafkaRequest)) {\n        return (\n          <FormAlert>\n            <Alert\n              variant='danger'\n              title={t('common.form_invalid_alert')}\n              aria-live='polite'\n              isInline\n            />\n          </FormAlert>\n        );\n      }\n      return <></>;\n    };\n\n    return (\n      <Form onSubmit={submit} id={id}>\n        <FormValidAlert />\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={kafkaRequest.name.errorMessage}\n          isRequired\n          validated={kafkaRequest.name.validated}\n          fieldId='form-instance-name'\n        >\n          <TextInput\n            isRequired\n            validated={kafkaRequest.name.validated}\n            type='text'\n            id='form-instance-name'\n            name='instance-name'\n            value={kafkaRequest.name.value}\n            onChange={setName}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_provider')}\n          fieldId='form-cloud-provider-name'\n        >\n          <CloudProvidersTiles\n            kafkaRequest={kafkaRequest}\n            selectCloudProvider={selectCloudProvider}\n            cloudProviders={cloudProviders}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={kafkaRequest.region.errorMessage}\n          validated={kafkaRequest.region.validated}\n          fieldId='form-cloud-region-option'\n          isRequired\n        >\n          <CloudRegionSelect\n            kafkaRequest={kafkaRequest}\n            selectCloudRegion={selectCloudRegion}\n            cloudRegions={cloudRegions}\n          />\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId='availability-zones'>\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n            >\n              <ToggleGroupItem\n                text={t('single')}\n                value={'single'}\n                isDisabled\n                buttonId='single'\n                onChange={selectAz}\n              />\n            </Tooltip>\n            <ToggleGroupItem\n              text={t('multi')}\n              value='multi'\n              buttonId='multi'\n              isSelected={kafkaRequest.multi_az.value || false}\n              onChange={selectAz}\n            />\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n              reference={() =>\n                document.getElementById('multi') ||\n                document.createElement('span')\n              }\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  Button,\n  Divider,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport { isServiceApiError } from '@app/utils/error';\nimport { ErrorCodes, getModalAppendTo, InstanceType } from '@app/utils';\nimport {\n  CloudProvider,\n  Configuration,\n  DefaultApi,\n} from '@rhoas/kafka-management-sdk';\nimport './CreateInstance.css';\nimport { InstanceInfo } from './InstanceInfo';\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n  Quota,\n  QuotaType,\n  QuotaValue,\n  useAlert,\n  useAuth,\n  useConfig,\n  useQuota,\n} from '@rhoas/app-services-ui-shared';\nimport { QuotaAlert } from './QuotaAlert';\nimport { CreateInstanceForm } from '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceForm';\nimport {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n  isKafkaRequestInvalid,\n  NewKafkaRequestPayload,\n} from '@app/models';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\n\nconst FORM_ID = 'create_instance_-form';\n\nconst CreateInstance: React.FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ onCreate, title, hideModal }) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { addAlert } = useAlert() || {};\n  const { getQuota } = useQuota() || {};\n\n  const { isVisible } = usePageVisibility();\n\n  const [kafkaRequest, setKafkaRequest] = useState<NewKafkaRequestPayload>(\n    createEmptyNewKafkaRequestPayload()\n  );\n\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const [quota, setQuota] = useState<Quota>();\n  const [hasKafkaCreationFailed, setHasKafkaCreationFailed] =\n    useState<boolean>(false);\n\n  const [cloudProviders, setCloudProviders] = useState<\n    CloudProvider[] | undefined\n  >();\n  const [userHasTrialInstance, setUserHasTrialInstance] = useState<\n    boolean | undefined\n  >();\n\n  const kasQuota: QuotaValue | undefined = quota?.data?.get(QuotaType?.kas);\n  const kasTrial: QuotaValue | undefined = quota?.data?.get(\n    QuotaType?.kasTrial\n  );\n  const loadingQuota = quota?.loading === undefined ? true : quota?.loading;\n  const isKasTrial = kasTrial && !kasQuota;\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (id: string) => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && id) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        const regions = await apisService.getCloudProviderRegions(id);\n        return regions.data.items?.filter((p) => p.enabled);\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert &&\n          addAlert({\n            title: t('common.something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    }\n    return undefined;\n  };\n\n  const fetchQuota = async () => {\n    if (getQuota) {\n      await getQuota().then((res) => {\n        setQuota(res);\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchQuota();\n  }, []);\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getCloudProviders().then((res) => {\n          const providers = res?.data?.items || [];\n          const enabledCloudProviders: CloudProvider[] = providers?.filter(\n            (p: CloudProvider) => p.enabled\n          );\n          setCloudProviders(enabledCloudProviders);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert &&\n          addAlert({\n            variant: AlertVariant.danger,\n            title: t('common.something_went_wrong'),\n            description: reason,\n          });\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchCloudProviders();\n  }, []);\n\n  const fetchUserHasTrialInstance = async () => {\n    const loggedInUser = await auth?.getUsername();\n    const accessToken = await auth?.kas.getToken();\n    if (loggedInUser) {\n      const filter = `owner = ${loggedInUser}`;\n      if (accessToken && isVisible) {\n        try {\n          const apisService = new DefaultApi(\n            new Configuration({\n              accessToken,\n              basePath,\n            })\n          );\n          const res = await apisService.getKafkas('', '', '', filter);\n          if (res.data.items) {\n            setUserHasTrialInstance(\n              res.data.items.some(\n                (k) => k?.instance_type === InstanceType?.eval\n              )\n            );\n          }\n        } catch (error) {\n          handleServerError(error);\n        }\n      }\n    }\n  };\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    addAlert &&\n      addAlert({\n        variant: AlertVariant.danger,\n        title: t('common.something_went_wrong'),\n        description: reason,\n      });\n  };\n\n  useEffect(() => {\n    fetchUserHasTrialInstance();\n  }, []);\n\n  const createInstance = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        setCreationInProgress(true);\n        onCreate && onCreate();\n        await apisService.createKafka(\n          true,\n          asKafkaRequestPayload(kafkaRequest)\n        );\n        hideModal();\n        onCreate && onCreate();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code, reason } = error?.response?.data || {};\n          //if instance name duplicate\n          if (code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n            kafkaRequest.name.validated = 'error';\n            kafkaRequest.name.errorMessage = t(\n              'the_name_already_exists_please_enter_a_unique_name',\n              {\n                name: kafkaRequest.name.value,\n              }\n            );\n          }\n          //if kafka creation failed due to quota\n          else if (\n            code === ErrorCodes.PREVIEW_KAFKA_INSTANCE_EXIST ||\n            code === ErrorCodes.INSUFFICIENT_QUOTA ||\n            code === ErrorCodes.FAILED_TO_CHECK_QUOTA\n          ) {\n            setHasKafkaCreationFailed(true);\n          } else {\n            addAlert &&\n              addAlert({\n                title: t('common.something_went_wrong'),\n                variant: AlertVariant.danger,\n                description: reason,\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  return (\n    <Modal\n      id='modalCreateKafka'\n      variant={ModalVariant.medium}\n      title={title}\n      isOpen={true}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key='submit'\n          variant='primary'\n          type='submit'\n          form={FORM_ID}\n          isDisabled={\n            isKafkaRequestInvalid(kafkaRequest) ||\n            isCreationInProgress ||\n            loadingQuota ||\n            userHasTrialInstance ||\n            hasKafkaCreationFailed ||\n            (kasQuota && kasQuota?.remaining === 0) ||\n            (!kasQuota && !kasTrial)\n          }\n          spinnerAriaValueText={t('submitting_request')}\n          isLoading={isCreationInProgress}\n          data-testid='modalCreateKafka-buttonSubmit'\n        >\n          {t('create_instance')}\n        </Button>,\n        <Button\n          key='cancel'\n          variant='link'\n          onClick={handleModalToggle}\n          data-testid='modalCreateKafka-buttonCancel'\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <QuotaAlert\n        quota={quota}\n        hasKafkaCreationFailed={hasKafkaCreationFailed}\n        loadingQuota={loadingQuota}\n        userHasTrialInstance={userHasTrialInstance}\n        isKasTrial={isKasTrial}\n      />\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>\n          <CreateInstanceForm\n            kafkaRequest={kafkaRequest}\n            setKafkaRequest={setKafkaRequest}\n            createInstance={createInstance}\n            cloudProviders={cloudProviders}\n            getCloudRegions={fetchCloudRegions}\n            id={FORM_ID}\n          />\n        </FlexItem>\n        <Divider isVertical />\n        <FlexItem\n          flex={{ default: 'flex_1' }}\n          className='mk--create-instance-modal__sidebar--content'\n        >\n          <InstanceInfo isKasTrial={isKasTrial} />\n        </FlexItem>\n      </Flex>\n    </Modal>\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","InstanceInfo","isKasTrial","t","useTranslation","qsContext","QuickStartContext","TextContent","Text","component","TextVariants","TextList","TextListVariants","Grid","sm","lg","hasGutter","GridItem","TextListItem","TextListItemVariants","Button","isSmall","isInline","variant","ButtonVariant","style","marginTop","onClick","setActiveQuickStart","QuotaAlert","quota","hasKafkaCreationFailed","userHasTrialInstance","undefined","loading","Alert","className","AlertVariant","title","customIcon","Spinner","size","alertProps","kasQuota","data","get","QuotaType","kasTrial","titleKey","messageKey","isServiceDown","remaining","getQuotaAlertProps","asKafkaRequestPayload","kafkaRequest","value","Error","region","multi_az","cloud_provider","isKafkaRequestInvalid","validated","CloudRegionSelect","selectCloudRegion","cloudRegions","Skeleton","fontSize","FormSelect","onChange","id","isDisabled","FormSelectOption","key","label","map","index","display_name","CloudProvidersTiles","cloudProviders","selectCloudProvider","getTileIcon","provider","toLowerCase","color","screenreaderText","Tile","icon","isSelected","CreateInstanceForm","createInstance","setKafkaRequest","fetchCloudRegions","formSubmitted","setFormSubmitted","setCloudRegions","validateName","trim","errorMessage","test","length","maxLength","validateCloudRegion","resetForm","cloudProvider","prevState","selectAz","selected","Form","onSubmit","event","preventDefault","then","FormAlert","FormGroup","helperText","helperTextInvalid","isRequired","fieldId","TextInput","type","autoFocus","ToggleGroup","Tooltip","content","ToggleGroupItem","text","buttonId","reference","getElementById","createElement","FORM_ID","CreateInstance","onCreate","hideModal","auth","useAuth","basePath","useConfig","addAlert","useAlert","getQuota","useQuota","isCreationInProgress","setCreationInProgress","setQuota","setHasKafkaCreationFailed","setCloudProviders","setUserHasTrialInstance","loadingQuota","res","kas","getToken","accessToken","DefaultApi","Configuration","getCloudProviders","providers","items","enabledCloudProviders","filter","p","enabled","reason","response","description","handleServerError","error","code","getUsername","loggedInUser","getKafkas","some","k","instance_type","handleModalToggle","Modal","ModalVariant","isOpen","onClose","appendTo","actions","form","spinnerAriaValueText","isLoading","Flex","direction","default","FlexItem","flex","apisService","createKafka","dataTestId","getCloudRegions","getCloudProviderRegions","regions","Divider","isVertical"],"sourceRoot":""}