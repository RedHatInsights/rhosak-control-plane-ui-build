{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/constants/constants.ts","webpack://mk-ui-frontend/./src/app/components/EmptyState/EmptyState.tsx","webpack://mk-ui-frontend/./src/openapi/base.ts","webpack://mk-ui-frontend/./src/openapi/api.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/TablePagination.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://mk-ui-frontend/./src/app/utils/error.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://mk-ui-frontend/./src/app/models/models.ts","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/Drawer/GenerateCredential.tsx","webpack://mk-ui-frontend/./src/app/Drawer/InstanceDrawer.tsx","webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/hooks/useTimeout.ts","webpack://mk-ui-frontend/./src/app/api/ApiContext.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://mk-ui-frontend/./src/app/components/Loading/Loading.tsx","webpack://mk-ui-frontend/./src/i18n/i18n.ts"],"names":["InstanceStatus","EmptyState","createStreamsInstance","setCreateStreamsInstance","t","useTranslation","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","onClick","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","name","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequestPayload","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","undefined","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","createServiceAccount","serviceAccountRequest","deleteKafkaById","id","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","listCloudProviderRegions","page","listCloudProviders","listKafkas","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI","StatusColumn","status","Flex","FlexItem","spacer","default","toLowerCase","COMPLETED","CheckCircleIcon","className","FAILED","ExclamationCircleIcon","PROVISIONING","Spinner","IconSize","ACCEPTED","PendingIcon","getStatusIcon","getStatus","DeleteInstanceModal","confirmActionLabel","cancelActionLabel","title","onConfirm","isModalOpen","setIsModalOpen","description","ModalVariant","titleIconVariant","instanceStatus","selectedInstance","useState","instanceNameInput","setInstanceNameInput","selectedInstanceName","handleModalToggle","Modal","isOpen","showClose","onClose","actions","key","ButtonVariant","isDisabled","toLocaleLowerCase","Text","dangerouslySetInnerHTML","__html","htmlFor","TextInput","type","value","onChange","TablePagination","perPage","itemCount","isCompact","paginationTitle","history","location","searchParams","URLSearchParams","setSearchParam","useCallback","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","Pagination","titles","StreamsToolbar","filterSelected","namesSelected","setNamesSelected","mainToggle","total","isFilterExpanded","setIsFilterExpanded","inputValue","setInputValue","toggleGroupItems","ToolbarGroup","ToolbarFilter","chips","deleteChip","category","chip","index","findIndex","prevState","Object","assign","splice","deleteChipGroup","categoryName","Select","SelectVariant","onToggle","selections","disabled","map","option","SelectOption","InputGroup","placeholder","getPlaceholder","input","trim","SearchIcon","Toolbar","collapseListedFiltersBreakpoint","clearAllFilters","inset","lg","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItem","alignment","widgetId","isServiceApiError","error","response","code","StreamsTableView","kafkaInstanceItems","onViewInstance","onConnectToInstance","refresh","kafkaDataLoaded","expectedTotal","getToken","useContext","AuthContext","ApiContext","keycloakContext","KeycloakContext","isDeleteModalOpen","setIsDeleteModalOpen","setSelectedInstance","tableColumns","setFilterSelected","items","setItems","addAlert","loggedInOwner","keycloak","tokenParsed","useEffect","length","lastItemsState","parse","filter","item","forEach","instances","cfItem","AlertVariant","incompleteKafkas","onSelectDeleteInstanceKebab","instance","onDeleteInstance","instanceId","apisService","DefaultApi","reason","instanceName","config","getDeleteInstanceModalConfig","Table","cells","rows","tableRow","loadingCount","loadingRowCount","totalPage","Math","floor","getLoadingRowsCount","i","Skeleton","row","cloud_provider","region","owner","cloudProviderDisplayName","regionDisplayName","originalData","preparedTableCells","actionResolver","rowData","_extraData","onDelete","isUserSameAsLoggedIn","tooltip","tooltipProps","position","content","style","pointerEvents","cursor","getActionResolver","TableHeader","TableBody","PaginationVariant","multi_az","CreateInstanceModal","newKafka","NewKafka","cloudRegionsAvailable","label","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","isFormValid","setIsFormValid","getTileIcon","provider","AwsIcon","color","onChangeAvailabilty","zone","isValid","message","test","res","Form","FormAlert","Alert","isInline","FormGroup","helperText","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","Tile","isSelected","FormSelect","FormSelectOption","ToggleGroup","GenerateCredential","isCreated","setIsCreated","setIsOpen","stepNo","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","onMove","curr","prev","handleChangeStep1","checked","event","target","handleChangeStep4","step1","TextContent","component","TextVariants","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","bodyContent","step3","step4","clientID","EmptyStateVariant","KeyIcon","InputGroupText","ClipboardCopy","isReadOnly","Bullseye","Checkbox","steps","nextButtonText","isFinishedStep","Wizard","onNext","onBack","hideClose","InstanceDrawer","activeTab","instanceDetail","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","resourcesTab","sampleCodeTab","CopyIcon","renderTextListItemDetail","TextListItem","TextListItemVariants","created_at","updated_at","detailsTab","Grid","GridItem","span","Card","isFlat","CardBody","TextList","TextListVariants","format","connectionTab","Tabs","activeKey","isSecondary","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","DrawerPanelContent","widths","Loading","DrawerHead","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","OpenshiftStreams","callback","delay","savedCallback","parseInt","get","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setMainToggle","setExpectedTotal","drawerRef","fetchKafkas","kafkaInstances","useRef","current","setTimeout","clearInterval","refreshKafkas","Drawer","isExpanded","onExpand","focus","DrawerContent","panelContent","PageSection","PageSectionVariants","Level","LevelItem","padding","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","body","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","pseudolocalizationEnabled","window","enabled","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","lng","Intl","NumberFormat","Date","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","windowError","console"],"mappings":"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","file":"517.d7ca08c50260e19d5b6b.js","sourcesContent":["  enum InstanceStatus{\n     COMPLETED=\"complete\",\n     ACCEPTED=\"accepted\",\n     PROVISIONING=\"provisioning\",\n     FAILED=\"failed\"\n  }\n\n  export{\n    InstanceStatus\n  }","import React from 'react';\nimport { Title, Button, EmptyState as PFEmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\ntype EmptyStateProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ createStreamsInstance, setCreateStreamsInstance }) => {\n  const { t } = useTranslation();\n  const onCreate = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n  return (\n    <>\n      <PFEmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('you_do_not_have_any_streams_instances_yet')}\n        </Title>\n        <EmptyStateBody>{t('create_a_streams_instance_to_get_started')}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={onCreate}>\n          {t('create_a_streams_instance')}\n        </Button>\n      </PFEmptyState>\n    </>\n  );\n};\n\nexport { EmptyState };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { InstanceStatus } from '@app/constants';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\n\ntype StatusColumnProps = {\n  status: string;\n};\n\nconst StatusColumn = ({ status }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    switch (status?.toLowerCase()) {\n      case InstanceStatus.COMPLETED:\n        return t('ready');\n      case InstanceStatus.FAILED:\n        return t('failed');\n      case InstanceStatus.PROVISIONING:\n        return t('creation_in_progress');\n      case InstanceStatus.ACCEPTED:\n        return t('creation_pending');\n      default:\n        return t('creation_pending');\n    }\n  };\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case InstanceStatus.COMPLETED:\n        return <CheckCircleIcon className=\"check-circle-icon-color\" />;\n      case InstanceStatus.FAILED:\n        return <ExclamationCircleIcon className=\"exclamation-circle-icon-color\" />;\n      case InstanceStatus.PROVISIONING:\n        return <Spinner size={IconSize.md} />;\n      case InstanceStatus.ACCEPTED:\n        return <PendingIcon />;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>{getStatusIcon()}</FlexItem>\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  TextInput,\n  TextContent,\n  Text,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/constants';\nimport './DeleteInstanceModal.css';\nimport { KafkaRequest } from 'src/openapi';\n\ninterface DeleteInstanceModalProps extends Omit<ModalProps, 'children'> {\n  confirmActionLabel?: string;\n  cancelActionLabel?: string;\n  description?: string;\n  selectedInstance: KafkaRequest;\n  isModalOpen: boolean;\n  instanceStatus: string | undefined;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onConfirm: (instance: KafkaRequest) => Promise<void>;\n}\n\nconst DeleteInstanceModal: FunctionComponent<DeleteInstanceModalProps> = ({\n  confirmActionLabel,\n  cancelActionLabel,\n  title,\n  onConfirm,\n  isModalOpen,\n  setIsModalOpen,\n  description,\n  variant = ModalVariant.small,\n  titleIconVariant = 'warning',\n  instanceStatus,\n  selectedInstance,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const selectedInstanceName = selectedInstance?.name;\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.COMPLETED) {\n      if (instanceNameInput?.toLocaleLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n  const onConfirmDelete = () => {\n    onConfirm(selectedInstance);\n  };\n  return (\n    <Modal\n      id=\"dialog-prompt-modal\"\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={t('delete_instance_modal')}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          key={'confirm-button'}\n          variant={ButtonVariant.danger}\n          onClick={onConfirmDelete}\n          isDisabled={isConfirmButtonDisabled()}\n        >\n          {confirmActionLabel || t('delete_instance')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {cancelActionLabel || t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Text className=\"text-content\" dangerouslySetInnerHTML={{ __html: description || '' }} />\n      {instanceStatus === InstanceStatus.COMPLETED && (\n        <>\n          <label\n            htmlFor=\"instance-name\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput id=\"instance-name\" type=\"text\" value={instanceNameInput} onChange={handleInstanceName} />\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport { DeleteInstanceModal };\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { Pagination, PaginationProps, PaginationTitles } from '@patternfly/react-core';\n\nexport const TablePagination: FunctionComponent<PaginationProps & PaginationTitles> = ({\n  page,\n  perPage,\n  itemCount,\n  variant,\n  isCompact,\n  paginationTitle,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  if (itemCount && itemCount > 0) {\n    return (\n      <Pagination\n        itemCount={itemCount}\n        perPage={perPage}\n        page={page}\n        onSetPage={onSetPage}\n        variant={variant || 'top'}\n        onPerPageSelect={onPerPageSelect}\n        isCompact={isCompact}\n        titles={{ paginationTitle }}\n      />\n    );\n  }\n  return null;\n};\n","import React, { useState } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarToggleGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarFilter,\n  ToolbarChipGroup,\n  ToolbarChip,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { TablePagination } from './TablePagination';\nimport './StreamsToolbarProps.css';\nimport { useTranslation } from 'react-i18next';\n\ntype StreamsToolbarProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  namesSelected: string[];\n  setNamesSelected: (value: string[]) => void;\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  filterSelected,\n  namesSelected,\n  setNamesSelected,\n  mainToggle,\n  total,\n  page,\n  perPage,\n}) => {\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string | undefined>();\n  const { t } = useTranslation();\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  // options for filter dropdown\n  const filterOptions = [{ value: 'Name', disabled: false }];\n\n  const onInputChange = (input?: string) => {\n    setInputValue(input);\n  };\n\n  const onClear = () => {\n    setNamesSelected([]);\n  };\n\n  const onDeleteGroup = (category: string | ToolbarChipGroup) => {\n    if (category.toString().toLowerCase() === 'name') {\n      setNamesSelected([]);\n    }\n  };\n  const onDelete = (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => {\n    if (category.toString().toLowerCase() === 'name') {\n      const index = namesSelected.findIndex((name) => name === chip.toString().toLowerCase());\n      if (index >= 0) {\n        const prevState = Object.assign([], namesSelected);\n        prevState.splice(index, 1);\n        setNamesSelected(prevState);\n      }\n    }\n  };\n\n  const onSearch = () => {\n    if (inputValue && inputValue.trim() !== '') {\n      const index = namesSelected.findIndex((name) => name === inputValue.trim().toLowerCase());\n      if (index < 0) {\n        setNamesSelected([...namesSelected, inputValue.trim()]);\n        setInputValue('');\n      }\n    }\n  };\n  const getPlaceholder = () => {\n    if (filterSelected) {\n      const placeholder = filterSelected?.toLowerCase() + '_lower';\n      return t(`filter_by_${placeholder}`);\n    }\n    return '';\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter\n          chips={namesSelected}\n          deleteChip={onDelete}\n          deleteChipGroup={onDeleteGroup}\n          categoryName={t('name')}\n        >\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected && t(filterSelected.toLowerCase())}\n            isOpen={isFilterExpanded}\n          >\n            {filterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={t(option.value.toLowerCase())} />\n            ))}\n          </Select>\n          <InputGroup className=\"filter-text-input\">\n            <TextInput\n              name=\"filter text input\"\n              id=\"filterText\"\n              type=\"search\"\n              aria-label=\"Search filter input\"\n              placeholder={getPlaceholder()}\n              onChange={onInputChange}\n              value={inputValue}\n            />\n            <Button variant={ButtonVariant.control} onClick={onSearch} aria-label=\"Search instances\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  return (\n    <Toolbar id=\"instance-toolbar\" collapseListedFiltersBreakpoint=\"md\" clearAllFilters={onClear} inset={{ lg: 'insetLg' }}>\n      <ToolbarContent>\n        {mainToggle && (\n          <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n            {toggleGroupItems}\n          </ToolbarToggleGroup>\n        )}\n        <ToolbarItem>\n          <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n            {t('create_streams_instance')}\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <TablePagination\n            widgetId=\"pagination-options-menu-top\"\n            itemCount={total}\n            page={page}\n            perPage={perPage}\n            isCompact={true}\n            paginationTitle={t('minimal_pagination')}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport { StreamsToolbar };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nexport const isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  Table,\n  TableBody,\n  TableHeader,\n  IRowCell,\n} from '@patternfly/react-table';\nimport { AlertVariant, Card, Divider, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { InstanceStatus } from '@app/constants';\nimport { getCloudProviderDisplayName, getCloudRegionDisplayName } from '@app/utils';\nimport { DeleteInstanceModal } from '@app/components/DeleteInstanceModal';\nimport { TablePagination } from './TablePagination';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { KeycloakContext } from '@app/auth/keycloak/KeycloakContext';\nimport { useHistory } from 'react-router-dom';\n\ntype TableProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onConnectToInstance: (instance: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: (operation: string) => void;\n  page: number;\n  perPage: number;\n  total: number;\n  kafkaDataLoaded: boolean;\n  expectedTotal: number;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.COMPLETED) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onConnectToInstance,\n  refresh,\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  expectedTotal,\n}: TableProps) => {\n  const { getToken } = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const keycloakContext = useContext(KeycloakContext);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const tableColumns = [t('name'), t('cloud_provider'), t('region'), t('owner'), t('status')];\n  const [filterSelected, setFilterSelected] = useState('Name');\n  const [namesSelected, setNamesSelected] = useState<string[]>([]);\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const loggedInOwner: string | undefined =\n    keycloakContext?.keycloak?.tokenParsed && keycloakContext?.keycloak?.tokenParsed['username'];\n\n  // function to get exact number of skeleton count required for the current page\n  const getLoadingRowsCount = () => {\n    // initiaise loadingRowCount by perPage\n    let loadingRowCount = perPage;\n    /*\n      if number of expected count is greater than 0\n        calculate the loadingRowCount \n      else\n        leave the loadingRowCount to perPage\n     */\n    if (expectedTotal && expectedTotal > 0) {\n      // get total number of pages\n      const totalPage =\n        expectedTotal % perPage !== 0 ? Math.floor(expectedTotal / perPage) + 1 : Math.floor(expectedTotal / perPage);\n      // check whether the current page is the last page\n      if (page === totalPage) {\n        // check whether to total expected count is greater than perPage count\n        if (expectedTotal > perPage) {\n          // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n          loadingRowCount = expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n        } else {\n          loadingRowCount = expectedTotal;\n        }\n      }\n    }\n    // return the exact number of skeleton expected at the time of loading\n    return loadingRowCount !== 0 ? loadingRowCount : perPage;\n  };\n  useEffect(() => {\n    /* \n      the logic is to redirect the user to previous page \n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.COMPLETED || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.COMPLETED) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const getActionResolver = (rowData: IRowData, onDelete: (data: KafkaRequest) => void) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    const isUserSameAsLoggedIn = originalData.owner === loggedInOwner;\n    const resolver: (IAction | ISeparator)[] = mainToggle\n      ? [\n          {\n            title: t('view_details'),\n            id: 'view-instance',\n            onClick: () => onViewInstance(originalData),\n          },\n          {\n            title: t('connect_to_instance'),\n            id: 'connect-instance',\n            onClick: () => onConnectToInstance(originalData),\n          },\n          {\n            title: t('delete_instance'),\n            id: 'delete-instance',\n            onClick: () => isUserSameAsLoggedIn && onDelete(originalData),\n            tooltip: !isUserSameAsLoggedIn,\n            tooltipProps: {\n              position: 'left',\n              content: t('no_permission_to_delete_kafka'),\n            },\n            isDisabled: !isUserSameAsLoggedIn,\n            style: {\n              pointerEvents: 'auto',\n              cursor: 'default',\n            },\n          },\n        ]\n      : [\n          {\n            title: t('view_details'),\n            id: 'view-instance',\n            onClick: () => onViewInstance(originalData),\n          },\n          {\n            title: t('delete_instance'),\n            id: 'delete-instance',\n            onClick: () => isUserSameAsLoggedIn && onDelete(originalData),\n            tooltip: !isUserSameAsLoggedIn,\n            tooltipProps: {\n              position: 'left',\n              content: t('no_permission_to_delete_kafka'),\n            },\n            isDisabled: !isUserSameAsLoggedIn,\n            style: {\n              pointerEvents: 'auto',\n              cursor: 'default',\n            },\n          },\n        ];\n    return resolver;\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount();\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, status, owner } = row;\n      const cloudProviderDisplayName = getCloudProviderDisplayName(cloud_provider);\n      const regionDisplayName = getCloudRegionDisplayName(region);\n      tableRow.push({\n        cells: [\n          name,\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} />,\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, onSelectDeleteInstanceKebab);\n  };\n\n  const onSelectDeleteInstanceKebab = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.deleteKafkaById(instanceId).then(() => {\n        setIsDeleteModalOpen(false);\n        addAlert(t('kafka_successfully_deleted'), AlertVariant.success);\n        refresh('delete');\n      });\n    } catch (error) {\n      setIsDeleteModalOpen(false);\n      let reason;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        createStreamsInstance={createStreamsInstance}\n        setCreateStreamsInstance={setCreateStreamsInstance}\n        filterSelected={filterSelected}\n        namesSelected={namesSelected}\n        setFilterSelected={setFilterSelected}\n        setNamesSelected={setNamesSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n      />\n      <Table\n        cells={tableColumns}\n        rows={preparedTableCells()}\n        aria-label={t('cluster_instance_list')}\n        actionResolver={actionResolver}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <TablePagination\n        widgetId=\"pagination-options-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        paginationTitle={t('full_pagination')}\n      />\n      {isDeleteModalOpen && (\n        <DeleteInstanceModal\n          title={title}\n          selectedInstance={selectedInstance}\n          isModalOpen={isDeleteModalOpen}\n          instanceStatus={selectedInstance?.status}\n          setIsModalOpen={setIsDeleteModalOpen}\n          onConfirm={onDeleteInstance}\n          description={description}\n          confirmActionLabel={confirmActionLabel}\n        />\n      )}\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup,\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi } from '../../../openapi';\nimport { cloudProviderOptions, cloudRegionOptions } from '../../utils/utils';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\n\ntype CreateInstanceModalProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  refresh: (operation:string) => void;\n};\n\nconst CreateInstanceModal: React.FunctionComponent<CreateInstanceModalProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  refresh,\n}: CreateInstanceModalProps) => {\n  const { t, i18n } = useTranslation();\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = 'aws';\n  newKafka.region = 'us-east-1';\n  newKafka.multi_az = true;\n  const cloudRegionsAvailable = [{ value: 'please_select', label: 'please_select', disabled: false }, ...cloudRegionOptions];\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const { getToken } = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const { addAlert } = useAlerts();\n\n  const onCreateInstance = async () => {\n    let isValid = true;\n\n    if (kafkaFormData.name === undefined || kafkaFormData.name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(kafkaFormData.name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n\n    if (kafkaFormData.region === undefined || kafkaFormData.region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n\n    const accessToken = await getToken();\n\n    if (isValid) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.createKafka(true, kafkaFormData).then((res) => {\n          // addAlert(t('kafka_creation_accepted'), AlertVariant.info);\n          handleModalToggle();\n          refresh('create');\n        });\n      } catch (error) {\n        let reason;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    } else {\n      setIsFormValid(false);\n    }\n  };\n\n  const handleModalToggle = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (isValid) {\n      if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n      if (nameValidated.fieldState === 'error') {\n        setNameValidated({ fieldState: 'default', message: '' });\n      }\n    } else {\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: region });\n  };\n\n  const getTileIcon = (provider: string) => {\n    switch (provider.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"cloud-region-icon\" />;\n      default:\n        return;\n    }\n  };\n  const onChangeAvailabilty = (zone: string) => {\n    setKafkaFormData({ ...kafkaFormData, multi_az: zone === 'multi' });\n  };\n  return (\n    <>\n      <Modal\n        variant={ModalVariant.medium}\n        title={t('create_a_streams_instance')}\n        isOpen={createStreamsInstance}\n        onClose={handleModalToggle}\n        aria-modal=\"true\"        \n        actions={[\n          <Button key=\"create\" variant=\"primary\" onClick={onCreateInstance} isDisabled={!isFormValid}>\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Form>\n          {!isFormValid && (\n            <FormAlert>\n              <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n            </FormAlert>\n          )}\n          <FormGroup\n            label={t('instance_name')}\n            helperText={t('create_instance_name_helper_text')}\n            helperTextInvalid={nameValidated.message}\n            helperTextInvalidIcon={nameValidated.message != '' && <ExclamationCircleIcon />}\n            isRequired\n            validated={nameValidated.fieldState}\n            fieldId=\"form-instance-name\"\n          >\n            <TextInput\n              isRequired\n              validated={nameValidated.fieldState}\n              type=\"text\"\n              id=\"form-instance-name\"\n              name=\"instance-name\"\n              value={kafkaFormData?.name}\n              onChange={handleInstanceNameChange}\n            />\n          </FormGroup>\n          <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n            {cloudProviderOptions.map((provider) => (\n              <Tile\n                key={`tile-${provider.value}`}\n                title={t(provider.label)}\n                icon={getTileIcon(provider.value)}\n                isSelected={kafkaFormData.cloud_provider === provider.value}\n                onClick={() => setKafkaFormData({ ...kafkaFormData, cloud_provider: provider.value })}\n              />\n            ))}\n          </FormGroup>\n          <FormGroup\n            label={t('cloud_region')}\n            helperTextInvalid={cloudRegionValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            validated={cloudRegionValidated.fieldState}\n            fieldId=\"form-cloud-region-option\"\n          >\n            <FormSelect\n              validated={cloudRegionValidated.fieldState}\n              value={kafkaFormData.region}\n              onChange={handleCloudRegionChange}\n              id=\"cloud-region-select\"\n              name=\"cloud-region\"\n              aria-label={t('cloud_region')}\n            >\n              {cloudRegionsAvailable.map((option, index) => (\n                <FormSelectOption key={index} value={option.value} label={t(option.value)} />\n              ))}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n            <ToggleGroup aria-label={t('availability_zone_selection')}>\n              {/*\n                  TODO: Currently using HTML version\n                  Issue: https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/24\n              */}\n              <div className=\"pf-c-toggle-group__item\">\n                <button\n                  className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === false && 'pf-m-selected'}`}\n                  type=\"button\"\n                  id=\"single\"\n                  disabled\n                  onClick={() => {\n                    onChangeAvailabilty('single');\n                  }}\n                >\n                  <span className=\"pf-c-toggle-group__text\"> {t('single')}</span>\n                </button>\n              </div>\n              <div className=\"pf-c-toggle-group__item\">\n                <button\n                  className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === true && 'pf-m-selected'}`}\n                  type=\"button\"\n                  onClick={() => {\n                    onChangeAvailabilty('multi');\n                  }}\n                  id=\"multi\"\n                >\n                  <span className=\"pf-c-toggle-group__text\"> {t('multi')}</span>\n                </button>\n              </div>\n            </ToggleGroup>\n          </FormGroup>\n        </Form>\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useState } from 'react';\nimport {\n  Alert,\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  Divider,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  PageSection,\n  PageSectionVariants,\n  Popover,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\n\nconst GenerateCredential: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClose = () => {\n    setIsOpen(!isOpen);\n    setIsCreated(!isCreated);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      <Alert variant=\"danger\" isInline title=\"These credentials were not actually generated from this flow as it is part of the mock UI. For now, please go to the details tab to generate credentials.\" />\n      <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={KeyIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('credential_successfully_generated')}\n        </Title>\n        <EmptyStateBody>{t('clientid_empty_state_body')}</EmptyStateBody>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"no-wrap\">{t('client_id')}</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            FSLG934JM98IL\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"no-wrap\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            898VsyDInUfhSd9ng8K/REs9r8h0n8j98s5c4JdeJfUg/E8\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button variant=\"primary\" isDisabled={!confirmationCheckbox} onClick={handleClose}>\n          {t('close')}\n        </Button>\n      </EmptyState>\n    </>\n  );\n\n  const steps: WizardStep[] = [\n    { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n    { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n    { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n    { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') },\n    { id: 5, name: t('finish'), component: clientID, isFinishedStep: true },\n  ];\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      {isCreated ? (\n        <>\n          <FlexItem className=\"pf-m-align-right pf-m-spacer-none\">\n            <Button variant=\"danger\" onClick={handleModalToggle} className=\"pf-u-ml-md pf-u-mb-md\">\n              {t('generate_new_credential')}\n            </Button>\n          </FlexItem>\n          <FlexItem className=\"pf-m-grow\">\n            <Alert variant=\"success\" isInline title={t('credentials_successfully_generated')} />\n          </FlexItem>\n        </>\n      ) : (\n        <FlexItem className=\"pf-m-align-right\">\n          <Button variant=\"secondary\" onClick={handleModalToggle} className=\"pf-u-ml-md\">\n            {t('generate_credential')}\n          </Button>\n        </FlexItem>\n      )}\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={steps}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={handleModalToggle}\n        isOpen={isOpen}\n        hideClose={stepNo === 5}\n      />\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Tabs,\n  Tab,\n  TabTitleText,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport './InstanceDrawer.css';\nimport { GenerateCredential } from './GenerateCredential';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { KafkaRequest } from 'src/openapi';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { useTranslation } from 'react-i18next';\n\nexport type InstanceDrawerProps = {\n  mainToggle: boolean;\n  onClose: () => void;\n  isExpanded: boolean;\n  drawerRef: any;\n  instanceDetail?: KafkaRequest;\n  activeTab?: 'Details' | 'Connection';\n};\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n}) => {\n  const {t} = useTranslation();\n  const [activeTab1Key, setActiveTab1Key] = useState(0);\n  const [activeTab2Key, setActiveTab2Key] = useState(0);\n  useEffect(() => {\n    setActiveTab1Key(activeTab === 'Details' ? 0 : 1);\n  }, [activeTab]);\n\n  const handleTab1Click = (_event, tabIndex) => {\n    setActiveTab1Key(tabIndex);\n  };\n\n  const handleTab2Click = (_event, tabIndex) => {\n    setActiveTab2Key(tabIndex);\n  };\n\n  const resourcesTab = (\n    <>\n      <div className=\"tab-content-body\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.small}>\n            {t('drawer_resource_tab_body_description_1')}\n          </Text>\n          <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_resource_tab_body_description_2')}\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('external_server')}\n          </Text>\n        </TextContent>\n        <Flex>\n          <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n            <ClipboardCopy>strimzi-external-bootstrap-01:1234</ClipboardCopy>\n          </FlexItem>\n          <GenerateCredential />\n        </Flex>\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_resource_tab_body_description_3')}\n          </Text>\n        </TextContent>\n        <ClipboardCopy>https: // : 30123</ClipboardCopy>\n      </div>\n    </>\n  );\n\n  const sampleCodeTab = (\n    <>\n      <div className=\"tab-content-body\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n          {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n          <div className=\"pf-c-code-editor__tab\">\n            <span className=\"pf-c-code-editor__tab-text\">Java</span>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n          </div>\n        </div>\n      </div>\n\n      <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n         {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">\n              bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n              sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n            </pre>\n          </div>\n        </div>\n      </div>\n      </div>\n    </>\n  );\n\n  const renderTextListItemDetail = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  const { id, created_at, updated_at, owner } = instanceDetail || {};\n  dayjs.extend(localizedFormat);\n\n  const detailsTab = (\n    <>\n      <div className=\"tab-content-body\">\n        {mainToggle && (\n          <Grid className=\"instance-card-grid\">\n            <GridItem span={6} className=\"instance-detail-first-grid\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItemDetail(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItemDetail(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItemDetail(t('id'), id)}\n            {renderTextListItemDetail(t('owner'), owner)}\n            {renderTextListItemDetail(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItemDetail(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n\n  const connectionTab = (\n    <>\n      <div className=\"tab-content-body pf-m-secondary\">\n        <Tabs activeKey={activeTab2Key} isSecondary onSelect={handleTab2Click}>\n          <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n            {resourcesTab}\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n            {sampleCodeTab}\n          </Tab>\n        </Tabs>\n      </div>\n    </>\n  );\n\n  return (\n    <DrawerPanelContent className=\"instance-drawer\" widths={{ default: 'width_50' }}>\n      {instanceDetail === undefined ? (\n        <Loading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                {t('instance_name')}\n              </Text>\n              <Title headingLevel=\"h1\" size={TitleSizes['xl']} className=\"pf-u-mt-0 \">\n                {instanceDetail?.name}\n              </Title>\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n              <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n                {detailsTab}\n              </Tab>\n              {mainToggle && (\n                <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>}>\n                  {connectionTab}\n                </Tab>\n              )}\n            </Tabs>\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Drawer,\n  DrawerContent,\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Switch,\n  Title,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { EmptyState } from '../components/EmptyState/EmptyState';\nimport { StreamsTableView } from '../components/StreamsTableView/StreamsTableView';\nimport { CreateInstanceModal } from '../components/CreateInstanceModal/CreateInstanceModal';\nimport { DefaultApi, KafkaRequest, KafkaRequestList } from '../../openapi/api';\nimport { AlertProvider } from '../components/Alerts/Alerts';\nimport { InstanceDrawer } from '../Drawer/InstanceDrawer';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError } from '@app/utils/error';\n\ntype OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance }: OpenShiftStreamsProps) => {\n  const { getToken } = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [createStreamsInstance, setCreateStreamsInstance] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [mainToggle, setMainToggle] = useState(false);\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  // state to store the expected total kafka instances based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n\n  const drawerRef = React.createRef<any>();\n\n  const onExpand = () => {\n    drawerRef.current && drawerRef.current.focus();\n  };\n\n  const onCloseClick = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onConnectInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    const accessToken = await getToken();\n\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [getToken, page, perPage]);\n\n  useEffect(() => {\n    fetchKafkas();\n  }, []);\n\n  useTimeout(fetchKafkas, 5000);\n\n  const handleSwitchChange = (checked: boolean) => {\n    setMainToggle(checked);\n  };\n\n  const refreshKafkas = (value: string) => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    if (value === 'create') {\n      /*\n        increase the expected total by 1 \n        as create operation will lead to adding a kafka in the list of response\n      */\n      setExpectedTotal(kafkaInstancesList.total + 1);\n    } else if (value === 'delete') {\n      /*\n        decrease the expected total by 1 \n        as create operation will lead to removing a kafka in the list of response\n      */\n      setExpectedTotal(kafkaInstancesList.total - 1);\n    }\n    fetchKafkas();\n  };\n\n  return (\n    <>\n      <AlertProvider>\n        <Drawer isExpanded={selectedInstance != null} onExpand={onExpand}>\n          <DrawerContent\n            panelContent={\n              <InstanceDrawer\n                mainToggle={mainToggle}\n                onClose={onCloseClick}\n                isExpanded={selectedInstance != null}\n                drawerRef={drawerRef}\n                activeTab={selectedInstance?.activeTab}\n                instanceDetail={selectedInstance?.instanceDetail}\n              />\n            }\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n                <LevelItem>\n                  <Switch\n                    id=\"simple-switch\"\n                    label={t('mock_ui')}\n                    labelOff={t('currently_supported_ui')}\n                    isChecked={mainToggle}\n                    onChange={handleSwitchChange}\n                  />\n                </LevelItem>\n              </Level>\n            </PageSection>\n              {kafkaInstanceItems === undefined ? (\n                <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                  <Loading />\n                </PageSection>\n              ) : kafkaInstancesList.total < 1 ? (\n                <PageSection>\n                  <EmptyState\n                    createStreamsInstance={createStreamsInstance}\n                    setCreateStreamsInstance={setCreateStreamsInstance}\n                    mainToggle={mainToggle}\n                  />\n                </PageSection>\n              ) : (\n                <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                  <StreamsTableView\n                    kafkaInstanceItems={kafkaInstanceItems}\n                    mainToggle={mainToggle}\n                    onConnectToInstance={onConnectInstance}\n                    onViewInstance={onViewInstance}\n                    refresh={refreshKafkas}\n                    kafkaDataLoaded={kafkaDataLoaded}\n                    createStreamsInstance={createStreamsInstance}\n                    setCreateStreamsInstance={setCreateStreamsInstance}\n                    page={page}\n                    perPage={perPage}\n                    total={kafkaInstancesList?.total}\n                    expectedTotal={expectedTotal}\n                  />\n                </PageSection>\n              )}\n              {createStreamsInstance && (\n                <CreateInstanceModal\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  mainToggle={mainToggle}\n                  refresh={refreshKafkas}\n                />\n              )}\n          </DrawerContent>\n        </Drawer>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type AlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string|React.ReactElement;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport { PageSection, Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const __PUBLIC_PATH__: string\ndeclare const window: Window & {\n  windowError: string\n}\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__PUBLIC_PATH__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: [\n        'public'\n      ],\n      defaultNS: 'public',\n      nsSeparator: '~',\n      keySeparator: false,\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function(value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function(lng, ns, key) {\n        window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    },\n  );\n\ni18n.on('languageChanged', function(lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n"],"sourceRoot":""}