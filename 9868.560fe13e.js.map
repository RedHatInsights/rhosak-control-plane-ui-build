{"version":3,"file":"9868.560fe13e.js","mappings":"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","sources":["webpack://kas-ui/./src/app/api.ts","webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateKafkaInstanceServices.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateInstance.ts","webpack://kas-ui/./src/app/models/kafka.ts"],"sourcesContent":["import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport {\n  AxiosCacheRequestConfig,\n  createCacheAdapter,\n} from \"axios-simple-cache-adapter\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\n\nconst adapter = createCacheAdapter({\n  debug: localStorage.getItem(\"log-axios\") !== null,\n});\n\nexport const useKms = () => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: kasBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const kmsApi = new DefaultApi(\n      new Configuration({\n        accessToken: auth.kas.getToken(),\n        basePath: kasBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return kmsApi;\n  }, [auth.kas, kasBasePath]);\n};\n\nexport const useAms = () => {\n  const auth = useAuth();\n  const {\n    ams: { apiBasePath: amsBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const amsApi = new AppServicesApi(\n      new Configuration({\n        accessToken: auth.ams.getToken(),\n        basePath: amsBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return amsApi;\n  }, [amsBasePath, auth.ams]);\n};\n","// A map of modal components to their lazy loaded implementations\nimport { FunctionComponent, LazyExoticComponent, lazy } from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateInstanceProps>>,\n      variant: \"medium\",\n      title: t(\"create_a_kafka_instance\"),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteInstanceProps>>,\n      variant: \"small\",\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<TransferOwnershipProps>>,\n      variant: \"medium\",\n      title: t(\"change_owner\"),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateServiceAccountProps>>,\n      variant: \"medium\",\n      title: t(\"serviceAccount.create_a_service_account\"),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteServiceAccountProps>>,\n      title: t(\"serviceAccount.delete_service_account\") + \"?\",\n      variant: \"small\",\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials\"\n          )\n      ) as LazyExoticComponent<\n        FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t(\"serviceAccount.reset_service_account_credentials\")}?`,\n      variant: \"medium\",\n    },\n  };\n};\n\nexport const KasModalLoader: FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","export enum InstanceDrawerTab {\n  DETAILS = \"details\",\n  CONNECTION = \"connection\",\n}\n","import { useAms, useKms } from \"@app/api\";\nimport { InstanceType } from \"@app/utils\";\nimport {\n  CloudProvider,\n  CloudProviderInfo,\n  CreateKafkaInstanceServices,\n  MarketPlace,\n  MarketPlaceSubscriptions,\n  RegionInfo,\n  Size,\n  StandardSizes,\n} from \"@rhoas/app-services-ui-components\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { CloudRegion, SupportedKafkaSize } from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\nimport { QuotaCost } from \"@rhoas/account-management-sdk\";\n\nconst standardId = \"RHOSAK\" as const;\nconst developerId = \"RHOSAKTrial\" as const;\nconst resourceName = \"rhosak\" as const;\n\nfunction isStandardQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"standard\");\n}\nfunction isMarketplaceQuota(q: QuotaCost) {\n  return q.related_resources?.find((r) => r.billing_model === \"marketplace\");\n}\n\nexport const useStandardQuota = () => {\n  const getApi = useAms();\n  return useCallback(async () => {\n    const api = getApi();\n    const account = await api.apiAccountsMgmtV1CurrentAccountGet();\n    const orgId = account?.data?.organization?.id;\n    if (!orgId) {\n      throw new Error(\"User has no organization id\");\n    }\n    const quotaResponse =\n      await api.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n        orgId,\n        undefined,\n        true,\n        undefined,\n        true\n      );\n    if (quotaResponse.status !== 200) {\n      throw new Error(quotaResponse.statusText);\n    }\n    const standardQuotas = quotaResponse.data.items?.filter((q) =>\n      q.related_resources?.find(\n        (r) => r.resource_name === resourceName && r.product === standardId\n      )\n    );\n\n    const prepaidQuota = standardQuotas?.find(isStandardQuota);\n\n    const marketplaceQuotas = standardQuotas?.some(isMarketplaceQuota)\n      ? standardQuotas?.filter(isMarketplaceQuota)\n      : undefined;\n\n    const hasTrialQuota =\n      (prepaidQuota === undefined &&\n        marketplaceQuotas === undefined &&\n        quotaResponse.data.items?.some((q) =>\n          q.related_resources?.find(\n            (r) => r.resource_name === resourceName && r.product === developerId\n          )\n        )) ||\n      false;\n\n    const remainingPrepaidQuota = prepaidQuota\n      ? prepaidQuota.allowed - prepaidQuota.consumed\n      : undefined;\n    const remainingMarketplaceQuota = marketplaceQuotas\n      ? marketplaceQuotas.reduce((agg, q) => q.allowed - q.consumed + agg, 0)\n      : undefined;\n    const unaggregatedSubscriptions = marketplaceQuotas\n      ?.filter((q) => q.cloud_accounts !== undefined)\n      .flatMap((q) => q.cloud_accounts!);\n    const subscriptionMarketplaces = Array.from(\n      new Set(\n        unaggregatedSubscriptions?.map(\n          (s) => s.cloud_provider_id as MarketPlace\n        )\n      )\n    );\n    const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n      unaggregatedSubscriptions\n        ? subscriptionMarketplaces.map((marketplace) => ({\n            marketplace,\n            subscriptions: unaggregatedSubscriptions\n              .filter((s) => s.cloud_provider_id === marketplace)\n              .map((s) => s.cloud_account_id!),\n          }))\n        : [];\n\n    return {\n      hasTrialQuota,\n      remainingPrepaidQuota,\n      remainingMarketplaceQuota,\n      marketplaceSubscriptions,\n    };\n  }, [getApi]);\n};\n\nexport const useCheckStandardQuota =\n  (): CreateKafkaInstanceServices[\"checkStandardQuota\"] => {\n    const getQuota = useStandardQuota();\n    const checkStandardQuota: CreateKafkaInstanceServices[\"checkStandardQuota\"] =\n      useCallback(\n        async ({ onNoQuotaAvailable, onOutOfQuota, onQuotaAvailable }) => {\n          try {\n            const {\n              hasTrialQuota,\n              remainingPrepaidQuota,\n              remainingMarketplaceQuota,\n              marketplaceSubscriptions,\n            } = await getQuota();\n\n            if (\n              remainingMarketplaceQuota !== undefined ||\n              remainingPrepaidQuota !== undefined\n            ) {\n              if (\n                (remainingMarketplaceQuota || 0) === 0 &&\n                (remainingPrepaidQuota || 0) === 0\n              ) {\n                onOutOfQuota({\n                  quota: {\n                    marketplaceSubscriptions,\n                  },\n                });\n              } else {\n                onQuotaAvailable({\n                  quota: {\n                    remainingPrepaidQuota,\n                    remainingMarketplaceQuota,\n                    marketplaceSubscriptions,\n                  },\n                });\n              }\n            } else {\n              onNoQuotaAvailable({ hasTrialQuota });\n            }\n          } catch (e) {\n            onNoQuotaAvailable({ hasTrialQuota: false });\n          }\n        },\n        [getQuota]\n      );\n    return checkStandardQuota;\n  };\n\nexport const useCheckDeveloperAvailability =\n  (): CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] => {\n    const { getUsername } = useAuth();\n    const getApi = useKms();\n    const checkDeveloperAvailability: CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] =\n      useCallback(\n        async ({ onAvailable, onUnavailable, onUsed }) => {\n          try {\n            const api = getApi();\n            const loggedInUser = await getUsername();\n            const filter = `owner = ${loggedInUser}`;\n\n            const res = await api.getKafkas(\"\", \"\", \"\", filter);\n            if (res.data.items) {\n              const hasTrialRunning = res.data.items.some(\n                (k) =>\n                  k?.instance_type === InstanceType?.eval ||\n                  k?.instance_type === InstanceType?.developer\n              );\n              if (hasTrialRunning) {\n                onUsed();\n              } else {\n                onAvailable();\n              }\n            }\n          } catch (e) {\n            onUnavailable();\n          }\n        },\n        [getApi, getUsername]\n      );\n    return checkDeveloperAvailability;\n  };\n\nexport const useFetchProvidersWithRegions =\n  (): CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] => {\n    const getApi = useKms();\n    const fetchRegions = useFetchProviderRegions();\n    const fetchProvidersWithRegions: CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] =\n      useCallback(\n        async (plan, { onAvailable, onUnavailable }) => {\n          try {\n            const api = getApi();\n            const res = await api.getCloudProviders();\n            const allProviders = res?.data?.items || [];\n\n            const providers = (\n              await Promise.all(\n                allProviders\n                  .filter((p) => p.enabled)\n                  .map(async (provider) => {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    const regions = await fetchRegions(provider.id!, plan);\n                    const providerInfo: CloudProviderInfo = {\n                      id: provider.id as CloudProvider,\n                      displayName: provider.display_name!,\n                      regions,\n                    };\n                    return regions.length > 0 ? providerInfo : null;\n                  })\n              )\n            ).filter((provider) => Boolean(provider)) as CloudProviderInfo[];\n            if (providers.length === 0) {\n              throw new Error(\"No available providers\");\n            }\n            const firstProvider = providers[0];\n            onAvailable({ providers, defaultProvider: firstProvider?.id });\n          } catch (e) {\n            onUnavailable();\n          }\n        },\n        [fetchRegions, getApi]\n      );\n    return fetchProvidersWithRegions;\n  };\n\nexport const useFetchProviderRegions = () => {\n  const getApi = useKms();\n  return useCallback(\n    async function fetchProviderRegions(\n      provider: string,\n      instanceType: string\n    ): Promise<Array<RegionInfo & Pick<CloudRegion, \"capacity\">>> {\n      const api = getApi();\n      const res = await api.getCloudProviderRegions(provider);\n\n      if (!res?.data?.items) {\n        return [];\n      }\n\n      const regionsForInstance = res.data.items.filter(\n        (region) =>\n          region.enabled &&\n          region.capacity.some((c) => c.instance_type === instanceType)\n      );\n\n      return regionsForInstance.map((r) => {\n        const max_capacity_reached = r.capacity?.some(\n          (c) =>\n            c.instance_type === instanceType && c.available_sizes?.length === 0\n        );\n\n        return {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          id: r.id!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          displayName: r.display_name!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          isDisabled: max_capacity_reached,\n          capacity: r.capacity,\n        };\n      });\n    },\n    [getApi]\n  );\n};\n\nexport const useGetSizes = (instanceType: \"developer\" | \"standard\") => {\n  const getApi = useKms();\n  const fetchRegions = useFetchProviderRegions();\n  return useCallback(\n    async (provider: CloudProvider, region: string) => {\n      const api = getApi();\n      const regions = await fetchRegions(provider, instanceType);\n      const regionInfo = regions.find((r) => r.id === region);\n      const availableSizes =\n        regionInfo?.capacity.flatMap((c) =>\n          c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n        ) || [];\n      const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n        provider,\n        region\n      );\n      if (!sizes?.data?.instance_types) {\n        throw new Error(`No instance_types from backend`);\n      }\n\n      const standardSizes =\n        sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes ||\n        [];\n\n      return standardSizes.map(\n        apiSizeToComponentSize.bind(\n          undefined,\n          (id) => !availableSizes.includes(`${instanceType}.${id}`)\n        )\n      );\n    },\n    [fetchRegions, getApi, instanceType]\n  );\n};\n\nexport const useGetStandardSizes =\n  (): CreateKafkaInstanceServices[\"getStandardSizes\"] => {\n    const getSizes = useGetSizes(\"standard\");\n    return getSizes;\n  };\n\nexport const useGetTrialSizes =\n  (): CreateKafkaInstanceServices[\"getTrialSizes\"] => {\n    const getStandardSizes = useGetSizes(\"standard\");\n    const getDeveloperSizes = useGetSizes(\"developer\");\n    return useCallback(\n      async (provider, region) => {\n        let standardSizes: StandardSizes;\n        try {\n          standardSizes = await getStandardSizes(provider, region);\n          if (standardSizes.length === 0) {\n            throw new Error(\"Couldn't load standard sizes\");\n          }\n        } catch (e) {\n          // It can happen that the selected provider doesn't support standard instances.\n          // In this case we provide a faux sample list of sizes just to make the slider happy.\n          standardSizes = [\n            { id: \"1\", displayName: \"1\", quota: 1 },\n            { id: \"2\", displayName: \"2\", quota: 2 },\n          ] as StandardSizes;\n        }\n        const trialSizes = await getDeveloperSizes(provider, region);\n        return {\n          standard: standardSizes,\n          trial: trialSizes[0],\n        };\n      },\n      [getDeveloperSizes, getStandardSizes]\n    );\n  };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): Size & { trialDurationHours: number } {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes } from \"@app/utils\";\nimport { useKms } from \"@app/api\";\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const getApi = useKms();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = getApi();\n\n      try {\n        const kafkaRequest = asKafkaRequestPayload(\n          createEmptyNewKafkaRequestPayload()\n        );\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"standard\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n"],"names":["adapter","createCacheAdapter","debug","localStorage","getItem","useKms","auth","useAuth","kas","apiBasePath","kasBasePath","useConfig","useCallback","DefaultApi","Configuration","accessToken","getToken","basePath","undefined","cache","useAms","ams","amsBasePath","AppServicesApi","KasModalLoader","registerModals","useModal","t","useTranslation","ModalType","lazyComponent","lazy","variant","title","useKasModals","InstanceDrawerTab","resourceName","isStandardQuota","q","related_resources","find","r","billing_model","isMarketplaceQuota","useStandardQuota","getApi","api","account","apiAccountsMgmtV1CurrentAccountGet","orgId","data","organization","id","Error","quotaResponse","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","status","statusText","standardQuotas","items","filter","resource_name","product","prepaidQuota","marketplaceQuotas","some","hasTrialQuota","remainingPrepaidQuota","allowed","consumed","remainingMarketplaceQuota","reduce","agg","unaggregatedSubscriptions","cloud_accounts","flatMap","subscriptionMarketplaces","Array","from","Set","map","s","cloud_provider_id","marketplaceSubscriptions","marketplace","subscriptions","cloud_account_id","useCheckStandardQuota","getQuota","onNoQuotaAvailable","onOutOfQuota","onQuotaAvailable","quota","e","useCheckDeveloperAvailability","getUsername","checkDeveloperAvailability","onAvailable","onUnavailable","onUsed","res","getKafkas","k","instance_type","useFetchProvidersWithRegions","fetchRegions","useFetchProviderRegions","fetchProvidersWithRegions","plan","getCloudProviders","allProviders","providers","Promise","all","p","enabled","provider","regions","providerInfo","displayName","display_name","length","Boolean","firstProvider","defaultProvider","instanceType","getCloudProviderRegions","region","capacity","c","max_capacity_reached","available_sizes","isDisabled","useGetSizes","regionInfo","availableSizes","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","i","apiSizeToComponentSize","bind","includes","useGetStandardSizes","useGetTrialSizes","getStandardSizes","getDeveloperSizes","standardSizes","standard","trial","apiSize","quota_consumed","ingress","ingress_throughput_per_sec","bytes","egress","egress_throughput_per_sec","storage","Math","round","max_data_retention_size","connections","total_max_connections","connectionRate","max_connection_attempts_per_sec","maxPartitions","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","useCreateInstance","onSuccess","onError","apisService","kafkaRequest","name","value","multi_az","cloud_provider","asKafkaRequestPayload","sizeId","billing","billing_cloud_account_id","subscription","createKafka","error","code","response","console"],"sourceRoot":""}