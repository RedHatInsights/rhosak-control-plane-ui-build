{"version":3,"file":"1540.4961e69c.js","mappings":"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","sources":["webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Card,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport {\n  KAFKA_MODAL_TYPES,\n  MASEmptyState,\n  MASEmptyStateVariant,\n  MASLoading,\n  usePagination,\n  useRootModalContext,\n} from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  InstanceType,\n  isMobileTablet,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport {\n  FilterType,\n  InstanceDrawer,\n  InstanceDrawerProps,\n  StreamsTableView,\n} from './components';\nimport {\n  CloudProvider,\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from '@rhoas/kafka-management-sdk';\nimport './OpenshiftStreams.css';\nimport { useAlert, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport { useFederated } from '@app/contexts';\nimport { InstanceDrawerTabs } from '@app/modules/InstanceDrawer/InstanceDrawerContent';\n\nexport type OpenShiftStreamsProps = Pick<\n  InstanceDrawerProps,\n  'tokenEndPointUrl'\n> & {\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: InstanceDrawerTabs.DETAILS | InstanceDrawerTabs.CONNECTION;\n};\n\nconst OpenshiftStreams: React.FunctionComponent<OpenShiftStreamsProps> = ({\n  preCreateInstance,\n  tokenEndPointUrl,\n}: OpenShiftStreamsProps) => {\n  dayjs.extend(localizedFormat);\n  const { shouldOpenCreateModal } = useFederated() || {};\n\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const { page = 1, perPage = 10 } = usePagination() || {};\n  const mainToggle = searchParams.has('user-testing');\n  const { t } = useTranslation();\n  const { addAlert } = useAlert() || {};\n  const { showModal } = useRootModalContext();\n  const localStorage = window.localStorage;\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n\n  // States\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [kafkaInstancesList, setKafkaInstancesList] =\n    useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] =\n    useState<SelectedInstance | null>();\n  // state to store the expected total kafka instances based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n  const [isDisplayKafkaEmptyState, setIsDisplayKafkaEmptyState] = useState<\n    boolean | undefined\n  >(undefined);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n  const hasUserTrialKafka = currentUserKafkas?.some(\n    (k) => k?.instance_type === InstanceType?.eval\n  );\n\n  const updateSelectedKafkaInstance = () => {\n    if (kafkaInstanceItems && kafkaInstanceItems?.length > 0) {\n      const selectedKafkaItem = kafkaInstanceItems?.filter(\n        (kafka) => kafka?.id === selectedInstance?.instanceDetail?.id\n      )[0];\n      const newState: any = {\n        ...selectedInstance,\n        instanceDetail: selectedKafkaItem,\n      };\n      selectedKafkaItem && setSelectedInstance(newState);\n    }\n  };\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem('openSessions') || '0');\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen =\n        shouldOpenCreateModal && (await shouldOpenCreateModal());\n      if (shouldOpen && cloudProviders?.length < 1) {\n        fetchCloudProviders();\n      }\n      if (shouldOpen && cloudProviders?.length > 0) {\n        handleCreateModal();\n      }\n    };\n    openModal();\n  }, [shouldOpenCreateModal, cloudProviders]);\n\n  const handleCreateModal = () => {\n    showModal(KAFKA_MODAL_TYPES.CREATE_KAFKA_INSTANCE, {\n      onCreate,\n      cloudProviders,\n      mainToggle,\n      refresh: refreshKafkas,\n      hasUserTrialKafka,\n    });\n  };\n\n  const handleCreateInstanceModal = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n    open && handleCreateModal();\n  };\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({\n      instanceDetail: instance,\n      activeTab: InstanceDrawerTabs.DETAILS,\n    });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({\n      instanceDetail: instance,\n      activeTab: InstanceDrawerTabs.CONNECTION,\n    });\n  };\n\n  const getFilterQuery = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        let filterQuery = '(';\n        filterQuery += filterValue\n          .map((val) => {\n            const value = val.value.trim();\n            if (value === InstanceStatus.PROVISIONING) {\n              return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n            }\n            if (value === InstanceStatus.DEPROVISION) {\n              return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n            }\n            return value !== ''\n              ? `${filterKey} ${\n                  val.isExact === true ? `= ${value}` : `like %${value}%`\n                }`\n              : '';\n          })\n          .join(' or ');\n        filterQuery += ')';\n\n        filters.push(filterQuery);\n      }\n    });\n    return filters.join(' and ');\n  };\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert &&\n        addAlert({\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description: reason,\n        });\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    const filterQuery = getFilterQuery();\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService\n          .getKafkas(\n            page?.toString(),\n            perPage?.toString(),\n            orderBy,\n            filterQuery\n          )\n          .then((res) => {\n            const kafkaInstances = res.data;\n            const kafkaItems = kafkaInstances?.items || [];\n            setKafkaInstancesList(kafkaInstances);\n            setKafkaInstanceItems(kafkaItems);\n\n            if (\n              kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal\n            ) {\n              setExpectedTotal(kafkaInstancesList.total);\n            }\n\n            if (\n              waitingForDelete &&\n              filteredValue.length < 1 &&\n              kafkaItems?.length == 0\n            ) {\n              setIsDisplayKafkaEmptyState(true);\n              setWaitingForDelete(false);\n            }\n\n            setKafkaDataLoaded(true);\n          });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchSingleKafka = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService.getKafkas('1', '1').then((res) => {\n          const kafkaItemsLength = res?.data?.items?.length;\n          if (!kafkaItemsLength || kafkaItemsLength < 1) {\n            setIsDisplayKafkaEmptyState(true);\n          } else {\n            setIsDisplayKafkaEmptyState(false);\n          }\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!kafkaInstanceItems || kafkaInstanceItems?.length <= 1) {\n      fetchSingleKafka();\n    }\n  }, [kafkaInstanceItems]);\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getKafkas('', '', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setCurrentUserKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getCloudProviders().then((res) => {\n          const providers = res?.data?.items || [];\n          const enabledCloudProviders: CloudProvider[] = providers?.filter(\n            (p: CloudProvider) => p.enabled\n          );\n          setCloudProviders(enabledCloudProviders);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        addAlert &&\n          addAlert({\n            variant: AlertVariant.danger,\n            title: t('common.something_went_wrong'),\n            description: reason,\n          });\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [auth, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas();\n  }, []);\n\n  useEffect(() => {\n    updateSelectedKafkaInstance();\n  }, [kafkaInstanceItems]);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    if (kafkaInstanceItems && kafkaInstanceItems?.length === 1) {\n      setKafkaDataLoaded(true);\n    } else {\n      setKafkaDataLoaded(false);\n    }\n    fetchKafkas();\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = () => {\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  if (isUserUnauthorized) {\n    return (\n      <PageSection\n        variant={PageSectionVariants.default}\n        padding={{ default: 'noPadding' }}\n        isFilled\n      >\n        <MASEmptyState\n          titleProps={{\n            title: t('access_permissions_needed'),\n            headingLevel: 'h2',\n          }}\n          emptyStateIconProps={{\n            icon: LockIcon,\n          }}\n          emptyStateBodyProps={{\n            body: t(\n              'to_access_kafka_instances_contact_your_organization_administrators'\n            ),\n          }}\n        />\n      </PageSection>\n    );\n  }\n\n  const renderStreamsTable = () => {\n    if (kafkaInstanceItems === undefined) {\n      return (\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (isDisplayKafkaEmptyState) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoItems,\n            }}\n            emptyStateBodyProps={{\n              body: (\n                <>\n                  {t('create_a_kafka_instance_to_get_started')}{' '}\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart('getting-started')\n                    }\n                  >\n                    quick start guide.\n                  </Button>\n                </>\n              ),\n            }}\n            titleProps={{ title: t('no_kafka_instances_yet') }}\n          >\n            <Button\n              data-testid='emptyStateStreams-buttonCreateKafka'\n              variant={ButtonVariant.primary}\n              onClick={() => handleCreateInstanceModal()}\n            >\n              {t('create_kafka_instance')}\n            </Button>\n          </MASEmptyState>\n          )\n        </PageSection>\n      );\n    } else if (kafkaInstanceItems && isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className='mk--main-page__page-section--table pf-m-padding-on-xl'\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card>\n            <StreamsTableView\n              kafkaInstanceItems={kafkaInstanceItems}\n              mainToggle={mainToggle}\n              onViewConnection={onViewConnection}\n              onViewInstance={onViewInstance}\n              refresh={refreshKafkas}\n              kafkaDataLoaded={kafkaDataLoaded}\n              setWaitingForDelete={setWaitingForDelete}\n              onDelete={onDelete}\n              page={page}\n              perPage={perPage}\n              total={kafkaInstancesList?.total}\n              expectedTotal={expectedTotal}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              setFilterSelected={setFilterSelected}\n              filterSelected={filterSelected}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              isDrawerOpen={selectedInstance !== null}\n              loggedInUser={loggedInUser}\n              currentUserkafkas={currentUserKafkas}\n              onCreate={onCreate}\n              cloudProviders={cloudProviders}\n            />\n          </Card>\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        mainToggle={mainToggle}\n        isExpanded={selectedInstance != null}\n        initialTab={activeTab}\n        isLoading={instanceDetail === undefined}\n        instanceDetail={instanceDetail}\n        onClose={onCloseDrawer}\n        data-ouia-app-id='controlPlane-streams'\n        tokenEndPointUrl={tokenEndPointUrl}\n        notRequiredDrawerContentBackground={isDisplayKafkaEmptyState}\n      >\n        <main className='pf-c-page__main'>\n          <PageSection variant={PageSectionVariants.light}>\n            <Level>\n              <LevelItem>\n                <TextContent>\n                  <Text component='h1'>{t('kafka_instances')}</Text>\n                </TextContent>\n              </LevelItem>\n            </Level>\n          </PageSection>\n          {renderStreamsTable()}\n        </main>\n      </InstanceDrawer>\n      <Modal\n        variant={ModalVariant.small}\n        title='Mobile experience'\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n"],"names":["useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","preCreateInstance","tokenEndPointUrl","shouldOpenCreateModal","auth","useAuth","basePath","useConfig","location","useLocation","searchParams","URLSearchParams","search","page","perPage","mainToggle","has","t","useTranslation","addAlert","useAlert","showModal","localStorage","window","qsContext","QuickStartContext","kafkaInstanceItems","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","cloudProviders","setCloudProviders","kafkaDataLoaded","setKafkaDataLoaded","orderBy","setOrderBy","selectedInstance","setSelectedInstance","expectedTotal","setExpectedTotal","undefined","isDisplayKafkaEmptyState","setIsDisplayKafkaEmptyState","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isUserUnauthorized","setIsUserUnauthorized","isMobileModalOpen","setIsMobileModalOpen","waitingForDelete","setWaitingForDelete","loggedInUser","setLoggedInUser","currentUserKafkas","setCurrentUserKafkas","activeTab","instanceDetail","hasUserTrialKafka","some","k","instance_type","count","parseInt","getItem","newCount","setItem","handleMobileModal","shouldOpen","length","fetchCloudProviders","handleCreateModal","onCreate","refresh","refreshKafkas","onViewInstance","instance","onViewConnection","handleServerError","error","reason","errorCode","response","data","code","variant","AlertVariant","title","description","fetchKafkas","filters","forEach","filter","filterKey","filterValue","filterQuery","map","val","value","trim","isExact","join","push","kas","getToken","accessToken","DefaultApi","Configuration","getKafkas","toString","then","res","kafkaInstances","kafkaItems","items","total","kafkaItemsLength","fetchCurrentUserKafkas","getCloudProviders","providers","enabledCloudProviders","p","enabled","selectedKafkaItem","kafka","id","newState","updateSelectedKafkaInstance","getUsername","username","onDelete","PageSection","PageSectionVariants","padding","default","isFilled","titleProps","headingLevel","emptyStateIconProps","icon","emptyStateBodyProps","body","isExpanded","initialTab","isLoading","onClose","notRequiredDrawerContentBackground","className","Level","LevelItem","TextContent","Text","component","emptyStateProps","Button","ButtonVariant","isSmall","isInline","onClick","setActiveQuickStart","open","Card","isDrawerOpen","currentUserkafkas","Modal","ModalVariant","isOpen","actions","key"],"sourceRoot":""}