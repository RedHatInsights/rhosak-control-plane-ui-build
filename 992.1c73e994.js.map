{"version":3,"sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx"],"names":["ServiceAccountsToolbar","filterSelected","setFilterSelected","filteredValue","setFilteredValue","handleCreateModal","t","useTranslation","nameInputRef","useRef","ownerInputRef","useState","isFilterExpanded","setIsFilterExpanded","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","label","value","disabled","isInputValid","test","trim","updateFilter","key","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","push","onFilter","filterType","isExact","onInputPress","event","fieldName","target","name","tooltipContent","getSelectionForFilter","selectedFilters","map","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","toolbarItems","ToolbarGroup","variant","ToolbarItem","Select","SelectVariant","onToggle","selections","isOpen","onSelect","_","selection","index","SelectOption","isDisabled","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","toLowerCase","InputGroup","className","TextInput","id","type","validated","ValidatedOptions","placeholder","onChange","input","onKeyPress","ref","Button","ButtonVariant","onClick","Tooltip","isVisible","content","reference","item","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","ServiceAccountsTableView","page","perPage","expectedTotal","total","serviceAccountsDataLoaded","serviceAccountItems","onResetCredentials","onDeleteServiceAccount","orderBy","setOrderBy","mainToggle","auth","useAuth","undefined","loggedInUser","setLoggedInUser","isOrgAdmin","setIsOrgAdmin","useEffect","getUsername","then","username","tableRow","loadingCount","tableColumns","title","transforms","cellWidth","onSelectKebabDropdownOption","originalData","selectedOption","parentElement","previousSibling","focus","getindexForSortParameter","parameter","tableProps","cells","rows","forEach","row","owner","description","client_id","created_at","skeleton","Skeleton","actionResolver","rowData","_extraData","additionalProps","isUserSameAsLoggedIn","tooltip","style","pointerEvents","cursor","tooltipProps","position","getActionResolver","onSort","_event","columnIndex","sortByDirection","getParameterForSortIndex","sortBy","sort","split","direction","SortByDirection","emptyStateProps","titleProps","emptyStateBodyProps","body"],"mappings":"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","file":"992.1c73e994.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ToolbarGroup,\n  ToolbarItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SelectOptionObject,\n  ToolbarFilter,\n  InputGroup,\n  TextInput,\n  Button,\n  Tooltip,\n  ToolbarChip,\n  ButtonVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { MASToolbar, ToolbarItemProps } from '@app/common';\n\nexport type ServiceAccountsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  handleCreateModal: () => void;\n  mainToggle?: boolean;\n};\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nconst ServiceAccountsToolbar: React.FC<ServiceAccountsToolbarProps> = ({\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  handleCreateModal,\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation();\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState<boolean>(false);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n  ];\n\n  const onClearAllFilters = () => {\n    setFilteredValue([]);\n  };\n\n  const onToggleFilter = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        // index of current filter value in applied filter\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value);\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onInputPress = (event: any) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const onSelect = (_, selection: string | SelectOptionObject) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onToggleFilter}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"name-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_name_lower')}\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label={t('filter_by_name_lower')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected?.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"owner-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_owner')}\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label={t('filter_by_owner')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateModal}\n          data-testid={'tableServiceAccounts-buttonCreateServiceAccount'}\n        >\n          {t('serviceAccount.create_service_account')}\n        </Button>\n      ),\n    },\n  ];\n  /**\n   * Todo: uncomment code when API start support pagination\n   */\n  // if (total && total > 0 && toolbarItems.length === 1) {\n  //   toolbarItems.push({\n  //     item: (\n  //       <MASPagination\n  //         widgetId=\"pagination-options-menu-top\"\n  //         itemCount={total}\n  //         page={page}\n  //         perPage={perPage}\n  //         isCompact={true}\n  //         titles={{\n  //           paginationTitle: t('minimal_pagination'),\n  //           perPageSuffix: t('per_page_suffix'),\n  //           toFirstPage: t('to_first_page'),\n  //           toPreviousPage: t('to_previous_page'),\n  //           toLastPage: t('to_last_page'),\n  //           toNextPage: t('to_next_page'),\n  //           optionsToggle: t('options_toggle'),\n  //           currPage: t('curr_page'),\n  //         }}\n  //       />\n  //     ),\n  //     variant: 'pagination',\n  //     alignment: { default: 'alignRight' },\n  //   });\n  // }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClearAllFilters,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Skeleton } from '@patternfly/react-core';\nimport { MASTable, MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { getLoadingRowsCount, getFormattedDate, getSkeletonForRows } from '@app/utils';\nimport { ServiceAccountListItem } from '@rhoas/kafka-management-sdk';\nimport { ServiceAccountsToolbar, ServiceAccountsToolbarProps } from './ServiceAccountsToolbar';\nimport { useAuth } from '@bf2/ui-shared';\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  handleCreateModal: () => void;\n};\n\nconst ServiceAccountsTableView: React.FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  total,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n  handleCreateModal,\n  mainToggle,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    auth?.isOrgAdmin().then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  const tableColumns = [\n    { title: t('common.name') },\n    { title: t('common.clientID') },\n    { title: t('common.owner'), transforms: [cellWidth(20)] },\n    { title: t('common.description') },\n    { title: t('time_created') },\n  ];\n\n  const onSelectKebabDropdownOption = (event: any, originalData: ServiceAccountListItem, selectedOption: string) => {\n    if (selectedOption === 'reset-credentials') {\n      onResetCredentials && onResetCredentials(originalData);\n    } else if (selectedOption === 'delete-account') {\n      onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    }\n\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!serviceAccountsDataLoaded) {\n      return getSkeletonForRows({ loadingCount, skeleton: <Skeleton />, length: tableColumns.length });\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, owner, description, client_id, created_at } = row;\n      tableRow.push({\n        cells: [name, client_id, owner, description, { title: getFormattedDate(created_at, t('ago')) }],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const getActionResolver = (rowData: IRowData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps: any;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('common.reset_credentials'),\n        id: 'reset-credentials',\n        ['data-testid']: 'tableServiceAccounts-actionResetCredentials',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'reset-credentials'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_reset_service_account'),\n        },\n      },\n      {\n        title: t('serviceAccount.delete_service_account'),\n        id: 'delete-account',\n        ['data-testid']: 'tableServiceAccounts-actionDeleteAccount',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-account'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_delete_service_account'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData);\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'client_id';\n      case 2:\n        return 'owner';\n      case 3:\n        return 'description';\n      case 4:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'client_id':\n        return 1;\n      case 'owner':\n        return 2;\n      case 'description':\n        return 3;\n      case 'created_at':\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, columnIndex: number, sortByDirection: SortByDirection) => {\n    setOrderBy && setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        handleCreateModal={handleCreateModal}\n        mainToggle={mainToggle}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('serviceAccount.service_account_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems && serviceAccountItems?.length < 1 && serviceAccountsDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {/* {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n"],"sourceRoot":""}