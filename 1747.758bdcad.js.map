{"version":3,"file":"1747.758bdcad.js","mappings":"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","sources":["webpack://kas-ui/./src/app/api.ts","webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/useKafkaInstances.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/useKafkaStatusAlerts.tsx","webpack://kas-ui/./src/app/hooks/useInterval.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/StreamsTableConnected.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/useCreateDialog.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/useDeleteDialog.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/useChangeOwnerDialog.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/StreamsTableConnectedWithAuth.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KafkaEmptyState/KafkaEmptyState.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KasLayout/KasLayout.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateKafkaInstanceServices.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateInstance.ts","webpack://kas-ui/./src/app/models/kafka.ts"],"sourcesContent":["import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport {\n  AxiosCacheRequestConfig,\n  createCacheAdapter,\n} from \"axios-simple-cache-adapter\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\n\nconst adapter = createCacheAdapter({\n  debug: localStorage.getItem(\"log-axios\") !== null,\n});\n\nexport const useKms = () => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: kasBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const kmsApi = new DefaultApi(\n      new Configuration({\n        accessToken: auth.kas.getToken(),\n        basePath: kasBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return kmsApi;\n  }, [auth.kas, kasBasePath]);\n};\n\nexport const useAms = () => {\n  const auth = useAuth();\n  const {\n    ams: { apiBasePath: amsBasePath },\n  } = useConfig();\n\n  return useCallback(() => {\n    const amsApi = new AppServicesApi(\n      new Configuration({\n        accessToken: auth.ams.getToken(),\n        basePath: amsBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return amsApi;\n  }, [amsBasePath, auth.ams]);\n};\n","// A map of modal components to their lazy loaded implementations\nimport { FunctionComponent, LazyExoticComponent, lazy } from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateInstanceProps>>,\n      variant: \"medium\",\n      title: t(\"create_a_kafka_instance\"),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteInstanceProps>>,\n      variant: \"small\",\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<TransferOwnershipProps>>,\n      variant: \"medium\",\n      title: t(\"change_owner\"),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<CreateServiceAccountProps>>,\n      variant: \"medium\",\n      title: t(\"serviceAccount.create_a_service_account\"),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount\"\n          )\n      ) as LazyExoticComponent<FunctionComponent<DeleteServiceAccountProps>>,\n      title: t(\"serviceAccount.delete_service_account\") + \"?\",\n      variant: \"small\",\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ \"@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials\"\n          )\n      ) as LazyExoticComponent<\n        FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t(\"serviceAccount.reset_service_account_credentials\")}?`,\n      variant: \"medium\",\n    },\n  };\n};\n\nexport const KasModalLoader: FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","export enum InstanceDrawerTab {\n  DETAILS = \"details\",\n  CONNECTION = \"connection\",\n}\n","import { useKms } from \"@app/api\";\nimport { useCallback } from \"react\";\nimport type {\n  CloudProvider,\n  KafkaInstance,\n  KafkaInstancesProps,\n  Plan,\n  Status,\n} from \"@rhoas/app-services-ui-components\";\nimport { SimplifiedStatuses } from \"@rhoas/app-services-ui-components\";\nimport { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport { AxiosCacheRequestConfig } from \"axios-simple-cache-adapter\";\nimport {\n  useGetSizes,\n  useStandardQuota,\n} from \"@app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks\";\n\nexport type KafkaInstanceEnhanced = Required<KafkaInstance> & {\n  request: KafkaRequest;\n};\n\nexport function useKafkaInstances() {\n  const getKms = useKms();\n  const { kafkaRequestToKafkaInstance } = useEnrichedKafkaInstance();\n  return useCallback<\n    KafkaInstancesProps<KafkaInstanceEnhanced>[\"getInstances\"]\n  >(\n    async (page, perPage, query, sort, direction) => {\n      // const filterQuery = getFilterQuery();\n      const apisService = getKms();\n\n      type columns = NonNullable<typeof sort>;\n      const uiColumnMapping: { [key in columns]: string } = {\n        name: \"name\",\n        owner: \"owner\",\n        provider: \"cloud_provider\",\n        region: \"region\",\n        createdAt: \"created_at\",\n      };\n\n      try {\n        const { name, status, owner } = query;\n\n        const querystring = [\n          valuesToQuery(\"name\", name, \"%\"),\n          valuesToQuery(\"owner\", owner, \"%\"),\n          valuesToQuery(\n            \"status\",\n            status.flatMap((s) => SimplifiedStatuses[s]),\n            \"=\"\n          ),\n        ]\n          .filter(Boolean)\n          .map((q) => `(${q})`)\n          .join(\" and \");\n\n        const res = await apisService.getKafkas(\n          page.toString(10),\n          perPage.toString(10),\n          sort ? `${uiColumnMapping[sort]} ${direction}` : undefined,\n          querystring,\n          {\n            cache: false,\n          } as AxiosCacheRequestConfig\n        );\n        const rawInstances = res.data.items;\n        const count = res.data.total;\n        const instances = await Promise.all(\n          rawInstances.map(kafkaRequestToKafkaInstance)\n        );\n        return {\n          instances,\n          count,\n        };\n      } catch (error) {\n        // handleServerError(error);\n        return {\n          instances: [],\n          count: 0,\n        };\n      }\n    },\n    [getKms, kafkaRequestToKafkaInstance]\n  );\n}\n\nexport function useEnrichedKafkaInstance() {\n  const getQuota = useStandardQuota();\n  const getDeveloperSizes = useGetSizes(\"developer\");\n  const getStandardSizes = useGetSizes(\"standard\");\n\n  const kafkaRequestToKafkaInstance = useCallback(\n    async (data: KafkaRequest): Promise<KafkaInstanceEnhanced> => {\n      const d = data as Required<KafkaRequest>;\n\n      const { marketplaceSubscriptions } = await getQuota();\n\n      const enhancedInstance: KafkaInstanceEnhanced = {\n        billing: undefined,\n        connectionRate: 0,\n        connections: 0,\n        createdAt: d.created_at,\n        egress: 0,\n        expiryDate: d.expires_at as string | undefined,\n        id: d.id,\n        ingress: 0,\n        maxPartitions: 0,\n        messageSize: 0,\n        name: d.name,\n        owner: d.owner,\n        plan: d.billing_model as Plan,\n        provider: d.cloud_provider as CloudProvider,\n        region: d.region,\n        size: \"1\",\n        status: apiStatusToUIStatus(d.status),\n        storage: 0,\n        updatedAt: d.updated_at,\n        request: d,\n      };\n\n      // update the billing info\n      try {\n        const marketplaceForBilling = marketplaceSubscriptions.find((ms) =>\n          ms.subscriptions.find((s) => s === d.billing_cloud_account_id)\n        )?.marketplace;\n\n        const billing: KafkaInstanceEnhanced[\"billing\"] =\n          d.billing_model === \"standard\"\n            ? \"prepaid\"\n            : marketplaceForBilling\n            ? {\n                marketplace: marketplaceForBilling,\n                subscription: d.billing_cloud_account_id,\n              }\n            : undefined;\n        enhancedInstance.billing = billing;\n      } catch (e) {\n        console.warn(\n          \"kafkaRequestToKafkaInstance\",\n          `couldn't retrieve the billing info for`,\n          d\n        );\n      }\n\n      // update the limits\n      try {\n        const limits =\n          d.instance_type === \"developer\"\n            ? await getDeveloperSizes(\n                d.cloud_provider as CloudProvider,\n                d.region\n              )\n            : await getStandardSizes(\n                d.cloud_provider as CloudProvider,\n                d.region\n              );\n        const thisInstanceLimits = limits.find((l) => l.id === d.size_id);\n        if (thisInstanceLimits) {\n          enhancedInstance.size = thisInstanceLimits.displayName;\n          enhancedInstance.ingress = thisInstanceLimits.ingress;\n          enhancedInstance.egress = thisInstanceLimits.egress;\n          enhancedInstance.storage = d.max_data_retention_size.bytes;\n          enhancedInstance.connections = thisInstanceLimits.connections;\n          enhancedInstance.connectionRate = thisInstanceLimits.connectionRate;\n          enhancedInstance.maxPartitions = thisInstanceLimits.maxPartitions;\n          enhancedInstance.messageSize = thisInstanceLimits.messageSize;\n        }\n      } catch (e) {\n        console.warn(\n          \"kafkaRequestToKafkaInstance\",\n          `couldn't retrieve the limits info for`,\n          d\n        );\n      }\n\n      return enhancedInstance;\n    },\n    [getDeveloperSizes, getQuota, getStandardSizes]\n  );\n\n  return {\n    kafkaRequestToKafkaInstance,\n  };\n}\n\nfunction valuesToQuery(\n  field: string,\n  values: string[],\n  comparison: \"%\" | \"=\"\n): string | undefined {\n  return values\n    .map((v) =>\n      comparison === \"%\"\n        ? `${field} like %${v.trim()}%`\n        : `${field} = ${v.trim()}`\n    )\n    .join(\" or \");\n}\n\nfunction apiStatusToUIStatus(status: string): Status {\n  const mapping: { [key: string]: Status } = {\n    accepted: \"accepted\",\n    preparing: \"preparing\",\n    provisioning: \"provisioning\",\n    ready: \"ready\",\n    failed: \"degraded\",\n    deprovision: \"deprovision\",\n    deleting: \"deleting\",\n  };\n  return mapping[status] || \"degraded\";\n}\n","import { SetStateAction, Dispatch, useEffect, useState } from \"react\";\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    // Opera 12.10 and Firefox 18 and later support\n    return \"visibilitychange\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msvisibilitychange\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitvisibilitychange\";\n  }\n  return \"\";\n}\nexport function getBrowserDocumentHiddenProp(): keyof XDocument | undefined {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== \"undefined\") {\n    return \"hidden\";\n  } else if (typeof doc.msHidden !== \"undefined\") {\n    return \"msHidden\";\n  } else if (typeof doc.webkitHidden !== \"undefined\") {\n    return \"webkitHidden\";\n  }\n  return undefined;\n}\nexport function getIsDocumentHidden(): boolean {\n  const hiddenKey = getBrowserDocumentHiddenProp();\n  return hiddenKey !== undefined && !(document as XDocument)[hiddenKey];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: Dispatch<SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import { useCallback, useRef } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlert } from \"@rhoas/app-services-ui-shared\";\nimport { usePageVisibility } from \"@app/hooks/usePageVisibility\";\nimport { InstanceStatus } from \"@app/utils\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useInterval } from \"@app/hooks/useInterval\";\nimport { KafkaInstanceEnhanced } from \"./useKafkaInstances\";\n\ntype AlertableInstance = { name: string; status: InstanceStatus };\n\nexport function useKafkaStatusAlerts(): (\n  instances: KafkaInstanceEnhanced[]\n) => void {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const { addAlert } = useAlert() || {};\n  const { isVisible } = usePageVisibility();\n  const previousInstancesRef = useRef<KafkaInstanceEnhanced[]>();\n  const instancesBeingDeletedRef = useRef<KafkaInstanceEnhanced[]>([]);\n  const toNotifyRef = useRef<AlertableInstance[]>([]);\n\n  const notifyReady = useCallback(\n    (name: string) => {\n      addAlert({\n        title: t(\"kafka_successfully_created\"),\n        variant: AlertVariant.success,\n        description: (\n          <span\n            dangerouslySetInnerHTML={{\n              __html: t(\"kafka_success_message\", {\n                name,\n              }),\n            }}\n          />\n        ),\n        dataTestId: \"toastCreateKafka-success\",\n      });\n    },\n    [addAlert, t]\n  );\n\n  const notifyDelete = useCallback(\n    (name: string) => {\n      addAlert({\n        title: t(\"kafka_successfully_deleted\", {\n          name,\n        }),\n        variant: AlertVariant.success,\n      });\n    },\n    [addAlert, t]\n  );\n\n  const notifyFailure = useCallback(\n    (name: string) => {\n      addAlert({\n        title: t(\"kafka_not_created\"),\n        variant: AlertVariant.danger,\n        description: (\n          <span\n            dangerouslySetInnerHTML={{\n              __html: t(\"kafka_failed_message\", {\n                name,\n              }),\n            }}\n          />\n        ),\n        dataTestId: \"toastCreateKafka-failed\",\n      });\n    },\n    [addAlert, t]\n  );\n\n  // check every second if the browser is visible, and if so send the queued\n  // notifications\n  useInterval(\n    useCallback(\n      function sendNotificationCb() {\n        if (isVisible) {\n          while (toNotifyRef.current.length > 0) {\n            const instance = toNotifyRef.current.shift()!;\n            switch (instance.status) {\n              case InstanceStatus.READY:\n                notifyReady(instance.name);\n                break;\n              case InstanceStatus.FAILED:\n                notifyFailure(instance.name);\n                break;\n              case InstanceStatus.DEPROVISION:\n              case InstanceStatus.DELETED:\n                notifyDelete(instance.name);\n                break;\n            }\n          }\n        }\n      },\n      [isVisible, notifyDelete, notifyFailure, notifyReady]\n    ),\n    1000\n  );\n\n  function checkForInstanceStatusChange(instances: KafkaInstanceEnhanced[]) {\n    if (instances) {\n      const firstData = previousInstancesRef.current === undefined;\n      const previousInstances = previousInstancesRef.current || [];\n\n      const previousIdsAndStates = previousInstances.map(\n        (i) => `${i.id}:${i.status}`\n      );\n      const currentIdsAndStates = instances.map((i) => `${i.id}:${i.status}`);\n\n      // Check for changes between polled data in an unefficent but effective way.\n      // We don't stringify the whole KafkaInstanceEnhanced object since it's massive and\n      // we care only about an instance id and its status.\n      if (\n        JSON.stringify(previousIdsAndStates) !==\n        JSON.stringify(currentIdsAndStates)\n      ) {\n        // an helper function to get the instances that changed state, but only\n        // if we got at least one snapshot of the data. We don't want to notify\n        // again for instances already created.\n        const filterInstances = (\n          instances: KafkaInstanceEnhanced[],\n          desiredStatus: InstanceStatus\n        ) => {\n          return firstData\n            ? []\n            : instances.filter(\n                (i) =>\n                  i.status === desiredStatus &&\n                  !previousInstances.find(\n                    (pi) => pi.id === i.id && i.status !== desiredStatus\n                  )\n              );\n        };\n\n        // get newly created and failed instances\n        const ready = filterInstances(instances, InstanceStatus.READY);\n        const failed = filterInstances(instances, InstanceStatus.FAILED);\n\n        // since it's possible that an instance that is being deleted will\n        // simply not be returned the next time we poll for data, we keep track\n        // of instances that are deprovisoning in a ref. We check if these\n        // instances are still in the current list of instances. If not, they\n        // have been deleted and we should notify the user. The others, we keep\n        // them in the ref\n        const [deleted, stillBeingDeleted] =\n          instancesBeingDeletedRef.current.reduce<\n            [KafkaInstanceEnhanced[], KafkaInstanceEnhanced[]]\n          >(\n            ([deleted, beingDeleted], instanceBeingDeleted) => {\n              if (\n                instances.find((i) => i.id === instanceBeingDeleted.id) ===\n                undefined\n              ) {\n                // this instance has been deleted\n                return [[...deleted, instanceBeingDeleted], beingDeleted];\n              } else {\n                return [deleted, [...beingDeleted, instanceBeingDeleted]];\n              }\n            },\n            [[], []]\n          );\n\n        // check also for new instances being deleted\n        const newBeingDeleted = instances.filter(\n          (i) =>\n            [InstanceStatus.DELETED, InstanceStatus.DEPROVISION].includes(\n              i.status as InstanceStatus\n            ) && stillBeingDeleted.find((s) => s.id === i.id) === undefined\n        );\n\n        // recreate the deleted instances ref with the data derived before\n        instancesBeingDeletedRef.current = [\n          ...stillBeingDeleted,\n          ...newBeingDeleted,\n        ];\n\n        // update the ref of instances for which we need to notify the user\n        toNotifyRef.current = [\n          ...toNotifyRef.current,\n          ...ready.map(instanceToAlertable),\n          ...failed.map(instanceToAlertable),\n          ...deleted.map(instanceToAlertable),\n        ];\n\n        // snapshot the instances used in this run\n        previousInstancesRef.current = instances;\n      }\n    }\n  }\n\n  return checkForInstanceStatusChange;\n}\n\nfunction instanceToAlertable(\n  instance: KafkaInstanceEnhanced\n): AlertableInstance {\n  return { name: instance.name!, status: instance.status as InstanceStatus };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback: () => void, delay: number): void {\n  const savedCallback = useRef<() => void>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [delay]);\n}\n","// eslint-disable @typescript-eslint/no-unused-vars\nimport { FederatedProps } from \"@app/contexts\";\nimport \"@app/modules/styles.css\";\nimport {\n  KafkaInstances,\n  KafkaInstancesProps,\n} from \"@rhoas/app-services-ui-components\";\nimport { useCallback, useContext, VoidFunctionComponent } from \"react\";\nimport { KafkaInstanceEnhanced, useKafkaInstances } from \"./useKafkaInstances\";\nimport { useInstanceDrawer } from \"@app/modules/InstanceDrawer/contexts/InstanceDrawerContext\";\nimport { InstanceDrawerTab } from \"@app/modules/InstanceDrawer/tabs\";\nimport { useCreateDialog } from \"./useCreateDialog\";\nimport { useDeleteDialog } from \"./useDeleteDialog\";\nimport { useChangeOwnerDialog } from \"./useChangeOwnerDialog\";\nimport { useKafkaStatusAlerts } from \"./useKafkaStatusAlerts\";\nimport { QuickStartContext } from \"@patternfly/quickstarts\";\n\nexport type StreamsTableProps = Pick<FederatedProps, \"preCreateInstance\"> & {\n  currentUser: string | undefined;\n  isCurrentUserOrgAdmin: boolean;\n};\n\nexport const StreamsTableConnected: VoidFunctionComponent<\n  StreamsTableProps\n> = ({\n  preCreateInstance,\n  currentUser,\n  isCurrentUserOrgAdmin,\n}: StreamsTableProps) => {\n  const fetchInstances = useKafkaInstances();\n  const { openCreateModal } = useCreateDialog(preCreateInstance);\n  const { openDeleteDialog } = useDeleteDialog();\n  const { openChangeOwnerDialog } = useChangeOwnerDialog();\n  const notifyForInstanceChange = useKafkaStatusAlerts();\n  const { setActiveQuickStart } = useContext(QuickStartContext);\n\n  const {\n    isDrawerOpen,\n    drawerInstance,\n    closeDrawer,\n    openDrawer,\n    setDrawerActiveTab,\n    setDrawerInstance,\n  } = useInstanceDrawer();\n\n  /*\n    Fetch the latest instances for the user specified query, and checks the\n    returned instances.\n\n    If we have the drawer open but the data doesn't\n    contain the instance anymore (eg. the instance got removed by someone else)\n    we close the drawer. If we have the drawer open and we found the relative\n    instance, we update the object the drawer uses to render the drawer to be\n    sure it's referring to the latest data (needed for the connection info).\n\n    This triggers also the notifications for ready/deleted instances.\n   */\n  const getInstances: KafkaInstancesProps<KafkaInstanceEnhanced>[\"getInstances\"] =\n    useCallback(\n      async (...args) => {\n        const res = await fetchInstances(...args);\n        if (drawerInstance) {\n          const latestDrawerInstanceData = res.instances.find(\n            (i) => i.id === drawerInstance.id\n          );\n          if (!latestDrawerInstanceData) {\n            closeDrawer();\n          } else {\n            /* we have to check if there is actually some difference between\n            the previous data and the current one to avoid render loops */\n            if (\n              JSON.stringify(latestDrawerInstanceData) !==\n              JSON.stringify(drawerInstance)\n            ) {\n              setDrawerInstance(latestDrawerInstanceData);\n            }\n          }\n        }\n        notifyForInstanceChange(\n          res.instances.filter((i) => i.owner == currentUser)\n        );\n        return res;\n      },\n      [\n        closeDrawer,\n        currentUser,\n        drawerInstance,\n        fetchInstances,\n        notifyForInstanceChange,\n        setDrawerInstance,\n      ]\n    );\n\n  const onViewInstance = (instance: KafkaInstanceEnhanced) => {\n    setDrawerInstance(instance);\n    setDrawerActiveTab(InstanceDrawerTab.DETAILS);\n    openDrawer();\n  };\n\n  const onViewConnection = (instance: KafkaInstanceEnhanced) => {\n    setDrawerInstance(instance);\n    setDrawerActiveTab(InstanceDrawerTab.CONNECTION);\n    openDrawer();\n  };\n\n  const isUserOwnerOrAdmin = useCallback(\n    ({ owner }: KafkaInstanceEnhanced) =>\n      owner === currentUser || isCurrentUserOrgAdmin,\n    [currentUser, isCurrentUserOrgAdmin]\n  );\n\n  const onQuickstartGuide = useCallback(\n    () => setActiveQuickStart && setActiveQuickStart(\"getting-started\"),\n    [setActiveQuickStart]\n  );\n\n  const onClickSupportLink = () => {\n    // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n    (window as unknown as any).insights.chrome.createCase();\n  };\n\n  return (\n    <KafkaInstances\n      isRowSelected={({ row }) => isDrawerOpen && row.id === drawerInstance?.id}\n      getInstances={getInstances}\n      getUrlForInstance={({ id }) => `./kafkas/${id}/dashboard`}\n      onCreate={openCreateModal}\n      onDetails={onViewInstance}\n      onConnection={onViewConnection}\n      onChangeOwner={openChangeOwnerDialog}\n      onDelete={openDeleteDialog}\n      onClickConnectionTabLink={onViewConnection}\n      onClickSupportLink={onClickSupportLink}\n      onInstanceLinkClick={closeDrawer}\n      onQuickstartGuide={onQuickstartGuide}\n      canChangeOwner={isUserOwnerOrAdmin}\n      canDelete={isUserOwnerOrAdmin}\n    />\n  );\n};\n","import {\n  KafkaInstancesProps,\n  useURLSearchParams,\n} from \"@rhoas/app-services-ui-components\";\nimport { useCallback, useEffect } from \"react\";\nimport { FederatedProps, useFederated } from \"@app/contexts\";\nimport { ModalType, useModal } from \"@rhoas/app-services-ui-shared\";\nimport { KafkaInstanceEnhanced } from \"./useKafkaInstances\";\n\nexport function useCreateDialog(\n  preCreateInstance: FederatedProps[\"preCreateInstance\"] = () =>\n    Promise.resolve(true)\n) {\n  const { shouldOpenCreateModal } = useFederated();\n  const { showModal: showCreateModal } =\n    useModal<ModalType.KasCreateInstance>();\n  const { update, query } = useURLSearchParams();\n\n  const openCreateModal: KafkaInstancesProps<KafkaInstanceEnhanced>[\"onCreate\"] =\n    useCallback(\n      async (onDone) => {\n        // Callback before opening create dialog\n        // The callback can override the new state of opening\n        if (await preCreateInstance(true)) {\n          showCreateModal(ModalType.KasCreateInstance, {\n            onCreate: onDone,\n          });\n        }\n      },\n      [preCreateInstance, showCreateModal]\n    );\n\n  /*\n    Checks for the ?create=true parameter in the url\n\n    If found, it does the pre create instance checks (the Terms & Conditions\n    check) then opens the modal. The parameter gets removed from the url to\n    avoid loops and to make refreshing the page a safe action (the modal will\n    not be opened again)\n   */\n  useEffect(() => {\n    async function checkForCreateModal() {\n      if (await shouldOpenCreateModal()) {\n        query.delete(\"create\");\n        update(query);\n        if (await preCreateInstance(true)) {\n          showCreateModal(ModalType.KasCreateInstance, {\n            onCreate: () => {\n              /* do nothing */\n            },\n          });\n        }\n      }\n    }\n    void checkForCreateModal();\n  }, [\n    openCreateModal,\n    preCreateInstance,\n    query,\n    shouldOpenCreateModal,\n    showCreateModal,\n    update,\n  ]);\n\n  return {\n    openCreateModal,\n  };\n}\n","import { KafkaInstancesProps } from \"@rhoas/app-services-ui-components\";\nimport { KafkaInstanceEnhanced } from \"./useKafkaInstances\";\nimport { useCallback } from \"react\";\nimport { ModalType, useModal } from \"@rhoas/app-services-ui-shared\";\n\nexport function useDeleteDialog() {\n  const { showModal: showDeleteModal } =\n    useModal<ModalType.KasDeleteInstance>();\n  const openDeleteDialog: KafkaInstancesProps<KafkaInstanceEnhanced>[\"onDelete\"] =\n    useCallback(\n      (instance, onDone) => {\n        showDeleteModal(ModalType.KasDeleteInstance, {\n          onDelete: onDone,\n          kafka: instance.request,\n        });\n      },\n      [showDeleteModal]\n    );\n  return {\n    openDeleteDialog,\n  };\n}\n","import { KafkaInstancesProps } from \"@rhoas/app-services-ui-components\";\nimport { KafkaInstanceEnhanced } from \".//useKafkaInstances\";\nimport { useCallback } from \"react\";\nimport { ModalType, useModal } from \"@rhoas/app-services-ui-shared\";\n\nexport function useChangeOwnerDialog() {\n  const { showModal: showTransferOwnershipModal } =\n    useModal<ModalType.KasTransferOwnership>();\n\n  const openChangeOwnerDialog: KafkaInstancesProps<KafkaInstanceEnhanced>[\"onChangeOwner\"] =\n    useCallback(\n      (instance, onDone) => {\n        showTransferOwnershipModal(ModalType.KasTransferOwnership, {\n          kafka: instance.request,\n          refreshKafkas: onDone,\n        });\n      },\n      [showTransferOwnershipModal]\n    );\n\n  return { openChangeOwnerDialog };\n}\n","import { useEffect, useState, VoidFunctionComponent } from \"react\";\nimport {\n  StreamsTableConnected,\n  StreamsTableProps,\n} from \"@app/modules/OpenshiftStreams/components/StreamsTableConnected\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\n\nexport const StreamsTableConnectedWithAuth: VoidFunctionComponent<\n  Pick<StreamsTableProps, \"preCreateInstance\">\n> = ({ preCreateInstance }) => {\n  const { getUsername, isOrgAdmin } = useAuth();\n  const [user, setUser] = useState<\n    Pick<StreamsTableProps, \"currentUser\" | \"isCurrentUserOrgAdmin\"> | undefined\n  >(undefined);\n\n  useEffect(() => {\n    async function getUser() {\n      const username = await getUsername();\n      const orgAdmin = await isOrgAdmin();\n\n      if (username !== undefined && orgAdmin !== undefined) {\n        setUser({\n          currentUser: username,\n          isCurrentUserOrgAdmin: orgAdmin,\n        });\n      }\n    }\n\n    void getUser();\n  }, [getUsername, isOrgAdmin]);\n\n  return (\n    <StreamsTableConnected\n      preCreateInstance={preCreateInstance}\n      currentUser={user?.currentUser}\n      isCurrentUserOrgAdmin={user?.isCurrentUserOrgAdmin || false}\n    />\n  );\n};\n","import { FunctionComponent, useContext } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from \"@patternfly/quickstarts\";\nimport { Button, ButtonVariant, PageSection } from \"@patternfly/react-core\";\nimport { MASEmptyState, MASEmptyStateVariant } from \"@app/common\";\n\nexport type KafkaEmptyStateProps = {\n  handleCreateInstanceModal: () => void;\n};\nexport const KafkaEmptyState: FunctionComponent<KafkaEmptyStateProps> = ({\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n  return (\n    <PageSection padding={{ default: \"noPadding\" }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        emptyStateBodyProps={{\n          body: (\n            <>\n              <Trans\n                i18nKey=\"create_a_kafka_instance_to_get_started\"\n                ns={[\"kasTemporaryFixMe\"]}\n                components={[\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    key=\"btn-quick-start\"\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart(\"getting-started\")\n                    }\n                  />,\n                ]}\n              />\n            </>\n          ),\n        }}\n        titleProps={{ title: t(\"no_kafka_instances_yet\") }}\n      >\n        <Button\n          data-testid=\"emptyStateStreams-buttonCreateKafka\"\n          variant={ButtonVariant.primary}\n          onClick={() =>\n            handleCreateInstanceModal && handleCreateInstanceModal()\n          }\n          ouiaId=\"button-create\"\n        >\n          {t(\"create_kafka_instance\")}\n        </Button>\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { isMobileTablet } from \"@app/utils\";\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nexport const KasLayout: FunctionComponent = ({ children }) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      const localStorage = window.localStorage;\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem(\"openSessions\") || \"0\");\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem(\"openSessions\", `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  return (\n    <>\n      <main className=\"pf-c-page__main\">\n        <PageSection variant={PageSectionVariants.light}>\n          <Level>\n            <LevelItem>\n              <TextContent>\n                <Text component=\"h1\">{t(\"kafka_instances\")}</Text>\n              </TextContent>\n            </LevelItem>\n          </Level>\n        </PageSection>\n        {children}\n      </main>\n      <Modal\n        variant={ModalVariant.small}\n        title=\"Mobile experience\"\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n","import { useAms, useKms } from \"@app/api\";\nimport { InstanceType } from \"@app/utils\";\nimport {\n  CloudProvider,\n  CloudProviderInfo,\n  CreateKafkaInstanceServices,\n  MarketPlace,\n  MarketPlaceSubscriptions,\n  RegionInfo,\n  Size,\n  StandardSizes,\n} from \"@rhoas/app-services-ui-components\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { CloudRegion, SupportedKafkaSize } from \"@rhoas/kafka-management-sdk\";\nimport { useCallback } from \"react\";\n\nconst standardId = \"RHOSAK\" as const;\nconst developerId = \"RHOSAKTrial\" as const;\nconst resourceName = \"rhosak\" as const;\n\nexport const useStandardQuota = () => {\n  const getApi = useAms();\n  return useCallback(async () => {\n    const api = getApi();\n    const account = await api.apiAccountsMgmtV1CurrentAccountGet();\n    const orgId = account?.data?.organization?.id;\n    if (!orgId) {\n      throw new Error(\"User has no organization id\");\n    }\n    const quotaResponse =\n      await api.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n        orgId,\n        undefined,\n        true,\n        undefined,\n        true\n      );\n    if (quotaResponse.status !== 200) {\n      throw new Error(quotaResponse.statusText);\n    }\n    const standardQuotas = quotaResponse.data.items?.filter((q) =>\n      q.related_resources?.find(\n        (r) => r.resource_name === resourceName && r.product === standardId\n      )\n    );\n\n    const prepaidQuota = standardQuotas?.find((q) =>\n      q.related_resources?.find((r) => r.billing_model === \"standard\")\n    );\n\n    const marketplaceQuotas = standardQuotas?.filter((q) =>\n      q.related_resources?.find((r) => r.billing_model === \"marketplace\")\n    );\n\n    const hasTrialQuota =\n      quotaResponse.data.items?.some((q) =>\n        q.related_resources?.find(\n          (r) => r.resource_name === resourceName && r.product === developerId\n        )\n      ) || false;\n\n    const remainingPrepaidQuota = prepaidQuota\n      ? prepaidQuota.allowed - prepaidQuota.consumed\n      : undefined;\n    const remainingMarketplaceQuota = marketplaceQuotas?.reduce(\n      (agg, q) => q.allowed - q.consumed + agg,\n      0\n    );\n    const unaggregatedSubscriptions = marketplaceQuotas\n      ?.filter((q) => q.cloud_accounts !== undefined)\n      .flatMap((q) => q.cloud_accounts!);\n    const subscriptionMarketplaces = Array.from(\n      new Set(\n        unaggregatedSubscriptions?.map(\n          (s) => s.cloud_provider_id as MarketPlace\n        )\n      )\n    );\n    const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n      unaggregatedSubscriptions\n        ? subscriptionMarketplaces.map((marketplace) => ({\n            marketplace,\n            subscriptions: unaggregatedSubscriptions\n              .filter((s) => s.cloud_provider_id === marketplace)\n              .map((s) => s.cloud_account_id!),\n          }))\n        : [];\n\n    return {\n      hasTrialQuota,\n      remainingPrepaidQuota,\n      remainingMarketplaceQuota,\n      marketplaceSubscriptions,\n    };\n  }, [getApi]);\n};\n\nexport const useCheckStandardQuota =\n  (): CreateKafkaInstanceServices[\"checkStandardQuota\"] => {\n    const getQuota = useStandardQuota();\n    const checkStandardQuota: CreateKafkaInstanceServices[\"checkStandardQuota\"] =\n      useCallback(\n        async ({ onNoQuotaAvailable, onOutOfQuota, onQuotaAvailable }) => {\n          try {\n            const {\n              hasTrialQuota,\n              remainingPrepaidQuota,\n              remainingMarketplaceQuota,\n              marketplaceSubscriptions,\n            } = await getQuota();\n\n            if (remainingMarketplaceQuota || remainingPrepaidQuota) {\n              if (\n                remainingMarketplaceQuota &&\n                remainingMarketplaceQuota === 0 &&\n                remainingPrepaidQuota &&\n                remainingPrepaidQuota === 0\n              ) {\n                onOutOfQuota({\n                  quota: {\n                    marketplaceSubscriptions,\n                  },\n                });\n              } else {\n                onQuotaAvailable({\n                  quota: {\n                    remainingPrepaidQuota,\n                    remainingMarketplaceQuota,\n                    marketplaceSubscriptions,\n                  },\n                });\n              }\n            } else {\n              onNoQuotaAvailable({ hasTrialQuota });\n            }\n          } catch (e) {\n            onNoQuotaAvailable({ hasTrialQuota: false });\n          }\n        },\n        [getQuota]\n      );\n    return checkStandardQuota;\n  };\n\nexport const useCheckDeveloperAvailability =\n  (): CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] => {\n    const { getUsername } = useAuth();\n    const getApi = useKms();\n    const checkDeveloperAvailability: CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] =\n      useCallback(\n        async ({ onAvailable, onUnavailable, onUsed }) => {\n          try {\n            const api = getApi();\n            const loggedInUser = await getUsername();\n            const filter = `owner = ${loggedInUser}`;\n\n            const res = await api.getKafkas(\"\", \"\", \"\", filter);\n            if (res.data.items) {\n              const hasTrialRunning = res.data.items.some(\n                (k) =>\n                  k?.instance_type === InstanceType?.eval ||\n                  k?.instance_type === InstanceType?.developer\n              );\n              if (hasTrialRunning) {\n                onUsed();\n              } else {\n                onAvailable();\n              }\n            }\n          } catch (e) {\n            onUnavailable();\n          }\n        },\n        [getApi, getUsername]\n      );\n    return checkDeveloperAvailability;\n  };\n\nexport const useFetchProvidersWithRegions =\n  (): CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] => {\n    const getApi = useKms();\n    const fetchRegions = useFetchProviderRegions();\n    const fetchProvidersWithRegions: CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] =\n      useCallback(\n        async (plan, { onAvailable, onUnavailable }) => {\n          try {\n            const api = getApi();\n            const res = await api.getCloudProviders();\n            const allProviders = res?.data?.items || [];\n\n            const providers = await Promise.all(\n              allProviders\n                .filter((p) => p.enabled)\n                .map(async (provider) => {\n                  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                  const regions = await fetchRegions(provider.id!, plan);\n                  const providerInfo: CloudProviderInfo = {\n                    id: provider.id as CloudProvider,\n                    displayName: provider.display_name!,\n                    regions,\n                  };\n                  return providerInfo;\n                })\n            );\n            const firstProvider = providers[0];\n            onAvailable({ providers, defaultProvider: firstProvider?.id });\n          } catch (e) {\n            onUnavailable();\n          }\n        },\n        [fetchRegions, getApi]\n      );\n    return fetchProvidersWithRegions;\n  };\n\nexport const useFetchProviderRegions = () => {\n  const getApi = useKms();\n  return useCallback(\n    async function fetchProviderRegions(\n      provider: string,\n      instanceType: string\n    ): Promise<Array<RegionInfo & Pick<CloudRegion, \"capacity\">>> {\n      const api = getApi();\n      const res = await api.getCloudProviderRegions(provider);\n\n      if (!res?.data?.items) {\n        return [];\n      }\n\n      const regionsForInstance = res.data.items.filter(\n        (region) =>\n          region.enabled &&\n          region.capacity.some((c) => c.instance_type === instanceType)\n      );\n\n      return regionsForInstance.map((r) => {\n        const max_capacity_reached = r.capacity?.some(\n          (c) =>\n            c.instance_type === instanceType && c.available_sizes?.length === 0\n        );\n\n        return {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          id: r.id!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          displayName: r.display_name!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          isDisabled: max_capacity_reached,\n          capacity: r.capacity,\n        };\n      });\n    },\n    [getApi]\n  );\n};\n\nexport const useGetSizes = (instanceType: \"developer\" | \"standard\") => {\n  const getApi = useKms();\n  const fetchRegions = useFetchProviderRegions();\n  return useCallback(\n    async (provider: CloudProvider, region: string) => {\n      const api = getApi();\n      const regions = await fetchRegions(provider, instanceType);\n      const regionInfo = regions.find((r) => r.id === region);\n      const availableSizes =\n        regionInfo?.capacity.flatMap((c) =>\n          c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n        ) || [];\n      const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n        provider,\n        region\n      );\n      if (!sizes?.data?.instance_types) {\n        throw new Error(`No instance_types from backend`);\n      }\n\n      const standardSizes =\n        sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes ||\n        [];\n\n      return standardSizes.map(\n        apiSizeToComponentSize.bind(\n          undefined,\n          (id) => !availableSizes.includes(`${instanceType}.${id}`)\n        )\n      );\n    },\n    [fetchRegions, getApi, instanceType]\n  );\n};\n\nexport const useGetStandardSizes =\n  (): CreateKafkaInstanceServices[\"getStandardSizes\"] => {\n    const getSizes = useGetSizes(\"standard\");\n    return getSizes;\n  };\n\nexport const useGetTrialSizes =\n  (): CreateKafkaInstanceServices[\"getTrialSizes\"] => {\n    const getStandardSizes = useGetSizes(\"standard\");\n    const getDeveloperSizes = useGetSizes(\"developer\");\n    return useCallback(\n      async (provider, region) => {\n        let standardSizes: StandardSizes;\n        try {\n          standardSizes = await getStandardSizes(provider, region);\n        } catch (e) {\n          // It can happen that the selected provider doesn't support standard instances.\n          // In this case we provide a faux sample list of sizes just to make the slider happy.\n          standardSizes = [\n            { id: \"1\", displayName: \"1\" },\n            { id: \"2\", displayName: \"2\" },\n          ] as StandardSizes;\n        }\n        const trialSizes = await getDeveloperSizes(provider, region);\n        return {\n          standard: standardSizes,\n          trial: trialSizes[0],\n        };\n      },\n      [getDeveloperSizes, getStandardSizes]\n    );\n  };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): Size & { trialDurationHours: number } {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes } from \"@app/utils\";\nimport { useKms } from \"@app/api\";\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const getApi = useKms();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = getApi();\n\n      try {\n        const kafkaRequest = asKafkaRequestPayload(\n          createEmptyNewKafkaRequestPayload()\n        );\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"standard\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n"],"names":["adapter","createCacheAdapter","debug","localStorage","getItem","useKms","auth","useAuth","kas","apiBasePath","kasBasePath","useConfig","useCallback","DefaultApi","Configuration","accessToken","getToken","basePath","undefined","cache","useAms","ams","amsBasePath","AppServicesApi","KasModalLoader","registerModals","useModal","t","useTranslation","ModalType","lazyComponent","lazy","variant","title","useKasModals","InstanceDrawerTab","useKafkaInstances","getKms","kafkaRequestToKafkaInstance","getQuota","getDeveloperSizes","getStandardSizes","data","d","marketplaceSubscriptions","enhancedInstance","billing","connectionRate","connections","createdAt","created_at","egress","expiryDate","expires_at","id","ingress","maxPartitions","messageSize","name","owner","plan","billing_model","provider","cloud_provider","region","size","status","apiStatusToUIStatus","storage","updatedAt","updated_at","request","marketplaceForBilling","find","ms","subscriptions","s","billing_cloud_account_id","marketplace","subscription","e","console","warn","thisInstanceLimits","instance_type","l","size_id","displayName","max_data_retention_size","bytes","useEnrichedKafkaInstance","page","perPage","query","sort","direction","apisService","uiColumnMapping","querystring","valuesToQuery","flatMap","SimplifiedStatuses","filter","Boolean","map","q","join","res","getKafkas","toString","rawInstances","items","count","total","instances","Promise","all","error","field","values","comparison","v","trim","accepted","preparing","provisioning","ready","failed","deprovision","deleting","getIsDocumentHidden","hiddenKey","doc","document","hidden","msHidden","webkitHidden","getBrowserDocumentHiddenProp","usePageVisibility","isVisible","setIsVisible","useState","onVisibilityChange","useEffect","visibilityChange","getBrowserVisibilityProp","addEventListener","removeEventListener","useKafkaStatusAlerts","addAlert","useAlert","previousInstancesRef","useRef","instancesBeingDeletedRef","toNotifyRef","notifyReady","AlertVariant","description","dangerouslySetInnerHTML","__html","dataTestId","notifyDelete","notifyFailure","callback","delay","savedCallback","current","setInterval","clearInterval","useInterval","length","instance","shift","firstData","previousInstances","previousIdsAndStates","i","currentIdsAndStates","JSON","stringify","filterInstances","desiredStatus","pi","deleted","stillBeingDeleted","reduce","beingDeleted","instanceBeingDeleted","newBeingDeleted","includes","instanceToAlertable","StreamsTableConnected","preCreateInstance","currentUser","isCurrentUserOrgAdmin","fetchInstances","openCreateModal","resolve","shouldOpenCreateModal","showModal","showCreateModal","update","useURLSearchParams","onDone","onCreate","delete","checkForCreateModal","useCreateDialog","openDeleteDialog","showDeleteModal","onDelete","kafka","useDeleteDialog","openChangeOwnerDialog","showTransferOwnershipModal","refreshKafkas","useChangeOwnerDialog","notifyForInstanceChange","setActiveQuickStart","useContext","QuickStartContext","isDrawerOpen","drawerInstance","closeDrawer","openDrawer","setDrawerActiveTab","setDrawerInstance","getInstances","args","latestDrawerInstanceData","onViewConnection","isUserOwnerOrAdmin","onQuickstartGuide","KafkaInstances","isRowSelected","row","getUrlForInstance","onDetails","onConnection","onChangeOwner","onClickConnectionTabLink","onClickSupportLink","window","insights","chrome","createCase","onInstanceLinkClick","canChangeOwner","canDelete","StreamsTableConnectedWithAuth","getUsername","isOrgAdmin","user","setUser","username","orgAdmin","getUser","KasLayout","children","isMobileModalOpen","setIsMobileModalOpen","parseInt","newCount","setItem","handleMobileModal","className","PageSection","PageSectionVariants","Level","LevelItem","TextContent","Text","component","Modal","ModalVariant","isOpen","onClose","actions","Button","onClick","resourceName","useStandardQuota","getApi","api","account","apiAccountsMgmtV1CurrentAccountGet","orgId","organization","Error","quotaResponse","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","statusText","standardQuotas","related_resources","r","resource_name","product","prepaidQuota","marketplaceQuotas","hasTrialQuota","some","remainingPrepaidQuota","allowed","consumed","remainingMarketplaceQuota","agg","unaggregatedSubscriptions","cloud_accounts","subscriptionMarketplaces","Array","from","Set","cloud_provider_id","cloud_account_id","useCheckStandardQuota","onNoQuotaAvailable","onOutOfQuota","onQuotaAvailable","quota","useCheckDeveloperAvailability","checkDeveloperAvailability","onAvailable","onUnavailable","onUsed","k","useFetchProvidersWithRegions","fetchRegions","useFetchProviderRegions","fetchProvidersWithRegions","getCloudProviders","allProviders","providers","p","enabled","regions","display_name","firstProvider","defaultProvider","instanceType","getCloudProviderRegions","capacity","c","max_capacity_reached","available_sizes","isDisabled","useGetSizes","regionInfo","availableSizes","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","apiSizeToComponentSize","bind","useGetStandardSizes","useGetTrialSizes","standardSizes","standard","trial","apiSize","quota_consumed","ingress_throughput_per_sec","egress_throughput_per_sec","Math","round","total_max_connections","max_connection_attempts_per_sec","max_partitions","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","useCreateInstance","onSuccess","onError","kafkaRequest","value","multi_az","asKafkaRequestPayload","sizeId","createKafka","code","response"],"sourceRoot":""}