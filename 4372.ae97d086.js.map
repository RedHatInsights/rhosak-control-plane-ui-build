{"version":3,"file":"4372.ae97d086.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts"],"sourcesContent":["import { useHistory } from \"react-router-dom\";\nimport {\n  CreateKafkaInstancePropsWithSizes,\n  CreateKafkaInstanceWithSizes,\n  CreateKafkaInstanceWithSizesTypes,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n} from \"@rhoas/app-services-ui-shared\";\nimport { QuickStartContext } from \"@patternfly/quickstarts\";\nimport { getModalAppendTo } from \"@app/utils\";\nimport { FunctionComponent, useCallback, useContext, useRef } from \"react\";\nimport {\n  useGetAvailableSizes,\n  useCreateInstance,\n  useAvailableProvidersAndDefault,\n} from \"./hooks\";\nimport { AsyncReturnType } from \"type-fest\";\n\nconst CreateInstanceWithSizes: FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ hideModal, onCreate }) => {\n  const history = useHistory();\n  const fetchAvailableProvidersAndDefault = useAvailableProvidersAndDefault();\n  const getKafkaSizes = useGetAvailableSizes();\n  const createInstance = useCreateInstance();\n  const qsContext = useContext(QuickStartContext);\n  const capabilitiesRef =\n    useRef<AsyncReturnType<typeof fetchAvailableProvidersAndDefault>>();\n\n  const onClickKafkaOverview = () => {\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const handleCreate =\n    useCallback<CreateKafkaInstanceWithSizesTypes.OnCreateKafka>(\n      function (data, onSuccess, onError) {\n        const handleOnSuccess = () => {\n          onSuccess();\n          onCreate && onCreate();\n          hideModal();\n        };\n        createInstance(data, handleOnSuccess, onError);\n      },\n      [hideModal, onCreate, createInstance]\n    );\n\n  const getAvailableProvidersAndDefaults =\n    useCallback(async (): Promise<CreateKafkaInstanceWithSizesTypes.CreateKafkaInitializationData> => {\n      const data = await fetchAvailableProvidersAndDefault();\n      capabilitiesRef.current = data;\n      return data;\n    }, [fetchAvailableProvidersAndDefault]);\n\n  const kafkaSizes = useCallback<CreateKafkaInstancePropsWithSizes[\"getSizes\"]>(\n    (provider, region) => {\n      return new Promise((resolve, reject) => {\n        const capabilities = capabilitiesRef.current;\n        if (!capabilities) {\n          reject(\"Unexpected error, missing provider data\");\n        } else {\n          const providerInfo = capabilities.availableProviders.find(\n            (p) => p.id === provider\n          );\n          const regionInfo = providerInfo?.regions.find((r) => r.id === region);\n          const availableSizes =\n            regionInfo?.capacity.flatMap((c) =>\n              c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n            ) || [];\n          resolve(getKafkaSizes(provider, region, availableSizes));\n        }\n      });\n    },\n    [getKafkaSizes]\n  );\n\n  return (\n    <CreateKafkaInstanceWithSizes\n      isModalOpen={true}\n      onClickQuickStart={onClickQuickStart}\n      onCancel={hideModal}\n      getAvailableProvidersAndDefaults={getAvailableProvidersAndDefaults}\n      onCreate={handleCreate}\n      onClickContactUs={onClickKafkaOverview}\n      onClickLearnMoreAboutRegions={onClickKafkaOverview}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      getSizes={kafkaSizes}\n      appendTo={getModalAppendTo}\n    />\n  );\n};\n\nexport { CreateInstanceWithSizes };\nexport default CreateInstanceWithSizes;\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from \"@rhoas/kafka-management-sdk\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n","import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string): void {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { IRowCell, IRowData } from \"@patternfly/react-table\";\nimport { formatDistance } from \"date-fns\";\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById(\"primary-app-container\");\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};\n\nenum InstanceStatus {\n  READY = \"ready\",\n  ACCEPTED = \"accepted\",\n  PREPARING = \"preparing\",\n  PROVISIONING = \"provisioning\",\n  FAILED = \"failed\",\n  DEPROVISION = \"deprovision\",\n  DELETED = \"deleting\",\n}\n\nenum InstanceType {\n  eval = \"eval\",\n  standard = \"standard\",\n  developer = \"developer\",\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: \"aws\", label: \"Amazon Web Services\" },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: \"ready\", label: \"Ready\" },\n  { value: \"failed\", label: \"Failed\" },\n  { value: \"accepted\", label: \"Creation pending\" },\n  { value: \"provisioning\", label: \"Creation in progress\" },\n  { value: \"preparing\", label: \"Creation in progress\" },\n  { value: \"deprovision\", label: \"Deletion in progress\" },\n  { value: \"deleting\", label: \"Deletion in progress\" },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: \"us-east-1\", label: \"US East, N. Virginia\" },\n  { value: \"eu-west-1\", label: \"EU, Ireland\" },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === \"string\" ? new Date(date) : date;\n  return formatDistance(date, new Date()) + \" \" + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || (window as any)[\"opera\"]);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\ntype SizeUnits = \"MiB\" | \"GiB\";\n\nconst convertBytesToUnit = (bytes: number, unit: SizeUnits): number => {\n  switch (unit) {\n    case \"MiB\":\n      return bytes / 1048576;\n    case \"GiB\":\n      return bytes / 1073741824;\n    default:\n      return bytes;\n  }\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n  convertBytesToUnit,\n  SizeUnits,\n};\n"],"names":["CreateInstanceWithSizes","hideModal","onCreate","history","useHistory","fetchAvailableProvidersAndDefault","getKafkaSizes","createInstance","qsContext","useContext","QuickStartContext","capabilitiesRef","useRef","onClickKafkaOverview","push","onClickQuickStart","useCallback","setActiveQuickStart","handleCreate","data","onSuccess","onError","getAvailableProvidersAndDefaults","current","kafkaSizes","provider","region","Promise","resolve","reject","capabilities","providerInfo","availableProviders","find","p","id","regionInfo","regions","r","availableSizes","capacity","flatMap","c","available_sizes","map","s","instance_type","CreateKafkaInstanceWithSizes","isModalOpen","onCancel","onClickContactUs","onClickLearnMoreAboutRegions","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","getSizes","appendTo","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDocumentTitle","title","useEffect","originalTitle","document","InstanceStatus","InstanceType","cloudProviderOptions","value","label","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_SERVICE_ACCOUNT_NAME_LENGTH","MAX_POLL_INTERVAL","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","Math","floor","getFormattedDate","date","translatePostfix","Date","getModalAppendTo","getElementById","body","isMobileTablet","check","a","navigator","userAgent","vendor","window","test","substr","getSkeletonForRows","loadingCount","skeleton","length","rows","cells","i"],"sourceRoot":""}