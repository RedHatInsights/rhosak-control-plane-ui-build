{"version":3,"sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/ban-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/copy-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/filter-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/pending-icon.js","webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ConnectionTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/DetailsTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","module","e","LTS","LT","L","LL","LLL","LLLL","t","n","o","r","prototype","M","format","en","formats","this","$locale","replace","toUpperCase","slice","call","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","visibilityChange","addEventListener","removeEventListener","StreamsToolbar","setFilterSelected","filterSelected","total","page","perPage","filteredValue","setFilteredValue","isDisabledCreateButton","buttonTooltipContent","labelWithTooltip","onCreate","refresh","cloudProviders","useTranslation","nameInputRef","ownerInputRef","showModal","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","mainFilterOptions","label","value","disabled","handleMaxFilters","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","s","map","status","updateFilter","key","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","push","isInputValid","test","trim","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","event","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","deprovisionStatus","isDisabledSelectOption","optionValue","tooltipContent","toggleGroupItems","ToolbarGroup","variant","Select","SelectVariant","onToggle","selections","isOpen","onSelect","_event","selection","index","SelectOption","isDisabled","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","showToolbarItem","toLowerCase","InputGroup","className","TextInput","id","type","validated","ValidatedOptions","placeholder","onChange","input","onKeyPress","ref","Button","ButtonVariant","onClick","Tooltip","content","reference","isPlaceholder","placeholderText","getElementById","handleCreateModal","toolbarItems","item","isAriaDisabled","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","default","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","StatusColumn","filteredstatus","instanceName","statusIcon","Spinner","size","getStatusIcon","Flex","FlexItem","spacer","st","StreamsTableView","mainToggle","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToRoute","getConnectToRoutePath","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","isMaxCapacityReached","loggedInUser","setWaitingForDelete","currentUserkafkas","auth","useAuth","basePath","useConfig","searchParams","URLSearchParams","location","search","history","addAlert","useAlert","hideModal","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","items","setItems","tableColumns","title","transforms","sortable","setSearchParam","useCallback","set","addAlertAfterSuccessDeletion","notPresentKafkas","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","AlertVariant","lastItemsState","JSON","parse","stringify","instances","cfItem","dangerouslySetInnerHTML","__html","incompleteKafkas","addAlertAfterSuccessCreation","tableRow","loadingCount","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","renderNameLink","row","Link","to","preventDefault","instance","onDeleteInstance","config","confirmActionLabel","description","additionalMessage","getDeleteInstanceModalConfig","instanceStatus","selectedItemData","confirmButtonProps","textProps","undefined","instanceId","Error","kas","getToken","accessToken","apisService","deleteKafkaById","then","reason","response","data","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","tableProps","cells","rows","cloud_provider","created_at","owner","cloudProviderDisplayName","regionDisplayName","skeleton","Skeleton","actionResolver","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","style","pointerEvents","cursor","tooltipProps","position","getActionResolver","onSort","myDirection","property","getParameterForSortIndex","sortBy","hasDefaultCustomRowWrapper","onRowClick","rowIndex","clickedEventType","tagName","rowDataTestId","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant","ResourcesTab","externalServer","isKafkaPending","tokenEndPointUrl","TextContent","Text","component","TextVariants","fontSize","ClipboardCopy","textAriaLabel","isInline","Label","color","Popover","bodyContent","SampleCodeTab","ConnectionTab","activeKey","Tabs","isSecondary","Tab","eventKey","TabTitleText","DetailsTab","instanceDetail","updated_at","renderTextListItem","TextListItem","TextListItemVariants","Grid","GridItem","span","Card","isFlat","CardBody","TextList","TextListVariants","InstanceDrawer","onClose","activeTab","isExpanded","isLoading","children","dataOuiaAppId","notRequiredDrawerContentBackground","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","selectedTab","bootstrapServerHost","handleTab1Click","_","onSelectConnectionTab","panelBodyContent","endsWith","drawerHeaderProps","text","headingLevel","inlineAlertMessage","Alert","OpenshiftStreams","preCreateInstance","useContext","AuthContext","parseInt","get","has","localStorage","window","qsContext","QuickStartContext","setKafkaInstanceItems","kafkas","setKafkas","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setExpectedTotal","isDisplayKafkaEmptyState","setIsDisplayKafkaEmptyState","isUserUnauthorized","setIsUserUnauthorized","isMobileModalOpen","setIsMobileModalOpen","waitingForDelete","setIsMaxCapacityReached","setLoggedInUser","currentUserKafkas","setCurrentUserKafkas","updateSelectedKafkaInstance","selectedKafkaItem","kafka","newState","getUsername","username","fetchKafkaServiceStatus","count","getItem","newCount","setItem","handleMobileModal","serviceStatus","res","maxCapacityReached","max_capacity_reached","handleServerError","handleCreateInstanceModal","open","refreshKafkas","error","errorCode","code","fetchKafkas","listKafkas","filters","join","kafkaInstances","kafkaItems","kafkaItemsLength","fetchCurrentUserKafkas","fetchKafkasOnborading","listCloudProviders","providers","enabledCloudProviders","p","enabled","PageSection","PageSectionVariants","padding","isFilled","emptyStateIconProps","icon","LockIcon","getLoggedInUserKafkaInstance","kafkaItem","getButtonTooltipContent","isKafkaInstanceExist","createInstanceLabel","tabIndex","Level","LevelItem","EmptyStateVariant","isSmall","TitleSizes","setActiveQuickStart","createInstanceButton","Modal","ModalVariant","actions"],"mappings":"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","file":"644.5fe403ee.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.BanIconConfig = {\n  name: 'BanIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.BanIcon = require('../createIcon').createIcon(exports.BanIconConfig);\nexports[\"default\"] = exports.BanIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CheckIconConfig = {\n  name: 'CheckIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckIcon = require('../createIcon').createIcon(exports.CheckIconConfig);\nexports[\"default\"] = exports.CheckIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CopyIconConfig = {\n  name: 'CopyIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CopyIcon = require('../createIcon').createIcon(exports.CopyIconConfig);\nexports[\"default\"] = exports.CopyIcon;","\"use strict\"\nexports.__esModule = true;\nexports.FilterIconConfig = {\n  name: 'FilterIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.FilterIcon = require('../createIcon').createIcon(exports.FilterIconConfig);\nexports[\"default\"] = exports.FilterIcon;","\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PendingIconConfig = {\n  name: 'PendingIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,895.9 C300.3,895.9 128.1,723.8 128.1,511.9 C128.1,300.2 300.3,127.9 512.1,127.9 C723.8,127.9 896,300.2 896.1,511.9 C896.1,723.7 723.8,895.9 512.1,895.9 M512.1,0 C229.7,0 0,229.7 0,512 C0,794.3 229.7,1024 512.1,1024 C794.3,1024 1024,794.3 1024,512 C1024,229.7 794.3,0 512.1,0 M704,288 L704,272 C704,263.2 696.8,256 688,256 L336,256 C327.2,256 320,263.2 320,272 L320,288 C320,447 480,449 480,512 C480,575 320,575 320,736 L320,752 C320,760.8 327.2,768 336,768 L688,768 C696.8,768 704,760.8 704,752 L704,736 C704,576 544,577 544,512 C544,447 704,448 704,288 M603.9,704 L420.3,704 C417.3,704 418.2,695 419.4,686.8 C426.8,634.5 480.1,617.4 495.2,612.3 C512.3,606.6 512.3,606.6 528.9,612.3 C544,617.6 597.6,635.4 604.8,687 C605.9,695.2 606.9,704 603.9,704',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PendingIcon = require('../createIcon').createIcon(exports.PendingIconConfig);\nexports[\"default\"] = exports.PendingIcon;","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.dayjs_plugin_localizedFormat=t()}(this,function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)}}});\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import { useEffect, useState } from 'react';\n\nexport function getBrowserVisibilityProp() {\n  const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp() {\n    const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden() {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility() {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  });\n  return {isVisible,setIsVisible};\n}\n","import React, { useState, useRef, useEffect, ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT, InstanceStatus } from '@app/utils';\nimport { CloudProvider } from '../../../../../openapi';\nimport './StreamsToolbar.css';\n\n/**\n * Todo: remove props isDisabledCreateButton, buttonTooltipContent and labelWithTooltip after summit\n */\nexport type StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  isDisabledCreateButton?: boolean;\n  buttonTooltipContent?: string | undefined;\n  labelWithTooltip?: ReactElement | undefined;\n  onCreate?: () => void;\n  refresh?: () => void;\n  cloudProviders?: Array<CloudProvider>;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  isDisabledCreateButton,\n  buttonTooltipContent,\n  labelWithTooltip,\n  onCreate,\n  refresh,\n  cloudProviders,\n}) => {\n  const { t } = useTranslation();\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n  const { showModal } = useRootModalContext();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((s) => s.value !== InstanceStatus.PREPARING && s.value !== InstanceStatus.DELETED)\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status' && filterValue?.filter(({ value }) => value === InstanceStatus.PROVISIONING);\n      const deprovisionStatus =\n        filterKey === 'status' && filterValue?.filter(({ value }) => value === InstanceStatus.DEPROVISION);\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (provisioningStatus?.length > 0 || deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <Select\n          variant={SelectVariant.single}\n          aria-label=\"Select filter\"\n          onToggle={onFilterToggle}\n          selections={filterSelected}\n          isOpen={isFilterExpanded}\n          onSelect={onChangeSelect}\n        >\n          {mainFilterOptions.map((option, index) => (\n            <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n              {option.label}\n            </SelectOption>\n          ))}\n        </Select>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"name\"\n                id=\"filterText\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                placeholder={t('filter_by_name_lower')}\n                onChange={onNameInputChange}\n                onKeyPress={onInputPress}\n                value={nameInputValue}\n                ref={nameInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                isDisabled={!isNameValid || isMaxFilter}\n                onClick={() => onFilter('name')}\n                aria-label=\"Search instances\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isNameValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isNameValid}\n                  content={tooltipContent('name')}\n                  reference={nameInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n          showToolbarItem={filterSelected === 'cloud_provider'}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <Select\n              id=\"cloud-provider-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select cloud provider\"\n              onToggle={onCloudProviderFilterToggle}\n              selections={getSelectionForFilter('cloud_provider')}\n              isOpen={isCloudProviderFilterExpanded}\n              onSelect={onCloudProviderFilterSelect}\n              placeholderText={t('filter_by_cloud_provider')}\n              className=\"select-custom-width\"\n            >\n              {cloudProviderFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={\n                    option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                  }\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('cloud-provider-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n          showToolbarItem={filterSelected === 'region'}\n        >\n          {filterSelected === 'region' && (\n            <Select\n              id=\"region-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select region\"\n              onToggle={onRegionFilterToggle}\n              selections={getSelectionForFilter('region')}\n              isOpen={isRegionFilterExpanded}\n              onSelect={onRegionFilterSelect}\n              placeholderText={t('filter_by_region')}\n              className=\"select-custom-width\"\n            >\n              {regionFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('region-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"owner\"\n                id=\"filterOwners\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                placeholder={t('filter_by_owner')}\n                validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                onChange={onOwnerInputChange}\n                onKeyPress={onInputPress}\n                value={ownerInputValue}\n                ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                isDisabled={!isOwnerValid || isMaxFilter}\n                variant={ButtonVariant.control}\n                onClick={() => onFilter('owner')}\n                aria-label=\"Search owners\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isOwnerValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isOwnerValid}\n                  content={tooltipContent('owner')}\n                  reference={ownerInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n          showToolbarItem={filterSelected === 'status'}\n        >\n          {filterSelected === 'status' && (\n            <Select\n              id=\"status-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select status\"\n              onToggle={onStatusFilterToggle}\n              selections={getSelectionForFilter('status')}\n              isOpen={isStatusFilterExpanded}\n              onSelect={onStatusFilterSelect}\n              placeholderText={t('filter_by_status')}\n              className=\"select-custom-width\"\n            >\n              {statusFilterOptions.map((option, index) => (\n                <SelectOption\n                  isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                  key={index}\n                  value={option.value}\n                >\n                  {isMaxFilter && (\n                    <Tooltip\n                      isVisible={isMaxFilter}\n                      content={tooltipContent()}\n                      reference={() => document.getElementById('status-select')}\n                    />\n                  )}\n                  {option.label}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const handleCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_KAFKA_INSTANCE, {\n      onCreate,\n      cloudProviders,\n      refresh,\n    });\n  };\n\n  const createButton = () => {\n    if (isDisabledCreateButton) {\n      return (\n        <Tooltip content={buttonTooltipContent}>\n          <Button\n            variant=\"primary\"\n            onClick={handleCreateModal}\n            data-testid={'tableStreams-buttonCreateKafka'}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n    return (\n      <Button variant=\"primary\" onClick={handleCreateModal} data-testid={'tableStreams-buttonCreateKafka'}>\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: createButton(),\n    },\n    {\n      item: labelWithTooltip,\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length > 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size=\"md\" aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const statusIcon = getStatusIcon();\n\n  return (\n    <Flex>\n      {statusIcon && <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { useHistory, Link } from 'react-router-dom';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { AlertVariant, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport { InstanceStatus, isServiceApiError, getLoadingRowsCount, getFormattedDate, getSkeletonForRows } from '@app/utils';\nimport {\n  MASPagination,\n  MASTable,\n  MASEmptyState,\n  MASEmptyStateVariant,\n  useRootModalContext,\n  MODAL_TYPES,\n} from '@app/common';\nimport { DefaultApi, KafkaRequest } from '../../../../../openapi/api';\nimport './StatusColumn.css';\nimport { StreamsToolbar, StreamsToolbarProps } from './StreamsToolbar';\nimport { StatusColumn } from './StatusColumn';\nimport { useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = StreamsToolbarProps & {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToRoute: (data: KafkaRequest, routePath: string) => void;\n  getConnectToRoutePath: (data: KafkaRequest, routePath: string) => string;\n  mainToggle: boolean;\n  refresh: (arg0?: boolean) => void;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n  loggedInUser: string | undefined;\n  isMaxCapacityReached?: boolean | undefined;\n  setWaitingForDelete: (arg0: boolean) => void;\n  currentUserkafkas: KafkaRequest[] | undefined;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined,\n  isMaxCapacityReached?: boolean | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const additionalMessage = isMaxCapacityReached\n    ? ' You might not be able to create a new instance because all of them are currently provisioned by other users.'\n    : '';\n\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_complete', { instanceName }) + additionalMessage;\n  } else if (\n    status === InstanceStatus.ACCEPTED ||\n    status === InstanceStatus.PROVISIONING ||\n    status === InstanceStatus.PREPARING\n  ) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName }) + additionalMessage;\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n  isMaxCapacityReached,\n  buttonTooltipContent,\n  isDisabledCreateButton,\n  loggedInUser,\n  labelWithTooltip,\n  setWaitingForDelete,\n  currentUserkafkas,\n  cloudProviders,\n  onCreate,\n}: StreamsTableProps) => {\n\n  const auth = useAuth();\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { t } = useTranslation();\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n  const { addAlert } = useAlert();\n\n  const { showModal, hideModal } = useRootModalContext();\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<string>();\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    if (currentUserkafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: any = currentUserkafkas.filter(\n        (k) => k.status === InstanceStatus.DEPROVISION || k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserkafkas?.findIndex((item) => item.name === k);\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-success'\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-failed'\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems, currentUserkafkas]);\n\n  const onSelectKebabDropdownOption = (event: any, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION || originalData.status === InstanceStatus.DELETED) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <Link\n        to={() => getConnectToRoutePath(row as KafkaRequest, `kafkas/${row?.id}`)}\n        onClick={(e) => {\n          e.preventDefault();\n          onConnectToRoute(row as KafkaRequest, `kafkas/${row?.id}`);\n        }}\n        data-testid=\"tableStreams-linkKafka\"\n      >\n        {name}\n      </Link>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({ loadingCount, skeleton: <Skeleton />, length: tableColumns.length });\n    }\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION || status !== InstanceStatus.READY\n                ? name\n                : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: getFormattedDate(created_at, t('ago')),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status, name } = instance;\n    setSelectedInstance(instance);\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n        t,\n        status,\n        name,\n        isMaxCapacityReached\n      );\n\n      showModal(MODAL_TYPES.DELETE_KAFKA_INSTANCE, {\n        instanceStatus: status,\n        selectedItemData: instance,\n        title,\n        confirmButtonProps: {\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        },\n        textProps: {\n          description,\n        },\n      });\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n    const accessToken = await auth?.kas.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    hideModal();\n\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        setWaitingForDelete(true);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        isDisabledCreateButton={isDisabledCreateButton}\n        buttonTooltipContent={buttonTooltipContent}\n        labelWithTooltip={labelWithTooltip}\n        cloudProviders={cloudProviders}\n        onCreate={onCreate}\n        refresh={refresh}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n        loggedInUser={loggedInUser}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  TextContent,\n  Text,\n  TextVariants,\n  ClipboardCopy,\n  Label,\n  Popover,\n  Skeleton,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport { useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { KafkaRequest } from '../../../../../openapi/api';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n  externalServer?: string;\n  instance: KafkaRequest | undefined;\n  isKafkaPending?: boolean;\n  onConnectToRoute: (data: KafkaRequest, routePath: string) => void;\n  getConnectToRoutePath: (data: KafkaRequest, routePath: string) => string;\n  tokenEndPointUrl: string;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = ({\n  mainToggle,\n  externalServer,\n  instance = {},\n  isKafkaPending,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  tokenEndPointUrl,\n}: ResourcesTabProps) => {\n\n  const { t } = useTranslation();\n  const { showModal } = useRootModalContext();\n\n  const handleCreateServiceAccountModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_ACCOUNT);\n  };\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n        <Text component={TextVariants.h3} className=\"pf-u-mt-lg\">\n          {t('bootstrap_server')}\n        </Text>\n        <Text component={TextVariants.small}>{t('bootstrap_server_description')}</Text>\n      </TextContent>\n      {isKafkaPending ? (\n        <Skeleton fontSize=\"2xl\" />\n      ) : (\n        <ClipboardCopy data-testid=\"drawerStreams-copyBootstrapURL\" textAriaLabel={t('bootstrap_server')}>\n          {externalServer}\n        </ClipboardCopy>\n      )}\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t('serviceAccount.service_accounts_small')}\n        </Text>\n        <Text component={TextVariants.small}>\n          {t('serviceAccount.create_service_account_to_generate_credentials')}{' '}\n          <Link\n            to={() => getConnectToRoutePath(instance, 'service-accounts')}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToRoute(instance, 'service-accounts');\n            }}\n            data-testid=\"tableStreams-linkKafka\"\n          >\n            {t('serviceAccount.service_accounts')}\n          </Link>{' '}\n          {t('common.page')}.\n        </Text>\n      </TextContent>\n      <Button\n        variant=\"secondary\"\n        onClick={handleCreateServiceAccountModal}\n        data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n        isInline\n      >\n        {t('serviceAccount.create_service_account')}\n      </Button>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h3} className=\"pf-u-mt-xl\">\n          {t('common.authentication_method')}\n        </Text>\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t('common.sasl_oauthbearer')} <Label color=\"green\">{t('common.recommended')}</Label>\n          <Popover\n            aria-label={t('common.sasl_oauthbearer')}\n            bodyContent={<div>{t('serviceAccount.sasl_oauthbearer_popover_content')}</div>}\n          >\n            <Button variant={ButtonVariant.plain} aria-label={t('more_info_about_sasl_oauthbearer')}>\n              <HelpIcon />\n            </Button>\n          </Popover>\n        </Text>\n        <Text component={TextVariants.small}>{t('serviceAccount.sasl_oauthbearer_description')}</Text>\n        <Text component={TextVariants.h6} className=\"pf-u-mt-md\">\n          {t('common.token_endpoint_url')}\n        </Text>\n        {isKafkaPending ? <Skeleton fontSize=\"2xl\" /> : <ClipboardCopy>{tokenEndPointUrl}</ClipboardCopy>}\n      </TextContent>\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h4} className=\"pf-u-mt-md\">\n          {t('common.sasl_plain')}\n        </Text>\n        <Text component={TextVariants.small}>{t('serviceAccount.sasl_plain_description')}</Text>\n      </TextContent>\n      {mainToggle && (\n        <>\n          <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n            <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n            <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n          </TextContent>\n          <ClipboardCopy>https://:30123</ClipboardCopy>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport CopyIcon from '@patternfly/react-icons/dist/js/icons/copy-icon';\n\nexport const SampleCodeTab = () => {\n\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n          {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n          <div className=\"pf-c-code-editor__tab\">\n            <span className=\"pf-c-code-editor__tab-text\">Java</span>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n          </div>\n        </div>\n      </div>\n      <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n        <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n        <Text component={TextVariants.small}>\n          {t('drawer_code_section_tab_body_description_1')}\n          &lt;{t('brackets')}&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">\n              bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n              sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n            </pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, TabsProps, Tab, TabTitleText } from '@patternfly/react-core';\nimport { ResourcesTab, ResourcesTabProps } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ConnectionTabProps = Pick<TabsProps, 'onSelect' | 'activeKey'> & ResourcesTabProps;\n\nexport const ConnectionTab: React.FC<ConnectionTabProps> = ({\n  onSelect,\n  externalServer,\n  instance,\n  mainToggle,\n  activeKey,\n  isKafkaPending,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  tokenEndPointUrl,\n}: ConnectionTabProps) => {\n\n  const { t } = useTranslation();\n\n  return (\n    mainToggle ? (\n      <div className=\"mas--details__drawer--tab-content pf-m-secondary\">\n        <Tabs activeKey={activeKey} isSecondary onSelect={onSelect}>\n          <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n            <ResourcesTab\n              externalServer={externalServer}\n              instance={instance}\n              mainToggle={mainToggle}\n              isKafkaPending={isKafkaPending}\n              getConnectToRoutePath={getConnectToRoutePath}\n              onConnectToRoute={onConnectToRoute}\n              tokenEndPointUrl={tokenEndPointUrl}\n            />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n            <SampleCodeTab />\n          </Tab>\n        </Tabs>\n      </div>\n    ) : (\n      <ResourcesTab\n        externalServer={externalServer}\n        instance={instance}\n        mainToggle={mainToggle}\n        isKafkaPending={isKafkaPending}\n        getConnectToRoutePath={getConnectToRoutePath}\n        onConnectToRoute={onConnectToRoute}\n        tokenEndPointUrl={tokenEndPointUrl}\n      />\n    )\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport { KafkaRequest } from 'src/openapi';\n\nexport type DetailsTabProps = {\n  mainToggle?: boolean;\n  instanceDetail?: KafkaRequest;\n};\n\nexport const DetailsTab = ({ mainToggle, instanceDetail }: DetailsTabProps) => {\n\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n  const { id, owner, created_at, updated_at } = instanceDetail || {};\n\n  const renderTextListItem = (title: string, value?: string) => (\n    value &&\n    <>\n      <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n    </>\n  );\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      {mainToggle && (\n        <Grid className=\"mas--details__drawer--grid\">\n          <GridItem span={6} className=\"mas--details__drawer--grid--column-one\">\n            <Card isFlat>\n              <CardBody>\n                <TextContent>\n                  <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                    {t('topics')}\n                  </Text>\n                  <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                    10\n                  </Text>\n                </TextContent>\n              </CardBody>\n            </Card>\n          </GridItem>\n          <GridItem span={6}>\n            <Card isFlat>\n              <CardBody>\n                <TextContent>\n                  <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                    {t('consumer_groups')}\n                  </Text>\n                  <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                    8\n                  </Text>\n                </TextContent>\n              </CardBody>\n            </Card>\n          </GridItem>\n        </Grid>\n      )}\n      <TextContent>\n        <TextList component={TextListVariants.dl}>\n          {renderTextListItem(t('cloud_provider'), t('amazon_web_services'))}\n          {renderTextListItem(t('region'), t('us_east_north_virginia'))}\n          {renderTextListItem(t('id'), id)}\n          {renderTextListItem(t('owner'), owner)}\n          {renderTextListItem(t('created'), dayjs(created_at).format('LLLL'))}\n          {renderTextListItem(t('updated'), dayjs(updated_at).format('LLLL'))}\n        </TextList>\n      </TextContent>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { Tabs, Tab, TabTitleText, Alert, AlertVariant } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\nimport { ConnectionTab, ConnectionTabProps } from './ConnectionTab';\nimport { DetailsTab, DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\n\nexport type InstanceDrawerProps = Pick<\n  ConnectionTabProps,\n  'getConnectToRoutePath' | 'onConnectToRoute' | 'tokenEndPointUrl'\n> &\n  Omit<MASDrawerProps, 'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\n\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  getConnectToRoutePath,\n  onConnectToRoute,\n  tokenEndPointUrl,\n  notRequiredDrawerContentBackground,\n}) => {\n\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n  const { name, status } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrapServerHost } = instanceDetail || {};\n    return bootstrapServerHost?.endsWith(':443') ? bootstrapServerHost : `${bootstrapServerHost}:443`;\n  };\n\n  const isKafkaPending = status === InstanceStatus.ACCEPTED || status === InstanceStatus.PREPARING;\n\n  const panelBodyContent = () => {\n    return (\n      <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n        <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n          <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>} data-testid=\"drawerStreams-tabConnect\">\n          <ConnectionTab\n            mainToggle={mainToggle}\n            activeKey={activeTab2Key}\n            instance={instanceDetail}\n            externalServer={getExternalServer()}\n            onSelect={onSelectConnectionTab}\n            isKafkaPending={isKafkaPending}\n            getConnectToRoutePath={getConnectToRoutePath}\n            onConnectToRoute={onConnectToRoute}\n            tokenEndPointUrl={tokenEndPointUrl}\n          />\n        </Tab>\n      </Tabs>\n    );\n  };\n\n  const alertMessage = () => {\n    if (isKafkaPending) {\n      return (\n        <Alert\n          isInline\n          variant={AlertVariant.info}\n          title={t('kafka_instance_not_ready_inline_message')}\n          className=\"pf-u-mt-sm\"\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent()}\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      inlineAlertMessage={alertMessage()}\n      notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  AlertVariant,\n  Alert,\n  Button,\n  ButtonVariant,\n  Tooltip,\n  EmptyStateVariant,\n  TitleSizes,\n  Label,\n  Modal,\n  ModalVariant,\n  Card,\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport BanIcon from '@patternfly/react-icons/dist/js/icons/ban-icon';\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport { useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes, isMobileTablet, InstanceStatus } from '@app/utils';\nimport { MASLoading, MASEmptyState } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { MAX_POLL_INTERVAL } from '@app/utils';\nimport { QuickStartContext, QuickStartContextValues } from '@cloudmosaic/quickstarts';\nimport { StreamsTableView, FilterType, InstanceDrawer, InstanceDrawerProps, StreamsTableProps } from './components';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../../openapi/api';\nimport './OpenshiftStreams.css';\nimport { AuthContext, useAlert, useAuth, useConfig } from \"@bf2/ui-shared\";\n\nexport type OpenShiftStreamsProps = Pick<InstanceDrawerProps, 'tokenEndPointUrl'> &\n  Pick<StreamsTableProps, 'onConnectToRoute' | 'getConnectToRoutePath'> & {\n    preCreateInstance: (open: boolean) => Promise<boolean>;\n    createDialogOpen: () => boolean;\n  };\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({\n  onConnectToRoute,\n  getConnectToRoutePath,\n  preCreateInstance,\n  tokenEndPointUrl,\n}: OpenShiftStreamsProps) => {\n  dayjs.extend(localizedFormat);\n\n  const auth = useContext(AuthContext);\n  const { kas: { apiBasePath: basePath } } = useConfig();\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n  const { t } = useTranslation();\n  const { addAlert } = useAlert();\n  const { showModal } = useRootModalContext();\n  const localStorage = window.localStorage;\n  const qsContext: QuickStartContextValues = React.useContext(QuickStartContext);\n\n  // States\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkas, setKafkas] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  // state to store the expected total kafka instances based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n  const [isDisplayKafkaEmptyState, setIsDisplayKafkaEmptyState] = useState<boolean | undefined>(undefined);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n  const [isMaxCapacityReached, setIsMaxCapacityReached] = useState<boolean | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<KafkaRequest[] | undefined>();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const updateSelectedKafkaInstance = () => {\n    if (kafkaInstanceItems && kafkaInstanceItems?.length > 0) {\n      const selectedKafkaItem = kafkaInstanceItems?.filter(\n        (kafka) => kafka?.id === selectedInstance?.instanceDetail?.id\n      )[0];\n      const newState: any = { ...selectedInstance, instanceDetail: selectedKafkaItem };\n      selectedKafkaItem && setSelectedInstance(newState);\n    }\n  };\n\n  useEffect(() => {\n    updateSelectedKafkaInstance();\n  }, [kafkaInstanceItems]);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    fetchKafkaServiceStatus();\n  }, []);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      if (localStorage) {\n        const count = localStorage.getItem('openSessions') || 0;\n        const newCount = parseInt(count) + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', newCount);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  const fetchKafkaServiceStatus = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.serviceStatus().then((res) => {\n          const maxCapacityReached = res?.data?.kafkas?.max_capacity_reached || mainToggle;\n          setIsMaxCapacityReached(maxCapacityReached);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const handleCreateInstanceModal = async (open: boolean) => {\n    if (open) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(open);\n    }\n    open &&\n      showModal(MODAL_TYPES.CREATE_KAFKA_INSTANCE, {\n        onCreate,\n        cloudProviders,\n        mainToggle,\n        refresh: refreshKafkas,\n      });\n  };\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === InstanceStatus.PROVISIONING) {\n                return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n              }\n              if (value === InstanceStatus.DEPROVISION) {\n                return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          const kafkaItems = kafkaInstances?.items || [];\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaItems);\n\n          if (kafkaInstancesList?.total !== undefined && kafkaInstancesList.total > expectedTotal) {\n            setExpectedTotal(kafkaInstancesList.total);\n          }\n\n          if (waitingForDelete && filteredValue.length < 1 && kafkaItems?.length == 0) {\n            setIsDisplayKafkaEmptyState(true);\n            setWaitingForDelete(false);\n          }\n\n          setKafkaDataLoaded(true);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchSingleKafka = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.listKafkas('1', '1').then((res) => {\n          const kafkaItemsLength = res?.data?.items?.length;\n          if (!kafkaItemsLength || kafkaItemsLength < 1) {\n            setIsDisplayKafkaEmptyState(true);\n          } else {\n            setIsDisplayKafkaEmptyState(false);\n          }\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!kafkaInstanceItems || kafkaInstanceItems?.length <= 1) {\n      fetchSingleKafka();\n    }\n  }, [kafkaInstanceItems]);\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas('', '', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setCurrentUserKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  /**\n   * Todo:remove after summit\n   */\n  const fetchKafkasOnborading = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = loggedInUser ? `owner = ${loggedInUser}` : '';\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas('1', '1', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res?.data?.items || [];\n          const enabledCloudProviders: CloudProvider[] = providers?.filter((p: CloudProvider) => p.enabled);\n          setCloudProviders(enabledCloudProviders);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [auth, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas();\n  }, []);\n\n  /**\n   * Todo:remove after summit\n   */\n  useEffect(() => {\n    fetchKafkasOnborading();\n  }, []);\n\n  useEffect(() => {\n    updateSelectedKafkaInstance();\n  }, [kafkaInstanceItems]);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    fetchKafkaServiceStatus();\n  }, []);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      if (localStorage) {\n        const count = localStorage.getItem('openSessions') || 0;\n        const newCount = parseInt(count) + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', newCount);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  useTimeout(() => fetchKafkasOnborading(), MAX_POLL_INTERVAL);\n\n  useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    if (kafkaInstanceItems && kafkaInstanceItems?.length === 1) {\n      setKafkaDataLoaded(true);\n    } else {\n      setKafkaDataLoaded(false);\n    }\n    fetchKafkas();\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = () => {\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  if (isUserUnauthorized) {\n    return (\n      <PageSection variant={PageSectionVariants.default} padding={{ default: 'noPadding' }} isFilled>\n        <MASEmptyState\n          titleProps={{ title: t('access_permissions_needed'), headingLevel: 'h2' }}\n          emptyStateIconProps={{\n            icon: LockIcon,\n          }}\n          emptyStateBodyProps={{ body: t('to_access_kafka_instances_contact_your_organization_administrators') }}\n        />\n      </PageSection>\n    );\n  }\n\n  /**\n   * Todo: remove after summit\n   */\n  const getLoggedInUserKafkaInstance = () => {\n    let kafkaItem: KafkaRequest | undefined = kafkaInstanceItems?.filter((kafka) => kafka.owner === loggedInUser)[0];\n    if (!kafkaItem) {\n      kafkaItem = kafkas?.filter((kafka) => kafka.owner === loggedInUser)[0];\n    }\n    return kafkaItem;\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const renderAlertMessage = () => {\n    const kafka = getLoggedInUserKafkaInstance();\n    if (kafka) {\n      return (\n        <Alert\n          variant=\"info\"\n          isInline\n          title={`${kafka?.name} was created on ${dayjs(kafka?.created_at).format('LLLL')}`}\n          className=\"pf-u-mt-lg\"\n        >\n          This preview instance will expire 48 hours after creation.\n        </Alert>\n      );\n    }\n    return <></>;\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const getButtonTooltipContent = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    let content = '';\n    if (isDisabledCreateButton) {\n      if (isMaxCapacityReached && isKafkaInstanceExist) {\n        content = 'You can deploy 1 preview instance at a time.';\n      } else if (isMaxCapacityReached) {\n        content = 'Development preview instances are currently unavailable for creation.';\n      } else {\n        content = 'You can deploy 1 preview instance at a time.';\n      }\n    }\n    return content;\n  };\n\n  const createInstanceButton = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    if (isDisabledCreateButton) {\n      const content = getButtonTooltipContent();\n      return (\n        <Tooltip content={content}>\n          <Button\n            data-testid=\"emptyStateStreams-buttonCreateKafka\"\n            variant={ButtonVariant.primary}\n            onClick={() => handleCreateInstanceModal(true)}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n    return (\n      <Button\n        data-testid=\"emptyStateStreams-buttonCreateKafka\"\n        variant={ButtonVariant.primary}\n        onClick={() => handleCreateInstanceModal(true)}\n      >\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const getLabelTooltipContent = () => {\n    let content = '';\n    if (isMaxCapacityReached) {\n      content = 'Development preview instances are currently unavailable for creation.';\n    } else {\n      content =\n        'Development preview instances are available for creation. You can deploy 1 preview instance at a time.';\n    }\n    return content;\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const createInstanceLabel = () => {\n    const content = getLabelTooltipContent();\n    if (isMaxCapacityReached) {\n      return (\n        <Tooltip content={content}>\n          <Label icon={<BanIcon />} className=\"pf-u-ml-md\" tabIndex={0}>\n            No instances available\n          </Label>\n        </Tooltip>\n      );\n    } else {\n      return (\n        <Tooltip content={content}>\n          <Label color=\"green\" icon={<CheckIcon />} className=\"pf-u-ml-md\" tabIndex={0}>\n            Instances available\n          </Label>\n        </Tooltip>\n      );\n    }\n  };\n\n  const renderStreamsTable = () => {\n    if (kafkaInstanceItems === undefined) {\n      return (\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (isDisplayKafkaEmptyState) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          {isMaxCapacityReached ? (\n            <MASEmptyState\n              emptyStateProps={{\n                variant: EmptyStateVariant.large,\n              }}\n              emptyStateIconProps={{\n                icon: BanIcon,\n              }}\n              emptyStateBodyProps={{\n                body: (\n                  <>\n                    Development preview instances are currently unavailable for creation, so check back later. In the\n                    meantime,{' '}\n                    <Button variant={ButtonVariant.link} isSmall isInline data-testid=\"emptyState-actionTour\">\n                      take a tour\n                    </Button>{' '}\n                    to learn more about the service.\n                  </>\n                ),\n              }}\n              titleProps={{ title: 'Kafka instances unavailable', size: TitleSizes.xl, headingLevel: 'h2' }}\n            ></MASEmptyState>\n          ) : (\n            <MASEmptyState\n              emptyStateProps={{\n                variant: EmptyStateVariant.large,\n              }}\n              emptyStateIconProps={{\n                icon: CheckCircleIcon,\n                color: 'green',\n              }}\n              emptyStateBodyProps={{\n                body: (\n                  <>\n                    Development preview instances are available for creation. For help getting started, access the{' '}\n                    <Button\n                      variant={ButtonVariant.link}\n                      isSmall\n                      isInline\n                      onClick={() => qsContext.setActiveQuickStart && qsContext.setActiveQuickStart('getting-started')}\n                    >\n                      quick start guide.\n                    </Button>\n                  </>\n                ),\n              }}\n              titleProps={{ title: 'Kafka instances available', size: TitleSizes.xl, headingLevel: 'h2' }}\n            >\n              {createInstanceButton()}\n            </MASEmptyState>\n          )}\n        </PageSection>\n      );\n    } else if (kafkaInstanceItems && isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card>\n            <StreamsTableView\n              kafkaInstanceItems={kafkaInstanceItems}\n              mainToggle={mainToggle}\n              onViewConnection={onViewConnection}\n              onViewInstance={onViewInstance}\n              onConnectToRoute={onConnectToRoute}\n              getConnectToRoutePath={getConnectToRoutePath}\n              refresh={refreshKafkas}\n              kafkaDataLoaded={kafkaDataLoaded}\n              setWaitingForDelete={setWaitingForDelete}\n              onDelete={onDelete}\n              page={page}\n              perPage={perPage}\n              total={kafkaInstancesList?.total}\n              expectedTotal={expectedTotal}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              setFilterSelected={setFilterSelected}\n              filterSelected={filterSelected}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              isDrawerOpen={selectedInstance !== null}\n              loggedInUser={loggedInUser}\n              isMaxCapacityReached={isMaxCapacityReached}\n              buttonTooltipContent={getButtonTooltipContent()}\n              isDisabledCreateButton={getLoggedInUserKafkaInstance() !== undefined || isMaxCapacityReached}\n              labelWithTooltip={createInstanceLabel()}\n              currentUserkafkas={currentUserKafkas}\n              onCreate={onCreate}\n              cloudProviders={cloudProviders}\n            />\n          </Card>\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        mainToggle={mainToggle}\n        isExpanded={selectedInstance != null}\n        activeTab={activeTab}\n        isLoading={instanceDetail === undefined}\n        instanceDetail={instanceDetail}\n        onClose={onCloseDrawer}\n        data-ouia-app-id=\"controlPlane-streams\"\n        getConnectToRoutePath={getConnectToRoutePath}\n        onConnectToRoute={onConnectToRoute}\n        tokenEndPointUrl={tokenEndPointUrl}\n        notRequiredDrawerContentBackground={isDisplayKafkaEmptyState}\n      >\n        <main className=\"pf-c-page__main\">\n          <PageSection variant={PageSectionVariants.light}>\n            <Level>\n              <LevelItem>\n                <TextContent>\n                  <Text component=\"h1\">{t('kafka_instances')}</Text>\n                </TextContent>\n              </LevelItem>\n            </Level>\n            {renderAlertMessage()}\n          </PageSection>\n          {renderStreamsTable()}\n        </main>\n      </InstanceDrawer>\n      <Modal\n        variant={ModalVariant.small}\n        title=\"Mobile experience\"\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={() => handleMobileModal()}>\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n"],"sourceRoot":""}