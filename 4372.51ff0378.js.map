{"version":3,"file":"4372.51ff0378.js","mappings":"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","sources":["webpack://kas-ui/./src/app/api.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateKafkaInstanceServices.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/hooks/useCreateInstance.ts","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts"],"sourcesContent":["import { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { DefaultApi, Configuration } from \"@rhoas/kafka-management-sdk\";\nimport {\n  AxiosCacheRequestConfig,\n  createCacheAdapter,\n} from \"axios-simple-cache-adapter\";\nimport axios from \"axios\";\n\nconst adapter = createCacheAdapter({\n  debug: localStorage.getItem(\"log-axios\") !== null,\n});\n\nexport const useKms = () => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: kasBasePath },\n  } = useConfig();\n\n  return () => {\n    const kmsApi = new DefaultApi(\n      new Configuration({\n        accessToken: auth.kas.getToken(),\n        basePath: kasBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return kmsApi;\n  };\n};\n\nexport const useAms = () => {\n  const auth = useAuth();\n  const {\n    ams: { apiBasePath: amsBasePath },\n  } = useConfig();\n\n  return () => {\n    const amsApi = new AppServicesApi(\n      new Configuration({\n        accessToken: auth.ams.getToken(),\n        basePath: amsBasePath,\n      }),\n      undefined,\n      axios.create({\n        adapter,\n        cache: 1000 * 15,\n      } as AxiosCacheRequestConfig)\n    );\n\n    return amsApi;\n  };\n};\n","import { getModalAppendTo } from \"@app/utils\";\nimport { QuickStartContext } from \"@patternfly/quickstarts\";\nimport {\n  CreateKafkaInstance,\n  CreateKafkaInstanceServices,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n} from \"@rhoas/app-services-ui-shared\";\nimport { FunctionComponent, useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  useCheckDeveloperAvailability,\n  useCheckStandardQuota,\n  useCreateInstance,\n  useFetchProvidersWithRegions,\n  useGetStandardSizes,\n  useGetTrialSizes,\n} from \"./hooks\";\n\nconst CreateInstance: FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ hideModal, onCreate }) => {\n  const history = useHistory();\n  const checkDeveloperAvailability = useCheckDeveloperAvailability();\n  const checkStandardQuota = useCheckStandardQuota();\n  const fetchProvidersWithRegions = useFetchProvidersWithRegions();\n  const getStandardSizes = useGetStandardSizes();\n  const getTrialSizes = useGetTrialSizes();\n  const createInstance = useCreateInstance();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickKafkaOverview = () => {\n    history.push(`overview`);\n  };\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart(\"getting-started\");\n  }, [qsContext]);\n\n  const handleCreate = useCallback<CreateKafkaInstanceServices[\"onCreate\"]>(\n    function (data, onSuccess, onError) {\n      const handleOnSuccess = () => {\n        onSuccess();\n        onCreate && onCreate();\n        hideModal();\n      };\n      createInstance(data, handleOnSuccess, onError);\n    },\n    [hideModal, onCreate, createInstance]\n  );\n\n  return (\n    <CreateKafkaInstance\n      checkDeveloperAvailability={checkDeveloperAvailability}\n      checkStandardQuota={checkStandardQuota}\n      fetchProvidersWithRegions={fetchProvidersWithRegions}\n      getStandardSizes={getStandardSizes}\n      getTrialSizes={getTrialSizes}\n      isModalOpen={true}\n      onCancel={hideModal}\n      onClickContactUs={onClickKafkaOverview}\n      onClickKafkaOverview={onClickKafkaOverview}\n      onClickQuickStart={onClickQuickStart}\n      onCreate={handleCreate}\n      onLearnHowToAddStreamingUnits={onClickKafkaOverview}\n      onLearnMoreAboutSizes={onClickKafkaOverview}\n      subscriptionOptionsHref={document.location.href + \"/../overview\"}\n      appendTo={getModalAppendTo}\n    />\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n","import { useAms, useKms } from \"@app/api\";\nimport { InstanceType } from \"@app/utils\";\nimport {\n  CloudProvider,\n  CloudProviderInfo,\n  CreateKafkaInstanceServices,\n  MarketPlace,\n  MarketPlaceSubscriptions,\n  RegionInfo,\n  Size,\n  StandardSizes,\n} from \"@rhoas/app-services-ui-components\";\nimport { useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { CloudRegion, SupportedKafkaSize } from \"@rhoas/kafka-management-sdk\";\n\nconst standardId = \"RHOSAK\" as const;\nconst developerId = \"RHOSAKTrial\" as const;\nconst resourceName = \"rhosak\" as const;\n\nexport const useCheckStandardQuota =\n  (): CreateKafkaInstanceServices[\"checkStandardQuota\"] => {\n    const getApi = useAms();\n    const checkStandardQuota: CreateKafkaInstanceServices[\"checkStandardQuota\"] =\n      async ({ onNoQuotaAvailable, onOutOfQuota, onQuotaAvailable }) => {\n        try {\n          const api = getApi();\n          const account = await api.apiAccountsMgmtV1CurrentAccountGet();\n          const orgId = account?.data?.organization?.id;\n          if (!orgId) {\n            7;\n            throw new Error(\"User has no organization id\");\n          }\n          const quotaResponse =\n            await api.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n              orgId,\n              undefined,\n              true,\n              undefined,\n              true\n            );\n          if (quotaResponse.status !== 200) {\n            throw new Error(quotaResponse.statusText);\n          }\n          const standardQuotas = quotaResponse.data.items?.filter((q) =>\n            q.related_resources?.find(\n              (r) =>\n                r.resource_name === resourceName && r.product === standardId\n            )\n          );\n\n          const prepaidQuota = standardQuotas?.find((q) =>\n            q.related_resources?.find((r) => r.billing_model === \"standard\")\n          );\n\n          const marketplaceQuotas = standardQuotas?.filter((q) =>\n            q.related_resources?.find((r) => r.billing_model === \"marketplace\")\n          );\n\n          const hasTrialQuota =\n            quotaResponse.data.items?.some((q) =>\n              q.related_resources?.find(\n                (r) =>\n                  r.resource_name === resourceName && r.product === developerId\n              )\n            ) || false;\n\n          const remainingPrepaidQuota = prepaidQuota\n            ? prepaidQuota.allowed - prepaidQuota.consumed\n            : undefined;\n          const remainingMarketplaceQuota = marketplaceQuotas?.reduce(\n            (agg, q) => q.allowed - q.consumed + agg,\n            0\n          );\n          const unaggregatedSubscriptions = marketplaceQuotas\n            ?.filter((q) => q.cloud_accounts !== undefined)\n            .flatMap((q) => q.cloud_accounts!);\n          const subscriptionMarketplaces = Array.from(\n            new Set(\n              unaggregatedSubscriptions?.map(\n                (s) => s.cloud_provider_id as MarketPlace\n              )\n            )\n          );\n          const marketplaceSubscriptions: MarketPlaceSubscriptions[] =\n            unaggregatedSubscriptions\n              ? subscriptionMarketplaces.map((marketplace) => ({\n                  marketplace,\n                  subscriptions: unaggregatedSubscriptions\n                    .filter((s) => s.cloud_provider_id === marketplace)\n                    .map((s) => s.cloud_account_id!),\n                }))\n              : [];\n\n          if (remainingMarketplaceQuota || remainingPrepaidQuota) {\n            if (\n              remainingMarketplaceQuota &&\n              remainingMarketplaceQuota === 0 &&\n              remainingPrepaidQuota &&\n              remainingPrepaidQuota === 0\n            ) {\n              onOutOfQuota({\n                quota: {\n                  marketplaceSubscriptions,\n                },\n              });\n            } else {\n              onQuotaAvailable({\n                quota: {\n                  remainingPrepaidQuota,\n                  remainingMarketplaceQuota,\n                  marketplaceSubscriptions,\n                },\n              });\n            }\n          } else {\n            onNoQuotaAvailable({ hasTrialQuota });\n          }\n        } catch (e) {\n          onNoQuotaAvailable({ hasTrialQuota: false });\n        }\n      };\n    return checkStandardQuota;\n  };\n\nexport const useCheckDeveloperAvailability =\n  (): CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] => {\n    const auth = useAuth();\n    const getApi = useKms();\n    const checkDeveloperAvailability: CreateKafkaInstanceServices[\"checkDeveloperAvailability\"] =\n      async ({ onAvailable, onUnavailable, onUsed }) => {\n        try {\n          const api = getApi();\n          const loggedInUser = await auth.getUsername();\n          const filter = `owner = ${loggedInUser}`;\n\n          const res = await api.getKafkas(\"\", \"\", \"\", filter);\n          if (res.data.items) {\n            const hasTrialRunning = res.data.items.some(\n              (k) =>\n                k?.instance_type === InstanceType?.eval ||\n                k?.instance_type === InstanceType?.developer\n            );\n            if (hasTrialRunning) {\n              onUsed();\n            } else {\n              onAvailable();\n            }\n          }\n        } catch (e) {\n          onUnavailable();\n        }\n      };\n    return checkDeveloperAvailability;\n  };\n\nexport const useFetchProvidersWithRegions =\n  (): CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] => {\n    const getApi = useKms();\n    const fetchRegions = useFetchProviderRegions();\n    const fetchProvidersWithRegions: CreateKafkaInstanceServices[\"fetchProvidersWithRegions\"] =\n      async (plan, { onAvailable, onUnavailable }) => {\n        try {\n          const api = getApi();\n          const res = await api.getCloudProviders();\n          const allProviders = res?.data?.items || [];\n\n          const providers = await Promise.all(\n            allProviders\n              .filter((p) => p.enabled)\n              .map(async (provider) => {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const regions = await fetchRegions(provider.id!, plan);\n                const providerInfo: CloudProviderInfo = {\n                  id: provider.id as CloudProvider,\n                  displayName: provider.display_name!,\n                  regions,\n                };\n                return providerInfo;\n              })\n          );\n          const firstProvider = providers[0];\n          onAvailable({ providers, defaultProvider: firstProvider?.id });\n        } catch (e) {\n          onUnavailable();\n        }\n      };\n    return fetchProvidersWithRegions;\n  };\n\nexport const useFetchProviderRegions = () => {\n  const getApi = useKms();\n  return async function fetchProviderRegions(\n    provider: string,\n    instanceType: string\n  ): Promise<Array<RegionInfo & Pick<CloudRegion, \"capacity\">>> {\n    const api = getApi();\n    const res = await api.getCloudProviderRegions(provider);\n\n    if (!res?.data?.items) {\n      return [];\n    }\n\n    const regionsForInstance = res.data.items.filter(\n      (region) =>\n        region.enabled &&\n        region.capacity.some((c) => c.instance_type === instanceType)\n    );\n\n    return regionsForInstance.map((r) => {\n      const max_capacity_reached = r.capacity?.some(\n        (c) =>\n          c.instance_type === instanceType && c.available_sizes?.length === 0\n      );\n\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: r.id!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        displayName: r.display_name!,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        isDisabled: max_capacity_reached,\n        capacity: r.capacity,\n      };\n    });\n  };\n};\n\nexport const useGetSizes = (instanceType: \"developer\" | \"standard\") => {\n  const getApi = useKms();\n  const fetchRegions = useFetchProviderRegions();\n  return async (provider: CloudProvider, region: string) => {\n    const api = getApi();\n    const regions = await fetchRegions(provider, instanceType);\n    const regionInfo = regions.find((r) => r.id === region);\n    const availableSizes =\n      regionInfo?.capacity.flatMap((c) =>\n        c.available_sizes.map((s) => `${c.instance_type}.${s}`)\n      ) || [];\n    const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n      provider,\n      region\n    );\n    if (!sizes?.data?.instance_types) {\n      throw new Error(`No instance_types from backend`);\n    }\n\n    const standardSizes =\n      sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes ||\n      [];\n\n    return standardSizes.map(\n      apiSizeToComponentSize.bind(\n        undefined,\n        (id) => !availableSizes.includes(`${instanceType}.${id}`)\n      )\n    );\n  };\n};\n\nexport const useGetStandardSizes =\n  (): CreateKafkaInstanceServices[\"getStandardSizes\"] => {\n    const getSizes = useGetSizes(\"standard\");\n    return getSizes;\n  };\n\nexport const useGetTrialSizes =\n  (): CreateKafkaInstanceServices[\"getTrialSizes\"] => {\n    const getStandardSizes = useGetSizes(\"standard\");\n    const getDeveloperSizes = useGetSizes(\"developer\");\n    return async (provider, region) => {\n      let standardSizes: StandardSizes;\n      try {\n        standardSizes = await getStandardSizes(provider, region);\n      } catch (e) {\n        // It can happen that the selected provider doesn't support standard instances.\n        // In this case we provide a faux sample list of sizes just to make the slider happy.\n        standardSizes = [\n          { id: \"1\", displayName: \"1\" },\n          { id: \"2\", displayName: \"2\" },\n        ] as StandardSizes;\n      }\n      const trialSizes = await getDeveloperSizes(provider, region);\n      return {\n        standard: standardSizes,\n        trial: trialSizes[0],\n      };\n    };\n  };\n\nfunction apiSizeToComponentSize(\n  isDisabled: (id: string) => boolean,\n  apiSize: SupportedKafkaSize\n): Size & { trialDurationHours: number } {\n  const s = apiSize as Required<SupportedKafkaSize>;\n  return {\n    id: s.id,\n    displayName: s.display_name,\n    quota: s.quota_consumed,\n    ingress: (s.ingress_throughput_per_sec.bytes || 0) / 1048576,\n    egress: (s.egress_throughput_per_sec.bytes || 0) / 1048576,\n    storage: Math.round((s.max_data_retention_size.bytes || 0) / 1073741824),\n    connections: s.total_max_connections,\n    connectionRate: s.max_connection_attempts_per_sec,\n    maxPartitions: s.max_partitions,\n    messageSize: (s.max_message_size.bytes || 0) / 1048576,\n    status: s.maturity_status === \"stable\" ? \"stable\" : \"preview\",\n    trialDurationHours: s.lifespan_seconds ? s.lifespan_seconds / 60 / 60 : 0,\n    isDisabled: isDisabled(s.id),\n  };\n}\n","import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from \"@app/models/kafka\";\nimport { CreateKafkaInstanceServices } from \"@rhoas/app-services-ui-components\";\nimport { isServiceApiError } from \"@app/utils/error\";\nimport { ErrorCodes } from \"@app/utils\";\nimport { useKms } from \"@app/api\";\n\n/**\n * Create Kafka instance hook that creates kafka instance\n * @param currentAMSPlan\n * @returns\n */\nexport const useCreateInstance =\n  (): CreateKafkaInstanceServices[\"onCreate\"] => {\n    const getApi = useKms();\n\n    return async (data, onSuccess, onError) => {\n      const apisService = getApi();\n\n      try {\n        const kafkaRequest = asKafkaRequestPayload(\n          createEmptyNewKafkaRequestPayload()\n        );\n        kafkaRequest.name = data.name;\n        kafkaRequest.cloud_provider = data.provider;\n        kafkaRequest.region = data.region;\n        kafkaRequest.plan = data.plan + \".\" + data.sizeId;\n        kafkaRequest.billing_model =\n          data.billing === \"prepaid\"\n            ? \"prepaid\"\n            : data.billing !== undefined\n            ? \"marketplace\"\n            : null;\n        kafkaRequest.billing_cloud_account_id =\n          data.billing && data.billing !== \"prepaid\"\n            ? data.billing.subscription\n            : null;\n        await apisService.createKafka(true, kafkaRequest);\n        onSuccess();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code } = error?.response?.data || {};\n\n          switch (data.plan) {\n            case \"developer\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                // regardless of the error, let's not give too many details to trial users\n                default:\n                  onError(\"developer-unavailable\");\n                  break;\n              }\n              break;\n\n            case \"standard\":\n              switch (code) {\n                case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n                  onError(\"name-taken\");\n                  break;\n\n                case ErrorCodes.INTERNAL_CAPACITY_ERROR:\n                  onError(\"region-unavailable\");\n                  break;\n\n                case ErrorCodes.INSUFFICIENT_QUOTA:\n                  onError(\"insufficient-quota\");\n                  break;\n\n                default:\n                  console.error(\n                    \"useAvailableProvidersAndDefault\",\n                    \"createKafka unknown error\",\n                    error\n                  );\n                  onError(\"unknown\");\n              }\n              break;\n          }\n        } else {\n          console.error(\n            \"useAvailableProvidersAndDefault\",\n            \"createKafka unexpected error\",\n            error\n          );\n        }\n      }\n    };\n  };\n","import { KafkaRequestPayload } from \"@rhoas/kafka-management-sdk\";\nimport { Validated } from \"@app/models/validated\";\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error(\"kafkaRequest.name must not be undefined\");\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error(\"kafkaRequest.region must not be undefined\");\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error(\"kafkaRequest.multi_az must not be undefined\");\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error(\"kafkaRequest.cloud_provider must not be undefined\");\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === \"error\" ||\n    value.region.validated === \"error\" ||\n    value.cloud_provider.validated === \"error\" ||\n    value.multi_az.validated === \"error\"\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: \"\",\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: \"\",\n    },\n    name: {\n      value: \"\",\n    },\n  };\n};\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from \"@rhoas/kafka-management-sdk\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n","import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string): void {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { IRowCell, IRowData } from \"@patternfly/react-table\";\nimport { formatDistance } from \"date-fns\";\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById(\"primary-app-container\");\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};\n\nenum InstanceStatus {\n  READY = \"ready\",\n  ACCEPTED = \"accepted\",\n  PREPARING = \"preparing\",\n  PROVISIONING = \"provisioning\",\n  FAILED = \"failed\",\n  DEPROVISION = \"deprovision\",\n  DELETED = \"deleting\",\n}\n\nenum InstanceType {\n  eval = \"eval\",\n  standard = \"standard\",\n  developer = \"developer\",\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: \"aws\", label: \"Amazon Web Services\" },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: \"ready\", label: \"Ready\" },\n  { value: \"failed\", label: \"Failed\" },\n  { value: \"accepted\", label: \"Creation pending\" },\n  { value: \"provisioning\", label: \"Creation in progress\" },\n  { value: \"preparing\", label: \"Creation in progress\" },\n  { value: \"deprovision\", label: \"Deletion in progress\" },\n  { value: \"deleting\", label: \"Deletion in progress\" },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: \"us-east-1\", label: \"US East, N. Virginia\" },\n  { value: \"eu-west-1\", label: \"EU, Ireland\" },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === \"string\" ? new Date(date) : date;\n  return formatDistance(date, new Date()) + \" \" + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById(\"chrome-app-render-root\") as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || (window as any)[\"opera\"]);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\ntype SizeUnits = \"MiB\" | \"GiB\";\n\nconst convertBytesToUnit = (bytes: number, unit: SizeUnits): number => {\n  switch (unit) {\n    case \"MiB\":\n      return bytes / 1048576;\n    case \"GiB\":\n      return bytes / 1073741824;\n    default:\n      return bytes;\n  }\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n  convertBytesToUnit,\n  SizeUnits,\n};\n"],"names":["adapter","createCacheAdapter","debug","localStorage","getItem","useKms","auth","useAuth","kas","apiBasePath","kasBasePath","useConfig","DefaultApi","Configuration","accessToken","getToken","basePath","undefined","cache","useAms","ams","amsBasePath","AppServicesApi","CreateInstance","hideModal","onCreate","history","useHistory","checkDeveloperAvailability","checkStandardQuota","fetchProvidersWithRegions","getStandardSizes","getTrialSizes","createInstance","qsContext","useContext","QuickStartContext","onClickKafkaOverview","push","onClickQuickStart","useCallback","setActiveQuickStart","handleCreate","data","onSuccess","onError","CreateKafkaInstance","isModalOpen","onCancel","onClickContactUs","onLearnHowToAddStreamingUnits","onLearnMoreAboutSizes","subscriptionOptionsHref","document","location","href","appendTo","resourceName","useCheckStandardQuota","getApi","onNoQuotaAvailable","onOutOfQuota","onQuotaAvailable","api","account","apiAccountsMgmtV1CurrentAccountGet","orgId","organization","id","Error","quotaResponse","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","status","statusText","standardQuotas","items","filter","q","related_resources","find","r","resource_name","product","prepaidQuota","billing_model","marketplaceQuotas","hasTrialQuota","some","remainingPrepaidQuota","allowed","consumed","remainingMarketplaceQuota","reduce","agg","unaggregatedSubscriptions","cloud_accounts","flatMap","subscriptionMarketplaces","Array","from","Set","map","s","cloud_provider_id","marketplaceSubscriptions","marketplace","subscriptions","cloud_account_id","quota","e","useCheckDeveloperAvailability","onAvailable","onUnavailable","onUsed","getUsername","res","getKafkas","k","instance_type","useFetchProvidersWithRegions","fetchRegions","useFetchProviderRegions","plan","getCloudProviders","allProviders","providers","Promise","all","p","enabled","provider","regions","displayName","display_name","firstProvider","defaultProvider","instanceType","getCloudProviderRegions","region","capacity","c","max_capacity_reached","available_sizes","length","isDisabled","useGetSizes","regionInfo","availableSizes","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","i","apiSizeToComponentSize","bind","includes","useGetStandardSizes","useGetTrialSizes","getDeveloperSizes","standardSizes","standard","trial","apiSize","quota_consumed","ingress","ingress_throughput_per_sec","bytes","egress","egress_throughput_per_sec","storage","Math","round","max_data_retention_size","connections","total_max_connections","connectionRate","max_connection_attempts_per_sec","maxPartitions","max_partitions","messageSize","max_message_size","maturity_status","trialDurationHours","lifespan_seconds","useCreateInstance","apisService","kafkaRequest","name","value","multi_az","cloud_provider","asKafkaRequestPayload","sizeId","billing","billing_cloud_account_id","subscription","createKafka","error","code","response","console","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDocumentTitle","title","useEffect","originalTitle","InstanceStatus","InstanceType","cloudProviderOptions","label","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_SERVICE_ACCOUNT_NAME_LENGTH","MAX_POLL_INTERVAL","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","floor","getFormattedDate","date","translatePostfix","Date","getModalAppendTo","getElementById","body","isMobileTablet","check","a","navigator","userAgent","vendor","window","test","substr","getSkeletonForRows","loadingCount","skeleton","rows","cells"],"sourceRoot":""}