{"version":3,"sources":["webpack://kas-ui/./src/app/modules/ServiceRegistry/ServiceRegistry.tsx","webpack://kas-ui/./src/app/modules/ServiceRegistry/ServiceRegistryFederated.tsx","webpack://kas-ui/./src/app/modules/ServiceRegistry/components/ServiceRegistryDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/modules/ServiceRegistry/components/ServiceRegistryDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/modules/ServiceRegistry/components/ServiceRegistryDrawer/ServiceRegistryDrawer.tsx","webpack://kas-ui/./src/app/modules/ServiceRegistry/components/ServiceRegistryHeader/ServiceRegistryHeader.tsx"],"names":["ServiceRegistry","t","useTranslation","useState","isExpandedDrawer","setIsExpandedDrawer","isServiceRegistryLoading","undefined","serviceAccountDetails","setServiceAccountDetails","notRequiredDrawerContentBackground","isUnauthorizedUser","onCreateServiceRegistry","getAccessToServiceRegistry","isExpanded","isLoading","onClose","PageSection","variant","PageSectionVariants","name","onConnectToRegistry","onDeleteRegistry","padding","default","isFilled","emptyStateProps","titleProps","title","emptyStateBodyProps","body","buttonProps","ButtonVariant","onClick","spinnerAriaValueText","I18nextProvider","i18n","ResourcesTab","registriesInfo","code","className","TextContent","Text","component","TextVariants","Form","map","index","FormGroup","label","fieldId","key","ClipboardCopy","id","hoverTip","clickTip","textAriaLabel","isReadOnly","SampleCodeTab","editors","type","Button","CopyIcon","ServiceRegistryDrawer","dataOuiaAppId","children","activeKey","setActiveKey","panelBodyContent","Tabs","onSelect","_","eventKey","Tab","TabTitleText","drawerHeaderProps","text","value","headingLevel","ServiceRegistryHeader","isOpen","setIsOpen","dropdownItems","DropdownItem","Level","LevelItem","Dropdown","toggle","KebabToggle","onToggle","isPlain","position","DropdownPosition"],"mappings":"qLASaA,EAAkB,WACrB,IAAAC,GAAM,IAAAC,kBAAgB,EAExB,GAA0C,IAAAC,WAAkB,GAA3DC,EAAgB,KAAEC,EAAmB,KACtC,GAA0D,IAAAF,WAAkB,GAA3EG,EAAwB,KACzB,GADsD,MACF,IAAAH,eAAcI,IAAjEC,EAAqB,KAAEC,EAAwB,KAChD,GAA8E,IAAAN,WAAkB,GAA/FO,EAAkC,KACnC,GAD0E,MAC5B,IAAAP,WAAkB,IAA/DQ,EAAkB,KAoBnBC,GApB0C,KAoBhB,cAM1BC,EAA6B,aA8CnC,OACE,oCACGL,EACC,kBAAC,IAAqB,CACpBM,WAAYV,EACZW,eAAqCR,IAA1BC,EACXE,mCAAoCA,EACpCM,QArEc,WACpBX,GAAoB,KAsEd,kBAAC,EAAAY,YAAW,CAACC,QAAS,EAAAC,oBAAA,OACpB,kBAAC,IAAqB,CACpBC,KAAM,GACNC,oBAlFgB,WAC1BhB,GAAoB,GAIpBI,EAAyB,cA8Efa,iBAvEa,gBA0EhBX,GAjCL,kBAAC,EAAAM,YAAW,CAACM,QAAS,CAAEC,QAAS,aAAeC,UAAQ,GACtD,kBAAC,KAAa,CACZC,gBAAiB,CAAER,QAAS,eAC5BS,WAAY,CAAEC,MAAO3B,EAAE,mDACvB4B,oBAAqB,CACnBC,KAAM7B,EAAE,kDAEV8B,YAAa,CACXH,MAAO3B,EAAE,kDACTiB,QAAS,EAAAc,cAAA,QACTC,QAASpB,OA/Bf,kBAAC,EAAAI,YAAW,CAACM,QAAS,CAAEC,QAAS,aAAeC,UAAQ,GACtD,kBAAC,KAAa,CACZC,gBAAiB,CAAER,QAAS,qBAC5BS,WAAY,CAAEC,MAAO3B,EAAE,gDACvB4B,oBAAqB,CACnBC,KAAM7B,EAAE,6CAEV8B,YAAa,CACXH,MAAO3B,EAAE,2CACTiB,QAAS,EAAAc,cAAA,QACTC,QAASrB,EACTG,UAAWT,EACX4B,qBAAsB5B,EAA2BL,EAAE,uBAAoBM,S,+HCzCnF,QAdgF,WAE9E,OACE,kBAAC,EAAA4B,gBAAe,CAACC,KAAM,KACrB,kBAAC,KAAa,KACZ,kBAAC,KAAS,KACR,kBAAC,IAAe,W,2FCLbC,EAA4C,WAC/C,IAAApC,GAAM,IAAAC,kBAAgB,EACxBoC,EAAiB,CACrB,CAAEV,MAAO3B,EAAE,2CAA4CsC,KAAM,sCAC7D,CAAEX,MAAO3B,EAAE,2CAA4CsC,KAAM,wBAC7D,CAAEX,MAAO3B,EAAE,qBAAsBsC,KAAM,8CACvC,CAAEX,MAAO3B,EAAE,wBAAyBsC,KAAM,2CAG5C,OACE,yBAAKC,UAAU,qCACb,kBAAC,EAAAC,YAAW,CAACD,UAAU,cACrB,kBAAC,EAAAE,KAAI,CAACC,UAAW,EAAAC,aAAA,OAAqB3C,EAAE,8CAE1C,kBAAC,EAAA4C,KAAI,KACFP,aAAc,EAAdA,EAAgBQ,KAAI,SAAC,EAAiBC,G,IAAfnB,EAAK,QAAEW,EAAI,OAAc,OAC/C,kBAAC,EAAAS,UAAS,CAACC,MAAOrB,EAAOsB,QAAS,kBAAkBH,EAASI,IAAQZ,EAAI,MAAMQ,GAC7E,kBAAC,EAAAK,cAAa,CACZC,GAAI,kBAAkBN,EACtBO,SAAUrD,EAAE,yBACZsD,SAAUtD,EAAE,sCACZuD,cAAe5B,EACf6B,YAAU,GAETlB,W,uGC3BFmB,EAAyC,WAC5C,IAAAzD,GAAM,IAAAC,kBAAgB,EACxByD,EAAU,CACd,CAAEC,KAAM3D,EAAE,eAAgBsC,KAAM,kBAChC,CAAEqB,KAAM3D,EAAE,cAAesC,KAAM,kBAC/B,CAAEqB,KAAM3D,EAAE,cAAesC,KAAM,kBAC/B,CAAEqB,KAAM3D,EAAE,eAAgBsC,KAAM,mBAGlC,OACE,oCACE,yBAAKC,UAAU,qCACb,kBAAC,EAAAC,YAAW,CAACD,UAAU,cACrB,kBAAC,EAAAE,KAAI,CAACC,UAAW,EAAAC,aAAA,OAAqB3C,EAAE,gDAEzC0D,aAAO,EAAPA,EAASb,KAAI,SAAC,G,IAAEc,EAAI,OAAErB,EAAI,OAAO,OAChC,yBAAKC,UAAU,kCAAkCW,IAAKS,GACpD,yBAAKpB,UAAU,uCACb,yBAAKA,UAAU,8BACb,kBAAC,EAAAqB,OAAM,CAAC3C,QAAQ,UAAS,aAAY,UACnC,kBAAC,EAAA4C,SAAQ,QAGb,yBAAKtB,UAAU,yBACb,0BAAMA,UAAU,8BAA8BoB,KAGlD,yBAAKpB,UAAU,0BACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,8BAA8BD,a,2HCpBvDwB,EAA8D,SAAC,G,IACnEjD,EAAU,aACVC,EAAS,YACTC,EAAO,UACagD,EAAa,sBACjCC,EAAQ,WACRvD,EAAkC,qCAE1BT,GAAM,IAAAC,kBAAgB,EACxB,GAA4B,IAAAC,UAA0B,GAArD+D,EAAS,KAAEC,EAAY,KAMxBC,EACJ,kBAAC,EAAAC,KAAI,CAACH,UAAWA,EAAWI,SALP,SAACC,EAAGC,GACzBL,EAAaK,KAKX,kBAAC,EAAAC,IAAG,CACFD,SAAU,EACV5C,MAAO,kBAAC,EAAA8C,aAAY,KAAEzE,EAAE,qBAAmC,cAC/C,gCAEZ,kBAAC,IAAY,OAEf,kBAAC,EAAAwE,IAAG,CACFD,SAAU,EACV5C,MAAO,kBAAC,EAAA8C,aAAY,KAAEzE,EAAE,uBAAqC,cACjD,iCAEZ,kBAAC,IAAa,QAKpB,OACE,kBAAC,KAAS,CACRa,WAAYA,EACZC,UAAWA,EACXC,QAASA,EACToD,iBAAkBA,EAClBO,kBAAmB,CACjBC,KAAM,CAAE3B,MAAOhD,EAAE,uCACjB2B,MAAO,CAAEiD,MAAOzD,KAAM0D,aAAc,OACrC,mBACiBd,EAClBtD,mCAAoCA,GAEnCuD,K,0JC1CMc,EAA8D,SAAC,G,IAC1E3D,EAAI,OACJC,EAAmB,sBACnBC,EAAgB,mBAERrB,GAAM,IAAAC,kBAAgB,EAExB,GAAsB,IAAAC,YAArB6E,EAAM,KAAEC,EAAS,KAUlBC,EAAgB,CACpB,kBAAC,EAAAC,aAAY,CAAChC,IAAI,mBAAmBlB,QAAS,WAAM,OAAAZ,EAAoBD,KACrEnB,EAAE,wCAEL,kBAAC,EAAAkF,aAAY,CAAChC,IAAI,kBAAkBlB,QAAS,WAAM,OAAAX,EAAiBF,KACjEnB,EAAE,qCAIP,OACE,kBAAC,EAAAmF,MAAK,KACJ,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAA5C,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAU,M,IAAO1C,EAAE,uCAG7B,kBAAC,EAAAoF,UAAS,KACR,kBAAC,EAAAC,SAAQ,CACPhB,SAtBS,WACfW,GAAWD,IAsBLO,OAAQ,kBAAC,EAAAC,YAAW,CAACC,SA3BZ,SAACT,GAChBC,EAAUD,IA0BqC3B,GAAG,4BAC5C2B,OAAQA,EACRU,SAAO,EACPR,cAAeA,EACfS,SAAU,EAAAC,iBAAA,Y","file":"800.d721b0fd.js","sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants, ButtonVariant } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { ServiceRegistryHeader, ServiceRegistryDrawer } from './components';\n\nexport type ServiceRegistryProps = {\n};\n\nexport const ServiceRegistry = () => {\n  const { t } = useTranslation();\n\n  const [isExpandedDrawer, setIsExpandedDrawer] = useState<boolean>(false);\n  const [isServiceRegistryLoading, setIsServiceRegistryLoading] = useState<boolean>(false);\n  const [serviceAccountDetails, setServiceAccountDetails] = useState<any>(undefined);\n  const [notRequiredDrawerContentBackground, setNotRequiredDrawerContentBackground] = useState<boolean>(false);\n  const [isUnauthorizedUser, setIsUnauthorizedUser] = useState<boolean>(false);\n\n  const onConnectToRegistry = () => {\n    setIsExpandedDrawer(true);\n    /**\n     * Todo: Dummy test-data will remove after integrate API\n     */\n    setServiceAccountDetails('test-data');\n  };\n\n  const onCloseDrawer = () => {\n    setIsExpandedDrawer(false);\n  };\n\n  const onDeleteRegistry = () => {\n    /**\n     * Todo: integrate delete registry api\n     */\n  };\n\n  const onCreateServiceRegistry = () => {\n    /**\n     * Todo: integrate create service registry api\n     */\n  };\n\n  const getAccessToServiceRegistry = () => {\n    /**\n     * Todo: integrate get access service registry api\n     */\n  };\n\n  const renderWelcomeEmptyState = () => {\n    return (\n      <PageSection padding={{ default: 'noPadding' }} isFilled>\n        <MASEmptyState\n          emptyStateProps={{ variant: MASEmptyStateVariant.GettingStarted }}\n          titleProps={{ title: t('serviceRegistry.welcome_to_service_registry') }}\n          emptyStateBodyProps={{\n            body: t('serviceRegistry.welcome_empty_state_body'),\n          }}\n          buttonProps={{\n            title: t('serviceRegistry.create_service_registry'),\n            variant: ButtonVariant.primary,\n            onClick: onCreateServiceRegistry,\n            isLoading: isServiceRegistryLoading,\n            spinnerAriaValueText: isServiceRegistryLoading ? t('common.loading') : undefined,\n          }}\n        />\n      </PageSection>\n    );\n  };\n\n  const renderUnauthorizedUserEmptyState = () => {\n    return (\n      <PageSection padding={{ default: 'noPadding' }} isFilled>\n        <MASEmptyState\n          emptyStateProps={{ variant: MASEmptyStateVariant.NoAccess }}\n          titleProps={{ title: t('serviceRegistry.unauthorized_empty_state_title') }}\n          emptyStateBodyProps={{\n            body: t('serviceRegistry.unauthorized_empty_state_body'),\n          }}\n          buttonProps={{\n            title: t('serviceRegistry.get_access_to_service_registry'),\n            variant: ButtonVariant.primary,\n            onClick: getAccessToServiceRegistry,\n          }}\n        />\n      </PageSection>\n    );\n  };\n\n  return (\n    <>\n      {serviceAccountDetails ? (\n        <ServiceRegistryDrawer\n          isExpanded={isExpandedDrawer}\n          isLoading={serviceAccountDetails === undefined}\n          notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n          onClose={onCloseDrawer}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <ServiceRegistryHeader\n              name={''}\n              onConnectToRegistry={onConnectToRegistry}\n              onDeleteRegistry={onDeleteRegistry}\n            />\n          </PageSection>\n          {isUnauthorizedUser && renderUnauthorizedUserEmptyState()}\n        </ServiceRegistryDrawer>\n      ) : (\n        renderWelcomeEmptyState()\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { ServiceRegistry, ServiceRegistryProps } from '@app/modules/ServiceRegistry/ServiceRegistry';\nimport { AlertProvider, RootModal } from '@app/common';\nimport kasi18n from '@i18n/i18n';\nimport { I18nextProvider } from 'react-i18next';\n// Version of ServiceRegistry for federation\n\nconst ServiceRegistryFederated: React.FunctionComponent<ServiceRegistryProps> = () => {\n\n  return (\n    <I18nextProvider i18n={kasi18n}>\n      <AlertProvider>\n        <RootModal>\n          <ServiceRegistry/>\n        </RootModal>\n      </AlertProvider>\n\n    </I18nextProvider>\n  );\n};\n\nexport default ServiceRegistryFederated;\n","import React from 'react';\nimport { TextContent, Text, TextVariants, ClipboardCopy, Form, FormGroup } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = () => {\n  const { t } = useTranslation();\n  const registriesInfo = [\n    { title: t('serviceRegistry.tab_resources_content_1'), code: 'https://registry.my-domain.com/api' },\n    { title: t('serviceRegistry.tab_resources_content_2'), code: 'https://mass-sso.url' },\n    { title: t('common.client_key'), code: 'srvc-reg-7f7f8f7f87f-3634-c2e-879877988787' },\n    { title: t('common.client_secret'), code: '2d668686876-8768786-8766686-8787jhjh88' },\n  ];\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('serviceRegistry.tab_resources_title_info')}</Text>\n      </TextContent>\n      <Form>\n        {registriesInfo?.map(({ title, code }, index) => (\n          <FormGroup label={title} fieldId={`copy-clipboard-${index}`} key={`${code}'-'${index}`}>\n            <ClipboardCopy\n              id={`copy-clipboard-${index}`}\n              hoverTip={t('common.copy_clipboard')}\n              clickTip={t('common.copy_clipboard_successfully')}\n              textAriaLabel={title}\n              isReadOnly\n            >\n              {code}\n            </ClipboardCopy>\n          </FormGroup>\n        ))}\n      </Form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\nexport const SampleCodeTab: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const editors = [\n    { type: t('common.java'), code: 'code goes here' },\n    { type: t('common.mvn'), code: 'code goes here' },\n    { type: t('common.cli'), code: 'code goes here' },\n    { type: t('common.curl'), code: 'code goes here' },\n  ];\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.small}>{t('serviceRegistry.tab_sample_code_title_info')}</Text>\n        </TextContent>\n        {editors?.map(({ type, code }) => (\n          <div className=\"pf-c-code-editor pf-m-read-only\" key={type}>\n            <div className=\"pf-c-code-editor__header pf-u-pt-lg\">\n              <div className=\"pf-c-code-editor__controls\">\n                <Button variant=\"control\" aria-label=\"Action\">\n                  <CopyIcon />\n                </Button>\n              </div>\n              <div className=\"pf-c-code-editor__tab\">\n                <span className=\"pf-c-code-editor__tab-text\">{type}</span>\n              </div>\n            </div>\n            <div className=\"pf-c-code-editor__main\">\n              <div className=\"pf-c-code-editor__code\">\n                <pre className=\"pf-c-code-editor__code-pre\">{code}</pre>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { ResourcesTab } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ServiceRegistryDrawerProps = Omit<\n  MASDrawerProps,\n  'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'\n> & {\n  activeTab?: React.ReactText;\n};\n\nconst ServiceRegistryDrawer: React.FC<ServiceRegistryDrawerProps> = ({\n  isExpanded,\n  isLoading,\n  onClose,\n  'data-ouia-app-id': dataOuiaAppId,\n  children,\n  notRequiredDrawerContentBackground,\n}: ServiceRegistryDrawerProps) => {\n  const { t } = useTranslation();\n  const [activeKey, setActiveKey] = useState<React.ReactText>(0);\n\n  const handleTabClick = (_, eventKey: React.ReactText) => {\n    setActiveKey(eventKey);\n  };\n\n  const panelBodyContent = (\n    <Tabs activeKey={activeKey} onSelect={handleTabClick}>\n      <Tab\n        eventKey={0}\n        title={<TabTitleText>{t('common.resources')}</TabTitleText>}\n        data-testid=\"serviceRegustry-tabResources\"\n      >\n        <ResourcesTab />\n      </Tab>\n      <Tab\n        eventKey={1}\n        title={<TabTitleText>{t('common.sample_code')}</TabTitleText>}\n        data-testid=\"serviceRegistry-tabSampleCode\"\n      >\n        <SampleCodeTab />\n      </Tab>\n    </Tabs>\n  );\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent}\n      drawerHeaderProps={{\n        text: { label: t('serviceRegistry.connection_details') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { ServiceRegistryDrawer };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Level,\n  LevelItem,\n  TextContent,\n  Text,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n} from '@patternfly/react-core';\n\nexport type ServiceRegistryHeaderProps = {\n  name: string;\n  onConnectToRegistry: (data: any) => void;\n  onDeleteRegistry: (name: string) => void;\n};\n\nexport const ServiceRegistryHeader: React.FC<ServiceRegistryHeaderProps> = ({\n  name,\n  onConnectToRegistry,\n  onDeleteRegistry,\n}: ServiceRegistryHeaderProps) => {\n  const { t } = useTranslation();\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key=\"connect-registry\" onClick={() => onConnectToRegistry(name)}>\n      {t('serviceRegistry.connect_to_registry')}\n    </DropdownItem>,\n    <DropdownItem key=\"delete-registry\" onClick={() => onDeleteRegistry(name)}>\n      {t('serviceRegistry.delete_registry')}\n    </DropdownItem>,\n  ];\n\n  return (\n    <Level>\n      <LevelItem>\n        <TextContent>\n          <Text component=\"h1\"> {t('serviceRegistry.service_registry')}</Text>\n        </TextContent>\n      </LevelItem>\n      <LevelItem>\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"toggle-service-registry\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </LevelItem>\n    </Level>\n  );\n};\n"],"sourceRoot":""}