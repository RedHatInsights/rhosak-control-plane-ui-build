{"version":3,"sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/ban-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-icon.js","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","onConnectToRoute","getConnectToRoutePath","preCreateInstance","tokenEndPointUrl","auth","useAuth","basePath","useConfig","location","searchParams","URLSearchParams","search","page","parseInt","get","perPage","mainToggle","has","t","useTranslation","addAlert","useAlert","showModal","localStorage","window","qsContext","QuickStartContext","kafkaInstanceItems","setKafkaInstanceItems","kafkas","setKafkas","kafkaInstancesList","setKafkaInstancesList","cloudProviders","setCloudProviders","kafkaDataLoaded","setKafkaDataLoaded","orderBy","setOrderBy","selectedInstance","setSelectedInstance","expectedTotal","setExpectedTotal","undefined","isDisplayKafkaEmptyState","setIsDisplayKafkaEmptyState","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isUserUnauthorized","setIsUserUnauthorized","isMobileModalOpen","setIsMobileModalOpen","waitingForDelete","setWaitingForDelete","isMaxCapacityReached","setIsMaxCapacityReached","loggedInUser","setLoggedInUser","currentUserKafkas","setCurrentUserKafkas","activeTab","instanceDetail","count","getItem","newCount","setItem","handleMobileModal","handleCreateInstanceModal","open","onCreate","refresh","refreshKafkas","onViewInstance","instance","onViewConnection","handleServerError","error","reason","errorCode","response","data","code","AlertVariant","fetchKafkas","kas","getToken","accessToken","listKafkas","toString","filters","forEach","filter","filterKey","filterValue","length","push","map","val","value","trim","isExact","join","then","res","kafkaInstances","kafkaItems","items","total","kafkaItemsLength","fetchCurrentUserKafkas","fetchKafkasOnborading","listCloudProviders","providers","enabledCloudProviders","p","enabled","selectedKafkaItem","kafka","id","newState","updateSelectedKafkaInstance","getUsername","username","serviceStatus","maxCapacityReached","max_capacity_reached","onDelete","PageSection","variant","PageSectionVariants","padding","default","isFilled","titleProps","title","headingLevel","emptyStateIconProps","icon","emptyStateBodyProps","body","getLoggedInUserKafkaInstance","kafkaItem","owner","getButtonTooltipContent","isKafkaInstanceExist","content","createInstanceLabel","Tooltip","Label","className","tabIndex","color","isExpanded","isLoading","onClose","notRequiredDrawerContentBackground","Level","LevelItem","TextContent","Text","component","Alert","isInline","created_at","format","emptyStateProps","EmptyStateVariant","Button","ButtonVariant","isSmall","size","TitleSizes","onClick","setActiveQuickStart","isDisabledCreateButton","isAriaDisabled","createInstanceButton","Card","isDrawerOpen","buttonTooltipContent","labelWithTooltip","currentUserkafkas","Modal","ModalVariant","isOpen","actions","key"],"mappings":"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","file":"540.21bab6f0.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.BanIconConfig = {\n  name: 'BanIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.BanIcon = require('../createIcon').createIcon(exports.BanIconConfig);\nexports[\"default\"] = exports.BanIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CheckIconConfig = {\n  name: 'CheckIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckIcon = require('../createIcon').createIcon(exports.CheckIconConfig);\nexports[\"default\"] = exports.CheckIcon;","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string\n  webkitHidden: string\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): { isVisible: boolean, setIsVisible: React.Dispatch<React.SetStateAction<boolean>> } {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  AlertVariant,\n  Alert,\n  Button,\n  ButtonVariant,\n  Tooltip,\n  EmptyStateVariant,\n  TitleSizes,\n  Label,\n  Modal,\n  ModalVariant,\n  Card,\n} from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport BanIcon from '@patternfly/react-icons/dist/js/icons/ban-icon';\nimport CheckIcon from '@patternfly/react-icons/dist/js/icons/check-icon';\nimport { useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes, isMobileTablet, InstanceStatus } from '@app/utils';\nimport { MASLoading, MASEmptyState } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { MAX_POLL_INTERVAL } from '@app/utils';\nimport { QuickStartContext, QuickStartContextValues } from '@cloudmosaic/quickstarts';\nimport { StreamsTableView, FilterType, InstanceDrawer, InstanceDrawerProps, StreamsTableProps } from './components';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '@openapi/api';\nimport './OpenshiftStreams.css';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\n\nexport type OpenShiftStreamsProps = Pick<InstanceDrawerProps, 'tokenEndPointUrl'> &\n  Pick<StreamsTableProps, 'onConnectToRoute' | 'getConnectToRoutePath'> & {\n    preCreateInstance: (open: boolean) => Promise<boolean>;\n    createDialogOpen: () => boolean;\n  };\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams: React.FunctionComponent<OpenShiftStreamsProps> = ({\n  onConnectToRoute,\n  getConnectToRoutePath,\n  preCreateInstance,\n  tokenEndPointUrl,\n}: OpenShiftStreamsProps) => {\n  dayjs.extend(localizedFormat);\n\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n  const { t } = useTranslation();\n  const { addAlert } = useAlert();\n  const { showModal } = useRootModalContext();\n  const localStorage = window.localStorage;\n  const qsContext: QuickStartContextValues = React.useContext(QuickStartContext);\n\n  // States\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkas, setKafkas] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  // state to store the expected total kafka instances based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n  const [isDisplayKafkaEmptyState, setIsDisplayKafkaEmptyState] = useState<boolean | undefined>(undefined);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n  const [isMaxCapacityReached, setIsMaxCapacityReached] = useState<boolean | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<KafkaRequest[] | undefined>();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const updateSelectedKafkaInstance = () => {\n    if (kafkaInstanceItems && kafkaInstanceItems?.length > 0) {\n      const selectedKafkaItem = kafkaInstanceItems?.filter(\n        (kafka) => kafka?.id === selectedInstance?.instanceDetail?.id\n      )[0];\n      const newState: any = { ...selectedInstance, instanceDetail: selectedKafkaItem };\n      selectedKafkaItem && setSelectedInstance(newState);\n    }\n  };\n\n  const fetchKafkaServiceStatus = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.serviceStatus().then((res) => {\n          const maxCapacityReached = res?.data?.kafkas?.max_capacity_reached || mainToggle;\n          setIsMaxCapacityReached(maxCapacityReached);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem('openSessions') || '0');\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  const handleCreateInstanceModal = async (open: boolean) => {\n    if (open) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(open);\n    }\n    open &&\n      showModal(MODAL_TYPES.CREATE_KAFKA_INSTANCE, {\n        onCreate,\n        cloudProviders,\n        mainToggle,\n        refresh: refreshKafkas,\n      });\n  };\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === InstanceStatus.PROVISIONING) {\n                return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n              }\n              if (value === InstanceStatus.DEPROVISION) {\n                return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          const kafkaItems = kafkaInstances?.items || [];\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaItems);\n\n          if (kafkaInstancesList?.total !== undefined && kafkaInstancesList.total > expectedTotal) {\n            setExpectedTotal(kafkaInstancesList.total);\n          }\n\n          if (waitingForDelete && filteredValue.length < 1 && kafkaItems?.length == 0) {\n            setIsDisplayKafkaEmptyState(true);\n            setWaitingForDelete(false);\n          }\n\n          setKafkaDataLoaded(true);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchSingleKafka = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.listKafkas('1', '1').then((res) => {\n          const kafkaItemsLength = res?.data?.items?.length;\n          if (!kafkaItemsLength || kafkaItemsLength < 1) {\n            setIsDisplayKafkaEmptyState(true);\n          } else {\n            setIsDisplayKafkaEmptyState(false);\n          }\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!kafkaInstanceItems || kafkaInstanceItems?.length <= 1) {\n      fetchSingleKafka();\n    }\n  }, [kafkaInstanceItems]);\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas('', '', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setCurrentUserKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  /**\n   * Todo:remove after summit\n   */\n  const fetchKafkasOnborading = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = loggedInUser ? `owner = ${loggedInUser}` : '';\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas('1', '1', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res?.data?.items || [];\n          const enabledCloudProviders: CloudProvider[] = providers?.filter((p: CloudProvider) => p.enabled);\n          setCloudProviders(enabledCloudProviders);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [auth, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas();\n  }, []);\n\n  /**\n   * Todo:remove after summit\n   */\n  useEffect(() => {\n    fetchKafkasOnborading();\n  }, []);\n\n  useEffect(() => {\n    updateSelectedKafkaInstance();\n  }, [kafkaInstanceItems]);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    fetchKafkaServiceStatus();\n  }, []);\n\n  useTimeout(() => fetchKafkasOnborading(), MAX_POLL_INTERVAL);\n\n  useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    if (kafkaInstanceItems && kafkaInstanceItems?.length === 1) {\n      setKafkaDataLoaded(true);\n    } else {\n      setKafkaDataLoaded(false);\n    }\n    fetchKafkas();\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = () => {\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  if (isUserUnauthorized) {\n    return (\n      <PageSection variant={PageSectionVariants.default} padding={{ default: 'noPadding' }} isFilled>\n        <MASEmptyState\n          titleProps={{ title: t('access_permissions_needed'), headingLevel: 'h2' }}\n          emptyStateIconProps={{\n            icon: LockIcon,\n          }}\n          emptyStateBodyProps={{ body: t('to_access_kafka_instances_contact_your_organization_administrators') }}\n        />\n      </PageSection>\n    );\n  }\n\n  /**\n   * Todo: remove after summit\n   */\n  const getLoggedInUserKafkaInstance = () => {\n    let kafkaItem: KafkaRequest | undefined = kafkaInstanceItems?.filter((kafka) => kafka.owner === loggedInUser)[0];\n    if (!kafkaItem) {\n      kafkaItem = kafkas?.filter((kafka) => kafka.owner === loggedInUser)[0];\n    }\n    return kafkaItem;\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const renderAlertMessage = () => {\n    const kafka = getLoggedInUserKafkaInstance();\n    if (kafka) {\n      return (\n        <Alert\n          variant=\"info\"\n          isInline\n          title={`${kafka?.name} was created on ${dayjs(kafka?.created_at).format('LLLL')}`}\n          className=\"pf-u-mt-lg\"\n        >\n          This preview instance will expire 48 hours after creation.\n        </Alert>\n      );\n    }\n    return <></>;\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const getButtonTooltipContent = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    let content = '';\n    if (isDisabledCreateButton) {\n      if (isMaxCapacityReached && isKafkaInstanceExist) {\n        content = 'You can deploy 1 preview instance at a time.';\n      } else if (isMaxCapacityReached) {\n        content = 'Development preview instances are currently unavailable for creation.';\n      } else {\n        content = 'You can deploy 1 preview instance at a time.';\n      }\n    }\n    return content;\n  };\n\n  const createInstanceButton = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    if (isDisabledCreateButton) {\n      const content = getButtonTooltipContent();\n      return (\n        <Tooltip content={content}>\n          <Button\n            data-testid=\"emptyStateStreams-buttonCreateKafka\"\n            variant={ButtonVariant.primary}\n            onClick={() => handleCreateInstanceModal(true)}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n    return (\n      <Button\n        data-testid=\"emptyStateStreams-buttonCreateKafka\"\n        variant={ButtonVariant.primary}\n        onClick={() => handleCreateInstanceModal(true)}\n      >\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const getLabelTooltipContent = () => {\n    let content = '';\n    if (isMaxCapacityReached) {\n      content = 'Development preview instances are currently unavailable for creation.';\n    } else {\n      content =\n        'Development preview instances are available for creation. You can deploy 1 preview instance at a time.';\n    }\n    return content;\n  };\n\n  /**\n   * Todo: remove after summit\n   */\n  const createInstanceLabel = () => {\n    const content = getLabelTooltipContent();\n    if (isMaxCapacityReached) {\n      return (\n        <Tooltip content={content}>\n          <Label icon={<BanIcon />} className=\"pf-u-ml-md\" tabIndex={0}>\n            No instances available\n          </Label>\n        </Tooltip>\n      );\n    } else {\n      return (\n        <Tooltip content={content}>\n          <Label color=\"green\" icon={<CheckIcon />} className=\"pf-u-ml-md\" tabIndex={0}>\n            Instances available\n          </Label>\n        </Tooltip>\n      );\n    }\n  };\n\n  const renderStreamsTable = () => {\n    if (kafkaInstanceItems === undefined) {\n      return (\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (isDisplayKafkaEmptyState) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          {isMaxCapacityReached ? (\n            <MASEmptyState\n              emptyStateProps={{\n                variant: EmptyStateVariant.large,\n              }}\n              emptyStateIconProps={{\n                icon: BanIcon,\n              }}\n              emptyStateBodyProps={{\n                body: (\n                  <>\n                    Development preview instances are currently unavailable for creation, so check back later. In the\n                    meantime,{' '}\n                    <Button variant={ButtonVariant.link} isSmall isInline data-testid=\"emptyState-actionTour\">\n                      take a tour\n                    </Button>{' '}\n                    to learn more about the service.\n                  </>\n                ),\n              }}\n              titleProps={{ title: 'Kafka instances unavailable', size: TitleSizes.xl, headingLevel: 'h2' }}\n            ></MASEmptyState>\n          ) : (\n            <MASEmptyState\n              emptyStateProps={{\n                variant: EmptyStateVariant.large,\n              }}\n              emptyStateIconProps={{\n                icon: CheckCircleIcon,\n                color: 'green',\n              }}\n              emptyStateBodyProps={{\n                body: (\n                  <>\n                    Development preview instances are available for creation. For help getting started, access the{' '}\n                    <Button\n                      variant={ButtonVariant.link}\n                      isSmall\n                      isInline\n                      onClick={() => qsContext.setActiveQuickStart && qsContext.setActiveQuickStart('getting-started')}\n                    >\n                      quick start guide.\n                    </Button>\n                  </>\n                ),\n              }}\n              titleProps={{ title: 'Kafka instances available', size: TitleSizes.xl, headingLevel: 'h2' }}\n            >\n              {createInstanceButton()}\n            </MASEmptyState>\n          )}\n        </PageSection>\n      );\n    } else if (kafkaInstanceItems && isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card>\n            <StreamsTableView\n              kafkaInstanceItems={kafkaInstanceItems}\n              mainToggle={mainToggle}\n              onViewConnection={onViewConnection}\n              onViewInstance={onViewInstance}\n              onConnectToRoute={onConnectToRoute}\n              getConnectToRoutePath={getConnectToRoutePath}\n              refresh={refreshKafkas}\n              kafkaDataLoaded={kafkaDataLoaded}\n              setWaitingForDelete={setWaitingForDelete}\n              onDelete={onDelete}\n              page={page}\n              perPage={perPage}\n              total={kafkaInstancesList?.total}\n              expectedTotal={expectedTotal}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              setFilterSelected={setFilterSelected}\n              filterSelected={filterSelected}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              isDrawerOpen={selectedInstance !== null}\n              loggedInUser={loggedInUser}\n              isMaxCapacityReached={isMaxCapacityReached}\n              buttonTooltipContent={getButtonTooltipContent()}\n              isDisabledCreateButton={getLoggedInUserKafkaInstance() !== undefined || isMaxCapacityReached}\n              labelWithTooltip={createInstanceLabel()}\n              currentUserkafkas={currentUserKafkas}\n              onCreate={onCreate}\n              cloudProviders={cloudProviders}\n            />\n          </Card>\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        mainToggle={mainToggle}\n        isExpanded={selectedInstance != null}\n        activeTab={activeTab}\n        isLoading={instanceDetail === undefined}\n        instanceDetail={instanceDetail}\n        onClose={onCloseDrawer}\n        data-ouia-app-id=\"controlPlane-streams\"\n        getConnectToRoutePath={getConnectToRoutePath}\n        onConnectToRoute={onConnectToRoute}\n        tokenEndPointUrl={tokenEndPointUrl}\n        notRequiredDrawerContentBackground={isDisplayKafkaEmptyState}\n      >\n        <main className=\"pf-c-page__main\">\n          <PageSection variant={PageSectionVariants.light}>\n            <Level>\n              <LevelItem>\n                <TextContent>\n                  <Text component=\"h1\">{t('kafka_instances')}</Text>\n                </TextContent>\n              </LevelItem>\n            </Level>\n            {renderAlertMessage()}\n          </PageSection>\n          {renderStreamsTable()}\n        </main>\n      </InstanceDrawer>\n      <Modal\n        variant={ModalVariant.small}\n        title=\"Mobile experience\"\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button key=\"confirm\" variant=\"primary\" onClick={() => handleMobileModal()}>\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n"],"sourceRoot":""}