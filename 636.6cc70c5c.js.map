{"version":3,"sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccounts.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccountsFederated.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx"],"names":["ServiceAccounts","t","useTranslation","addAlert","useAlert","showModal","location","searchParams","URLSearchParams","search","page","parseInt","get","perPage","mainToggle","has","auth","useAuth","basePath","useConfig","useState","setServiceAccountList","serviceAccountItems","setServiceAccountItems","isUserUnauthorized","setIsUserUnauthorized","orderBy","setOrderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isServiceAccountsEmpty","setIsServiceAccountsEmpty","fetchServiceAccounts","kas","getToken","accessToken","SecurityApi","Configuration","getServiceAccounts","then","response","serviceAccounts","data","items","itemsLength","length","sortedServiceAccounts","error","reason","errorCode","code","variant","AlertVariant","title","description","handleServerError","useEffect","handleResetModal","serviceAccount","serviceAccountToReset","handleCreateModal","handleDeleteModal","serviceAccountToDelete","PageSection","PageSectionVariants","padding","default","isFilled","titleProps","headingLevel","emptyStateIconProps","icon","emptyStateBodyProps","body","TextContent","Text","component","undefined","emptyStateProps","buttonProps","onClick","className","Card","total","expectedTotal","serviceAccountsDataLoaded","onResetCredentials","onDeleteServiceAccount","renderTableView","BrowserRouter","I18nextProvider","i18n","ServiceAccountsTableView","loggedInUser","setLoggedInUser","getUsername","username","tableRow","loadingCount","tableColumns","transforms","cellWidth","onSelectKebabDropdownOption","event","originalData","selectedOption","target","parentElement","previousSibling","focus","getindexForSortParameter","parameter","toLowerCase","tableProps","cells","rows","forEach","row","name","owner","clientID","created_at","push","skeleton","Skeleton","actionResolver","rowData","_extraData","additionalProps","isUserSameAsLoggedIn","tooltip","isDisabled","style","pointerEvents","cursor","id","tooltipProps","position","content","getActionResolver","onSort","_event","columnIndex","sortByDirection","index","getParameterForSortIndex","sortBy","sort","split","direction","SortByDirection","ServiceAccountsToolbar","nameInputRef","useRef","ownerInputRef","isFilterExpanded","setIsFilterExpanded","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","label","value","disabled","isInputValid","test","trim","updateFilter","key","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","onFilter","filterType","isExact","onInputPress","fieldName","tooltipContent","getSelectionForFilter","selectedFilters","map","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","toolbarItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","isOpen","onSelect","_","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","input","onKeyPress","ref","Button","ButtonVariant","Tooltip","isVisible","reference","item","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl"],"mappings":"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","file":"636.6cc70c5c.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants, Text, AlertVariant, TextContent, Card } from '@patternfly/react-core';\nimport { isServiceApiError, ErrorCodes, sortValues } from '@app/utils';\nimport { MASEmptyState, MASLoading, MASEmptyStateVariant, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { ServiceAccountListItem, ServiceAccountList, SecurityApi, Configuration } from '@rhoas/kafka-management-sdk';\nimport { ServiceAccountsTableView, FilterType } from './components/ServiceAccountsTableView';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\n\nconst ServiceAccounts: React.FC = () => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlert();\n  const { showModal } = useRootModalContext();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  const [serviceAccountList, setServiceAccountList] = useState<ServiceAccountList>();\n  const [serviceAccountItems, setServiceAccountItems] = useState<ServiceAccountListItem[] | undefined>();\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isServiceAccountsEmpty, setIsServiceAccountsEmpty] = useState<boolean>(false);\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert({ variant: AlertVariant.danger, title: t('common.something_went_wrong'), description: reason });\n    }\n  };\n\n  const fetchServiceAccounts = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getServiceAccounts().then((response) => {\n          const serviceAccounts: ServiceAccountList = response?.data;\n          const items = serviceAccounts?.items || [];\n          const itemsLength = items?.length;\n          setServiceAccountList(serviceAccounts);\n          const sortedServiceAccounts: ServiceAccountListItem[] | undefined = sortValues<ServiceAccountListItem>(\n            items,\n            'name',\n            'asc'\n          );\n          setServiceAccountItems(sortedServiceAccounts);\n          /**\n           * Todo: handle below logic in separate API call when backend start support pagination\n           */\n          if (!itemsLength || itemsLength < 1) {\n            setIsServiceAccountsEmpty(true);\n          } else {\n            setIsServiceAccountsEmpty(false);\n          }\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchServiceAccounts();\n  }, []);\n\n  const handleResetModal = (serviceAccount: ServiceAccountListItem) => {\n    showModal(MODAL_TYPES.RESET_CREDENTIALS, { serviceAccountToReset: serviceAccount });\n  };\n\n  const handleCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_ACCOUNT, { fetchServiceAccounts });\n  };\n\n  const handleDeleteModal = (serviceAccount: ServiceAccountListItem) => {\n    showModal(MODAL_TYPES.DELETE_SERVICE_ACCOUNT, { serviceAccountToDelete: serviceAccount, fetchServiceAccounts });\n  };\n\n  const renderTableView = () => {\n    if (serviceAccountItems === undefined) {\n      return (\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <MASLoading />\n        </PageSection>\n      );\n    } else {\n      if (isServiceAccountsEmpty) {\n        return (\n          <PageSection padding={{ default: 'noPadding' }} isFilled>\n            <MASEmptyState\n              emptyStateProps={{\n                variant: MASEmptyStateVariant.NoItems,\n              }}\n              titleProps={{\n                title: t('serviceAccount.you_do_not_have_any_service_accounts_yet'),\n              }}\n              emptyStateBodyProps={{\n                body: t('serviceAccount.create_service_account_to_get_started'),\n              }}\n              buttonProps={{\n                title: t('serviceAccount.create_service_account'),\n                onClick: handleCreateModal,\n                ['data-testid']: 'emptyStateStreams-buttonCreateServiceAccount',\n              }}\n            />\n          </PageSection>\n        );\n      } else {\n        return (\n          <PageSection\n            className=\"mk--main-page__page-section--table pf-m-padding-on-xl\"\n            variant={PageSectionVariants.default}\n            padding={{ default: 'noPadding' }}\n          >\n            <Card>\n              <ServiceAccountsTableView\n                page={page}\n                perPage={perPage}\n                total={/*serviceAccountList?.total ||*/ 1}\n                expectedTotal={0}\n                serviceAccountsDataLoaded={true}\n                serviceAccountItems={serviceAccountItems}\n                orderBy={orderBy}\n                setOrderBy={setOrderBy}\n                filterSelected={filterSelected}\n                setFilterSelected={setFilterSelected}\n                filteredValue={filteredValue}\n                setFilteredValue={setFilteredValue}\n                onResetCredentials={handleResetModal}\n                onDeleteServiceAccount={handleDeleteModal}\n                handleCreateModal={handleCreateModal}\n                mainToggle={mainToggle}\n              />\n            </Card>\n          </PageSection>\n        );\n      }\n    }\n  };\n\n  if (isUserUnauthorized) {\n    return (\n      <PageSection variant={PageSectionVariants.default} padding={{ default: 'noPadding' }} isFilled>\n        <MASEmptyState\n          titleProps={{\n            title: t('serviceAccount.unauthorized_access_to_service_accounts_title'),\n            headingLevel: 'h2',\n          }}\n          emptyStateIconProps={{\n            icon: LockIcon,\n          }}\n          emptyStateBodyProps={{\n            body: t('serviceAccount.unauthorized_access_to_service_accounts_info'),\n          }}\n        />\n      </PageSection>\n    );\n  }\n\n  return (\n    <>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component=\"h1\"> {t('serviceAccount.service_accounts')}</Text>\n          <Text component=\"p\">{t('serviceAccount.service_accounts_title_header_info')}</Text>\n        </TextContent>\n      </PageSection>\n      {renderTableView()}\n    </>\n  );\n};\n\nexport { ServiceAccounts };\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { I18nextProvider } from 'react-i18next';\nimport { ServiceAccounts } from './ServiceAccounts';\nimport { RootModal, AlertProvider } from '@app/common';\nimport { initI18N } from '@i18n/i18n';\n\n// Federation version of ServiceAccounts\n\nconst ServiceAccountsFederated: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <I18nextProvider i18n={initI18N()}>\n        <AlertProvider>\n          <RootModal>\n            <ServiceAccounts />\n          </RootModal>\n        </AlertProvider>\n      </I18nextProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default ServiceAccountsFederated;\n","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { Skeleton } from '@patternfly/react-core';\nimport { MASTable, MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { getLoadingRowsCount, getFormattedDate, getSkeletonForRows } from '@app/utils';\nimport { ServiceAccountListItem } from '@rhoas/kafka-management-sdk';\nimport { ServiceAccountsToolbar, ServiceAccountsToolbarProps } from './ServiceAccountsToolbar';\nimport { useAuth } from '@bf2/ui-shared';\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  handleCreateModal: () => void;\n};\n\nconst ServiceAccountsTableView: React.FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  total,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n  handleCreateModal,\n  mainToggle,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  const tableColumns = [\n    { title: t('common.name') },\n    { title: t('common.clientID') },\n    { title: t('common.owner'), transforms: [cellWidth(20)] },\n    { title: t('common.description') },\n    { title: t('time_created') },\n  ];\n\n  const onSelectKebabDropdownOption = (event: any, originalData: ServiceAccountListItem, selectedOption: string) => {\n    if (selectedOption === 'reset-credentials') {\n      onResetCredentials && onResetCredentials(originalData);\n    } else if (selectedOption === 'delete-account') {\n      onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    }\n\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!serviceAccountsDataLoaded) {\n      return getSkeletonForRows({ loadingCount, skeleton: <Skeleton />, length: tableColumns.length });\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, owner, description, clientID, created_at } = row;\n      tableRow.push({\n        cells: [name, clientID, owner, description, { title: getFormattedDate(created_at, t('ago')) }],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const getActionResolver = (rowData: IRowData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('common.reset_credentials'),\n        id: 'reset-credentials',\n        ['data-testid']: 'tableServiceAccounts-actionResetCredentials',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'reset-credentials'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_reset_service_account'),\n        },\n      },\n      {\n        title: t('serviceAccount.delete_service_account'),\n        id: 'delete-account',\n        ['data-testid']: 'tableServiceAccounts-actionDeleteAccount',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-account'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_delete_service_account'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData);\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'clientID';\n      case 2:\n        return 'owner';\n      case 3:\n        return 'description';\n      case 4:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'clientID':\n        return 1;\n      case 'owner':\n        return 2;\n      case 'description':\n        return 3;\n      case 'created_at':\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, columnIndex: number, sortByDirection: SortByDirection) => {\n    setOrderBy && setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        handleCreateModal={handleCreateModal}\n        mainToggle={mainToggle}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('serviceAccount.service_account_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems && serviceAccountItems?.length < 1 && serviceAccountsDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {/* {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n","import React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ToolbarGroup,\n  ToolbarItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SelectOptionObject,\n  ToolbarFilter,\n  InputGroup,\n  TextInput,\n  Button,\n  Tooltip,\n  ToolbarChip,\n  ButtonVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { MASToolbar, ToolbarItemProps } from '@app/common';\n\nexport type ServiceAccountsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  handleCreateModal: () => void;\n  mainToggle?: boolean;\n};\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nconst ServiceAccountsToolbar: React.FC<ServiceAccountsToolbarProps> = ({\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  handleCreateModal,\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation();\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState<boolean>(false);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n  ];\n\n  const onClearAllFilters = () => {\n    setFilteredValue([]);\n  };\n\n  const onToggleFilter = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        // index of current filter value in applied filter\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value);\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onInputPress = (event: any) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const onSelect = (_, selection: string | SelectOptionObject) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onToggleFilter}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"name-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_name_lower')}\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label={t('filter_by_name_lower')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected?.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"owner-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_owner')}\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label={t('filter_by_owner')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateModal}\n          data-testid={'tableServiceAccounts-buttonCreateServiceAccount'}\n        >\n          {t('serviceAccount.create_service_account')}\n        </Button>\n      ),\n    },\n  ];\n  /**\n   * Todo: uncomment code when API start support pagination\n   */\n  // if (total && total > 0 && toolbarItems.length === 1) {\n  //   toolbarItems.push({\n  //     item: (\n  //       <MASPagination\n  //         widgetId=\"pagination-options-menu-top\"\n  //         itemCount={total}\n  //         page={page}\n  //         perPage={perPage}\n  //         isCompact={true}\n  //         titles={{\n  //           paginationTitle: t('minimal_pagination'),\n  //           perPageSuffix: t('per_page_suffix'),\n  //           toFirstPage: t('to_first_page'),\n  //           toPreviousPage: t('to_previous_page'),\n  //           toLastPage: t('to_last_page'),\n  //           toNextPage: t('to_next_page'),\n  //           optionsToggle: t('options_toggle'),\n  //           currPage: t('curr_page'),\n  //         }}\n  //       />\n  //     ),\n  //     variant: 'pagination',\n  //     alignment: { default: 'alignRight' },\n  //   });\n  // }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClearAllFilters,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n"],"sourceRoot":""}