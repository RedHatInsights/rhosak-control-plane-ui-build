{"version":3,"file":"365.adace6a1.js","mappings":"gGAEAA,EAAQ,GAAwB,CAC9BC,KAAM,kBACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,uWACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAkB,oBAAoCA,EAAQ,IACtEA,EAAA,GAAqBA,EAAQ,I,eCT7BA,EAAQ,GAAmB,CACzBC,KAAM,aACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,gNACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAa,oBAAoCA,EAAQ,IACjEA,EAAA,GAAqBA,EAAQ,I,gBCT7BA,EAAQ,GAAoB,CAC1BC,KAAM,cACNC,OAAQ,KACRC,MAAO,KACPC,QAAS,svBACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAc,oBAAoCA,EAAQ,IAClEA,EAAA,GAAqBA,EAAQ,I,kKCEhBO,EAAgB,UAAW,WAAM,0CACjCC,EAAa,UAAW,WAAM,0CAC9BC,EAAY,UAAW,WAAM,kDAQpCC,EAA+D,SAAC,G,IACpEC,EAAU,aACVC,EAAO,UACPC,EAAS,YACTC,EAAc,iBACdC,EAAU,aACVC,EAAS,YACTC,EAAQ,WACYC,EAAa,sBACjCC,EAAgB,mBAChBC,EAAkC,qCAElC,WAAa,KACL,IAAAC,GAAM,IAAAC,kBAAgB,EACxB,EAAmBR,GAAkB,GAAnCb,EAAI,OAAEsB,EAAM,SAEd,GAAoC,IAAAC,UAA0B,GAA7DC,EAAa,KAAEC,EAAgB,KAChC,GAAoC,IAAAF,UAA0B,GAA7DG,EAAa,KAAEC,EAAgB,MAEtC,IAAAC,YAAU,WACR,IAAMC,EAA2C,aAA7BjB,MAAAA,OAAS,EAATA,EAAWkB,eAA8B,EAAI,EACjEL,EAAiBI,GACjBF,EAAiB,KAChB,CAACf,IAEJ,IASUmB,EATJC,EAAkB,SAACC,EAAGC,GAC1BT,EAAiBS,IAGbC,EAAwB,SAACF,EAAGC,GAChCP,EAAiBO,IAQbE,EAAiBd,IAAW,eAA2BA,IAAW,eA2CxE,OACE,kBAAC,aAAc,CAACe,SAAU,kBAAC,KAAU,OACnC,kBAAC7B,EAAS,CACRM,WAAYA,EACZC,UAAWA,EACXJ,QAASA,EACT2B,iBA7CF,kBAAC,aAAc,CAACD,SAAU,kBAAC,KAAU,OACnC,kBAAC,EAAAE,KAAI,CAACC,UAAWhB,EAAeiB,SAAUT,GACxC,kBAAC,EAAAU,IAAG,CAACR,SAAU,EAAGS,MAAO,kBAAC,EAAAC,aAAY,KAAExB,EAAE,aACxC,kBAACb,EAAU,CAACG,WAAYA,EAAYG,eAAgBA,KAEtD,kBAAC,EAAA6B,IAAG,CACFR,SAAU,EACVS,MAAO,kBAAC,EAAAC,aAAY,KAAExB,EAAE,eAA6B,cACzC,4BAEZ,kBAACd,EAAa,CACZI,WAAYA,EACZ8B,UAAWd,EACXmB,SAAUhC,EACViC,gBAtBFf,GAA0BlB,GAAkB,IAAE,uBAC/CkB,MAAAA,OAAqB,EAArBA,EAAuBgB,SAAS,SAAUhB,EAA2BA,EAAqB,QAsBvFU,SAAUN,EACVC,eAAgBA,EAChBlB,iBAAkBA,OA6BxB8B,kBAAmB,CACjBC,KAAM,CAAEC,MAAO9B,EAAE,kBACjBuB,MAAO,CAAEQ,MAAOnD,EAAMoD,aAAc,OACrC,mBACiBnC,EAClBoC,mBAzBAjB,EAEA,kBAAC,EAAAkB,MAAK,CACJC,UAAQ,EACRC,QAAS,EAAAC,aAAA,KACTd,MAAOvB,EAAE,2CACTsC,UAAU,eAIT,qCAgBHvC,mCAAoCA,GAEnCH,M,qMCzEH2C,EAA+D,SAAC,G,UACpEC,EAAiB,oBACjB,IAAAC,eAAAA,OAAc,IAAG,SAAM,EACvBC,EAAK,QACLC,EAAI,OACJC,EAAO,UACPC,EAAa,gBACbC,EAAgB,mBAChBC,EAAsB,yBACtBC,EAAoB,uBACpBC,EAAgB,mBAChBC,EAAQ,WACRC,EAAO,UACPC,EAAc,iBAENpD,GAAM,IAAAC,kBAAgB,EACxBoD,GAAe,IAAAC,UACfC,GAAgB,IAAAD,UACdE,GAAc,UAAqB,UACnCC,IAAsB,WAAkB,IAAE,kBAE5C,GAA0C,IAAAtD,WAAS,GAAlDuD,EAAgB,KAAEC,EAAmB,KACtC,GAAoE,IAAAxD,WAAS,GAA5EyD,EAA6B,KAAEC,EAAgC,KAChE,GAAsD,IAAA1D,WAAS,GAA9D2D,EAAsB,KAAEC,EAAyB,KAClD,GAAsD,IAAA5D,WAAS,GAA9D6D,EAAsB,KAAEC,EAAyB,KAClD,GAAsC,IAAA9D,YAArC+D,EAAc,KAAEC,EAAiB,KAClC,GAAwC,IAAAhE,YAAvCiE,EAAe,KAAEC,EAAkB,KACpC,GAAgC,IAAAlE,WAAkB,GAAjDmE,EAAW,KAAEC,EAAc,KAC5B,IAAkC,IAAApE,WAAkB,GAAnDqE,GAAY,MAAEC,GAAe,MAC9B,IAAgC,IAAAtE,WAAkB,GAAjDuE,GAAW,MAAEC,GAAc,MAG5BC,GAAoB,CACxB,CAAE9C,MAAO9B,EAAE,QAAS+B,MAAO,OAAQ8C,UAAU,GAC7C,CAAE/C,MAAO9B,EAAE,kBAAmB+B,MAAO,iBAAkB8C,UAAU,GACjE,CAAE/C,MAAO9B,EAAE,UAAW+B,MAAO,SAAU8C,UAAU,GACjD,CAAE/C,MAAO9B,EAAE,SAAU+B,MAAO,QAAS8C,UAAU,GAC/C,CAAE/C,MAAO9B,EAAE,UAAW+B,MAAO,SAAU8C,UAAU,KAGnD,IAAArE,YAAU,WACRsE,OACC,CAACjC,IAEJ,IAAMkC,GAA6B,UAAyB,SAACC,GAC3D,MAAO,CAAElD,MAAO9B,EAAEgF,EAAcjD,OAAQA,MAAOiD,EAAcjD,MAAO8C,UAAU,MAG1EI,GAAsB,UAAuB,SAACC,GAClD,MAAO,CAAEpD,MAAO9B,EAAEkF,EAAOnD,OAAQA,MAAOmD,EAAOnD,MAAO8C,UAAU,MAG5DM,GAAsB,aAClB,SAACC,GAAM,OAAAA,EAAErD,QAAU,gBAA4BqD,EAAErD,QAAU,gBAClEsD,KAAI,SAACnF,GACJ,MAAO,CAAE4B,MAAO9B,EAAEE,EAAO6B,OAAQA,MAAO7B,EAAO6B,MAAO8C,UAAU,MAkC9DS,GAAe,SAACC,EAAaC,EAAqBC,GACtD,IAAMC,EAA+BC,OAAOC,OAAO,GAAI/C,GACjDgD,EAAcH,EAAeI,WAAU,SAACC,GAAM,OAAAA,EAAEC,YAAcT,KACpE,GAAIM,GAAe,EAAG,CAEpB,IAAMI,EAAcP,EAAeG,GACnC,GAAII,EAAYA,aAAeA,EAAYA,YAAYC,OAAS,EAAG,CAEjE,IAAMC,EAAmBF,EAAYA,YAAYH,WAAU,SAACC,GAAM,OAAAA,EAAEhE,QAAUyD,EAAOzD,SACrF,GAAIoE,GAAoB,EAAG,CAEzB,IAAIV,EAGF,OAFAQ,EAAYA,YAAYG,OAAOD,EAAkB,QAMnDT,EAAeG,GAAaI,YAAYI,KAAKb,QAI/CE,EAAeG,GAAaI,YAAc,CAACT,QAI7CE,EAAeW,KAAK,CAAEL,UAAWT,EAAKU,YAAa,CAACT,KAEtD1C,EAAiB4C,IAGbY,GAAe,SAACvE,GACpB,OAAOA,GAAQ,qCAAqCwE,KAAKxE,EAAMyE,SAG3DC,GAAW,SAACC,GACG,SAAfA,GAAyBxC,GAA2C,IAAzBA,EAAesC,OACxDF,GAAapC,IACfoB,GAAa,OAAQ,CAAEvD,MAAOmC,EAAgByC,SAAS,IAAS,GAChExC,EAAkB,KAElBI,GAAe,GAEO,UAAfmC,GAA0BtC,GAA6C,IAA1BA,EAAgBoC,SAClEF,GAAalC,IACfkB,GAAa,QAAS,CAAEvD,MAAOqC,EAAiBuC,SAAS,IAAS,GAClEtC,EAAmB,KAEnBI,IAAgB,KA0ChBmC,GAAiB,SAAC7E,GACtB,IAAM8E,EAAkClB,OAAOC,OAAO,GAAI/C,GACpDgD,EAAcgB,EAAkBf,WAAU,SAACN,GAAW,OAAAA,EAAOQ,YAAcjE,KAC7E8D,GAAe,GACjBgB,EAAkBT,OAAOP,EAAa,GAExC/C,EAAiB+D,GACH,SAAV9E,GACFoC,EAAkB,IAEN,UAAVpC,GACFsC,EAAmB,IAEP,mBAAVtC,GACFkC,GAA0B,GAEd,WAAVlC,GACFgC,GAA0B,GAEd,WAAVhC,GACFkC,GAA0B,IAIxB6C,GAAe,SAACC,G,MACpB,GAAkB,UAAdA,EAAMxB,MAAoBb,GAAa,CACzC,IAAMsC,EAAyB,QAAb,EAAAD,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAErI,KACjC6H,GAASO,KAIPE,GAAwB,SAAC3B,GAC7B,IAAM4B,EAAkBtE,EAAc2C,QAAO,SAACA,GAAW,OAAAA,EAAOQ,YAAcT,KAC9E,GAAI4B,EAAgBjB,OAAS,EAC3B,OAAOiB,EAAgB,GAAGlB,YAAYZ,KAAI,SAAC+B,GAAQ,OAAAA,EAAIrF,UAKrDsF,GAAe,SAACC,EAAkBC,EAA4BC,G,QAC5DC,EAAiC9B,OAAOC,OAAO,GAAI/C,GACnDgD,EAAc4B,EAAiB3B,WAAU,SAACN,GAAW,OAAAA,EAAOQ,YAAcsB,KAC1EI,EAAiC/B,OAAOC,OAAO,GAAiC,QAA7B,EAAA6B,EAAiB5B,UAAY,eAAEI,aACpF0B,EAAiCJ,EAAKK,WAItCJ,IAAiBA,MAAAA,OAAa,EAAbA,EAAetB,QAAS,IAC3CyB,EAA8E,QAAjE,EAAAH,MAAAA,OAAa,EAAbA,EAAeK,MAAK,SAACC,GAAW,OAAAA,EAAOhG,QAAUyF,EAAKK,qBAAW,eAAE7F,OAKlF,IAAMgG,EAAYL,EAAgB5B,WAAU,SAACsB,GAAQ,OAAAA,EAAIrF,QAAU4F,KAC/DI,GAAa,IACfN,EAAiB5B,GAAaI,YAAYG,OAAO2B,EAAW,GAC5DjF,EAAiB2E,KAIfO,GAAoB,SAACV,GACzB,IAAMG,EAAiC9B,OAAOC,OAAO,GAAI/C,GACnDgD,EAAc4B,EAAiB3B,WAAU,SAACN,GAAW,OAAAA,EAAOQ,YAAcsB,KAC5EzB,GAAe,IACjB4B,EAAiBrB,OAAOP,EAAa,GACrC/C,EAAiB2E,KAIf3C,GAAmB,WACvB,IAAImD,EAAiB,EACrBpF,MAAAA,GAAAA,EAAeqF,SAAQ,SAAC1C,GACd,IAAAS,EAA2BT,EAAM,YAApBQ,EAAcR,EAAM,UACnC2C,EACU,WAAdnC,IAA0BC,MAAAA,OAAW,EAAXA,EAAaT,QAAO,SAAC,GAAc,OAAP,UAAiB,sBACnE4C,EACU,WAAdpC,IAA0BC,MAAAA,OAAW,EAAXA,EAAaT,QAAO,SAAC,GAAc,OAAP,UAAiB,sBAErE2C,MAAAA,OAAkB,EAAlBA,EAAoBjC,QAAS,IAAKkC,MAAAA,OAAiB,EAAjBA,EAAmBlC,QAAS,EAChE+B,IAAkBhC,MAAAA,OAAW,EAAXA,EAAaC,QAAS,GAC/BiC,MAAAA,OAAkB,EAAlBA,EAAoBjC,QAAS,IAAKkC,MAAAA,OAAiB,EAAjBA,EAAmBlC,QAAS,EACvE+B,IAAkBhC,MAAAA,OAAW,EAAXA,EAAaC,QAAS,EAExC+B,GAAkBhC,MAAAA,OAAW,EAAXA,EAAaC,UAI/B+B,GAAkB,KACpBtD,IAAe,GAEfA,IAAe,IAIb0D,GAAyB,SAAC9C,EAAa+C,GAC3C,IAAI5C,EACE+B,EAAmB5E,MAAAA,OAAa,EAAbA,EAAe2C,QAAO,SAAC,GAAkB,OAAP,cAAqBD,KAChF,GAAIkC,IAAoBA,MAAAA,OAAgB,EAAhBA,EAAkBvB,QAAS,EAAG,CAC5C,IAAAD,EAAgBwB,EAAiB,GAAE,YAC3C/B,EAAiBO,MAAAA,OAAW,EAAXA,EAAa4B,MAAK,SAAC,GAAc,OAAP,UAAiBS,KAE9D,OAAK5C,GAMD6C,GAAiB,SAACvB,GACtB,OAAItC,GACK,6BAAM1E,EAAE,uBAEV,6BAAMA,EAAE,8BAA+B,CAAEpB,KAAMoI,MAGlDwB,GACJ,oCACE,kBAAC,EAAAC,aAAY,CAACrG,QAAQ,gBACpB,kBAAC,EAAAsG,OAAM,CACLtG,QAAS,EAAAuG,cAAA,OAAoB,aAClB,gBACXC,SAjPe,WACrBjF,GAAqBD,IAiPfmF,WAAYpG,EACZqG,OAAQpF,EACRrC,SAhKe,SACrB0H,EACAC,GAEArF,GAAqBD,GACrBlB,EAAkBwG,MAAAA,OAAS,EAATA,EAAWpB,cA6JtBhD,GAAkBS,KAAI,SAACyC,EAAQmB,GAAU,OACxC,kBAAC,EAAAC,aAAY,CAACC,WAAYrB,EAAOjD,SAAUU,IAAK0D,EAAOlH,MAAO+F,EAAO/F,OAClE+F,EAAOhG,WAId,kBAAC,EAAAsH,cAAa,CACZC,MAAOnC,GAAsB,QAC7BoC,WAAY,SAACC,EAAWhC,GAAS,OAAAF,GAAa,OAAQE,IACtDiC,gBAAiB,WAAM,OAAAxB,GAAkB,SACzCyB,aAAczJ,EAAE,QAChB0J,gBAAmD,UAAlCjH,MAAAA,OAAc,EAAdA,EAAgB/B,gBAEE,UAAlC+B,MAAAA,OAAc,EAAdA,EAAgB/B,gBACf,kBAAC,EAAAiJ,WAAU,CAACrH,UAAU,6CACpB,kBAAC,EAAAsH,UAAS,CACRhL,KAAK,OACLiL,GAAG,aACHC,KAAK,SAAQ,aACF,sBACXC,WAAYzF,GAAeI,GAAc,EAAAsF,iBAAA,MAAyB,EAAAA,iBAAA,QAClEC,YAAajK,EAAE,wBACfkK,SA5PY,SAACC,GACzBhG,EAAkBgG,IACjB7F,GAAeC,GAAe,IA2PnB6F,WAAYtD,GACZ/E,MAAOmC,EACPmG,IAAKhH,IAEP,kBAAC,EAAAiH,OAAM,CACLlI,QAAS,EAAAmI,cAAA,QACTpB,YAAa7E,GAAeI,GAC5B8F,QAAS,WAAM,OAAA/D,GAAS,SAAO,aACpB,oBAEX,kBAAC,KAAU,SAEVnC,GAAeI,KAChB,kBAAC,EAAA+F,QAAO,CACNC,UAAWhG,KAAgBJ,EAC3BqG,QAASpC,GAAe,QACxBqC,UAAWvH,MAMrB,kBAAC,EAAA+F,cAAa,CACZC,MAA8C,QAAvC,EAAAnC,GAAsB,yBAAiB,eAAE7B,KAAI,SAAC+B,GAAQ,OAAApH,EAAEoH,MAC/DkC,WAAY,SAACC,EAAWhC,GAAS,OAAAF,GAAa,iBAAkBE,EAAMxC,KACtEyE,gBAAiB,WAAM,OAAAxB,GAAkB,mBACzCyB,aAAczJ,EAAE,kBAChB0J,gBAAoC,mBAAnBjH,GAEG,mBAAnBA,GACC,kBAAC,EAAAiG,OAAM,CACLmB,GAAG,wBACHzH,QAAS,EAAAuG,cAAA,SAAsB,aACpB,wBACXC,SA3SwB,WAClC/E,GAAkCD,IA2SxBiF,WAAY3B,GAAsB,kBAClC4B,OAAQlF,EACRvC,SAtNwB,SAClC0H,EACAC,EACA6B,GAEIA,GAAejE,GAAe,kBAClCtB,GAAa,iBAAkB,CAAEvD,MAAOiH,EAAUpB,WAAYjB,SAAS,IAAQ,GAC/E,YAA8B,GAAK9C,GAAiC,IAgN1DiH,gBAAiB9K,EAAE,4BACnBsC,UAAU,uBAETyC,GAA2BM,KAAI,SAACyC,EAAQmB,GACvC,IAAM2B,EAAYG,SAASC,eAAe,yBAC1C,OACE,kBAAC,EAAA9B,aAAY,CACXC,WACErB,EAAOjD,UAAaH,IAAe2D,GAAuB,iBAAkBP,EAAO/F,OAErFwD,IAAK0D,EACLlH,MAAO+F,EAAO/F,OAEb2C,IACC,kBAAC,EAAA+F,QAAO,CAACC,UAAWhG,GAAaiG,QAASpC,KAAkBqC,UAAWA,QAAaK,IAErFnD,EAAOhG,YAOpB,kBAAC,EAAAsH,cAAa,CACZC,MAAsC,QAA/B,EAAAnC,GAAsB,iBAAS,eAAE7B,KAAI,SAAC+B,GAAQ,OAAApH,EAAEoH,MACvDkC,WAAY,SAACC,EAAWhC,GAAS,OAAAF,GAAa,SAAUE,EAAMtC,KAC9DuE,gBAAiB,WAAM,OAAAxB,GAAkB,WACzCyB,aAAczJ,EAAE,UAChB0J,gBAAoC,WAAnBjH,GAEG,WAAnBA,GACC,kBAAC,EAAAiG,OAAM,CACLmB,GAAG,gBACHzH,QAAS,EAAAuG,cAAA,SAAsB,aACpB,gBACXC,SA9UiB,WAC3B7E,GAA2BD,IA8UjB+E,WAAY3B,GAAsB,UAClC4B,OAAQhF,EACRzC,SAnPiB,SAC3B0H,EACAC,EACA6B,GAEIA,GAAejE,GAAe,UAClCtB,GAAa,SAAU,CAAEvD,MAAOiH,EAAUpB,WAAYjB,SAAS,IAAQ,GACvE1B,GAAoBiB,OAAS,GAAKnC,GAA0B,IA6OlD+G,gBAAiB9K,EAAE,oBACnBsC,UAAU,uBAET2C,GAAoBI,KAAI,SAACyC,EAAQmB,GAChC,IAAM2B,EAAYG,SAASC,eAAe,iBAC1C,OACE,kBAAC,EAAA9B,aAAY,CACXC,WAAYrB,EAAOjD,UAAaH,IAAe2D,GAAuB,SAAUP,EAAO/F,OACvFwD,IAAK0D,EACLlH,MAAO+F,EAAO/F,OAEb2C,IACC,kBAAC,EAAA+F,QAAO,CAACC,UAAWhG,GAAaiG,QAASpC,KAAkBqC,UAAWA,QAAaK,IAErFnD,EAAOhG,YAOpB,kBAAC,EAAAsH,cAAa,CACZC,MAAOnC,GAAsB,SAC7BoC,WAAY,SAACC,EAAWhC,GAAS,OAAAF,GAAa,QAASE,IACvDiC,gBAAiB,WAAM,OAAAxB,GAAkB,UACzCyB,aAAczJ,EAAE,SAChB0J,gBAAmD,WAAlCjH,MAAAA,OAAc,EAAdA,EAAgB/B,gBAEC,UAAjC+B,EAAe/B,eACd,kBAAC,EAAAiJ,WAAU,CAACrH,UAAU,6CACpB,kBAAC,EAAAsH,UAAS,CACRhL,KAAK,QACLiL,GAAG,eACHC,KAAK,SAAQ,aACF,sBACXG,YAAajK,EAAE,mBACf+J,WAAYvF,IAAgBE,GAAc,EAAAsF,iBAAA,MAAyB,EAAAA,iBAAA,QACnEE,SA1Wa,SAACC,GAC1B9F,EAAmB8F,IAClB3F,IAAgBC,IAAgB,IAyWrB2F,WAAYtD,GACZ/E,MAAOqC,EACPiG,IAAK9G,IAEP,kBAAC,EAAA+G,OAAM,CACLnB,YAAa3E,IAAgBE,GAC7BtC,QAAS,EAAAmI,cAAA,QACTC,QAAS,WAAM,OAAA/D,GAAS,UAAQ,aACrB,iBAEX,kBAAC,KAAU,SAEVjC,IAAgBE,KACjB,kBAAC,EAAA+F,QAAO,CACNC,UAAWhG,KAAgBF,GAC3BmG,QAASpC,GAAe,SACxBqC,UAAWrH,MAMrB,kBAAC,EAAA6F,cAAa,CACZC,MAAsC,QAA/B,EAAAnC,GAAsB,iBAAS,eAAE7B,KAAI,SAAC+B,GAAQ,OAAApH,EAAEoH,MACvDkC,WAAY,SAACC,EAAWhC,GAAS,OAAAF,GAAa,SAAUE,EAAMpC,KAC9DqE,gBAAiB,WAAM,OAAAxB,GAAkB,WACzCyB,aAAczJ,EAAE,UAChB0J,gBAAoC,WAAnBjH,GAEG,WAAnBA,GACC,kBAAC,EAAAiG,OAAM,CACLmB,GAAG,gBACHzH,QAAS,EAAAuG,cAAA,SAAsB,aACpB,gBACXC,SAtZiB,WAC3B3E,GAA2BD,IAsZjB6E,WAAY3B,GAAsB,UAClC4B,OAAQ9E,EACR3C,SArTiB,SAC3B0H,EACAC,EACA6B,GAEIA,GAAejE,GAAe,UAClCtB,GAAa,SAAU,CAAEvD,MAAOiH,EAAUpB,WAAYjB,SAAS,IAAQ,IAgT7DmE,gBAAiB9K,EAAE,oBACnBsC,UAAU,uBAET6C,GAAoBE,KAAI,SAACyC,EAAQmB,GAChC,IAAM2B,EAAYG,SAASC,eAAe,iBAC1C,OACE,kBAAC,EAAA9B,aAAY,CACXC,WAAYrB,EAAOjD,UAAaH,IAAe2D,GAAuB,SAAUP,EAAO/F,OACvFwD,IAAK0D,EACLlH,MAAO+F,EAAO/F,OAEb2C,IACC,kBAAC,EAAA+F,QAAO,CAACC,UAAWhG,GAAaiG,QAASpC,KAAkBqC,UAAWA,QAAaK,IAErFnD,EAAOhG,cAWpBoJ,GAAoB,kE,8EAEpBzH,EACK,GAAMA,GAAkB,IAD7B,M,OACF0H,EAAO,S,wBAETA,GACE3H,EAAU,2BAAmC,CAC3CN,SAAQ,EACRE,eAAc,EACdD,QAAO,I,YA0BPiI,GAAmC,CACvC,CACEC,KAvBEtI,EAEA,kBAAC,EAAA0H,QAAO,CAACE,QAAS3H,GAChB,kBAAC,EAAAsH,OAAM,CACLlI,QAAQ,UACRoI,QAASU,GAAiB,cACb,iCACbI,eAAgBvI,GAEf/C,EAAE,2BAMT,kBAAC,EAAAsK,OAAM,CAAClI,QAAQ,UAAUoI,QAASU,GAAiB,cAAe,kCAChElL,EAAE,2BASP,CACEqL,KAAMpI,IA8BV,OA1BIP,GAASA,EAAQ,GAAK0I,GAAalF,OAAS,GAC9CkF,GAAa/E,KAAK,CAChBgF,KACE,kBAAC,KAAa,CACZE,SAAS,8BACTC,UAAW9I,EACXC,KAAMA,EACNC,QAASA,EACT6I,WAAW,EACXC,OAAQ,CACNC,gBAAiB3L,EAAE,sBACnB4L,cAAe5L,EAAE,mBACjB6L,YAAa7L,EAAE,iBACf8L,eAAgB9L,EAAE,oBAClB+L,WAAY/L,EAAE,gBACdgM,WAAYhM,EAAE,gBACdiM,cAAejM,EAAE,kBACjBkM,SAAUlM,EAAE,gBAIlBoC,QAAS,aACT+J,UAAW,CAAEC,QAAS,gBAKxB,kBAAC,KAAU,CACTC,aAAc,CACZxC,GAAI,mBACJyC,gBA/eU,WACdxJ,EAAiB,IACjB6B,IAAe,IA8eX4H,gCAAiC,KACjCC,MAAO,CAAEC,GAAI,YAEfC,iBAAkB,CAAEC,WAAY,kBAAC,KAAU,MAAKC,WAAY,MAC5DpE,iBAAkBA,GAClB4C,aAAcA,M,4CCzmBdyB,EAA2D,SAAC,G,IAIxDC,EAJ0D5M,EAAM,SAAE6M,EAAY,eAC9E/M,GAAM,IAAAC,kBAAgB,EA8BxB+M,EAnBgB,WACpB,OAAQ9M,MAAAA,OAAM,EAANA,EAAQQ,eACd,KAAK,cACH,OAAO,kBAAC,KAAe,CAAC4B,UAAU,0CACpC,KAAK,cACH,OAAO,kBAAC,KAAqB,CAACA,UAAU,uCAC1C,KAAK,cACH,OAAO,kBAAC,KAAW,MACrB,KAAK,cACL,KAAK,cACH,OAAO,kBAAC,EAAA2K,QAAO,CAACC,KAAK,KAAI,aAAaH,EAAY,iBAAiB,yBACrE,KAAK,cACL,KAAK,cACH,OACF,QACE,OAAO,kBAAC,KAAW,OAINI,GAEnB,OACE,kBAAC,EAAAC,KAAI,KACFJ,GAAc,kBAAC,EAAAK,SAAQ,CAACC,OAAQ,CAAElB,QAAS,aAAeY,GAC3D,kBAAC,EAAAK,SAAQ,KA/BmB,KADxBP,EAAiB,aAAqB,SAACS,GAAO,OAAAA,EAAGxL,SAAU7B,MAAAA,OAAM,EAANA,EAAQQ,mBACtDwF,OACVlG,EAAE8M,EAAe,GAAG/K,OAEpB/B,EAAE,uB,WC+CFwN,EAA+B,SAC1CxN,EACAE,EACA6M,EACAU,GAEA,IAAMC,EAAuB,CAC3BnM,MAAO,GACPoM,mBAAoB,GACpBC,YAAa,IAMTC,EAAoBJ,EACtB,gHACA,GAeJ,OAbIvN,IAAW,YACbwN,EAAOnM,MAAWvB,EAAE,mBAAkB,IACtC0N,EAAOC,mBAAqB3N,EAAE,UAC9B0N,EAAOE,YAAc5N,EAAE,kCAAmC,CAAE+M,aAAY,IAAMc,GAE9E3N,IAAW,eACXA,IAAW,mBACXA,IAAW,iBAEXwN,EAAOnM,MAAWvB,EAAE,mBAAkB,IACtC0N,EAAOC,mBAAqB3N,EAAE,UAC9B0N,EAAOE,YAAc5N,EAAE,kDAAmD,CAAE+M,aAAY,IAAMc,GAEzFH,GAGHI,EAA+D,SAAC,G,IACpExO,EAAU,aACVyO,EAAkB,qBAClBC,EAAc,iBACdC,EAAgB,mBAChB9K,EAAO,UACPR,EAAI,OACJC,EAAO,UACPF,EAAK,QACLwL,EAAe,kBACfC,EAAQ,WACRC,EAAa,gBACbvL,EAAa,gBACbC,EAAgB,mBAChBN,EAAiB,oBACjBC,EAAc,iBACd4L,EAAO,UACPC,EAAU,aACVC,EAAY,eACZd,EAAoB,uBACpBzK,EAAoB,uBACpBD,EAAsB,yBACtByL,EAAY,eACZvL,EAAgB,mBAChBwL,EAAmB,sBACnBC,EAAiB,oBACjBtL,EAAc,iBACdF,EAAQ,WAEFyL,GAAO,IAAAC,WAEQC,KADL,IAAAC,cAAe,IAAE,KACQ,IAAE,YACnCC,IAAgB,IAAAC,gBAAiB,IAAE,YACrCC,EAAWF,GAAeA,IACxB/O,GAAM,IAAAC,kBAAgB,EACxBiP,EAAe,IAAIC,gBAAgBC,SAASC,QAC5CC,GAAU,IAAAC,cACRC,IAAa,IAAAC,aAAc,IAAE,SAE/B,GAA2B,UAAzBjM,EAAS,YAAEkM,EAAS,YACtB,GAA0C,IAAAvP,UAAmC,IAA5EwP,GAAgB,KAAEC,GAAmB,KACtC,IAA4B,IAAAzP,YAA3B0P,GAAS,MAAEC,GAAY,MACxB,IAAoC,IAAA3P,UAAmB,IAAtD4P,GAAa,MAAEC,GAAgB,MAChC,IAAoB,IAAA7P,UAA8B,IAAjD8P,GAAK,MAAEC,GAAQ,MAChB,IAA8B,IAAA/P,YAA7BgQ,GAAU,MAAEC,GAAa,MAE1BC,GAAe,CACnB,CAAE9O,MAAOvB,EAAE,QAASsQ,WAAY,CAAC,EAAAC,WACjC,CAAEhP,MAAOvB,EAAE,kBAAmBsQ,WAAY,CAAC,EAAAC,WAC3C,CAAEhP,MAAOvB,EAAE,UAAWsQ,WAAY,CAAC,EAAAC,WACnC,CAAEhP,MAAOvB,EAAE,SAAUsQ,WAAY,CAAC,EAAAC,WAClC,CAAEhP,MAAOvB,EAAE,UAAWsQ,WAAY,CAAC,EAAAC,WACnC,CAAEhP,MAAOvB,EAAE,gBAAiBsQ,WAAY,CAAC,EAAAC,aAG3C,IAAA/P,YAAU,WACRmO,MAAAA,GAAAA,EAAMwB,aAAaK,MAAK,SAACL,GAAe,OAAAC,GAAcD,QACrD,CAACxB,IAEJ,IASM8B,IAAiB,IAAAC,cACrB,SAAC9R,EAAcmD,GACbmN,EAAayB,IAAI/R,EAAMmD,EAAM6F,cAE/B,CAACsH,KAGH,IAAA1O,YAAU,WACH+N,GACHuB,GAAa,MAEd,CAACvB,IAEJ,IAAMqC,GAA+B,WACnC,GAAIlC,EAAmB,CAErB,IAKMmC,EALqCnC,EAAkBlJ,QAC3D,SAACsL,GAAM,OAAAA,EAAE5Q,SAAW,kBAA8B4Q,EAAE5Q,SAAW,gBAK9DsF,QAAO,SAACsL,GAAM,OAAAf,GAAcjK,WAAU,SAACiL,GAAO,OAAAA,IAAOD,EAAElS,QAAQ,KAC/DyG,KAAI,SAACyL,GAAM,OAAAA,EAAElS,MAAQ,MAElBoS,GAAgB,0CAAiBjB,IAAkBc,GAEzDb,GAAiBgB,GAGjBA,EAAiB9I,SAAQ,SAAC4I,IACLpC,MAAAA,OAAiB,EAAjBA,EAAmB5I,WAAU,SAACuF,GAAS,OAAAA,EAAKzM,OAASkS,MACvD,KAzCQ,SAAClS,GAC9B,IAAMqK,EAAQ8G,GAAcjK,WAAU,SAACgL,GAAM,OAAAA,IAAMlS,KACnD,GAAIqK,GAAS,EAAG,CACd,IAAMgI,EAAOtL,OAAOC,OAAO,GAAImK,IAC/BkB,EAAK7K,OAAO6C,EAAO,GACnB+G,GAAiBiB,IAqCbC,CAAuBJ,GACvBtB,GACEA,EAAS,CACPjO,MAAOvB,EAAE,6BAA8B,CAAEpB,KAAMkS,IAC/C1O,QAAS,EAAAC,aAAA,iBAsDrB,IAAA7B,YAAU,WACJmC,EAAO,GACyB,IAA9BoL,EAAmB7H,SACrBuK,GAAe,QAAS9N,EAAO,GAAGiF,YAClC6I,GAAe,UAAW7N,EAAQgF,YAClC0H,EAAQjJ,KAAK,CACXgJ,OAAQH,EAAatH,cAK3BgJ,KA1DmC,WACnC,IAAMO,EAAiCC,KAAKC,MAAMD,KAAKE,UAAUrB,KACjE,GAAIA,IAASA,GAAM/J,OAAS,EAAG,CAC7B,IAAM,EAAyBP,OAAOC,OAAO,GAAImI,GAAoBvI,QACnE,SAAC6F,GAAuB,OAAAA,EAAKnL,SAAW,YAAwBmL,EAAKnL,SAAW,eAElFiR,EAAejJ,SAAQ,SAACmD,G,QAChBkG,EAA4B,EAAuB/L,QACvD,SAACgM,GAAyB,OAAAnG,EAAKxB,KAAO2H,EAAO3H,MAE3C0H,GAAaA,EAAUrL,OAAS,IAC9BqL,EAAU,GAAGrR,SAAW,WAC1BsP,GACEA,EAAS,CACPjO,MAAOvB,EAAE,8BACToC,QAAS,EAAAC,aAAA,QACTuL,YACE,0BACE6D,wBAAyB,CAAEC,OAAQ1R,EAAE,wBAAyB,CAAEpB,KAAkB,QAAZ,EAAA2S,EAAU,UAAE,eAAE3S,UAGxF+S,WAAY,6BAEPJ,EAAU,GAAGrR,SAAW,aACjCsP,GACEA,EAAS,CACPjO,MAAOvB,EAAE,qBACToC,QAAS,EAAAC,aAAA,OACTuL,YACE,0BAAM6D,wBAAyB,CAAEC,OAAQ1R,EAAE,uBAAwB,CAAEpB,KAAkB,QAAZ,EAAA2S,EAAU,UAAE,eAAE3S,UAE3F+S,WAAY,gCAMxB,IAAMC,EAAmBjM,OAAOC,OAC9B,GACAmI,MAAAA,OAAkB,EAAlBA,EAAoBvI,QAClB,SAAC6F,GAAuB,OAAAA,EAAKnL,SAAW,mBAA+BmL,EAAKnL,SAAW,kBAG3FgQ,GAAS0B,GAiBTC,KACC,CAAClP,EAAMC,EAASmL,EAAoBW,IAEvC,IA4FQoD,GACAC,GA7FFC,GAA8B,SAClCjL,EACAkL,EACAC,G,UAEuB,kBAAnBA,GACFlE,EAAeiE,GAEfnC,GAAamC,MAAAA,OAAY,EAAZA,EAAcrT,OACC,qBAAnBsT,GACTjE,EAAiBgE,GACjBnC,GAAamC,MAAAA,OAAY,EAAZA,EAAcrT,OACC,oBAAnBsT,GACTC,GAAuBF,GAGzB,IAAMG,EAA0D,QAA3C,EAA4B,QAA5B,EAAa,QAAb,EAAArL,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAEoL,qBAAa,eAAEA,qBAAa,eAAEC,gBAC9DF,MAAAA,GACDA,EAA6BG,SAiE5BC,GAAiB,SAAC,G,IAAE5T,EAAI,OAAE6T,EAAG,MACjC,OACE,kBAAC,EAAAC,KAAI,CAACC,GAAO1D,EAAQ,KAAIwD,MAAAA,OAAG,EAAHA,EAAK5I,IAAI,cAAc,0BAC7CjL,IA2CDuT,GAAyB,SAAC1Q,GACtB,IAAAvB,EAAiBuB,EAAQ,OAAjB7C,EAAS6C,EAAQ,KAEjC,GADAmO,GAAoBnO,GAChBvB,IAAW,YACb0S,GAAiBnR,OACZ,CACC,MAA6C+L,EACjDxN,EACAE,EACAtB,EACA6O,GAJMlM,EAAK,QAAEoM,EAAkB,qBAAEC,EAAW,cAO9CpK,EAAU,2BAAmC,CAC3CqP,eAAgB3S,EAChB4S,iBAAkBrR,EAClBF,MAAK,EACLwR,mBAAoB,CAClBvI,QAASoI,GACT9Q,MAAO6L,GAETqF,UAAW,CACTpF,YAAW,OAMbgF,GAAmB,SAAOnR,GAAsB,uD,iFAMpD,QAAmBwJ,KALbgI,GAAatD,MAAAA,QAAgB,EAAhBA,GAAkB9F,MAAMpI,MAAAA,OAAQ,EAARA,EAAUoI,KAMnD,MAAM,IAAIqJ,MAAM,gCAEE,SAAMvE,MAAAA,OAAI,EAAJA,EAAMwE,IAAIC,Y,OAA9BC,EAAc,SACdC,EAAc,IAAI,EAAAC,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXxE,SAAQ,KAGZV,IACAuB,I,iBAGE,O,sBAAA,GAAM4D,EAAYG,gBAAgBR,GAAY,GAAMzC,MAAK,WACvDV,QAAa7E,GACbwD,GAAoB,GACpBtL,IACAyM,QAAoB3E,O,cAJtB,S,+BAOIyI,OAAM,GACN,QAAkB,KACpBA,EAAuB,QAAd,IAAMC,gBAAQ,eAAEC,KAAKF,QAOhClE,GACEA,EAAS,CACPjO,MAAOvB,EAAE,+BACToC,QAAS,EAAAC,aAAA,OACTuL,YAAa8F,I,+BAwBfG,GAA2B,SAACC,GAChC,OAAQA,EAAUpT,eAChB,IAAK,OACH,OAAO,EACT,IAAK,iBACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,aACH,OAAO,EACT,QACE,SAcAqT,GAAY,WAChB,IAAMC,GAAiB3F,MAAAA,OAAO,EAAPA,EAAS4F,MAAM,OAAQ,GAC9C,GAAID,EAAK9N,OAAS,EAChB,MAAO,CACL+C,MAAO4K,GAAyBG,EAAK,IACrCE,UAAWF,EAAK,KAAO,EAAAG,gBAAA,IAAsB,EAAAA,gBAAA,IAAsB,EAAAA,gBAAA,OAkBzE,OACE,oCACE,kBAAC5R,EAAc,CACbjD,WAAYA,EACZmD,eAAgBA,EAChBD,kBAAmBA,EACnBE,MAAOA,EACPC,KAAMA,EACNC,QAASA,EACTC,cAAeA,EACfC,iBAAkBA,EAClBC,uBAAwBA,EACxBC,qBAAsBA,EACtBC,iBAAkBA,EAClBG,eAAgBA,EAChBF,SAAUA,EACVC,QAASA,IAEX,kBAAC,KAAQ,CACPiR,WAAY,CACVC,MAAOhE,GACPiE,MA1MAxC,GAAgD,GAChDC,IAAuB,QAAoBpP,EAAMC,EAASwL,GAC3DF,GAGLH,EAAmB7F,SAAQ,SAACuK,GAClB,IAAA7T,EAA4D6T,EAAG,KAAzD8B,EAAsD9B,EAAG,eAAzCvN,EAAsCuN,EAAG,OAAjC+B,EAA8B/B,EAAG,WAArBvS,EAAkBuS,EAAG,OAAbgC,EAAUhC,EAAG,MACjEiC,EAA2B1U,EAAEuU,GAC7BI,EAAoB3U,EAAEkF,GAC5B4M,GAASzL,KAAK,CACZgO,MAAO,CACL,CACE9S,MACErB,IAAW,kBAA8BA,IAAW,WAChDtB,EACA4T,GAAe,CAAE5T,KAAI,EAAE6T,IAAG,KAElCiC,EACAC,EACAF,EACA,CACElT,MAAO,kBAACsL,EAAY,CAAC3M,OAAQA,EAAQ6M,aAAcnO,KAErD,CACE2C,OAAO,QAAiBiT,EAAYxU,EAAE,UAG1CiS,aAAcQ,OAGXX,KA3BE,QAAmB,CAAEC,aAAY,GAAE6C,SAAU,kBAAC,EAAAC,SAAQ,MAAK3O,OAAQmK,GAAanK,UAwMnF,aAAclG,EAAE,yBAChB8U,eA3Ke,SAACC,GACtB,OAxGwB,SAACA,G,UACzB,IAAK7G,EACH,MAAO,GAET,IAAM+D,EAA6B8C,EAAQ9C,aAC3C,GAAIA,EAAa/R,SAAW,kBAA8B+R,EAAa/R,SAAW,aAChF,MAAO,GAET,IACI8U,EADEC,EAAuBhD,EAAawC,QAAUjG,GAAgB2B,GAkDpE,OAhDK8E,IACHD,EAAkB,CAChBE,SAAS,EACT/L,YAAY,EACZgM,MAAO,CACLC,cAAe,OACfC,OAAQ,aAI6B,E,iCAEvC9T,MAAOvB,EAAE,gBACT6J,GAAI,iBAAe,EAClB,eAAgB,6BACjB,EAAAW,QAAS,SAACzD,GACR,OAAAkO,GAAwBjD,GAA4BjL,EAAOkL,EAAc,kBAAgB,GACxF+C,GAAe,CAClBM,aAAc,CACZC,SAAU,OACV5K,QAAS3K,EAAE,mC,iCAIbuB,MAAOvB,EAAE,+BACT6J,GAAI,oBAAkB,EACrB,eAAgB,gCACjB,EAAAW,QAAS,SAACzD,GACR,OAAAkO,GAAwBjD,GAA4BjL,EAAOkL,EAAc,qBAAmB,GAC3F+C,GAAe,CAClBM,aAAc,CACZC,SAAU,OACV5K,QAAS3K,EAAE,sC,iCAIbuB,MAAOvB,EAAE,mBACT6J,GAAI,mBAAiB,EACpB,eAAgB,4BACjB,EAAAW,QAAS,SAACzD,GACR,OAAAkO,GAAwBjD,GAA4BjL,EAAOkL,EAAc,oBAAkB,GAC1F+C,GAAe,CAClBM,aAAc,CACZC,SAAU,OACV5K,QAAS3K,EAAE,qCAkDVwV,CAAkBT,IA2KnBU,OAzDO,SAAC1M,EAAaE,EAAeiL,EAAmBwB,G,MACzDC,EAAczB,GACH,QAAX,EAAAH,YAAW,eAAE9K,SAAUA,GAAgC,iBAAvByM,EAAUE,WAG5CD,EAAc,QAEhBrH,EA7C+B,SAACrF,GAChC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,iBACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,aACT,QACE,MAAO,IA8BG4M,CAAyB5M,GAAM,IAAI0M,IAmD3CG,OAAQ/B,KACRgC,4BAA4B,GAE9BlG,UAAWA,GACXmG,WAzCa,SAACjP,EAAYkP,EAAkBxD,G,QACxCR,EAAiBQ,EAAG,aACtByD,EAAgC,QAAb,EAAAnP,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAE6C,KAClCqM,EAAuB,QAAb,EAAApP,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAEkP,QAGN,WAArBD,GAA4D,OAA3BC,MAAAA,OAAO,EAAPA,EAASzV,iBAC5CsN,EAAeiE,GACfnC,GAAamC,MAAAA,OAAY,EAAZA,EAAcrT,QAkCzBwX,cAAc,mBACd5H,aAAcA,IAEfT,EAAmB7H,OAAS,GAAKgI,GAChC,kBAAC,KAAa,CACZmI,gBAAiB,CACfjU,QAAS,eAEXkU,WAAY,CACV/U,MAAOvB,EAAE,qBAEXuW,oBAAqB,CACnBC,KAAMxW,EAAE,wCAIb0C,EAAQ,GACP,kBAAC,KAAa,CACZ6I,SAAS,iCACTC,UAAW9I,EACXN,QAAS,EAAAqU,kBAAA,OACT9T,KAAMA,EACNC,QAASA,EACT8I,OAAQ,CACNC,gBAAiB3L,EAAE,mBACnB4L,cAAe5L,EAAE,mBACjB6L,YAAa7L,EAAE,iBACf8L,eAAgB9L,EAAE,oBAClB+L,WAAY/L,EAAE,gBACdgM,WAAYhM,EAAE,gBACdiM,cAAejM,EAAE,kBACjBkM,SAAUlM,EAAE,kB","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/filter-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/pending-icon.js","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.FilterIconConfig = {\n  name: 'FilterIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.FilterIcon = require('../createIcon').createIcon(exports.FilterIconConfig);\nexports[\"default\"] = exports.FilterIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PendingIconConfig = {\n  name: 'PendingIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,895.9 C300.3,895.9 128.1,723.8 128.1,511.9 C128.1,300.2 300.3,127.9 512.1,127.9 C723.8,127.9 896,300.2 896.1,511.9 C896.1,723.7 723.8,895.9 512.1,895.9 M512.1,0 C229.7,0 0,229.7 0,512 C0,794.3 229.7,1024 512.1,1024 C794.3,1024 1024,794.3 1024,512 C1024,229.7 794.3,0 512.1,0 M704,288 L704,272 C704,263.2 696.8,256 688,256 L336,256 C327.2,256 320,263.2 320,272 L320,288 C320,447 480,449 480,512 C480,575 320,575 320,736 L320,752 C320,760.8 327.2,768 336,768 L688,768 C696.8,768 704,760.8 704,752 L704,736 C704,576 544,577 544,512 C544,447 704,448 704,288 M603.9,704 L420.3,704 C417.3,704 418.2,695 419.4,686.8 C426.8,634.5 480.1,617.4 495.2,612.3 C512.3,606.6 512.3,606.6 528.9,612.3 C544,617.6 597.6,635.4 604.8,687 C605.9,695.2 606.9,704 603.9,704',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PendingIcon = require('../createIcon').createIcon(exports.PendingIconConfig);\nexports[\"default\"] = exports.PendingIcon;","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { Tabs, Tab, TabTitleText, Alert, AlertVariant } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawerProps, MASLoading } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\nimport { ConnectionTabProps } from './ConnectionTab';\nimport { DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\n\nexport const ConnectionTab = React.lazy(() => import('./ConnectionTab'));\nexport const DetailsTab = React.lazy(() => import('./DetailsTab'));\nexport const MASDrawer = React.lazy(() => import('@app/common/MASDrawer/MASDrawer'));\n\nexport type InstanceDrawerProps = Pick<ConnectionTabProps, 'tokenEndPointUrl'> &\n  Omit<MASDrawerProps, 'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\n\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  tokenEndPointUrl,\n  notRequiredDrawerContentBackground,\n}) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n  const { name, status } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrap_server_host } = instanceDetail || {};\n    return bootstrap_server_host?.endsWith(':443') ? bootstrap_server_host : `${bootstrap_server_host}:443`;\n  };\n\n  const isKafkaPending = status === InstanceStatus.ACCEPTED || status === InstanceStatus.PREPARING;\n\n  const panelBodyContent = () => {\n    return (\n      <React.Suspense fallback={<MASLoading />}>\n        <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n          <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n            <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('connection')}</TabTitleText>}\n            data-testid=\"drawerStreams-tabConnect\"\n          >\n            <ConnectionTab\n              mainToggle={mainToggle}\n              activeKey={activeTab2Key}\n              instance={instanceDetail}\n              externalServer={getExternalServer()}\n              onSelect={onSelectConnectionTab}\n              isKafkaPending={isKafkaPending}\n              tokenEndPointUrl={tokenEndPointUrl}\n            />\n          </Tab>\n        </Tabs>\n      </React.Suspense>\n    );\n  };\n\n  const alertMessage = () => {\n    if (isKafkaPending) {\n      return (\n        <Alert\n          isInline\n          variant={AlertVariant.info}\n          title={t('kafka_instance_not_ready_inline_message')}\n          className=\"pf-u-mt-sm\"\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <React.Suspense fallback={<MASLoading />}>\n      <MASDrawer\n        isExpanded={isExpanded}\n        isLoading={isLoading}\n        onClose={onClose}\n        panelBodyContent={panelBodyContent()}\n        drawerHeaderProps={{\n          text: { label: t('instance_name') },\n          title: { value: name, headingLevel: 'h1' },\n        }}\n        data-ouia-app-id={dataOuiaAppId}\n        inlineAlertMessage={alertMessage()}\n        notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n      >\n        {children}\n      </MASDrawer>\n    </React.Suspense>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useState, useRef, useEffect, ReactElement } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT, InstanceStatus } from '@app/utils';\nimport { CloudProvider } from '@rhoas/kafka-management-sdk';\nimport { useFederated } from '@app/models';\nimport './StreamsToolbar.css';\n\n/**\n * Todo: remove props isDisabledCreateButton, buttonTooltipContent and labelWithTooltip after summit\n */\nexport type StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  isDisabledCreateButton?: boolean;\n  buttonTooltipContent?: string | undefined;\n  labelWithTooltip?: ReactElement | undefined;\n  onCreate?: () => void;\n  refresh?: () => void;\n  cloudProviders?: Array<CloudProvider>;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  isDisabledCreateButton,\n  buttonTooltipContent,\n  labelWithTooltip,\n  onCreate,\n  refresh,\n  cloudProviders,\n}) => {\n  const { t } = useTranslation();\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n  const { showModal } = useRootModalContext();\n  const { preCreateInstance } = useFederated() || {};\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((s) => s.value !== InstanceStatus.PREPARING && s.value !== InstanceStatus.DELETED)\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status' && filterValue?.filter(({ value }) => value === InstanceStatus.PROVISIONING);\n      const deprovisionStatus =\n        filterKey === 'status' && filterValue?.filter(({ value }) => value === InstanceStatus.DEPROVISION);\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (provisioningStatus?.length > 0 || deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <Select\n          variant={SelectVariant.single}\n          aria-label=\"Select filter\"\n          onToggle={onFilterToggle}\n          selections={filterSelected}\n          isOpen={isFilterExpanded}\n          onSelect={onChangeSelect}\n        >\n          {mainFilterOptions.map((option, index) => (\n            <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n              {option.label}\n            </SelectOption>\n          ))}\n        </Select>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"name\"\n                id=\"filterText\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                placeholder={t('filter_by_name_lower')}\n                onChange={onNameInputChange}\n                onKeyPress={onInputPress}\n                value={nameInputValue}\n                ref={nameInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                isDisabled={!isNameValid || isMaxFilter}\n                onClick={() => onFilter('name')}\n                aria-label=\"Search instances\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isNameValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isNameValid}\n                  content={tooltipContent('name')}\n                  reference={nameInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n          showToolbarItem={filterSelected === 'cloud_provider'}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <Select\n              id=\"cloud-provider-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select cloud provider\"\n              onToggle={onCloudProviderFilterToggle}\n              selections={getSelectionForFilter('cloud_provider')}\n              isOpen={isCloudProviderFilterExpanded}\n              onSelect={onCloudProviderFilterSelect}\n              placeholderText={t('filter_by_cloud_provider')}\n              className=\"select-custom-width\"\n            >\n              {cloudProviderFilterOptions.map((option, index) => {\n                const reference = document.getElementById('cloud-provider-select');\n                return (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip isVisible={isMaxFilter} content={tooltipContent()} reference={reference || undefined} />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n          showToolbarItem={filterSelected === 'region'}\n        >\n          {filterSelected === 'region' && (\n            <Select\n              id=\"region-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select region\"\n              onToggle={onRegionFilterToggle}\n              selections={getSelectionForFilter('region')}\n              isOpen={isRegionFilterExpanded}\n              onSelect={onRegionFilterSelect}\n              placeholderText={t('filter_by_region')}\n              className=\"select-custom-width\"\n            >\n              {regionFilterOptions.map((option, index) => {\n                const reference = document.getElementById('region-select');\n                return (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip isVisible={isMaxFilter} content={tooltipContent()} reference={reference || undefined} />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n              <TextInput\n                name=\"owner\"\n                id=\"filterOwners\"\n                type=\"search\"\n                aria-label=\"Search filter input\"\n                placeholder={t('filter_by_owner')}\n                validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                onChange={onOwnerInputChange}\n                onKeyPress={onInputPress}\n                value={ownerInputValue}\n                ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                isDisabled={!isOwnerValid || isMaxFilter}\n                variant={ButtonVariant.control}\n                onClick={() => onFilter('owner')}\n                aria-label=\"Search owners\"\n              >\n                <SearchIcon />\n              </Button>\n              {(!isOwnerValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isOwnerValid}\n                  content={tooltipContent('owner')}\n                  reference={ownerInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n          showToolbarItem={filterSelected === 'status'}\n        >\n          {filterSelected === 'status' && (\n            <Select\n              id=\"status-select\"\n              variant={SelectVariant.checkbox}\n              aria-label=\"Select status\"\n              onToggle={onStatusFilterToggle}\n              selections={getSelectionForFilter('status')}\n              isOpen={isStatusFilterExpanded}\n              onSelect={onStatusFilterSelect}\n              placeholderText={t('filter_by_status')}\n              className=\"select-custom-width\"\n            >\n              {statusFilterOptions.map((option, index) => {\n                const reference = document.getElementById('status-select');\n                return (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip isVisible={isMaxFilter} content={tooltipContent()} reference={reference || undefined} />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const handleCreateModal = async () => {\n    let open;\n    if (preCreateInstance) {\n      open = await preCreateInstance(true);\n    }\n    open &&\n      showModal(MODAL_TYPES.CREATE_KAFKA_INSTANCE, {\n        onCreate,\n        cloudProviders,\n        refresh,\n      });\n  };\n\n  const createButton = () => {\n    if (isDisabledCreateButton) {\n      return (\n        <Tooltip content={buttonTooltipContent}>\n          <Button\n            variant=\"primary\"\n            onClick={handleCreateModal}\n            data-testid={'tableStreams-buttonCreateKafka'}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n    return (\n      <Button variant=\"primary\" onClick={handleCreateModal} data-testid={'tableStreams-buttonCreateKafka'}>\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: createButton(),\n    },\n    {\n      item: labelWithTooltip,\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length > 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: React.FunctionComponent<StatusColumnProps> = ({ status, instanceName }) => {\n  const { t } = useTranslation();\n\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size=\"md\" aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const statusIcon = getStatusIcon();\n\n  return (\n    <Flex>\n      {statusIcon && <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { Link, useHistory } from 'react-router-dom';\nimport {\n  IAction,\n  IExtraColumnData,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  isServiceApiError,\n} from '@app/utils';\nimport {\n  MASEmptyState,\n  MASEmptyStateVariant,\n  MASPagination,\n  MASTable,\n  MODAL_TYPES,\n  useRootModalContext,\n} from '@app/common';\nimport { Configuration, DefaultApi, KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport './StatusColumn.css';\nimport { StreamsToolbar, StreamsToolbarProps } from './StreamsToolbar';\nimport { StatusColumn } from './StatusColumn';\nimport { AlertVariant, useAlert, useAuth, useConfig, useBasename } from '@bf2/ui-shared';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = StreamsToolbarProps & {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: (arg0?: boolean) => void;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n  loggedInUser: string | undefined;\n  isMaxCapacityReached?: boolean | undefined;\n  setWaitingForDelete: (arg0: boolean) => void;\n  currentUserkafkas: KafkaRequest[] | undefined;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined,\n  isMaxCapacityReached?: boolean | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const additionalMessage = isMaxCapacityReached\n    ? ' You might not be able to create a new instance because all of them are currently provisioned by other users.'\n    : '';\n\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_complete', { instanceName }) + additionalMessage;\n  } else if (\n    status === InstanceStatus.ACCEPTED ||\n    status === InstanceStatus.PROVISIONING ||\n    status === InstanceStatus.PREPARING\n  ) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName }) + additionalMessage;\n  }\n  return config;\n};\n\nconst StreamsTableView: React.FunctionComponent<StreamsTableProps> = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n  isMaxCapacityReached,\n  buttonTooltipContent,\n  isDisabledCreateButton,\n  loggedInUser,\n  labelWithTooltip,\n  setWaitingForDelete,\n  currentUserkafkas,\n  cloudProviders,\n  onCreate,\n}) => {\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n  const { t } = useTranslation();\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n  const { addAlert } = useAlert() || {};\n\n  const { showModal, hideModal } = useRootModalContext();\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest | undefined>({});\n  const [activeRow, setActiveRow] = useState<string>();\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  useEffect(() => {\n    auth?.isOrgAdmin().then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    if (currentUserkafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserkafkas.filter(\n        (k) => k.status === InstanceStatus.DEPROVISION || k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserkafkas?.findIndex((item) => item.name === k);\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t('kafka_successfully_deleted', { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_successfully_created'),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-success',\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_not_created'),\n                variant: AlertVariant.danger,\n                description: (\n                  <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />\n                ),\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems, currentUserkafkas]);\n\n  const onSelectKebabDropdownOption = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    const previousNode = event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const getActionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION || originalData.status === InstanceStatus.DELETED) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <Link to={`${basename}/${row?.id}`} data-testid=\"tableStreams-linkKafka\">\n        {name}\n      </Link>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({ loadingCount, skeleton: <Skeleton />, length: tableColumns.length });\n    }\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION || status !== InstanceStatus.READY\n                ? name\n                : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: getFormattedDate(created_at, t('ago')),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData) => {\n    return getActionResolver(rowData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status, name } = instance;\n    setSelectedInstance(instance);\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n        t,\n        status,\n        name,\n        isMaxCapacityReached\n      );\n\n      showModal(MODAL_TYPES.DELETE_KAFKA_INSTANCE, {\n        instanceStatus: status,\n        selectedItemData: instance,\n        title,\n        confirmButtonProps: {\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        },\n        textProps: {\n          description,\n        },\n      });\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n    const accessToken = await auth?.kas.getToken();\n    const apisService = new DefaultApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    onDelete();\n    hideModal();\n\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        setWaitingForDelete(true);\n        refresh();\n        setSelectedInstance(undefined);\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert &&\n        addAlert({\n          title: t('common.something_went_wrong'),\n          variant: AlertVariant.danger,\n          description: reason,\n        });\n    }\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        isDisabledCreateButton={isDisabledCreateButton}\n        buttonTooltipContent={buttonTooltipContent}\n        labelWithTooltip={labelWithTooltip}\n        cloudProviders={cloudProviders}\n        onCreate={onCreate}\n        refresh={refresh}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n        loggedInUser={loggedInUser}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { StreamsTableView };\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","ConnectionTab","DetailsTab","MASDrawer","InstanceDrawer","mainToggle","onClose","activeTab","instanceDetail","isExpanded","isLoading","children","dataOuiaAppId","tokenEndPointUrl","notRequiredDrawerContentBackground","t","useTranslation","status","useState","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","useEffect","selectedTab","toLowerCase","bootstrap_server_host","handleTab1Click","_","eventKey","onSelectConnectionTab","isKafkaPending","fallback","panelBodyContent","Tabs","activeKey","onSelect","Tab","title","TabTitleText","instance","externalServer","endsWith","drawerHeaderProps","text","label","value","headingLevel","inlineAlertMessage","Alert","isInline","variant","AlertVariant","className","StreamsToolbar","setFilterSelected","filterSelected","total","page","perPage","filteredValue","setFilteredValue","isDisabledCreateButton","buttonTooltipContent","labelWithTooltip","onCreate","refresh","cloudProviders","nameInputRef","useRef","ownerInputRef","showModal","preCreateInstance","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","s","map","updateFilter","key","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","push","isInputValid","test","trim","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","event","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","deprovisionStatus","isDisabledSelectOption","optionValue","tooltipContent","toggleGroupItems","ToolbarGroup","Select","SelectVariant","onToggle","selections","isOpen","_event","selection","index","SelectOption","isDisabled","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","showToolbarItem","InputGroup","TextInput","id","type","validated","ValidatedOptions","placeholder","onChange","input","onKeyPress","ref","Button","ButtonVariant","onClick","Tooltip","isVisible","content","reference","isPlaceholder","placeholderText","document","getElementById","undefined","handleCreateModal","open","toolbarItems","item","isAriaDisabled","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","default","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","StatusColumn","filteredstatus","instanceName","statusIcon","Spinner","size","getStatusIcon","Flex","FlexItem","spacer","st","getDeleteInstanceModalConfig","isMaxCapacityReached","config","confirmActionLabel","description","additionalMessage","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","loggedInUser","setWaitingForDelete","currentUserkafkas","auth","useAuth","basePath","useConfig","getBasename","useBasename","basename","searchParams","URLSearchParams","location","search","history","useHistory","addAlert","useAlert","hideModal","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","items","setItems","isOrgAdmin","setIsOrgAdmin","tableColumns","transforms","sortable","then","setSearchParam","useCallback","set","addAlertAfterSuccessDeletion","notPresentKafkas","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","addAlertAfterSuccessCreation","tableRow","loadingCount","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","previousNode","parentElement","previousSibling","focus","renderNameLink","row","Link","to","onDeleteInstance","instanceStatus","selectedItemData","confirmButtonProps","textProps","instanceId","Error","kas","getToken","accessToken","apisService","DefaultApi","Configuration","deleteKafkaById","reason","response","data","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","tableProps","cells","rows","cloud_provider","created_at","owner","cloudProviderDisplayName","regionDisplayName","skeleton","Skeleton","actionResolver","rowData","additionalProps","isUserSameAsLoggedIn","tooltip","style","pointerEvents","cursor","tooltipProps","position","getActionResolver","onSort","extraData","myDirection","property","getParameterForSortIndex","sortBy","hasDefaultCustomRowWrapper","onRowClick","rowIndex","clickedEventType","tagName","rowDataTestId","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant"],"sourceRoot":""}