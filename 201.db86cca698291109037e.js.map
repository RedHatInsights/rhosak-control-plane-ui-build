{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/constants/constants.ts","webpack://mk-ui-frontend/./src/app/components/EmptyState/EmptyState.tsx","webpack://mk-ui-frontend/./src/openapi/base.ts","webpack://mk-ui-frontend/./src/openapi/api.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/common/app-config.ts","webpack://mk-ui-frontend/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/TablePagination.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://mk-ui-frontend/./src/app/models/models.ts","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/Drawer/GenerateCredential.tsx","webpack://mk-ui-frontend/./src/app/Drawer/InstanceDrawer.tsx","webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/auth/AuthContext.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://mk-ui-frontend/./src/app/components/Loading/Loading.tsx"],"names":["InstanceStatus","EmptyState","createStreamsInstance","setCreateStreamsInstance","t","useTranslation","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","onClick","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","name","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequest","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","undefined","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","createServiceAccount","deleteKafkaById","id","localVarPath","encodeURIComponent","String","getKafkaById","listKafkas","page","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI","StatusColumn","status","statusDisplayName","ACCEPTED","Flex","FlexItem","spacer","default","toLowerCase","COMPLETED","CheckCircleIcon","className","FAILED","ExclamationCircleIcon","PROVISIONING","Spinner","IconSize","PendingIcon","getStatusIcon","DeleteInstanceModal","apiService","DefaultApi","getInstance","Services","singleton","confirmActionLabel","cancelActionLabel","title","onConfirm","selectedInstanceName","isModalOpen","setIsModalOpen","description","ModalVariant","titleIconVariant","instanceStatus","useState","instanceNameInput","setInstanceNameInput","handleModalToggle","Modal","isOpen","showClose","onClose","actions","key","ButtonVariant","isDisabled","toLocaleLowerCase","Text","dangerouslySetInnerHTML","__html","TextContent","TextInput","type","value","onChange","TablePagination","perPage","itemCount","isCompact","history","location","searchParams","URLSearchParams","setSearchParam","useCallback","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","Pagination","StreamsToolbar","filterSelected","namesSelected","setNamesSelected","mainToggle","total","isFilterExpanded","setIsFilterExpanded","inputValue","setInputValue","toggleGroupItems","ToolbarGroup","ToolbarFilter","chips","deleteChip","category","chip","index","findIndex","prevState","Object","assign","splice","deleteChipGroup","categoryName","Select","SelectVariant","onToggle","selections","disabled","map","option","SelectOption","InputGroup","placeholder","input","trim","SearchIcon","Toolbar","collapseListedFiltersBreakpoint","clearAllFilters","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItem","alignment","StreamsTableView","kafkaInstanceItems","onViewInstance","onConnectToInstance","refresh","token","useContext","AuthContext","apisService","addAlert","isDeleteModalOpen","setIsDeleteModalOpen","selectedInstance","setSelectedInstance","tableColumns","useEffect","tableRow","getActionResolver","rowData","onDelete","originalData","deleteActionTitle","getDeleteInstanceLabel","onSelectDeleteInstanceKebab","instance","onDeleteInstance","instanceId","res","AlertVariant","console","log","instanceName","config","getDeleteInstanceModalConfig","Card","Table","cells","rows","forEach","row","cloud_provider","region","cloudProviderDisplayName","regionDisplayName","actionResolver","_extraData","TableHeader","TableBody","Divider","widgetId","PaginationVariant","multi_az","CreateInstanceModal","newKafka","NewKafka","cloudRegionsAvailable","label","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","isFormValid","setIsFormValid","getTileIcon","provider","AwsIcon","color","event","isValid","message","Form","FormAlert","Alert","isInline","FormGroup","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","Tile","isSelected","FormSelect","FormSelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","GenerateCredential","isCreated","setIsCreated","setIsOpen","stepNo","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","onMove","curr","prev","handleChangeStep1","checked","target","handleChangeStep4","steps","component","TextVariants","Radio","isChecked","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","position","bodyContent","nextButtonText","EmptyStateVariant","KeyIcon","InputGroupText","ClipboardCopy","isReadOnly","Bullseye","Checkbox","isFinishedStep","Wizard","onNext","onBack","hideClose","InstanceDrawer","activeTab","instanceDetail","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","resourcesTab","sampleCodeTab","CopyIcon","renderTextListItemDetail","TextListItem","TextListItemVariants","created_at","updated_at","owner","detailsTab","Grid","GridItem","span","isFlat","CardBody","TextList","TextListVariants","format","connectionTab","Tabs","activeKey","isSecondary","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","DrawerPanelContent","widths","Loading","DrawerHead","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","OpenshiftStreams","parseInt","get","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","kafkaDataLoaded","setKafkaDataLoaded","setMainToggle","drawerRef","fetchKafkas","kafkaInstances","items","setTimeout","Drawer","isExpanded","onExpand","current","focus","DrawerContent","panelContent","PageSection","PageSectionVariants","Level","LevelItem","length","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton"],"mappings":"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","file":"201.db86cca698291109037e.js","sourcesContent":["  enum InstanceStatus{\n     COMPLETED=\"complete\",\n     ACCEPTED=\"accepted\",\n     PROVISIONING=\"provisioning\",\n     FAILED=\"failed\"\n  }\n\n  export{\n    InstanceStatus\n  }","import React from 'react';\nimport { Title, Button, EmptyState as PFEmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\ntype EmptyStateProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst EmptyState = ({ createStreamsInstance, setCreateStreamsInstance, mainToggle }: EmptyStateProps) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <PFEmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t(\"You don't have any Streams instances yet\")}\n        </Title>\n        <EmptyStateBody>{t('Create a Streams instance to get started')}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n          {t('Create a Streams Instance')}\n        </Button>\n      </PFEmptyState>\n    </>\n  );\n};\n\nexport { EmptyState };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:8000\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface TokenResponse\n */\nexport interface TokenResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface TokenResponseAllOf\n */\nexport interface TokenResponseAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponseAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponseAllOf\n     */\n    clientSecret?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequest: KafkaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequest' is not null or undefined\n            if (kafkaRequest === null || kafkaRequest === undefined) {\n                throw new RequiredError('kafkaRequest','Required parameter kafkaRequest was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequest !== undefined ? kafkaRequest : {}) : (kafkaRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceAccount`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequest} kafkaRequest Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a kafka service account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(options?: any): AxiosPromise<TokenResponse> {\n            return DefaultApiFp(configuration).createServiceAccount(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequest} kafkaRequest Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a kafka service account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(options?: any): AxiosPromise<TokenResponse>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequest} kafkaRequest Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequest: KafkaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a kafka service account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport { InstanceStatus } from '@app/constants';\nimport { capitalize } from '@app/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n};\n\nconst StatusColumn = ({ status }: StatusColumnProps) => {\n  const statusDisplayName = status === InstanceStatus.ACCEPTED ? 'pending case' : status;\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case InstanceStatus.COMPLETED:\n        return <CheckCircleIcon className=\"check-circle-icon-color\" />;\n      case InstanceStatus.FAILED:\n        return <ExclamationCircleIcon className=\"exclamation-circle-icon-color\" />;\n      case InstanceStatus.PROVISIONING:\n        return <Spinner size={IconSize.md} />;\n      case InstanceStatus.ACCEPTED:\n        return <PendingIcon />;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>{getStatusIcon()}</FlexItem>\n      <FlexItem>{capitalize(statusDisplayName)}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { DefaultApi } from  '../../openapi/api';\n\n// Initialize services.\n\nexport const BASE_PATH = 'https://api.stage.openshift.com';\n\nexport class Services {\n  static getInstance() {\n    if (Services.singleton === undefined) {\n      Services.singleton = new Services();\n    }\n\n    return Services.singleton;\n  }\n\n  private static singleton: Services;\n  public apiService = new DefaultApi();\n}\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  TextInput,\n  TextContent,\n  Text,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/constants';\nimport  './DeleteInstanceModal.css';\n\ninterface DeleteInstanceModalProps extends Omit<ModalProps, 'children'> {\n  confirmActionLabel?: string;\n  cancelActionLabel?: string;\n  description?: string;\n  selectedInstanceName: string | undefined;\n  isModalOpen: boolean;\n  instanceStatus: string | undefined;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onConfirm: (event: any) => Promise<void>;\n}\n\nconst DeleteInstanceModal: FunctionComponent<DeleteInstanceModalProps> = ({\n  confirmActionLabel,\n  cancelActionLabel,\n  title,\n  onConfirm,\n  selectedInstanceName,\n  isModalOpen,\n  setIsModalOpen,\n  description,\n  variant = ModalVariant.small,\n  titleIconVariant = 'warning',\n  instanceStatus,\n}: DeleteInstanceModalProps) => {\n  const {t}=useTranslation();\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.COMPLETED) {\n      if (instanceNameInput?.toLocaleLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <Modal\n      id=\"dialog-prompt-modal\"\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={t('delete_instance_modal')}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          key={'confirm-button'}\n          variant={ButtonVariant.danger}\n          onClick={onConfirm}\n          isDisabled={isConfirmButtonDisabled()}\n        >\n          {confirmActionLabel || t('confirm')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n          {cancelActionLabel || t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Text dangerouslySetInnerHTML={{__html:description || ''}} />   \n      {instanceStatus === InstanceStatus.COMPLETED && (\n        <>\n          <TextContent className=\"text-content\">\n            <Text dangerouslySetInnerHTML={{__html:t(\"instance_name_label\",{name:selectedInstanceName})}}/>          \n          </TextContent>\n          <TextInput id=\"instance-name\" type=\"text\" value={instanceNameInput} onChange={handleInstanceName} />\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport { DeleteInstanceModal };\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { Pagination, PaginationProps } from '@patternfly/react-core';\n\nexport const TablePagination: FunctionComponent<PaginationProps> = ({ page, perPage, itemCount, variant, isCompact }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  if (itemCount && itemCount > 0) {\n    return (\n      <Pagination\n        itemCount={itemCount}\n        perPage={perPage}\n        page={page}\n        onSetPage={onSetPage}\n        variant={variant || 'top'}\n        onPerPageSelect={onPerPageSelect}\n        isCompact={isCompact}        \n      />\n    );\n  }\n  return null;\n};\n","import React, { useState } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarToggleGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  ToolbarFilter,\n  ToolbarChipGroup,\n  ToolbarChip,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { TablePagination } from './TablePagination';\nimport './StreamsToolbarProps.css';\n\ntype StreamsToolbarProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  filterSelected?: string;\n  namesSelected: string[];\n  setNamesSelected: (value: string[]) => void;\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  filterSelected,\n  namesSelected,\n  setNamesSelected,\n  mainToggle,\n  total,\n  page,\n  perPage,\n}) => {\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [inputValue, setInputValue] = useState<string | undefined>();\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  // options for filter dropdown\n  const filterOptions = [{ value: 'Name', disabled: false }];\n\n  const onInputChange = (input?: string) => {\n    setInputValue(input);\n  };\n\n  const onClear = () => {\n    setNamesSelected([]);\n  };\n\n  const onDeleteGroup = (category: string | ToolbarChipGroup) => {\n    if (category.toString().toLowerCase() === 'name') {\n      setNamesSelected([]);\n    }\n  };\n  const onDelete = (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => {\n    if (category.toString().toLowerCase() === 'name') {\n      const index = namesSelected.findIndex((name) => name === chip.toString().toLowerCase());\n      if (index >= 0) {\n        const prevState = Object.assign([], namesSelected);\n        prevState.splice(index, 1);\n        setNamesSelected(prevState);\n      }\n    }\n  };\n\n  const onSearch = () => {\n    if (inputValue && inputValue.trim() !== '') {\n      const index = namesSelected.findIndex((name) => name === inputValue.trim().toLowerCase());\n      if (index < 0) {\n        setNamesSelected([...namesSelected, inputValue.trim()]);\n        setInputValue('');\n      }\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarFilter chips={namesSelected} deleteChip={onDelete} deleteChipGroup={onDeleteGroup} categoryName=\"Name\">\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n          >\n            {filterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value} />\n            ))}\n          </Select>\n          <InputGroup className=\"filter-text-input\">\n            <TextInput\n              name=\"filter text input\"\n              id=\"filterText\"\n              type=\"search\"\n              aria-label=\"Search filter input\"\n              placeholder={`Filter by ${filterSelected?.toLowerCase()}`}\n              onChange={onInputChange}\n              value={inputValue}\n            />\n            <Button variant={ButtonVariant.control} onClick={onSearch} aria-label=\"Search instances\">\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  return (\n    <Toolbar id=\"instance-toolbar\" collapseListedFiltersBreakpoint=\"md\" clearAllFilters={onClear}>\n      <ToolbarContent>\n        {mainToggle && <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          {toggleGroupItems}\n        </ToolbarToggleGroup>}\n        <ToolbarItem>\n          <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n            Create Streams instance\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <TablePagination itemCount={total} page={page} perPage={perPage} isCompact={true} />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport { StreamsToolbar };\n","import React, { useState, useContext, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  IRow,\n  IRowData,\n  IExtraData,\n  ISeparator,\n  IAction,\n} from '@patternfly/react-table';\nimport { Card, AlertVariant, PaginationVariant, Divider } from '@patternfly/react-core';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { InstanceStatus } from '@app/constants';\nimport { BASE_PATH } from '../../common/app-config';\nimport { getCloudProviderDisplayName, getCloudRegionDisplayName } from '@app/utils';\nimport { DeleteInstanceModal } from '@app/components/DeleteInstanceModal';\nimport { TablePagination } from './TablePagination';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\n\ntype TableProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onConnectToInstance: (instance: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  page: number;\n  perPage: number;\n  total: number;\n};\n\nexport const getDeleteInstanceLabel = (t: TFunction, status: string | undefined) => {\n  switch (status) {\n    case InstanceStatus.COMPLETED:\n      return t('delete_instance');\n    case InstanceStatus.FAILED:\n      return t('remove');\n    case InstanceStatus.ACCEPTED:\n    case InstanceStatus.PROVISIONING:\n      return t('stop_instance');\n    default:\n      return;\n  }\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n) => {\n  const config = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.COMPLETED) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('stop_creating_instance')}?`;\n    config.confirmActionLabel = t('stop_creating_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onConnectToInstance,\n  refresh,\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  page,\n  perPage,\n  total,\n}: TableProps) => {\n  const { token } = useContext(AuthContext);\n  const { t } = useTranslation();\n\n  // Api Service\n  const apisService = new DefaultApi({\n    accessToken: token,\n    basePath: BASE_PATH,\n  });\n  const { addAlert } = useAlerts();\n\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const tableColumns = [t('name'), t('cloud_provider'), t('region'), t('status')];\n  const [filterSelected, setFilterSelected] = useState('Name');\n  const [namesSelected, setNamesSelected] = useState<string[]>([]);\n\n  useEffect(() => {\n    refresh();\n  }, [page, perPage]);\n\n  const getActionResolver = (rowData: IRowData, onDelete: (data: KafkaRequest) => void) => {\n    const originalData: KafkaRequest = rowData.originalData;\n    const deleteActionTitle = getDeleteInstanceLabel(t, originalData?.status);\n    const resolver: (IAction | ISeparator)[] = mainToggle ? [\n      {\n        title: 'View details',\n        id: 'view-instance',\n        onClick: () => onViewInstance(originalData),\n      },{\n            title: t('connect_to_instance'),\n            id: 'connect-instance',\n            onClick: () => onConnectToInstance(originalData),\n      },\n      {\n        title: deleteActionTitle,\n        id: 'delete-instance',\n        onClick: () => onDelete(originalData),\n      },\n    ]:[\n      {\n        title: 'View details',\n        id: 'view-instance',\n        onClick: () => onViewInstance(originalData),\n      },\n      {\n        title: deleteActionTitle,\n        id: 'delete-instance',\n        onClick: () => onDelete(originalData),\n      },\n    ];\n    return resolver;\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, status } = row;\n      const cloudProviderDisplayName = getCloudProviderDisplayName(cloud_provider);\n      const regionDisplayName = getCloudRegionDisplayName(region);\n      tableRow.push({\n        cells: [\n          name,\n          cloudProviderDisplayName,\n          regionDisplayName,\n          {\n            title: <StatusColumn status={status} />,\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, onSelectDeleteInstanceKebab);\n  };\n\n  const onSelectDeleteInstanceKebab = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    try {\n      await apisService.deleteKafkaById(instanceId).then((res) => {\n        setIsDeleteModalOpen(false);\n        addAlert(t('kafka_successfully_deleted'), AlertVariant.success);\n        refresh();\n      });\n    } catch (error) {\n      setIsDeleteModalOpen(false);\n      console.log('IS THERE AN ERROR HERE');\n      addAlert(error, AlertVariant.danger);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n  return (\n    <Card>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        createStreamsInstance={createStreamsInstance}\n        setCreateStreamsInstance={setCreateStreamsInstance}\n        filterSelected={filterSelected}\n        namesSelected={namesSelected}\n        setNamesSelected={setNamesSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n      />\n      <Table\n        cells={tableColumns}\n        rows={preparedTableCells()}\n        aria-label={t('cluster_instance_list')}\n        actionResolver={actionResolver}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      <Divider />\n      <TablePagination\n        widgetId=\"pagination-options-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n      />\n      {isDeleteModalOpen && (\n        <DeleteInstanceModal\n          title={title}\n          isModalOpen={isDeleteModalOpen}\n          instanceStatus={selectedInstance?.status}\n          setIsModalOpen={setIsDeleteModalOpen}\n          onConfirm={onDeleteInstance}\n          selectedInstanceName={selectedInstance?.name}\n          description={description}\n          confirmActionLabel={confirmActionLabel}\n        />\n      )}\n    </Card>\n  );\n};\n\nexport { StreamsTableView };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n  Form,\n  FormGroup,\n  TextInput,\n  Tile,\n  FormSelect,\n  FormSelectOption,\n  FormAlert,\n  Alert,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { NewKafka, FormDataValidationState } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi } from '../../../openapi';\nimport { BASE_PATH } from '@app/common/app-config';\nimport { cloudProviderOptions, cloudRegionOptions } from '../../utils/utils';\nimport { useTranslation } from 'react-i18next';\n\ntype CreateInstanceModalProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  refresh: () => void;\n};\n\nconst CreateInstanceModal: React.FunctionComponent<CreateInstanceModalProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  refresh,\n}: CreateInstanceModalProps) => {\n  const { t } = useTranslation();\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = 'aws';\n  newKafka.region = 'us-east-1';\n  newKafka.multi_az = true;\n  const cloudRegionsAvailable = [{ value: '', label: t('please_select'), disabled: false }, ...cloudRegionOptions];\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const { token } = useContext(AuthContext);\n\n  // Api Service\n  const apisService = new DefaultApi({\n    accessToken: token,\n    basePath: BASE_PATH,\n  });\n\n  const { addAlert } = useAlerts();\n\n  const onCreateInstance = async (event) => {\n    let isValid = true;\n\n    if (kafkaFormData.name === undefined || kafkaFormData.name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n\n    if (kafkaFormData.region === undefined || kafkaFormData.region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n\n    if (isValid) {\n      try {\n        await apisService.createKafka(true, kafkaFormData).then((res) => {\n          addAlert(t('kafka_successfully_created'), AlertVariant.success);\n          handleModalToggle();\n          refresh();\n        });\n      } catch (error) {\n        addAlert(error, AlertVariant.danger);\n      }\n    } else {\n      setIsFormValid(false);\n    }\n  };\n\n  const handleModalToggle = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n    if (nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: region });\n  };\n\n  const getTileIcon = (provider: string) => {\n    switch (provider.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"cloud-region-icon\" />;\n      default:\n        return;\n    }\n  };\n  return (\n    <>\n      <Modal\n        variant={ModalVariant.medium}\n        title={t('create_a_streams_instance')}\n        isOpen={createStreamsInstance}\n        onClose={handleModalToggle}\n        actions={[\n          <Button key=\"create\" variant=\"primary\" onClick={onCreateInstance} isDisabled={!isFormValid}>\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        <Form>\n          {!isFormValid && (\n            <FormAlert>\n              <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n            </FormAlert>\n          )}\n          <FormGroup\n            label={t('instance_name')}\n            helperTextInvalid={nameValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            isRequired\n            validated={nameValidated.fieldState}\n            fieldId=\"form-instance-name\"\n          >\n            <TextInput\n              isRequired\n              validated={nameValidated.fieldState}\n              type=\"text\"\n              id=\"form-instance-name\"\n              name=\"instance-name\"\n              value={kafkaFormData?.name}\n              onChange={handleInstanceNameChange}\n            />\n          </FormGroup>\n          <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n            {cloudProviderOptions.map((provider) => (\n              <Tile\n                key={`tile-${provider.value}`}\n                title={t(provider.label)}\n                icon={getTileIcon(provider.value)}\n                isSelected={kafkaFormData.cloud_provider === provider.value}\n                onClick={() => setKafkaFormData({ ...kafkaFormData, cloud_provider: provider.value })}\n              />\n            ))}\n          </FormGroup>\n          <FormGroup\n            label={t('cloud_region')}\n            helperTextInvalid={cloudRegionValidated.message}\n            helperTextInvalidIcon={<ExclamationCircleIcon />}\n            validated={cloudRegionValidated.fieldState}\n            fieldId=\"form-cloud-region-option\"\n          >\n            <FormSelect\n              validated={cloudRegionValidated.fieldState}\n              value={kafkaFormData.region}\n              onChange={handleCloudRegionChange}\n              id=\"cloud-region-select\"\n              name=\"cloud-region\"\n              aria-label={t('cloud_region')}\n            >\n              {cloudRegionsAvailable.map((option, index) => (\n                <FormSelectOption key={index} value={option.value} label={option.label} />\n              ))}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n            <ToggleGroup aria-label={t('availability_zone_selection')}>\n              <ToggleGroupItem\n                text={t('single')}\n                buttonId=\"single\"\n                isDisabled={true}\n                isSelected={kafkaFormData.multi_az === false}\n              />\n              <ToggleGroupItem text={t('multi')} buttonId=\"multi\" isSelected={kafkaFormData.multi_az === true} />\n            </ToggleGroup>\n          </FormGroup>\n        </Form>\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, {useState} from 'react';\nimport {\n  Alert,\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  Divider,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  PageSection,\n  PageSectionVariants,\n  Popover,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons'\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\n\nconst GenerateCredential: React.FunctionComponent = () => {\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState(\"name\");\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState(\"name\");\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState(\"name\");\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n\n  const handleModalToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClose = () => {\n    setIsOpen(!isOpen);\n    setIsCreated(!isCreated);\n    setStepNo(1);\n  }\n\n  const onMove = (curr, prev) => {\n    setStepNo(curr.id);\n  }\n\n  const handleTextInputChange1 = credentialNameInput => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === \"radio1-1\") {\n      setRadio1Step1(value)\n    }\n    else if (name === \"radio2-1\") {\n      setRadio2Step1(value)\n    }\n    else if (name === \"radio3-1\") {\n      setRadio3Step1(value)\n    }\n    else if (name === \"radio4-1\") {\n      setRadio4Step1(value)\n    }\n  }\n\n  const handleTopicSwitchChange = isTopicSwitchChecked => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  }\n\n  const handleSelectChange2 = (event) => {\n      setSelectTopicAccess(event);\n  }\n\n  const handleTextInputChange2 = topicAccessInput => {\n    setTopicAccessInput(topicAccessInput)\n  };\n\n  const handleConsumerSwitchChange = isConsumerSwitchChecked => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  }\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  }\n\n  const handleTextInputChange3 = consumerAccessInput => {\n    setConsumerAccessInput(consumerAccessInput)\n  };\n\n  const handleChangeStep4 = (checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === \"radio1-4\") {\n      setRadio1Step4(value)\n    }\n    else if (name === \"radio2-4\") {\n      setRadio2Step4(value)\n    }\n    else if (name === \"radio3-4\") {\n      setRadio3Step4(value)\n    }\n  }\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  }\n\n  const handleTextInputChange4 = transactionAccessInput => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = confirmationCheckbox => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  }\n\n  const step1 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>\n          Basic info\n        </Text>\n        <Text component={TextVariants.small}>\n          To connect securely to Red Hat OpenShift Streams for Apache Kafka, your application or tool needs an API key with permission to access the Kafka instance and resources such as topics.\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup\n          label=\"Give the credential a name\"\n          fieldId=\"simple-form-name\"\n          isRequired\n          // helperText=\"Please enter your topic name\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder=\"Enter your credential name\"\n          />\n        </FormGroup>\n        <FormGroup \n          label=\"What do you want your application to do?\" \n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label=\"Produce only\"\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label=\"Consume only\"\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label=\"Produce and consume\"\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label=\"Produce, consume and create topics\"\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  )\n\n  const step2 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>\n          Choose which topics the credential can access\n        </Text>\n      </TextContent>\n      <Form>\n      <Switch\n        id=\"simple-switch\"\n        label=\"All topics\"\n        labelOff=\"All topics\"\n        isChecked={isTopicSwitchChecked}\n        onChange={handleTopicSwitchChange}\n      />\n      { isTopicSwitchChecked ? (\n        <></>\n      ) : ( \n        <FormGroup\n          label=\"Specific topics\"\n          fieldId=\"input-access-topics\"\n          isRequired\n          // helperText=\"Please enter your topic name\"\n        >\n          <Split hasGutter className=\"pf-u-align-items-center\">\n            <SplitItem>Topics with the</SplitItem>\n            <SplitItem>\n              <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                <FormSelectOption value=\"name\" label=\"name\" />\n                <FormSelectOption value=\"prefix\" label=\"prefix\" />\n              </FormSelect>\n            </SplitItem>\n            <SplitItem isFilled>\n              <TextInput\n                isRequired\n                type=\"text\"\n                id=\"input-access-topics\"\n                name=\"input-access-topics\"\n                aria-describedby=\"simple-form-name-helper\"\n                value={topicAccessInput}\n                onChange={handleTextInputChange2}\n                placeholder={`Enter your topic ${selectTopicAccess}`}\n              />\n            </SplitItem>\n          </Split>\n          <Popover\n            position=\"bottom\"\n            bodyContent={\n              <div>This control is not functional for this prototype.\n              </div>\n            }\n          >\n            <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n              Add another rule\n            </Button>\n          </Popover>\n        </FormGroup>\n      )}\n      </Form>\n    </div>\n  )\n\n  const step3 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>\n          Choose which consumer groups the credential can access\n        </Text>\n      </TextContent>\n      <Form>\n      <Switch\n        id=\"simple-switch\"\n        label=\"All consumer groups\"\n        labelOff=\"All consumer groups\"\n        isChecked={isConsumerSwitchChecked}\n        onChange={handleConsumerSwitchChange}\n      />\n      { isConsumerSwitchChecked ? (\n        <></>\n      ) : ( \n        <FormGroup\n          label=\"Specific consumer groups\"\n          fieldId=\"input-access-consumers\"\n          isRequired\n        >\n          <Split hasGutter className=\"pf-u-align-items-center\">\n            <SplitItem>Groups with the</SplitItem>\n            <SplitItem>\n              <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                <FormSelectOption value=\"name\" label=\"name\" />\n                <FormSelectOption value=\"prefix\" label=\"prefix\" />\n              </FormSelect>\n            </SplitItem>\n            <SplitItem isFilled>\n              <TextInput\n                isRequired\n                type=\"text\"\n                id=\"input-access-consumers\"\n                name=\"input-access-consumers\"\n                value={consumerAccessInput}\n                onChange={handleTextInputChange3}\n                placeholder={`Enter your consumer group ${selectConsumerAccess}`}\n              />\n            </SplitItem>\n          </Split>\n        </FormGroup>\n      )}\n      </Form>\n    </div>\n  )\n\n  const step4 = (\n    <div className=\"generate-cred-wizard-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          Choose which transaction IDs the credential can access\n        </Text>\n      </TextContent>\n      <Form>\n      <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n        <div className=\"pf-c-form__group-control\">\n          <Radio\n            isChecked={radio1Step4}\n            name=\"radio1-4\"\n            onChange={handleChangeStep4}\n            label=\"No transaction IDs\"\n            id=\"radio-controlled-1-4\"\n            value=\"no\"\n          />\n          <Radio\n            isChecked={radio2Step4}\n            name=\"radio2-4\"\n            onChange={handleChangeStep4}\n            label=\"All transaction IDs\"\n            id=\"radio-controlled-2-4\"\n            value=\"all\"\n            className=\"pf-u-mb-sm\"\n          />\n          <Split hasGutter className=\"pf-u-align-items-center\">\n            <SplitItem>\n              <Radio\n                isChecked={radio3Step4}\n                name=\"radio3-4\"\n                onChange={handleChangeStep4}\n                label=\"Transaction IDs with the\"\n                id=\"radio-controlled-3-4\"\n                value=\"filter\"\n              />\n            </SplitItem>\n            <SplitItem>\n              <FormSelect id=\"select-access-transactions\" value={selectTransactionAccess} onChange={handleSelectChange4}>\n                <FormSelectOption value=\"name\" label=\"name\" />\n                <FormSelectOption value=\"prefix\" label=\"prefix\" />\n              </FormSelect>\n            </SplitItem>\n            <SplitItem isFilled>\n              <TextInput\n                isRequired\n                type=\"text\"\n                id=\"input-access-transactions\"\n                name=\"input-access-transactions\"\n                value={transactionAccessInput}\n                onChange={handleTextInputChange4}\n                placeholder={`Enter your transaction ID ${selectTransactionAccess}`}\n              />\n            </SplitItem>\n          </Split>\n          \n          </div>\n        </section>\n      </Form>\n    </div>\n  )\n\n  const clientID = (\n    <>\n      <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={KeyIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          Credential successfully generated\n        </Title>\n        <EmptyStateBody>\n          Use this client ID to connect with the Kafka instance. Copy the client ID and secret and keep in a safe place. This is the only time the client ID and secret will display.\n        </EmptyStateBody>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"no-wrap\">Client ID</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            FSLG934JM98IL\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"no-wrap\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            898VsyDInUfhSd9ng8K/REs9r8h0n8j98s5c4JdeJfUg/E8\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label=\"I have copied the client ID and secret\"\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button variant=\"primary\" isDisabled={!confirmationCheckbox} onClick={handleClose}>Close</Button>\n      </EmptyState>\n    </>\n  )\n\n  const steps = [\n    { id: 1, name: 'Basic info', component: step1 },\n    { id: 2, name: 'Topics access', component: step2 },\n    { id: 3, name: 'Consumer groups access', component: step3 },\n    { id: 4, name: 'Transaction IDs access', component: step4, nextButtonText: 'Finish' },\n    { id: 5, name: 'Finish', component: clientID, isFinishedStep: true}\n  ];\n\n  const title = 'Generate credential';\n\n  return (\n    <>\n    { isCreated ? (\n      <>\n        <FlexItem className=\"pf-m-align-right pf-m-spacer-none\">\n          <Button variant=\"danger\" onClick={handleModalToggle} className=\"pf-u-ml-md pf-u-mb-md\">\n            Generate new credential\n          </Button>\n        </FlexItem>\n        <FlexItem className=\"pf-m-grow\">\n          <Alert variant=\"success\" isInline title=\"Credentials successfully generated\" />\n        </FlexItem>\n      </>\n    ) : (\n      <FlexItem className=\"pf-m-align-right\">\n        <Button variant=\"secondary\" onClick={handleModalToggle} className=\"pf-u-ml-md\">\n          Generate credential\n        </Button>\n      </FlexItem>\n    )}\n    <Wizard\n      title={title}\n      description=\"Generate credential for your application\"\n      steps={steps}\n      onNext={onMove}\n      onBack={onMove}\n      onClose={handleModalToggle}\n      isOpen={isOpen}\n      hideClose={stepNo===5}\n    />\n  </>\n  );\n}\n\nexport { GenerateCredential };\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  ClipboardCopy,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  FormGroup,\n  Grid,\n  GridItem,\n  Tabs,\n  Tab,\n  TabTitleText,\n  TextContent,\n  Text,\n  TextInput,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport './InstanceDrawer.css';\nimport { GenerateCredential } from './GenerateCredential';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { KafkaRequest } from 'src/openapi';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\n\nexport type InstanceDrawerProps = {\n  mainToggle: boolean;\n  onClose: () => void;\n  isExpanded: boolean;\n  drawerRef: any;\n  instanceDetail?: KafkaRequest;\n  activeTab?: 'Details' | 'Connection';\n};\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n}) => {\n  const [activeTab1Key, setActiveTab1Key] = useState(0);\n  const [activeTab2Key, setActiveTab2Key] = useState(0);\n  useEffect(() => {\n    setActiveTab1Key(activeTab === 'Details' ? 0 : 1);\n  }, [activeTab]);\n\n  const handleTab1Click = (_event, tabIndex) => {\n    setActiveTab1Key(tabIndex);\n  };\n\n  const handleTab2Click = (_event, tabIndex) => {\n    setActiveTab2Key(tabIndex);\n  };\n\n  const resourcesTab = (\n    <>\n      <div className=\"tab-content-body\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.small}>\n            To connect an application or tool to this Kafka instance, you will need the address of a Kafka listener, and\n            generated credentials.\n          </Text>\n          <Text component={TextVariants.h5}>Kafka listener and credentials</Text>\n          <Text component={TextVariants.small}>\n            Your application or tool will make its initial connection to the Kafka instance using the bootstrap server,\n            and authenticate with credentials specific to the server if required.\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            External server\n          </Text>\n        </TextContent>\n        <Flex>\n          <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n            <ClipboardCopy>strimzi-external-bootstrap-01 : 1234</ClipboardCopy>\n          </FlexItem>\n          <GenerateCredential />\n        </Flex>\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n          <Text component={TextVariants.small}>\n            Applications and tools that use the REST producer API will need the REST producer endpoint to connect.\n          </Text>\n        </TextContent>\n        <ClipboardCopy>https : // : 30123</ClipboardCopy>\n      </div>\n    </>\n  );\n\n  const sampleCodeTab = (\n    <>\n      <div className=\"tab-content-body\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.h5}>Sample connection code</Text>\n        <Text component={TextVariants.small}>\n          Use this snippet of code to set the properties in your Kafka client to connect securely. Replace the values in\n          &lt;brackets&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n          <div className=\"pf-c-code-editor__tab\">\n            <span className=\"pf-c-code-editor__tab-text\">Java</span>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n          </div>\n        </div>\n      </div>\n\n      <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n        <Text component={TextVariants.h5}>Sample connection code</Text>\n        <Text component={TextVariants.small}>\n          Use this snippet of code to set the properties in your Kafka client to connect securely. Replace the values in\n          &lt;brackets&gt;.\n        </Text>\n      </TextContent>\n      <div className=\"pf-c-code-editor pf-m-read-only\">\n        <div className=\"pf-c-code-editor__header\">\n          <div className=\"pf-c-code-editor__controls\">\n            <Button variant=\"control\" aria-label=\"Action\">\n              <CopyIcon />\n            </Button>\n          </div>\n        </div>\n        <div className=\"pf-c-code-editor__main\">\n          <div className=\"pf-c-code-editor__code\">\n            <pre className=\"pf-c-code-editor__code-pre\">\n              bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n              sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n            </pre>\n          </div>\n        </div>\n      </div>\n      </div>\n    </>\n  );\n\n  const renderTextListItemDetail = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  const { id, created_at, updated_at, owner } = instanceDetail || {};\n  dayjs.extend(localizedFormat);\n\n  const detailsTab = (\n    <>\n      <div className=\"tab-content-body\">\n        {mainToggle && (\n          <Grid className=\"instance-card-grid\">\n            <GridItem span={6} className=\"instance-detail-first-grid\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      Topics\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      Consumer groups\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItemDetail('Cloud Provider', 'Amazon Web Services')}\n            {renderTextListItemDetail('Region', 'US East, N. Virginia')}\n            {renderTextListItemDetail('ID', id)}\n            {renderTextListItemDetail('Owner', owner)}\n            {renderTextListItemDetail('Created', dayjs(created_at).format('LLLL'))}\n            {renderTextListItemDetail('Updated', dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n\n  const connectionTab = (\n    <>\n      <div className=\"tab-content-body pf-m-secondary\">\n        <Tabs activeKey={activeTab2Key} isSecondary onSelect={handleTab2Click}>\n          <Tab eventKey={0} title={<TabTitleText>Resources</TabTitleText>}>\n            {resourcesTab}\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Sample code</TabTitleText>}>\n            {sampleCodeTab}\n          </Tab>\n        </Tabs>\n      </div>\n    </>\n  );\n\n  return (\n    <DrawerPanelContent className=\"instance-drawer\" widths={{ default: 'width_66' }}>\n      {instanceDetail === undefined ? (\n        <Loading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                Instance Name\n              </Text>\n              <Title headingLevel=\"h3\" size={TitleSizes['2xl']} className=\"pf-u-mt-0 \">\n                {instanceDetail?.name}\n              </Title>\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n              <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n                {detailsTab}\n              </Tab>\n              {mainToggle && (\n                <Tab eventKey={1} title={<TabTitleText>Connection</TabTitleText>}>\n                  {connectionTab}\n                </Tab>\n              )}\n            </Tabs>\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Switch,\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Drawer,\n  DrawerContent\n} from '@patternfly/react-core';\nimport { EmptyState } from '../components/EmptyState/EmptyState';\nimport { StreamsTableView } from '../components/StreamsTableView/StreamsTableView';\nimport { CreateInstanceModal } from '../components/CreateInstanceModal/CreateInstanceModal';\nimport { DefaultApi, KafkaRequest, KafkaRequestList } from '../../openapi/api';\nimport { AlertProvider } from '../components/Alerts/Alerts';\nimport { InstanceDrawer } from '../Drawer/InstanceDrawer';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { BASE_PATH } from '@app/common/app-config';\nimport { Loading } from '@app/components/Loading/Loading';\n\ntype OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance }: OpenShiftStreamsProps) => {\n  const { token } = useContext(AuthContext);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  // Api Service\n  const apisService = new DefaultApi({\n    accessToken: token,\n    basePath: BASE_PATH,\n  });\n\n  const { t } = useTranslation();\n\n  // States\n  const [createStreamsInstance, setCreateStreamsInstance] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [mainToggle, setMainToggle] = useState(false);\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance|null>();\n  const drawerRef = React.createRef<any>();\n\n  const onExpand = () => {\n    drawerRef.current && drawerRef.current.focus();\n  };\n\n  const onCloseClick = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onConnectInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    try {\n      await apisService\n        .listKafkas(page?.toString(), perPage?.toString())\n        .then((res) => {\n          const kafkaInstances = res.data;\n          console.log('what is res' + JSON.stringify(kafkaInstances));\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n        })\n        .then(() => setTimeout(fetchKafkas, 2000));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (token !== undefined || token !== '') {\n      setKafkaDataLoaded(false);\n      fetchKafkas().then(() => setKafkaDataLoaded(true));\n    }\n  }, [token]);\n\n  if (!kafkaDataLoaded || token === '' || token === undefined) {\n    return <Loading />;\n  }\n\n  const handleSwitchChange = (checked: boolean) => {\n    setMainToggle(checked);\n  };\n\n  return (\n    <>\n      <AlertProvider>\n        <Drawer isExpanded={selectedInstance != null} onExpand={onExpand}>\n          <DrawerContent\n            panelContent={\n              <InstanceDrawer\n                mainToggle={mainToggle}\n                onClose={onCloseClick}\n                isExpanded={selectedInstance != null}\n                drawerRef={drawerRef}\n                activeTab={selectedInstance?.activeTab}\n                instanceDetail={selectedInstance?.instanceDetail}\n              />\n            }\n          >\n              <PageSection variant={PageSectionVariants.light}>\n                <Level>\n                  <LevelItem>\n                    <Title headingLevel=\"h1\" size=\"lg\">\n                      {t('OpenshiftStreams')}\n                    </Title>\n                  </LevelItem>\n                  <LevelItem>\n                    <Switch\n                      id=\"simple-switch\"\n                      label={t('Mock UI')}\n                      labelOff={t('Currently supported UI')}\n                      isChecked={mainToggle}\n                      onChange={handleSwitchChange}\n                    />\n                  </LevelItem>\n                </Level>\n              </PageSection>\n              <PageSection>\n                {kafkaInstanceItems && kafkaInstanceItems.length > 0 ? (\n                  <StreamsTableView\n                    kafkaInstanceItems={kafkaInstanceItems}\n                    mainToggle={mainToggle}\n                    onConnectToInstance={onConnectInstance}\n                    onViewInstance={onViewInstance}\n                    refresh={fetchKafkas}\n                    createStreamsInstance={createStreamsInstance}\n                    setCreateStreamsInstance={setCreateStreamsInstance}\n                    page={page}\n                    perPage={perPage}\n                    total={kafkaInstancesList?.total}\n                  />\n                ) : (\n                  kafkaInstanceItems !== undefined && (\n                    <EmptyState\n                      createStreamsInstance={createStreamsInstance}\n                      setCreateStreamsInstance={setCreateStreamsInstance}\n                      mainToggle={mainToggle}\n                    />\n                  )\n                )}\n                {createStreamsInstance && (\n                  <CreateInstanceModal\n                    createStreamsInstance={createStreamsInstance}\n                    setCreateStreamsInstance={setCreateStreamsInstance}\n                    mainToggle={mainToggle}\n                    refresh={fetchKafkas}\n                  />\n                )}\n              </PageSection>\n          </DrawerContent>\n        </Drawer>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import React from 'react';\n\nexport interface IAuthContext {\n  token: string | undefined;\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n  token: undefined\n});\n","import React from \"react\";\nimport {\n  AlertGroup,\n  Alert,\n  AlertActionCloseButton,\n  AlertVariant,\n} from \"@patternfly/react-core\";\n\nexport type AlertType = {\n  key: number;\n  message: string;\n  variant: AlertVariant;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, message }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={message}\n          actionClose={\n            <AlertActionCloseButton\n              title={message}\n              onClose={() => onCloseAlert(key)}\n            />\n          }\n        />\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport { PageSection, Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <PageSection>\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  </PageSection>\n);\n"],"sourceRoot":""}