{"version":3,"sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccounts.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/ServiceAccountsFederated.tsx"],"names":["ServiceAccounts","t","useTranslation","addAlert","location","searchParams","URLSearchParams","search","page","parseInt","get","perPage","authContext","useContext","basePath","useState","serviceAccountList","setServiceAccountList","serviceAccountItems","setServiceAccountItems","isUserUnauthorized","setIsUserUnauthorized","rawServiceAccountDataLength","expectedTotal","serviceAccountsDataLoaded","orderBy","setOrderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isCreateServiceAccountModalOpen","setIsCreateServiceAccountModalOpen","isResetServiceAccountModalOpen","setIsResetServiceAccountModalOpen","serviceAccountToReset","setServiceAccountToReset","isDeleteServiceAccountModalOpen","setIsDeleteServiceAccountModalOpen","serviceAccountToDelete","setServiceAccountToDelete","fetchServiceAccounts","getToken","accessToken","listServiceAccounts","then","response","serviceAccounts","data","items","error","reason","errorCode","code","AlertVariant","handleServerError","useEffect","handleResetModal","serviceAccount","handleCreateModal","handleDeleteModal","titleProps","title","headingLevel","emptyStateBodyProps","body","PageSection","variant","PageSectionVariants","Level","LevelItem","TextContent","Text","component","isOpen","setIsOpen","undefined","padding","default","buttonProps","onClick","className","total","onResetCredentials","onDeleteServiceAccount","renderTableView","getUsername","getConnectToInstancePath","alertContext","BrowserRouter","value"],"mappings":"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","file":"525.0fe309b2.js","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Text,\n  AlertVariant,\n  Level,\n  LevelItem,\n  TextContent,\n} from '@patternfly/react-core';\nimport { DefaultApi, ServiceAccountListItem, ServiceAccountList } from '../../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport { ServiceAccountsTableView, FilterType } from './components/ServiceAccountsTableView';\nimport { MASEmptyState, MASLoading, AlertProvider, useAlerts, MASFullPageError } from '@app/common';\nimport { CreateServiceAccountModal } from './components/CreateServiceAccountModal';\nimport { ResetServiceAccountModal } from './components/ResetServiceAccountModal/ResetServiceAccountModal';\nimport { DeleteServiceAccountModal } from './components/DeleteServiceAccountModal';\n\nexport type ServiceAccountsProps = {\n  getConnectToInstancePath?: (data: any) => string;\n};\n\nconst ServiceAccounts: React.FC<ServiceAccountsProps> = ({ getConnectToInstancePath }: ServiceAccountsProps) => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [serviceAccountList, setServiceAccountList] = useState<ServiceAccountList>();\n  const [serviceAccountItems, setServiceAccountItems] = useState<ServiceAccountListItem[]>();\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [rawServiceAccountDataLength, setRawServiceAccountDataLength] = useState<number>(0);\n  // state to store the expected total  service accounts based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n  const [serviceAccountsDataLoaded, setServiceAccountsDataLoaded] = useState<boolean>(true);\n  const [orderBy, setOrderBy] = useState<string>('name');\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isCreateServiceAccountModalOpen, setIsCreateServiceAccountModalOpen] = useState(false);\n  const [isResetServiceAccountModalOpen, setIsResetServiceAccountModalOpen] = useState(false);\n  const [serviceAccountToReset, setServiceAccountToReset] = useState<ServiceAccountListItem>();\n  const [isDeleteServiceAccountModalOpen, setIsDeleteServiceAccountModalOpen] = useState(false);\n  const [serviceAccountToDelete, setServiceAccountToDelete] = useState<ServiceAccountListItem>();\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const fetchServiceAccounts = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listServiceAccounts().then((response) => {\n          const serviceAccounts = response?.data;\n          setServiceAccountList(serviceAccounts);\n          setServiceAccountItems(serviceAccounts?.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchServiceAccounts();\n  }, []);\n\n  const handleResetModal = (serviceAccount: ServiceAccountListItem) => {\n    setIsResetServiceAccountModalOpen(!isResetServiceAccountModalOpen)\n    setServiceAccountToReset(serviceAccount);\n  }\n\n  const handleCreateModal = () => {\n    setIsCreateServiceAccountModalOpen(!isCreateServiceAccountModalOpen);\n  }\n\n  const handleDeleteModal = (serviceAccount: ServiceAccountListItem) => {\n    setIsDeleteServiceAccountModalOpen(!isDeleteServiceAccountModalOpen);\n    setServiceAccountToDelete(serviceAccount);\n  }\n\n  const renderTableView = () => {\n\n    if (serviceAccountItems === undefined) {\n      return (\n        <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n          <MASLoading />\n        </PageSection>\n      );\n    } else {\n      if (rawServiceAccountDataLength && rawServiceAccountDataLength < 1) {\n        return (\n          <PageSection>\n            <MASEmptyState\n              titleProps={{\n                title: t('serviceAccount.you_do_not_have_any_service_accounts_yet'),\n                headingLevel: 'h2',\n              }}\n              emptyStateBodyProps={{\n                body: t('serviceAccount.create_service_account_to_get_started'),\n              }}\n              buttonProps={{\n                title: t('serviceAccount.create_service_account'),\n                onClick: () => handleCreateModal(),\n                ['data-testid']: 'emptyStateStreams-buttonCreateServiceAccount',\n              }}\n            />\n          </PageSection>\n        );\n      } else {\n        return (\n          <PageSection\n            className=\"mk--main-page__page-section--table\"\n            variant={PageSectionVariants.light}\n            padding={{ default: 'noPadding' }}\n          >\n            <ServiceAccountsTableView\n              page={page}\n              perPage={perPage}\n              total={serviceAccountList?.total || 1}\n              expectedTotal={expectedTotal}\n              serviceAccountsDataLoaded={serviceAccountsDataLoaded}\n              serviceAccountItems={serviceAccountItems}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              filterSelected={filterSelected}\n              setFilterSelected={setFilterSelected}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              onResetCredentials={handleResetModal}\n              onDeleteServiceAccount={handleDeleteModal}\n              handleCreateModal={handleCreateModal}\n            />\n          </PageSection>\n        );\n      }\n    }\n  };\n\n  /**\n   *  Unauthorized page in case user is not authorized\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('serviceAccount.unauthorized_access_to_service_accounts_title'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('serviceAccount.unauthorized_access_to_service_accounts_info'),\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <AlertProvider>\n        <PageSection variant={PageSectionVariants.light}>\n          <Level>\n            <LevelItem>\n              <TextContent>\n                <Text component=\"h1\"> {t('serviceAccount.service_accounts')}</Text>\n                <Text component=\"p\">{t('serviceAccount.service_accounts_title_header_info')}</Text>\n              </TextContent>\n            </LevelItem>\n          </Level>\n          <CreateServiceAccountModal\n            isOpen={isCreateServiceAccountModalOpen}\n            setIsOpen={setIsCreateServiceAccountModalOpen}\n            fetchServiceAccounts={fetchServiceAccounts}\n          />\n          <ResetServiceAccountModal isOpen={isResetServiceAccountModalOpen} setIsOpen={setIsResetServiceAccountModalOpen} serviceAccountToReset={serviceAccountToReset}/>\n          <DeleteServiceAccountModal isOpen={isDeleteServiceAccountModalOpen} setIsOpen={setIsDeleteServiceAccountModalOpen} serviceAccountToDelete={serviceAccountToDelete} fetchServiceAccounts={fetchServiceAccounts}/>\n        </PageSection>\n        {renderTableView()}\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { ServiceAccounts };\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServiceAccounts, ServiceAccountsProps } from './ServiceAccounts';\nimport { AuthContext, IAuthContext } from '@app/auth/AuthContext';\nimport { AlertContext, AlertContextProps } from '@app/common/MASAlerts/MASAlerts';\nimport { ApiContext } from '@app/api/ApiContext';\nimport '../../../i18n/i18n';\n\n// Federation version of ServiceAccounts\n\nexport type ServiceAccountsFederatedProps = ServiceAccountsProps & {\n  getToken: () => Promise<string>;\n  getUsername: () => Promise<string>;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  basePath: string;\n};\n\nconst ServiceAccountsFederated = ({\n  getUsername,\n  getToken,\n  addAlert,\n  basePath,\n  getConnectToInstancePath,\n}: ServiceAccountsFederatedProps) => {\n  const authContext = {\n    getToken,\n    getUsername,\n  } as IAuthContext;\n\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n\n  return (\n    <BrowserRouter>\n      <ApiContext.Provider\n        value={{\n          basePath: basePath,\n        }}\n      >\n        <AlertContext.Provider value={alertContext}>\n          <AuthContext.Provider value={authContext}>\n            <ServiceAccounts getConnectToInstancePath={getConnectToInstancePath} />\n          </AuthContext.Provider>\n        </AlertContext.Provider>\n      </ApiContext.Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default ServiceAccountsFederated;\n"],"sourceRoot":""}