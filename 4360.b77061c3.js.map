{"version":3,"file":"4360.b77061c3.js","mappings":"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","sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/createIcon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/aws-icon.js","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/InstanceInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/QuotaAlert.tsx","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudRegionsSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudProviderTiles.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceForm.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIcon = exports.getSize = exports.IconSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nvar IconSize;\n(function (IconSize) {\n    IconSize[\"sm\"] = \"sm\";\n    IconSize[\"md\"] = \"md\";\n    IconSize[\"lg\"] = \"lg\";\n    IconSize[\"xl\"] = \"xl\";\n})(IconSize = exports.IconSize || (exports.IconSize = {}));\nconst getSize = (size) => {\n    switch (size) {\n        case IconSize.sm:\n            return '1em';\n        case IconSize.md:\n            return '1.5em';\n        case IconSize.lg:\n            return '2em';\n        case IconSize.xl:\n            return '3em';\n        default:\n            return '1em';\n    }\n};\nexports.getSize = getSize;\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\nfunction createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {\n    var _a;\n    return _a = class SVGIcon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.id = `icon-title-${currentId++}`;\n            }\n            render() {\n                const _a = this.props, { size, color, title, noVerticalAlign } = _a, props = tslib_1.__rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n                const hasTitle = Boolean(title);\n                const heightWidth = exports.getSize(size);\n                const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n                const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n                const viewBox = [xOffset, yOffset, width, height].join(' ');\n                return (React.createElement(\"svg\", Object.assign({ style: style, fill: color, height: heightWidth, width: heightWidth, viewBox: viewBox, \"aria-labelledby\": hasTitle ? this.id : null, \"aria-hidden\": hasTitle ? null : true, role: \"img\" }, props),\n                    hasTitle && React.createElement(\"title\", { id: this.id }, title),\n                    React.createElement(\"path\", { d: svgPath })));\n            }\n        },\n        _a.displayName = name,\n        _a.defaultProps = {\n            color: 'currentColor',\n            size: IconSize.sm,\n            noVerticalAlign: false\n        },\n        _a;\n}\nexports.createIcon = createIcon;\n//# sourceMappingURL=createIcon.js.map","\"use strict\"\nexports.__esModule = true;\nexports.AwsIconConfig = {\n  name: 'AwsIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.37 637.37 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.AwsIcon = require('../createIcon').createIcon(exports.AwsIconConfig);\nexports[\"default\"] = exports.AwsIcon;","import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\n\nexport type InstanceInfoProps = {\n  isKasTrial?: boolean;\n};\n\nconst InstanceInfo: React.FC<InstanceInfoProps> = ({ isKasTrial }) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>\n        {t('common.instance_information')}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          {isKasTrial && (\n            <GridItem>\n              <TextListItem component={TextListItemVariants.dt}>\n                {t('common.duration')}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {t('common.duration_value')}\n              </TextListItem>\n            </GridItem>\n          )}\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.ingress_egress')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.ingress_egress_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.storage')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.storage_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.partitions')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.partitions_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.client_connections')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.client_connections_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.connection_rate')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.connection_rate_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('common.message_size')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('common.message_size_value')}\n            </TextListItem>\n          </GridItem>\n        </Grid>\n        <Button\n          isSmall\n          isInline\n          variant={ButtonVariant.link}\n          style={{ marginTop: '20px' }}\n          onClick={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart('getting-started')\n          }\n        >\n          {t('common.quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { InstanceInfo };\n","import React from 'react';\nimport { Alert, AlertVariant, Spinner } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Quota, QuotaType } from '@rhoas/app-services-ui-shared';\n\nexport type QuotaAlertProps = {\n  quota: Quota | undefined;\n  hasKafkaCreationFailed?: boolean;\n  loadingQuota: boolean;\n  userHasTrialInstance?: boolean;\n  isKasTrial?: boolean;\n};\n\nexport const QuotaAlert: React.FC<QuotaAlertProps> = ({\n  quota,\n  hasKafkaCreationFailed,\n  userHasTrialInstance,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n\n  if (quota === undefined || quota.loading) {\n    return (\n      <Alert\n        id='mk-create-instance-quota-alert'\n        className='pf-u-mb-md'\n        variant={AlertVariant.info}\n        title={t('instance_checking_message')}\n        aria-live='polite'\n        isInline\n        customIcon={\n          <Spinner size='md' aria-valuetext='Checking kafka availability' />\n        }\n      />\n    );\n  }\n\n  type QuotaAlertProps = {\n    titleKey: string;\n    messageKey: string;\n    variant: AlertVariant;\n  };\n\n  const getQuotaAlertProps = (): QuotaAlertProps | undefined => {\n    const kasQuota = quota.data?.get(QuotaType?.kas);\n    const kasTrial = quota.data?.get(QuotaType?.kasTrial);\n\n    //if kafka creation failed for quota related\n    if (hasKafkaCreationFailed) {\n      return {\n        variant: AlertVariant.danger,\n        titleKey: 'kafka_creation_failed_alert_title',\n        messageKey: kasQuota\n          ? 'standard_kafka_alert_message'\n          : 'trial_kafka_creation_failed_alert_message',\n      };\n    }\n\n    //if service down or any error\n    if (quota.isServiceDown) {\n      return {\n        titleKey: 'something_went_wrong',\n        variant: AlertVariant.danger,\n        messageKey: 'ams_service_down_message',\n      };\n    }\n\n    //trial quota flows\n    //if user has no standard quota and already has a trial instance\n    if (!kasQuota && kasTrial && userHasTrialInstance) {\n      return {\n        titleKey: 'trial_kafka_title',\n        variant: AlertVariant.warning,\n        messageKey: 'deploy_one_instance_alert_message',\n      };\n    }\n    //if user has no standard quota and no trial quota\n    if (!kasQuota && !kasTrial) {\n      return {\n        variant: AlertVariant.warning,\n        titleKey: 'no_quota_kafka_alert_title',\n        messageKey: 'no_quota_kafka_alert_message',\n      };\n    }\n    //if user has no standard quota and trial instances are available\n    if (!kasQuota && kasTrial && !userHasTrialInstance) {\n      return {\n        variant: AlertVariant.info,\n        titleKey: 'trial_quota_kafka_title',\n        messageKey: '',\n      };\n    }\n\n    //standard quota flows\n    //if user has standard quota but all allowed instances are already provisioned\n    if (kasQuota && kasQuota?.remaining === 0) {\n      return {\n        variant: AlertVariant.warning,\n        titleKey: 'standard_kafka_alert_title',\n        messageKey: 'standard_kafka_alert_message',\n      };\n    }\n    return undefined;\n  };\n\n  const alertProps = getQuotaAlertProps();\n\n  if (alertProps === undefined) {\n    return <></>;\n  }\n\n  return (\n    <Alert\n      id='mk-create-instance-quota-alert'\n      className='pf-u-mb-md'\n      variant={alertProps.variant}\n      title={t(alertProps.titleKey)}\n      aria-live='polite'\n      isInline\n    >\n      {t(alertProps.messageKey)}\n    </Alert>\n  );\n};\n","import { KafkaRequestPayload } from '@rhoas/kafka-management-sdk';\nimport { Validated } from '@app/models/validated';\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error('kafkaRequest.name must not be undefined');\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error('kafkaRequest.region must not be undefined');\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error('kafkaRequest.multi_az must not be undefined');\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error('kafkaRequest.cloud_provider must not be undefined');\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    multi_az: kafkaRequest.multi_az.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === 'error' ||\n    value.region.validated === 'error' ||\n    value.cloud_provider.validated === 'error' ||\n    value.multi_az.validated === 'error'\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: '',\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: '',\n    },\n    name: {\n      value: '',\n    },\n  };\n};\n","import { NewKafkaRequestPayload } from '@app/models';\nimport { CloudRegion } from '@rhoas/kafka-management-sdk';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FormSelect, FormSelectOption, Skeleton } from '@patternfly/react-core';\n\nexport type CloudRegionProps = {\n  kafkaRequest: NewKafkaRequestPayload;\n  selectCloudRegion: (region: string) => void;\n  cloudRegions: CloudRegion[] | undefined;\n};\n\nexport const CloudRegionSelect: React.FunctionComponent<CloudRegionProps> = ({\n  kafkaRequest,\n  selectCloudRegion,\n  cloudRegions,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n\n  return (\n    <FormSelect\n      validated={kafkaRequest.region.validated}\n      value={kafkaRequest.region.value}\n      onChange={selectCloudRegion}\n      id='form-cloud-region-option'\n      name='cloud-region'\n      isDisabled={cloudRegions === undefined}\n    >\n      {[\n        <FormSelectOption\n          value=''\n          key='placeholder'\n          label={t('select_region')}\n        />,\n        (cloudRegions || []).map(\n          ({ id, display_name = '' }: CloudRegion, index) => {\n            return (\n              <FormSelectOption\n                key={index}\n                value={id}\n                label={id ? t(id) : display_name}\n              />\n            );\n          }\n        ),\n      ]}\n    </FormSelect>\n  );\n};\n","import { CloudProvider } from '@rhoas/kafka-management-sdk';\nimport { NewKafkaRequestPayload } from '@app/models';\nimport React from 'react';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport { Skeleton, Tile } from '@patternfly/react-core';\n\nexport type CloudProvidersTileProps = {\n  cloudProviders?: CloudProvider[];\n  kafkaRequest: NewKafkaRequestPayload;\n  selectCloudProvider: (cloudProvider: CloudProvider) => void;\n};\n\nexport const CloudProvidersTiles: React.FunctionComponent<CloudProvidersTileProps> =\n  ({ cloudProviders, kafkaRequest, selectCloudProvider }) => {\n    const getTileIcon = (provider?: string) => {\n      switch (provider?.toLowerCase()) {\n        case 'aws':\n          return (\n            <AwsIcon\n              size='lg'\n              color='black'\n              className='mk--create-instance__tile--icon'\n            />\n          );\n        default:\n          return;\n      }\n    };\n\n    if (cloudProviders === undefined) {\n      return (\n        <Skeleton\n          className='pf-m-text-4xl'\n          screenreaderText='Loading contents'\n        />\n      );\n    }\n\n    return (\n      <>\n        {cloudProviders.map((provider: CloudProvider) => {\n          return (\n            <Tile\n              key={`tile-${provider.name}`}\n              title={provider.display_name || ''}\n              icon={getTileIcon(provider.name)}\n              isSelected={kafkaRequest.cloud_provider.value === provider.name}\n              onClick={() => selectCloudProvider(provider)}\n            />\n          );\n        })}\n      </>\n    );\n  };\n","import {\n  createEmptyNewKafkaRequestPayload,\n  isKafkaRequestInvalid,\n  NewKafkaRequestPayload,\n} from '@app/models';\nimport { CloudProvider, CloudRegion } from '@rhoas/kafka-management-sdk';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils';\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  FormGroup,\n  TextInput,\n  ToggleGroup,\n  ToggleGroupItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { CloudRegionSelect } from '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudRegionsSelect';\nimport {\n  CloudProvidersTileProps,\n  CloudProvidersTiles,\n} from '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CloudProviderTiles';\n\nexport type CreateInstanceFormProps = Pick<\n  CloudProvidersTileProps,\n  'cloudProviders'\n> & {\n  createInstance: () => Promise<void>;\n  kafkaRequest: NewKafkaRequestPayload;\n  setKafkaRequest: React.Dispatch<React.SetStateAction<NewKafkaRequestPayload>>;\n  getCloudRegions: (id: string) => Promise<CloudRegion[] | undefined>;\n  id: string;\n};\n\nexport const CreateInstanceForm: React.FunctionComponent<CreateInstanceFormProps> =\n  ({\n    createInstance,\n    kafkaRequest,\n    setKafkaRequest,\n    cloudProviders,\n    getCloudRegions: fetchCloudRegions,\n    id,\n  }) => {\n    const { t } = useTranslation(['kasTemporaryFixMe']);\n\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [cloudRegions, setCloudRegions] = useState<\n      CloudRegion[] | undefined\n    >();\n\n    const validateName = (kafkaRequest: NewKafkaRequestPayload) => {\n      //validate required field\n      if (\n        kafkaRequest.name.value === undefined ||\n        kafkaRequest.name.value.trim() === ''\n      ) {\n        kafkaRequest.name.validated = 'error';\n        kafkaRequest.name.errorMessage = t('common.this_is_a_required_field');\n      }\n      //validate regex\n      else if (\n        !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(kafkaRequest.name.value.trim())\n      ) {\n        kafkaRequest.name.validated = 'error';\n        kafkaRequest.name.errorMessage = t(\n          'common.input_filed_invalid_helper_text'\n        );\n      }\n      //validate max length\n      else if (kafkaRequest.name.value.length > MAX_INSTANCE_NAME_LENGTH) {\n        kafkaRequest.name.validated = 'error';\n        kafkaRequest.name.errorMessage = t('length_is_greater_than_expected', {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        });\n      }\n      return kafkaRequest;\n    };\n\n    const validateCloudRegion = (kafkaRequest: NewKafkaRequestPayload) => {\n      if (\n        kafkaRequest.region.value === undefined ||\n        kafkaRequest.region.value.trim() === ''\n      ) {\n        kafkaRequest.region.validated = 'error';\n        kafkaRequest.region.errorMessage = t('common.this_is_a_required_field');\n      }\n      return kafkaRequest;\n    };\n\n    const validateMultiAz = (kafkaRequest: NewKafkaRequestPayload) => {\n      return kafkaRequest;\n    };\n\n    const validateCloudProvider = (kafkaRequest: NewKafkaRequestPayload) => {\n      return kafkaRequest;\n    };\n\n    const submit = (event) => {\n      event.preventDefault();\n      setFormSubmitted(true);\n      const validated = validateMultiAz(\n        validateCloudProvider(validateCloudRegion(validateName(kafkaRequest)))\n      );\n      setKafkaRequest({ ...validated });\n\n      if (!isKafkaRequestInvalid(validated)) {\n        createInstance().then(() => {\n          if (kafkaRequest.name.validated !== 'error') {\n            resetForm();\n          }\n        });\n      }\n    };\n\n    const resetForm = () => {\n      setFormSubmitted(false);\n      setKafkaRequest(createEmptyNewKafkaRequestPayload());\n    };\n\n    const setName = (name: string) => {\n      setKafkaRequest((prevState) => {\n        const value = {\n          ...prevState,\n          name: {\n            value: name,\n          },\n        };\n        return validateName(value);\n      });\n    };\n\n    const selectCloudProvider = (cloudProvider: CloudProvider) => {\n      setKafkaRequest((prevState) => {\n        const kafkaRequest = {\n          ...prevState,\n          cloud_provider: {\n            value: cloudProvider.name || '',\n          },\n        };\n        return validateCloudProvider(kafkaRequest);\n      });\n    };\n\n    const selectCloudRegion = (region: string) => {\n      setKafkaRequest((prevState) => {\n        const kafkaRequest = {\n          ...prevState,\n          region: {\n            value: region || '',\n          },\n        };\n        return validateCloudRegion(kafkaRequest);\n      });\n    };\n\n    const selectAz = (selected: boolean) => {\n      setKafkaRequest((prevState) => {\n        const kafkaRequest = {\n          ...prevState,\n          multi_az: {\n            value: selected,\n          },\n        };\n        return validateMultiAz(kafkaRequest);\n      });\n    };\n\n    useEffect(() => {\n      if (\n        cloudProviders !== undefined &&\n        cloudProviders.length > 0 &&\n        cloudProviders[0].name\n      ) {\n        selectCloudProvider(cloudProviders[0]);\n      }\n    }, [cloudProviders]);\n\n    useEffect(() => {\n      selectAz(true);\n    }, []);\n\n    useEffect(() => {\n      const loadCloudRegions = async (cloudProvider: string) => {\n        const cloudRegions = await fetchCloudRegions(cloudProvider);\n        //set default selected region if there is one region\n        if (\n          cloudRegions !== undefined &&\n          cloudRegions.length === 1 &&\n          cloudRegions[0].id !== undefined\n        ) {\n          selectCloudRegion(cloudRegions[0].id);\n        }\n        setCloudRegions(cloudRegions);\n      };\n      if (kafkaRequest.cloud_provider.value !== undefined) {\n        loadCloudRegions(kafkaRequest.cloud_provider.value);\n      }\n    }, [kafkaRequest.cloud_provider]);\n\n    const FormValidAlert: React.FunctionComponent = () => {\n      if (formSubmitted && isKafkaRequestInvalid(kafkaRequest)) {\n        return (\n          <FormAlert>\n            <Alert\n              variant='danger'\n              title={t('common.form_invalid_alert')}\n              aria-live='polite'\n              isInline\n            />\n          </FormAlert>\n        );\n      }\n      return <></>;\n    };\n\n    return (\n      <Form onSubmit={submit} id={id}>\n        <FormValidAlert />\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={kafkaRequest.name.errorMessage}\n          isRequired\n          validated={kafkaRequest.name.validated}\n          fieldId='form-instance-name'\n        >\n          <TextInput\n            isRequired\n            validated={kafkaRequest.name.validated}\n            type='text'\n            id='form-instance-name'\n            name='instance-name'\n            value={kafkaRequest.name.value}\n            onChange={setName}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_provider')}\n          fieldId='form-cloud-provider-name'\n        >\n          <CloudProvidersTiles\n            kafkaRequest={kafkaRequest}\n            selectCloudProvider={selectCloudProvider}\n            cloudProviders={cloudProviders}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={kafkaRequest.region.errorMessage}\n          validated={kafkaRequest.region.validated}\n          fieldId='form-cloud-region-option'\n          isRequired\n        >\n          <CloudRegionSelect\n            kafkaRequest={kafkaRequest}\n            selectCloudRegion={selectCloudRegion}\n            cloudRegions={cloudRegions}\n          />\n        </FormGroup>\n        <FormGroup label={t('availability_zones')} fieldId='availability-zones'>\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n            >\n              <ToggleGroupItem\n                text={t('single')}\n                value={'single'}\n                isDisabled\n                buttonId='single'\n                onChange={selectAz}\n              />\n            </Tooltip>\n            <ToggleGroupItem\n              text={t('multi')}\n              value='multi'\n              buttonId='multi'\n              isSelected={kafkaRequest.multi_az.value || false}\n              onChange={selectAz}\n            />\n            <Tooltip\n              content={t('kafkaInstance.availabilty_zones_tooltip_message')}\n              reference={() =>\n                document.getElementById('multi') ||\n                document.createElement('span')\n              }\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  Button,\n  Divider,\n  Flex,\n  FlexItem,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport { isServiceApiError } from '@app/utils/error';\nimport { ErrorCodes, getModalAppendTo, InstanceType } from '@app/utils';\nimport {\n  CloudProvider,\n  Configuration,\n  DefaultApi,\n} from '@rhoas/kafka-management-sdk';\nimport './CreateInstance.css';\nimport { InstanceInfo } from './InstanceInfo';\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n  Quota,\n  QuotaType,\n  QuotaValue,\n  useAlert,\n  useAuth,\n  useConfig,\n  useQuota,\n} from '@rhoas/app-services-ui-shared';\nimport { QuotaAlert } from './QuotaAlert';\nimport { CreateInstanceForm } from '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstanceForm';\nimport {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n  isKafkaRequestInvalid,\n  NewKafkaRequestPayload,\n} from '@app/models';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\n\nconst FORM_ID = 'create_instance_-form';\n\nconst CreateInstance: React.FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ onCreate, title, hideModal }) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { addAlert } = useAlert() || {};\n  const { getQuota } = useQuota() || {};\n\n  const { isVisible } = usePageVisibility();\n\n  const [kafkaRequest, setKafkaRequest] = useState<NewKafkaRequestPayload>(\n    createEmptyNewKafkaRequestPayload()\n  );\n\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const [quota, setQuota] = useState<Quota>();\n  const [hasKafkaCreationFailed, setHasKafkaCreationFailed] =\n    useState<boolean>(false);\n\n  const [cloudProviders, setCloudProviders] = useState<\n    CloudProvider[] | undefined\n  >();\n  const [userHasTrialInstance, setUserHasTrialInstance] = useState<\n    boolean | undefined\n  >();\n\n  const kasQuota: QuotaValue | undefined = quota?.data?.get(QuotaType?.kas);\n  const kasTrial: QuotaValue | undefined = quota?.data?.get(\n    QuotaType?.kasTrial\n  );\n  const loadingQuota = quota?.loading === undefined ? true : quota?.loading;\n  const isKasTrial = kasTrial && !kasQuota;\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (id: string) => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && id && loadingQuota === false) {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      const regions = await apisService.getCloudProviderRegions(\n        id,\n        undefined,\n        undefined,\n        isKasTrial ? InstanceType.eval : InstanceType.standard\n      );\n      return regions.data.items?.filter((p) => p.enabled);\n    }\n    return undefined;\n  };\n\n  const fetchQuota = async () => {\n    if (getQuota) {\n      await getQuota().then((res) => {\n        setQuota(res);\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchQuota();\n  }, []);\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && basePath) {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await apisService.getCloudProviders().then((res) => {\n        const providers = res?.data?.items || [];\n        const enabledCloudProviders: CloudProvider[] = providers?.filter(\n          (p: CloudProvider) => p.enabled\n        );\n        setCloudProviders(enabledCloudProviders);\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchCloudProviders();\n  }, []);\n\n  const fetchUserHasTrialInstance = async () => {\n    const loggedInUser = await auth?.getUsername();\n    const accessToken = await auth?.kas.getToken();\n    if (loggedInUser) {\n      const filter = `owner = ${loggedInUser}`;\n      if (accessToken && isVisible) {\n        try {\n          const apisService = new DefaultApi(\n            new Configuration({\n              accessToken,\n              basePath,\n            })\n          );\n          const res = await apisService.getKafkas('', '', '', filter);\n          if (res.data.items) {\n            setUserHasTrialInstance(\n              res.data.items.some(\n                (k) => k?.instance_type === InstanceType?.eval\n              )\n            );\n          }\n        } catch (error) {\n          handleServerError(error);\n        }\n      }\n    }\n  };\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        variant: AlertVariant.danger,\n        title: t('common.something_went_wrong'),\n        description: reason,\n      });\n  };\n\n  useEffect(() => {\n    fetchUserHasTrialInstance();\n  }, []);\n\n  const createInstance = async () => {\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        setCreationInProgress(true);\n        onCreate && onCreate();\n        await apisService.createKafka(\n          true,\n          asKafkaRequestPayload(kafkaRequest)\n        );\n        hideModal();\n        onCreate && onCreate();\n      } catch (error) {\n        if (isServiceApiError(error)) {\n          const { code, reason } = error?.response?.data || {};\n          //if instance name duplicate\n          if (code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n            kafkaRequest.name.validated = 'error';\n            kafkaRequest.name.errorMessage = t(\n              'the_name_already_exists_please_enter_a_unique_name',\n              {\n                name: kafkaRequest.name.value,\n              }\n            );\n          }\n          //if kafka creation failed due to quota\n          else if (\n            code === ErrorCodes.PREVIEW_KAFKA_INSTANCE_EXIST ||\n            code === ErrorCodes.INSUFFICIENT_QUOTA ||\n            code === ErrorCodes.FAILED_TO_CHECK_QUOTA\n          ) {\n            setHasKafkaCreationFailed(true);\n          } else {\n            addAlert &&\n              addAlert({\n                title: t('common.something_went_wrong'),\n                variant: AlertVariant.danger,\n                description: reason,\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  return (\n    <Modal\n      id='modalCreateKafka'\n      variant={ModalVariant.medium}\n      title={title}\n      isOpen={true}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key='submit'\n          variant='primary'\n          type='submit'\n          form={FORM_ID}\n          isDisabled={\n            isKafkaRequestInvalid(kafkaRequest) ||\n            isCreationInProgress ||\n            loadingQuota ||\n            userHasTrialInstance ||\n            hasKafkaCreationFailed ||\n            (kasQuota && kasQuota?.remaining === 0) ||\n            (!kasQuota && !kasTrial)\n          }\n          spinnerAriaValueText={t('submitting_request')}\n          isLoading={isCreationInProgress}\n          data-testid='modalCreateKafka-buttonSubmit'\n          ouiaId='button-create'\n        >\n          {t('create_instance')}\n        </Button>,\n        <Button\n          key='cancel'\n          variant='link'\n          onClick={handleModalToggle}\n          data-testid='modalCreateKafka-buttonCancel'\n        >\n          {t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>\n          <QuotaAlert\n            quota={quota}\n            hasKafkaCreationFailed={hasKafkaCreationFailed}\n            loadingQuota={loadingQuota}\n            userHasTrialInstance={userHasTrialInstance}\n            isKasTrial={isKasTrial}\n          />\n          <CreateInstanceForm\n            kafkaRequest={kafkaRequest}\n            setKafkaRequest={setKafkaRequest}\n            createInstance={createInstance}\n            cloudProviders={cloudProviders}\n            getCloudRegions={fetchCloudRegions}\n            id={FORM_ID}\n          />\n        </FlexItem>\n        <Divider isVertical />\n        <FlexItem\n          flex={{ default: 'flex_1' }}\n          className='mk--create-instance-modal__sidebar--content'\n        >\n          <InstanceInfo isKasTrial={isKasTrial} />\n        </FlexItem>\n      </Flex>\n    </Modal>\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string;\n  id: number;\n  kind: string;\n  reason: string;\n}\n\nconst isServiceApiError = (\n  error: unknown\n): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n};\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = 'KAFKAS-MGMT-4',\n  DUPLICATE_INSTANCE_NAME = 'KAFKAS-MGMT-36',\n  PREVIEW_KAFKA_INSTANCE_EXIST = 'KAFKAS-MGMT-24',\n  INSUFFICIENT_QUOTA = 'KAFKAS-MGMT-120',\n  FAILED_TO_CHECK_QUOTA = 'KAFKAS-MGMT-121',\n  OWNER_DOES_NOT_EXIST = 'KAFKAS-MGMT-21',\n}\n\nexport { ErrorCodes, isServiceApiError };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string): void {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { IRowCell, IRowData } from '@patternfly/react-table';\nimport { formatDistance } from 'date-fns';\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};\n\nenum InstanceStatus {\n  READY = 'ready',\n  ACCEPTED = 'accepted',\n  PREPARING = 'preparing',\n  PROVISIONING = 'provisioning',\n  FAILED = 'failed',\n  DEPROVISION = 'deprovision',\n  DELETED = 'deleting',\n}\n\nenum InstanceType {\n  eval = 'eval',\n  standard = 'standard',\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n  { value: 'deleting', label: 'Deletion in progress' },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n  { value: 'eu-west-1', label: 'EU, Ireland' },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst sortValues = <T>(\n  items: T[] | undefined,\n  key: string,\n  order = 'asc'\n): T[] | undefined => {\n  const compareValue = (a: T, b: T) => {\n    if (\n      !Object.prototype.hasOwnProperty.call(a, key) ||\n      Object.prototype.hasOwnProperty.call(b, key)\n    ) {\n      // property doesn't exist on either object\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order === 'desc' ? comparison * -1 : comparison;\n  };\n  return items?.sort(compareValue);\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === 'string' ? new Date(date) : date;\n  return formatDistance(date, new Date()) + ' ' + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById('chrome-app-render-root') as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || window['opera']);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  sortValues,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n};\n"],"names":["Object","defineProperty","exports","value","createIcon","getSize","IconSize","tslib_1","React","__importStar","size","sm","md","lg","xl","currentId","name","xOffset","yOffset","width","height","svgPath","_a","Component","constructor","super","arguments","this","id","render","props","color","title","noVerticalAlign","__rest","hasTitle","Boolean","heightWidth","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","createElement","assign","fill","role","d","displayName","defaultProps","getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","InstanceInfo","isKasTrial","t","useTranslation","qsContext","QuickStartContext","TextContent","Text","component","TextVariants","TextList","TextListVariants","Grid","hasGutter","GridItem","TextListItem","TextListItemVariants","Button","isSmall","isInline","variant","ButtonVariant","marginTop","onClick","setActiveQuickStart","QuotaAlert","quota","hasKafkaCreationFailed","userHasTrialInstance","undefined","loading","Alert","className","AlertVariant","customIcon","Spinner","alertProps","kasQuota","data","get","QuotaType","kasTrial","titleKey","messageKey","isServiceDown","remaining","getQuotaAlertProps","asKafkaRequestPayload","kafkaRequest","Error","region","multi_az","cloud_provider","isKafkaRequestInvalid","validated","CloudRegionSelect","selectCloudRegion","cloudRegions","FormSelect","onChange","isDisabled","FormSelectOption","key","label","map","index","display_name","CloudProvidersTiles","cloudProviders","selectCloudProvider","getTileIcon","provider","toLowerCase","Skeleton","screenreaderText","Tile","icon","isSelected","CreateInstanceForm","createInstance","setKafkaRequest","fetchCloudRegions","formSubmitted","setFormSubmitted","setCloudRegions","validateName","trim","errorMessage","test","length","maxLength","validateCloudRegion","resetForm","cloudProvider","prevState","selectAz","selected","Form","onSubmit","event","preventDefault","then","FormAlert","FormGroup","helperText","helperTextInvalid","isRequired","fieldId","TextInput","type","autoFocus","ToggleGroup","Tooltip","content","ToggleGroupItem","text","buttonId","reference","getElementById","FORM_ID","CreateInstance","onCreate","hideModal","auth","useAuth","basePath","useConfig","addAlert","useAlert","getQuota","useQuota","isCreationInProgress","setCreationInProgress","setQuota","setHasKafkaCreationFailed","setCloudProviders","setUserHasTrialInstance","loadingQuota","res","kas","getToken","accessToken","DefaultApi","Configuration","getCloudProviders","providers","items","enabledCloudProviders","filter","p","enabled","handleServerError","error","reason","response","description","getUsername","loggedInUser","getKafkas","some","k","instance_type","handleModalToggle","Modal","ModalVariant","isOpen","onClose","appendTo","actions","form","spinnerAriaValueText","isLoading","ouiaId","Flex","direction","default","FlexItem","flex","apisService","createKafka","code","dataTestId","getCloudRegions","getCloudProviderRegions","regions","Divider","isVertical","ErrorCodes","isServiceApiError","useDocumentTitle","originalTitle","InstanceStatus","InstanceType","cloudProviderOptions","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_SERVICE_ACCOUNT_NAME_LENGTH","MAX_POLL_INTERVAL","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","Math","floor","getFormattedDate","date","translatePostfix","Date","formatDistance","getModalAppendTo","body","isMobileTablet","a","check","navigator","userAgent","vendor","window","substr","getSkeletonForRows","loadingCount","skeleton","rows","cells","i","push"],"sourceRoot":""}