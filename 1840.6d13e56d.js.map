{"version":3,"file":"1840.6d13e56d.js","mappings":"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","sources":["webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerContent.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/contexts/InstanceDrawerContext.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/Pagination.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/StreamsTableConnected.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StatusColumn/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/hooks.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/NameFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/RegionFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/FilterSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StatusFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsToolbar/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/Unauthorized/Unauthorized.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KafkaEmptyState/KafkaEmptyState.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KasLayout/KasLayout.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/utils';\nimport { MASLoading } from '@app/common';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { ConnectionTabProps } from '@app/modules/InstanceDrawer/ConnectionTab';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\n\nexport const ResourcesTab = React.lazy(() => import('./ConnectionTab'));\nexport const DetailsTab = React.lazy(() => import('./DetailsTab'));\n\nexport type InstanceDrawerContentProps = Pick<\n  ConnectionTabProps,\n  'tokenEndPointUrl'\n>;\n\nexport const InstanceDrawerContent: React.FunctionComponent<InstanceDrawerContentProps> =\n  ({ tokenEndPointUrl }) => {\n    const { t } = useTranslation();\n\n    const { instanceDrawerTab, setInstanceDrawerTab, instanceDrawerInstance } =\n      useInstanceDrawer();\n\n    const selectTab = (tab: string | number) => {\n      if (tab === InstanceDrawerTab.CONNECTION) {\n        setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n      } else {\n        setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n      }\n    };\n\n    const getExternalServer = () => {\n      const { bootstrap_server_host } = instanceDrawerInstance || {};\n      return bootstrap_server_host?.endsWith(':443')\n        ? bootstrap_server_host\n        : `${bootstrap_server_host}:443`;\n    };\n\n    const isKafkaPending =\n      instanceDrawerInstance?.status === InstanceStatus.ACCEPTED ||\n      instanceDrawerInstance?.status === InstanceStatus.PREPARING;\n\n    return (\n      <React.Suspense fallback={<MASLoading />}>\n        <Tabs\n          activeKey={instanceDrawerTab.toString()}\n          onSelect={(_, tab) => selectTab(tab)}\n        >\n          <Tab\n            eventKey={InstanceDrawerTab.DETAILS.toString()}\n            title={<TabTitleText>{t('details')}</TabTitleText>}\n          >\n            <DetailsTab />\n          </Tab>\n          <Tab\n            eventKey={InstanceDrawerTab.CONNECTION.toString()}\n            title={<TabTitleText>{t('connection')}</TabTitleText>}\n            data-testid='drawerStreams-tabConnect'\n          >\n            <ResourcesTab\n              externalServer={getExternalServer()}\n              isKafkaPending={isKafkaPending}\n              tokenEndPointUrl={tokenEndPointUrl}\n              instanceId={instanceDrawerInstance?.id}\n            />\n          </Tab>\n        </Tabs>\n      </React.Suspense>\n    );\n  };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport './InstanceDrawer.css';\nimport {\n  InstanceDrawerContent,\n  InstanceDrawerContentProps,\n} from '@app/modules/InstanceDrawer/InstanceDrawerContent';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  | 'drawerHeaderProps'\n  | 'panelBodyContent'\n  | '[data-ouia-app-id]'\n  | 'isExpanded'\n  | 'isLoading'\n  | 'onClose'\n  | 'notRequiredDrawerContentBackground'\n> &\n  InstanceDrawerContentProps;\n\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  tokenEndPointUrl,\n}) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n  const {\n    isInstanceDrawerOpen,\n    instanceDrawerInstance,\n    closeInstanceDrawer,\n    noInstances,\n  } = useInstanceDrawer();\n\n  return (\n    <MASDrawer\n      isExpanded={isInstanceDrawerOpen}\n      isLoading={instanceDrawerInstance === undefined}\n      onClose={closeInstanceDrawer}\n      panelBodyContent={\n        <InstanceDrawerContent tokenEndPointUrl={tokenEndPointUrl} />\n      }\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: instanceDrawerInstance?.name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={noInstances}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useState } from 'react';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\nimport { KafkaInstance } from '@rhoas/app-services-ui-shared';\n\nexport type InstanceDrawerContextProps = {\n  isInstanceDrawerOpen: boolean;\n  instanceDrawerTab: InstanceDrawerTab;\n  setInstanceDrawerTab: (tab: InstanceDrawerTab) => void;\n  openInstanceDrawer: (tab?: InstanceDrawerTab) => void;\n  closeInstanceDrawer: () => void;\n  instanceDrawerInstance: KafkaInstance | undefined;\n  setInstanceDrawerInstance: (instance: KafkaInstance) => void;\n  setNoInstances: (noInstances: boolean) => void;\n  noInstances: boolean;\n};\n\nexport const InstanceDrawerContext = React.createContext<\n  InstanceDrawerContextProps | undefined\n>(undefined);\n\nexport const useInstanceDrawer = (): InstanceDrawerContextProps => {\n  const answer = useContext(InstanceDrawerContext);\n  if (answer === undefined) {\n    throw new Error('must be used inside a InstanceDrawerContext provider');\n  }\n  return answer;\n};\n\nexport type InstanceDrawerContextProviderProps = {\n  initialTab?: InstanceDrawerTab;\n  initialInstance?: KafkaInstance;\n  initialNoInstances?: boolean;\n};\n\nexport const InstanceDrawerContextProvider: React.FunctionComponent<InstanceDrawerContextProviderProps> =\n  ({ initialTab, initialInstance, initialNoInstances = false, children }) => {\n    const defaultTab = InstanceDrawerTab.DETAILS;\n    const [instanceDrawerTab, setInstanceDrawerTab] = useState<\n      InstanceDrawerTab | undefined\n    >(initialTab);\n    const [instanceDrawerInstance, setInstanceDrawerInstance] = useState<\n      KafkaInstance | undefined\n    >(initialInstance);\n    const [noInstances, setNoInstances] = useState<boolean>(initialNoInstances);\n    return (\n      <InstanceDrawerContext.Provider\n        value={{\n          isInstanceDrawerOpen: instanceDrawerTab !== undefined,\n          instanceDrawerTab:\n            instanceDrawerTab === undefined ? defaultTab : instanceDrawerTab,\n          setInstanceDrawerTab,\n          instanceDrawerInstance,\n          setInstanceDrawerInstance,\n          setNoInstances,\n          noInstances,\n          openInstanceDrawer: (tab) => {\n            if (tab) {\n              setInstanceDrawerTab(tab);\n            } else {\n              setInstanceDrawerTab(defaultTab);\n            }\n          },\n          closeInstanceDrawer: () => {\n            setInstanceDrawerTab(undefined);\n            setInstanceDrawerInstance(undefined);\n          },\n        }}\n      >\n        {children}\n      </InstanceDrawerContext.Provider>\n    );\n  };\n","export enum InstanceDrawerTab {\n  DETAILS = 'details',\n  CONNECTION = 'connection',\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASPagination } from '@app/common';\nimport { PaginationVariant } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nexport const Pagination: React.FunctionComponent<PaginationProps> = ({\n  total,\n  page,\n  perPage,\n}) => {\n  const { t } = useTranslation();\n  if (total > 0) {\n    return (\n      <MASPagination\n        widgetId='pagination-cloudProviderOptions-menu-bottom'\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        titles={{\n          paginationTitle: t('full_pagination'),\n          perPageSuffix: t('per_page_suffix'),\n          toFirstPage: t('to_first_page'),\n          toPreviousPage: t('to_previous_page'),\n          toLastPage: t('to_last_page'),\n          toNextPage: t('to_next_page'),\n          optionsToggle: t('options_toggle'),\n          currPage: t('curr_page'),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import React from 'react';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { useTranslation } from 'react-i18next';\n\nexport type NoResultsFoundProps = {\n  count: number;\n  dataLoaded: boolean;\n};\nexport const NoResultsFound: React.FunctionComponent<NoResultsFoundProps> = ({\n  count,\n  dataLoaded,\n}) => {\n  const { t } = useTranslation();\n\n  if (count < 1 && dataLoaded) {\n    return (\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t('no_results_found'),\n        }}\n        emptyStateBodyProps={{\n          body: t('adjust_your_filters_and_try_again'),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n} from '@app/utils';\nimport { Skeleton } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport {\n  StatusColumn,\n  StreamsToolbar,\n  StreamsToolbarProps,\n} from '@app/modules/OpenshiftStreams/components';\nimport { MASTable } from '@app/common';\nimport { Pagination } from '@app/modules/OpenshiftStreams/components/StreamsTable/Pagination';\nimport { NoResultsFound } from '@app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\n\nexport type StreamsTableProps = Pick<\n  StreamsToolbarProps,\n  | 'page'\n  | 'perPage'\n  | 'total'\n  | 'filterSelected'\n  | 'setFilterSelected'\n  | 'filteredValue'\n  | 'setFilteredValue'\n  | 'onCreate'\n  | 'refresh'\n  | 'handleCreateInstanceModal'\n> & {\n  onDeleteInstance: (instance: KafkaRequest) => Promise<void>;\n  onChangeOwner: (instance: KafkaRequest) => Promise<void>;\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  loggedInUser: string | undefined;\n  expectedTotal: number;\n  kafkaDataLoaded: boolean;\n  kafkaInstanceItems?: KafkaRequest[];\n  isOrgAdmin?: boolean;\n  setOrderBy: (order: string) => void;\n  orderBy: string;\n};\nexport const StreamsTable: React.FunctionComponent<StreamsTableProps> = ({\n  onDeleteInstance,\n  onChangeOwner,\n  onViewInstance,\n  onViewConnection,\n  loggedInUser,\n  page,\n  perPage,\n  total,\n  expectedTotal,\n  kafkaDataLoaded,\n  kafkaInstanceItems,\n  isOrgAdmin,\n  setOrderBy,\n  orderBy,\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  onCreate,\n  refresh,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const { instanceDrawerInstance } = useInstanceDrawer();\n\n  const cells = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  const sortBy = useMemo((): ISortBy | undefined => {\n    const getIndexForSortParameter = (parameter: string) => {\n      switch (parameter.toLowerCase()) {\n        case 'name':\n          return 0;\n        case 'cloud_provider':\n          return 1;\n        case 'region':\n          return 2;\n        case 'owner':\n          return 3;\n        case 'status':\n          return 4;\n        case 'created_at':\n          return 5;\n        default:\n          return undefined;\n      }\n    };\n\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getIndexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  }, [orderBy]);\n\n  const rows = useMemo(() => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: cells.length,\n      });\n    }\n    kafkaInstanceItems?.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link to={`kafkas/${row?.id}/dashboard`}>{name}</Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t('ago'))}\n                <br />\n                {instance_type === InstanceType?.eval && '48 hours duration'}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  }, [page, perPage, expectedTotal, kafkaDataLoaded, kafkaInstanceItems]);\n\n  const actionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'view-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'connect-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('change_owner'),\n        id: 'change-owner',\n        ['data-testid']: 'tableStreams-actionChangeOwner',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'change-owner'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_change_owner'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'delete-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const onSelectKebabDropdownOption = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === 'view-instanceDrawerInstance') {\n      onViewInstance(originalData);\n      //set selected row for view instanceDrawerInstance and connect instanceDrawerInstance\n    } else if (selectedOption === 'connect-instanceDrawerInstance') {\n      onViewConnection(originalData);\n    } else if (selectedOption === 'change-owner') {\n      onChangeOwner(originalData);\n    } else if (selectedOption === 'delete-instanceDrawerInstance') {\n      deleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    const previousNode =\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const deleteInstance = async (kafka: KafkaRequest) => {\n    await onDeleteInstance(kafka);\n  };\n\n  const onSort: OnSort = (_event, index, direction, extraData) => {\n    const getParameterForSortIndex = (index: number) => {\n      switch (index) {\n        case 0:\n          return 'name';\n        case 1:\n          return 'cloud_provider';\n        case 2:\n          return 'region';\n        case 3:\n          return 'owner';\n        case 4:\n          return 'status';\n        case 5:\n          return 'created_at';\n        default:\n          return '';\n      }\n    };\n\n    let myDirection = direction;\n    if (sortBy?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = SortByDirection.desc;\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const onRowClick = (\n    event: React.MouseEvent<HTMLTableRowElement | HTMLButtonElement>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => {\n    if (event.target instanceof HTMLElement) {\n      const tagName = event.target.tagName.toLowerCase();\n      // Open instance drawer on row click except kebab button click or opening the kafka instance\n      if (tagName === 'button' || tagName === 'a') {\n        return;\n      }\n    }\n    onViewInstance(row?.originalData);\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable<HTMLTableRowElement | HTMLButtonElement>\n        tableProps={{\n          cells,\n          rows,\n          'aria-label': t('cluster_instance_list'),\n          actionResolver,\n          onSort,\n          sortBy,\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={instanceDrawerInstance?.name}\n        onRowClick={onRowClick}\n        rowDataTestId='tableStreams-row'\n        loggedInUser={loggedInUser}\n      />\n      <NoResultsFound\n        count={kafkaInstanceItems?.length || 0}\n        dataLoaded={kafkaDataLoaded}\n      />\n      <Pagination total={total} page={page} perPage={perPage} />\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAlert, useAuth } from '@rhoas/app-services-ui-shared';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n} from '@rhoas/kafka-management-sdk';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { useTimeout } from '@app/hooks/useTimeout';\n\nexport const KafkaStatusAlerts: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlert() || {};\n  const auth = useAuth();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const { isVisible } = usePageVisibility();\n  const { apiBasePath: basePath } = kas || {};\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert({\n      variant: AlertVariant.danger,\n      title: t('common.something_went_wrong'),\n      description: reason,\n    });\n  };\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getKafkas('', '', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setCurrentUserKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  const addAlertAfterSuccessDeletion = () => {\n    const removeKafkaFromDeleted = (name: string) => {\n      const index = deletedKafkas.findIndex((k) => k === name);\n      if (index > -1) {\n        const prev = Object.assign([], deletedKafkas);\n        prev.splice(index, 1);\n        setDeletedKafkas(prev);\n      }\n    };\n\n    if (currentUserKafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserKafkas.filter(\n        (k) =>\n          k.status === InstanceStatus.DEPROVISION ||\n          k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [\n        ...deletedKafkas,\n        ...notPresentKafkas,\n      ];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserKafkas?.findIndex(\n          (item) => item.name === k\n        );\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t('kafka_successfully_deleted', { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign(\n        [],\n        currentUserKafkas\n      ).filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.READY ||\n          item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_successfully_created'),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_success_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-success',\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_not_created'),\n                variant: AlertVariant.danger,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_failed_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      currentUserKafkas?.filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.PROVISIONING ||\n          item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [currentUserKafkas]);\n\n  return <></>;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  AlertVariant,\n  Card,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { usePagination } from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from '@rhoas/kafka-management-sdk';\nimport './StreamsTableConnected.css';\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\nimport { useFederated } from '@app/contexts';\nimport '@app/modules/styles.css';\nimport {\n  FilterType,\n  KafkaEmptyState,\n  Unauthorized,\n} from '@app/modules/OpenshiftStreams/components';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\nimport { StreamsTable } from '@app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable';\nimport { KafkaStatusAlerts } from '@app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts';\n\nexport type StreamsTableProps = {\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n};\n\nexport const StreamsTableConnected: React.FunctionComponent<StreamsTableProps> =\n  ({ preCreateInstance }: StreamsTableProps) => {\n    dayjs.extend(localizedFormat);\n    const { shouldOpenCreateModal } = useFederated() || {};\n\n    const auth = useAuth();\n    const { kas } = useConfig() || {};\n    const { apiBasePath: basePath } = kas || {};\n    const { isVisible } = usePageVisibility();\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    const { page = 1, perPage = 10 } = usePagination() || {};\n    const { t } = useTranslation();\n    const { addAlert } = useAlert() || {};\n    const { showModal: showCreateModal } =\n      useModal<ModalType.KasCreateInstance>();\n    const { showModal: showTransferOwnershipModal } =\n      useModal<ModalType.KasTransferOwnership>();\n    const { hideModal: hideDeleteModal, showModal: showDeleteModal } =\n      useModal<ModalType.KasDeleteInstance>();\n    const {\n      setInstanceDrawerTab,\n      setInstanceDrawerInstance,\n      instanceDrawerInstance,\n      setNoInstances,\n    } = useInstanceDrawer();\n    const history = useHistory();\n\n    // Kafka list state\n    const [kafkaInstancesList, setKafkaInstancesList] = useState<\n      KafkaRequestList | undefined\n    >();\n    const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n    const [expectedTotal, setExpectedTotal] = useState<number>(3);\n\n    // filter and sort state\n    const [orderBy, setOrderBy] = useState<string>('created_at desc');\n    const [filterSelected, setFilterSelected] = useState('name');\n    const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n    // user state\n    const [isUserUnauthorized, setIsUserUnauthorized] =\n      useState<boolean>(false);\n    const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n      undefined\n    );\n    const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n    // States to sort out\n    const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n\n    useEffect(() => {\n      const openModal = async () => {\n        const shouldOpen =\n          shouldOpenCreateModal && (await shouldOpenCreateModal());\n        if (shouldOpen) {\n          openCreateModal();\n        }\n      };\n      openModal();\n    }, [shouldOpenCreateModal]);\n\n    const openCreateModal = () => {\n      showCreateModal(ModalType.KasCreateInstance, {\n        onCreate: () => {\n          onCreate();\n          refreshKafkasAfterAction();\n        },\n      });\n    };\n\n    const handleCreateInstanceModal = async () => {\n      let open;\n      if (preCreateInstance) {\n        // Callback before opening create dialog\n        // The callback can override the new state of opening\n        open = await preCreateInstance(true);\n      }\n\n      if (open) {\n        openCreateModal();\n      }\n    };\n\n    const onViewInstance = (instance: KafkaRequest) => {\n      setInstanceDrawerInstance(instance);\n      setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n    };\n\n    const onViewConnection = (instance: KafkaRequest) => {\n      setInstanceDrawerInstance(instance);\n      setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n    };\n\n    const getFilterQuery = () => {\n      const filters: string[] = [];\n      filteredValue.forEach((filter) => {\n        const { filterKey, filterValue } = filter;\n        if (filterValue && filterValue.length > 0) {\n          let filterQuery = '(';\n          filterQuery += filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === InstanceStatus.PROVISIONING) {\n                return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n              }\n              if (value === InstanceStatus.DEPROVISION) {\n                return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n              }\n              return value !== ''\n                ? `${filterKey} ${\n                    val.isExact === true ? `= ${value}` : `like %${value}%`\n                  }`\n                : '';\n            })\n            .join(' or ');\n          filterQuery += ')';\n\n          filters.push(filterQuery);\n        }\n      });\n      return filters.join(' and ');\n    };\n\n    const handleServerError = (error: unknown) => {\n      let reason: string | undefined;\n      let errorCode: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n        errorCode = error.response?.data?.code;\n      }\n      //check unauthorize user\n      if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n        setIsUserUnauthorized(true);\n      } else {\n        addAlert &&\n          addAlert({\n            variant: AlertVariant.danger,\n            title: t('common.something_went_wrong'),\n            description: reason,\n          });\n      }\n    };\n\n    // Functions\n    const fetchKafkas = async () => {\n      const filterQuery = getFilterQuery();\n      const accessToken = await auth?.kas.getToken();\n\n      if (accessToken && isVisible) {\n        try {\n          const apisService = new DefaultApi(\n            new Configuration({\n              accessToken,\n              basePath,\n            })\n          );\n\n          await apisService\n            .getKafkas(\n              page?.toString(),\n              perPage?.toString(),\n              orderBy,\n              filterQuery\n            )\n            .then((res) => {\n              const kafkaInstances = res.data;\n              const kafkaItems = kafkaInstances?.items || [];\n              setKafkaInstancesList(kafkaInstances);\n\n              if (\n                kafkaInstancesList?.total !== undefined &&\n                kafkaInstancesList.total > expectedTotal\n              ) {\n                setExpectedTotal(kafkaInstancesList.total);\n              }\n\n              if (\n                waitingForDelete &&\n                filteredValue.length < 1 &&\n                kafkaItems?.length == 0\n              ) {\n                setWaitingForDelete(false);\n              }\n\n              setKafkaDataLoaded(true);\n            });\n        } catch (error) {\n          handleServerError(error);\n        }\n      }\n    };\n\n    useEffect(() => {\n      setKafkaDataLoaded(false);\n      fetchKafkas();\n    }, [auth, page, perPage, filteredValue, orderBy]);\n\n    useEffect(() => {\n      if (kafkaInstancesList !== undefined && kafkaInstancesList?.size > 0) {\n        const selectedKafkaItem = kafkaInstancesList.items?.find(\n          (kafka) => kafka?.id === instanceDrawerInstance?.id\n        );\n        if (selectedKafkaItem !== undefined) {\n          setInstanceDrawerInstance(selectedKafkaItem);\n        }\n      }\n    }, [kafkaInstancesList?.items]);\n\n    useEffect(() => {\n      setNoInstances(kafkaInstancesList?.size === 0);\n    }, [kafkaInstancesList?.size]);\n\n    useEffect(() => {\n      auth.getUsername()?.then((username) => setLoggedInUser(username));\n      auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n    }, [auth]);\n\n    useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n    const refreshKafkasAfterAction = () => {\n      //set the page to laoding state\n      if (kafkaInstancesList?.size === 1) {\n        setKafkaDataLoaded(true);\n      } else {\n        setKafkaDataLoaded(false);\n      }\n      fetchKafkas();\n    };\n\n    // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n    const onCreate = () => {\n      setExpectedTotal(\n        (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) + 1\n      );\n    };\n\n    // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n    const onDelete = () => {\n      setKafkaDataLoaded(false);\n      setExpectedTotal(\n        (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) - 1\n      );\n    };\n\n    const setSearchParam = useCallback(\n      (name: string, value: string) => {\n        searchParams.set(name, value.toString());\n      },\n      [searchParams]\n    );\n\n    // Redirect the user to a previous page if there are no kafka instances for a page number / size\n    useEffect(() => {\n      if (page > 1) {\n        if (\n          kafkaInstancesList?.items !== undefined &&\n          kafkaInstancesList.size === 0\n        ) {\n          setSearchParam('page', (page - 1).toString());\n          setSearchParam('perPage', perPage.toString());\n          history.push({\n            search: searchParams.toString(),\n          });\n        }\n      }\n    }, [page, perPage, kafkaInstancesList?.items]);\n\n    const onChangeOwner = async (instance: KafkaRequest) => {\n      showTransferOwnershipModal(ModalType.KasTransferOwnership, {\n        kafka: instance,\n        refreshKafkas: refreshKafkasAfterAction,\n      });\n    };\n\n    const onDeleteInstance = async (kafka: KafkaRequest) => {\n      const doDelete = async () => {\n        await deleteInstance(kafka);\n        onDelete();\n      };\n      if (kafka.status === InstanceStatus.FAILED) {\n        await doDelete();\n      } else {\n        showDeleteModal(ModalType.KasDeleteInstance, {\n          onDelete: doDelete,\n          kafka,\n        });\n      }\n    };\n\n    const deleteInstance = async (instance: KafkaRequest) => {\n      /**\n       * Throw an error if kafka id is not set\n       * and avoid delete instanceDrawerInstance api call\n       */\n      if (instance.id === undefined) {\n        throw new Error('kafka instanceDrawerInstance id is not set');\n      }\n      const accessToken = await auth?.kas.getToken();\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      onDelete();\n      hideDeleteModal();\n\n      try {\n        await apisService.deleteKafkaById(instance.id, true).then(() => {\n          setWaitingForDelete(true);\n          refreshKafkasAfterAction();\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert &&\n          addAlert({\n            title: t('common.something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    };\n\n    if (isUserUnauthorized) {\n      return <Unauthorized />;\n    }\n\n    const isDisplayKafkaEmptyState =\n      kafkaDataLoaded &&\n      filteredValue.length < 1 &&\n      kafkaInstancesList !== undefined &&\n      kafkaInstancesList?.total < 1;\n\n    if (isDisplayKafkaEmptyState) {\n      return (\n        <KafkaEmptyState\n          handleCreateInstanceModal={handleCreateInstanceModal}\n        />\n      );\n    } else if (isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className='mk--main-page__page-section--table pf-m-padding-on-xl'\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card ouiaId='card-controlplane'>\n            <StreamsTable\n              onDeleteInstance={onDeleteInstance}\n              onViewInstance={onViewInstance}\n              onViewConnection={onViewConnection}\n              onChangeOwner={onChangeOwner}\n              loggedInUser={loggedInUser}\n              page={page}\n              perPage={perPage}\n              total={expectedTotal}\n              isOrgAdmin={isOrgAdmin}\n              expectedTotal={expectedTotal}\n              kafkaDataLoaded={kafkaDataLoaded}\n              kafkaInstanceItems={kafkaInstancesList?.items}\n              setOrderBy={setOrderBy}\n              setFilterSelected={setFilterSelected}\n              setFilteredValue={setFilteredValue}\n              filteredValue={filteredValue}\n              handleCreateInstanceModal={handleCreateInstanceModal}\n              orderBy={orderBy}\n              filterSelected={filterSelected}\n              onCreate={onCreate}\n              refresh={refreshKafkasAfterAction}\n            />\n          </Card>\n          <KafkaStatusAlerts />\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: React.FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation();\n\n  const Status: React.FunctionComponent = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const StatusIcon: React.FunctionComponent = () => {\n    const statusIcon = getStatusIcon();\n    if (statusIcon) {\n      return <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>;\n    }\n    return <></>;\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className='mk--instances__table--icon--completed' />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className='mk--instances__table--icon--failed' />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size='md'\n            aria-label={instanceName}\n            aria-valuetext='Creation in progress'\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <StatusIcon />\n      <FlexItem>\n        <Status />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { useTranslation } from 'react-i18next';\nimport React from 'react';\n\nexport const useTooltipContent = (\n  isMaxFilter: boolean,\n  fieldName?: string\n): React.ReactElement => {\n  const { t } = useTranslation();\n  if (isMaxFilter) {\n    return <div>{t('max_filter_message')}</div>;\n  }\n  if (fieldName === 'owner') {\n    return <div>{t('owner_field_invalid_message', { name: fieldName })}</div>;\n  }\n  return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n};\n","import React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport { cloudProviderOptions, KeyValueOptions } from '@app/utils';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\n\nexport type CloudProviderFilterProps = FilterProps;\n\nexport const CloudProviderFilter: React.FunctionComponent<CloudProviderFilterProps> =\n  ({\n    getSelectionForFilter,\n    filterSelected,\n    onDeleteChipGroup,\n    onDeleteChip,\n    updateFilter,\n    isMaxFilter,\n    removeFilterValue,\n    isDisabledSelectOption,\n  }) => {\n    const { t } = useTranslation();\n\n    const options: KeyValueOptions[] = cloudProviderOptions.map(\n      (cloudProvider) => {\n        return {\n          label: t(cloudProvider.value),\n          value: cloudProvider.value,\n          disabled: false,\n        };\n      }\n    );\n\n    return (\n      <ToolbarFilter\n        chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n        deleteChip={(_category, chip) =>\n          onDeleteChip && onDeleteChip('cloud_provider', chip, options)\n        }\n        deleteChipGroup={() =>\n          onDeleteChipGroup && onDeleteChipGroup('cloud_provider')\n        }\n        categoryName={t('cloud_provider')}\n        showToolbarItem={filterSelected === 'cloud_provider'}\n      >\n        <CloudProviderSelect\n          updateFilter={updateFilter}\n          isMaxFilter={isMaxFilter}\n          removeFilterValue={removeFilterValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n          options={options}\n          getSelectionForFilter={getSelectionForFilter}\n          filterSelected={filterSelected}\n        />\n      </ToolbarFilter>\n    );\n  };\n\ntype CloudProviderSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  options: KeyValueOptions[];\n};\n\nconst CloudProviderSelect: React.FunctionComponent<CloudProviderSelectProps> =\n  ({\n    updateFilter,\n    isMaxFilter,\n    removeFilterValue,\n    isDisabledSelectOption,\n    options,\n    getSelectionForFilter,\n    filterSelected,\n  }) => {\n    const { t } = useTranslation();\n    const selectRef = useRef<Select>(null);\n    const tooltipContent = useTooltipContent(isMaxFilter);\n\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (isMaxFilter) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter}\n            content={tooltipContent}\n            reference={selectRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggle = () => {\n      setExpanded((prevState) => !prevState);\n    };\n\n    const onSelect = (\n      _event:\n        | React.MouseEvent<Element, MouseEvent>\n        | React.ChangeEvent<Element>,\n      selection: string | SelectOptionObject,\n      isPlaceholder?: boolean | undefined\n    ) => {\n      if (isPlaceholder) clear();\n      updateFilter(\n        'cloud_provider',\n        { value: selection.toString(), isExact: true },\n        true\n      );\n      options.length < 2 && setExpanded(false);\n    };\n\n    const clear = () => {\n      removeFilterValue && removeFilterValue('cloud_provider');\n      setExpanded(false);\n    };\n\n    if (filterSelected === 'cloud_provider') {\n      return (\n        <Select\n          id='cloud-provider-select'\n          variant={SelectVariant.checkbox}\n          aria-label='Select cloud provider'\n          onToggle={onToggle}\n          selections={getSelectionForFilter('cloud_provider')}\n          isOpen={expanded}\n          onSelect={onSelect}\n          placeholderText={t('filter_by_cloud_provider')}\n          className='select-custom-width'\n          ref={selectRef}\n        >\n          {options.map((option, index) => {\n            const isDisabled = () => {\n              if (option.disabled) {\n                return true;\n              }\n              return (\n                isMaxFilter &&\n                isDisabledSelectOption('cloud_provider', option.value)\n              );\n            };\n\n            return (\n              <SelectOption\n                isDisabled={isDisabled()}\n                key={index}\n                value={option.value}\n              >\n                <FilterTooltip />\n                {option.label}\n              </SelectOption>\n            );\n          })}\n        </Select>\n      );\n    }\n    return <></>;\n  };\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type NameFilterProps = FilterProps;\n\nexport const NameFilter: React.FunctionComponent<NameFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const [valid, setValid] = useState<boolean>(true);\n  const [value, setValue] = useState<string | undefined>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'name');\n\n  const change = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('name', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const renderNameInput = () => {\n    const v = !valid || isMaxFilter;\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (v) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter || !valid}\n            content={tooltipContent}\n            reference={inputRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    if (filterSelected?.toLowerCase() === 'name') {\n      return (\n        <InputGroup>\n          <TextInput\n            name='name'\n            id='filterText'\n            type='search'\n            aria-label='Search filter input'\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            placeholder={t('filter_by_name_lower')}\n            onChange={change}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={!valid || isMaxFilter}\n            onClick={() => onFilter()}\n            aria-label='Search instances'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('name')}\n      deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('name')}\n      categoryName={t('name')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n    >\n      {renderNameInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type OwnerFilterProps = FilterProps;\nexport const OwnerFilter: React.FunctionComponent<OwnerFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChipGroup,\n  onDeleteChip,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'owner');\n\n  const [value, setValue] = useState<string | undefined>();\n  const [valid, setValid] = useState<boolean>(true);\n\n  const validate = (value?: string) => {\n    return value ? !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value.trim()) : true;\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('owner', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onChange = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const renderOwnerInput = () => {\n    if (filterSelected?.toLowerCase() === 'owner') {\n      const v = !valid || isMaxFilter;\n\n      const FilterTooltip: React.FunctionComponent = () => {\n        if (v) {\n          return (\n            <Tooltip\n              isVisible={isMaxFilter || !valid}\n              content={tooltipContent}\n              reference={inputRef}\n            />\n          );\n        }\n        return <></>;\n      };\n\n      return (\n        <InputGroup>\n          <TextInput\n            name='owner'\n            id='filterOwners'\n            type='search'\n            aria-label='Search filter input'\n            placeholder={t('filter_by_owner')}\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            isDisabled={v}\n            variant={ButtonVariant.control}\n            onClick={onFilter}\n            aria-label='Search owners'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('owner')}\n      deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('owner')}\n      categoryName={t('owner')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n    >\n      {renderOwnerInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { cloudRegionOptions, KeyValueOptions } from '@app/utils';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\n\nexport type RegionFilterProps = FilterProps;\n\nexport const RegionFilter: React.FunctionComponent<RegionFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  removeFilterValue,\n  isDisabledSelectOption,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n}) => {\n  const { t } = useTranslation();\n  const options = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('region')?.map((val) => t(val))}\n      deleteChip={(_category, chip) => onDeleteChip('region', chip, options)}\n      deleteChipGroup={() => onDeleteChipGroup('region')}\n      categoryName={t('region')}\n      showToolbarItem={filterSelected === 'region'}\n    >\n      <RegionSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype RegionSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  options: KeyValueOptions[];\n};\n\nconst RegionSelect: React.FunctionComponent<RegionSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation();\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      'region',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue('region');\n    setExpanded(false);\n  };\n\n  if (filterSelected === 'region') {\n    return (\n      <Select\n        id='region-select'\n        variant={SelectVariant.checkbox}\n        aria-label='Select region'\n        onToggle={onToggle}\n        selections={getSelectionForFilter('region')}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t('filter_by_region')}\n        className='select-custom-width'\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption('region', option.value)\n            );\n          };\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\nexport type FilterSelectProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const FilterSelect: React.FunctionComponent<FilterSelectProps> = ({\n  setFilterSelected,\n  filterSelected,\n}) => {\n  const { t } = useTranslation();\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const onToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent | React.ChangeEvent,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const options = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label='Select filter'\n        onToggle={onToggle}\n        selections={filterSelected}\n        isOpen={isFilterExpanded}\n        onSelect={onSelect}\n      >\n        {options.map((option, index) => (\n          <SelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n          >\n            {option.label}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { InstanceStatus, statusOptions, KeyValueOptions } from '@app/utils';\n\nexport type StatusFilter = FilterProps;\n\nexport const StatusFilter: React.FunctionComponent<StatusFilter> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation();\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('status')?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip('status', chip, statusFilterOptions)\n      }\n      deleteChipGroup={() => onDeleteChipGroup('status')}\n      categoryName={t('status')}\n      showToolbarItem={filterSelected === 'status'}\n    >\n      <StatusSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        statusFilterOptions={statusFilterOptions}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype StatusSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  statusFilterOptions: KeyValueOptions[];\n};\n\nconst StatusSelect: React.FunctionComponent<StatusSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  statusFilterOptions,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation();\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const selectRef = useRef<Select>(null);\n\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      'status',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n  };\n\n  const clear = () => {\n    removeFilterValue('status');\n    setExpanded(false);\n  };\n  if (filterSelected === 'status') {\n    return (\n      <Select\n        id='status-select'\n        variant={SelectVariant.checkbox}\n        aria-label='Select status'\n        onToggle={onToggle}\n        selections={getSelectionForFilter('status')}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t('filter_by_status')}\n        className='select-custom-width'\n        ref={selectRef}\n      >\n        {statusFilterOptions.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption('status', option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import React from 'react';\nimport { ToolbarChip, ToolbarGroup } from '@patternfly/react-core';\nimport { CloudProviderFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter';\nimport { NameFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/NameFilter';\nimport { OwnerFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter';\nimport { RegionFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/RegionFilter';\nimport { FilterSelect } from '@app/modules/OpenshiftStreams/components/TableFilters/FilterSelect';\nimport { StatusFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/StatusFilter';\nimport { KeyValueOptions } from '@app/utils';\nimport {\n  FilterType,\n  FilterValue,\n} from '@app/modules/OpenshiftStreams/components';\n\nexport type StreamsFilterGroupProps = {\n  isMaxFilter: boolean;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const StreamsFilterGroup: React.FunctionComponent<StreamsFilterGroupProps> =\n  ({\n    isMaxFilter,\n    filteredValue,\n    setFilteredValue,\n    filterSelected,\n    setFilterSelected,\n  }) => {\n    const isDisabledSelectOption = (key: string, optionValue: string) => {\n      let newFilterValue: FilterValue | undefined;\n      const newFilteredValue = filteredValue?.filter(\n        ({ filterKey }) => filterKey === key\n      );\n      if (newFilteredValue && newFilteredValue?.length > 0) {\n        const { filterValue } = newFilteredValue[0];\n        newFilterValue = filterValue?.find(\n          ({ value }) => value === optionValue\n        );\n      }\n      if (!newFilterValue) {\n        return true;\n      }\n      return false;\n    };\n\n    const updateFilter = (\n      key: string,\n      filter: FilterValue,\n      removeIfPresent: boolean\n    ) => {\n      const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n      const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n      if (filterIndex > -1) {\n        // if filter is present with the current key\n        const filterValue = newFilterValue[filterIndex];\n        if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n          // if some filters are already there in applied filter for same key\n          const filterValueIndex = filterValue.filterValue.findIndex(\n            (f) => f.value === filter.value\n          ); // index of current filter value in applied filter\n          if (filterValueIndex > -1) {\n            // filter value is already present\n            if (removeIfPresent) {\n              filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n            } else {\n              return; // skip the duplicate values\n            }\n          } else {\n            // add the filter value to the current applied filter\n            newFilterValue[filterIndex].filterValue.push(filter);\n          }\n        } else {\n          // add the filter value to current applied filter\n          newFilterValue[filterIndex].filterValue = [filter];\n        }\n      } else {\n        // add filter with key and value to the applied filter\n        newFilterValue.push({ filterKey: key, filterValue: [filter] });\n      }\n      setFilteredValue(newFilterValue);\n    };\n\n    const getSelectionForFilter = (key: string) => {\n      const selectedFilters = filteredValue.filter(\n        (filter) => filter.filterKey === key\n      );\n      if (selectedFilters.length > 0) {\n        return selectedFilters[0].filterValue.map((val) => val.value);\n      }\n      return;\n    };\n\n    const onDeleteChip = (\n      category: string,\n      chip: string | ToolbarChip,\n      filterOptions?: KeyValueOptions[]\n    ) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      const prevFilterValue: FilterValue[] = Object.assign(\n        [],\n        newFilteredValue[filterIndex]?.filterValue\n      );\n      let filterChip: string | undefined = chip.toString();\n      /**\n       * Filter chip from filter cloudProviderOptions\n       */\n      if (filterOptions && filterOptions?.length > 0) {\n        filterChip = filterOptions?.find(\n          (option) => option.label === chip.toString()\n        )?.value;\n      }\n      /**\n       * Delete selected chip from filter cloudProviderOptions\n       */\n      const chipIndex = prevFilterValue.findIndex(\n        (val) => val.value === filterChip\n      );\n      if (chipIndex >= 0) {\n        newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const onDeleteChipGroup = (category: string) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      if (filterIndex >= 0) {\n        newFilteredValue.splice(filterIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const removeFilteredValue = (value: string) => {\n      const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = copyFilteredValue.findIndex(\n        (filter) => filter.filterKey === value\n      );\n      if (filterIndex >= 0) {\n        copyFilteredValue.splice(filterIndex, 1);\n      }\n      setFilteredValue(copyFilteredValue);\n    };\n\n    return (\n      <>\n        <ToolbarGroup variant='filter-group'>\n          <FilterSelect\n            setFilterSelected={setFilterSelected}\n            filterSelected={filterSelected}\n          />\n          <NameFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <CloudProviderFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <RegionFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <OwnerFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <StatusFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n        </ToolbarGroup>\n      </>\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { InstanceStatus, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { StreamsFilterGroup } from '@app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup';\nimport { FilterType } from '@app/modules/OpenshiftStreams/components';\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: FilterType) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.PROVISIONING\n            )\n          : [];\n      const deprovisionStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.DEPROVISION\n            )\n          : [];\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant='primary'\n          onClick={handleCreateInstanceModal}\n          data-testid='tableStreams-buttonCreateKafka'\n          ouiaId='button-create'\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='pagination-cloudProviderOptions-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instanceDrawerInstance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={\n        <StreamsFilterGroup\n          isMaxFilter={isMaxFilter}\n          filteredValue={filteredValue}\n          setFilteredValue={setFilteredValue}\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n      }\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { MASEmptyState } from '@app/common';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\n\nexport const Unauthorized: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: 'noPadding' }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t('access_permissions_needed'),\n          headingLevel: 'h2',\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            'to_access_kafka_instances_contact_your_organization_administrators'\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Button, ButtonVariant, PageSection } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\n\nexport type KafkaEmptyStateProps = {\n  handleCreateInstanceModal: () => void;\n};\nexport const KafkaEmptyState: React.FunctionComponent<KafkaEmptyStateProps> = ({\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n  return (\n    <PageSection padding={{ default: 'noPadding' }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        emptyStateBodyProps={{\n          body: (\n            <>\n              <Trans\n                i18nKey='create_a_kafka_instance_to_get_started'\n                components={[\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    key='btn-quick-start'\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart('getting-started')\n                    }\n                  />,\n                ]}\n              />\n            </>\n          ),\n        }}\n        titleProps={{ title: t('no_kafka_instances_yet') }}\n      >\n        <Button\n          data-testid='emptyStateStreams-buttonCreateKafka'\n          variant={ButtonVariant.primary}\n          onClick={() =>\n            handleCreateInstanceModal && handleCreateInstanceModal()\n          }\n          ouiaId='button-create'\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n","import {\n  InstanceDrawer,\n  InstanceDrawerProps,\n} from '@app/modules/InstanceDrawer';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { isMobileTablet } from '@app/utils';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\n\nexport type KasLayoutProps = Pick<InstanceDrawerProps, 'tokenEndPointUrl'>;\n\nexport const KasLayout: React.FunctionComponent<KasLayoutProps> = ({\n  children,\n  tokenEndPointUrl,\n}) => {\n  const { t } = useTranslation();\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      const localStorage = window.localStorage;\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem('openSessions') || '0');\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  return (\n    <>\n      <InstanceDrawer tokenEndPointUrl={tokenEndPointUrl}>\n        <main className='pf-c-page__main'>\n          <PageSection variant={PageSectionVariants.light}>\n            <Level>\n              <LevelItem>\n                <TextContent>\n                  <Text component='h1'>{t('kafka_instances')}</Text>\n                </TextContent>\n              </LevelItem>\n            </Level>\n          </PageSection>\n          {children}\n        </main>\n      </InstanceDrawer>\n      <Modal\n        variant={ModalVariant.small}\n        title='Mobile experience'\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n"],"names":["getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","ResourcesTab","DetailsTab","InstanceDrawerContent","bootstrap_server_host","tokenEndPointUrl","t","useTranslation","instanceDrawerTab","setInstanceDrawerTab","instanceDrawerInstance","isKafkaPending","status","fallback","Tabs","activeKey","toString","onSelect","_","tab","selectTab","Tab","eventKey","title","TabTitleText","externalServer","endsWith","instanceId","id","InstanceDrawer","children","dataOuiaAppId","isInstanceDrawerOpen","closeInstanceDrawer","noInstances","isExpanded","isLoading","undefined","onClose","panelBodyContent","drawerHeaderProps","text","label","value","name","headingLevel","notRequiredDrawerContentBackground","InstanceDrawerContext","useInstanceDrawer","answer","useContext","Error","InstanceDrawerContextProvider","initialTab","initialInstance","initialNoInstances","defaultTab","setInstanceDrawerInstance","setNoInstances","Provider","openInstanceDrawer","InstanceDrawerTab","Pagination","total","page","perPage","widgetId","itemCount","variant","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","NoResultsFound","count","dataLoaded","emptyStateProps","titleProps","emptyStateBodyProps","body","StreamsTable","onDeleteInstance","onChangeOwner","onViewInstance","onViewConnection","loggedInUser","expectedTotal","kafkaDataLoaded","kafkaInstanceItems","isOrgAdmin","setOrderBy","orderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","onCreate","refresh","handleCreateInstanceModal","cells","transforms","sortable","sortBy","useMemo","sort","split","length","index","parameter","toLowerCase","getIndexForSortParameter","direction","SortByDirection","rows","tableRow","loadingCount","forEach","row","cloud_provider","region","created_at","owner","instance_type","cloudProviderDisplayName","regionDisplayName","push","Link","to","instanceName","originalData","skeleton","Skeleton","onSelectKebabDropdownOption","event","selectedOption","deleteInstance","previousNode","target","parentElement","previousSibling","focus","kafka","tableProps","actionResolver","rowData","additionalProps","isUserSameAsLoggedIn","tooltip","isDisabled","style","pointerEvents","cursor","onClick","tooltipProps","position","content","onSort","_event","extraData","myDirection","property","getParameterForSortIndex","hasDefaultCustomRowWrapper","activeRow","onRowClick","rowIndex","HTMLElement","tagName","rowDataTestId","useTimeout","callback","delay","savedCallback","useRef","current","setTimeout","clearInterval","KafkaStatusAlerts","addAlert","useAlert","auth","useAuth","deletedKafkas","setDeletedKafkas","currentUserKafkas","setCurrentUserKafkas","items","setItems","setLoggedInUser","basePath","kas","getUsername","then","username","fetchCurrentUserKafkas","getToken","accessToken","filter","DefaultApi","Configuration","getKafkas","res","kafkaInstances","data","error","reason","response","AlertVariant","description","handleServerError","addAlertAfterSuccessDeletion","notPresentKafkas","k","findIndex","dk","map","allDeletedKafkas","item","prev","Object","assign","splice","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","addAlertAfterSuccessCreation","StreamsTableConnected","preCreateInstance","shouldOpenCreateModal","useConfig","location","useLocation","searchParams","URLSearchParams","search","showCreateModal","useModal","showTransferOwnershipModal","hideDeleteModal","showDeleteModal","history","useHistory","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","isUserUnauthorized","setIsUserUnauthorized","setIsOrgAdmin","waitingForDelete","setWaitingForDelete","openCreateModal","ModalType","refreshKafkasAfterAction","open","fetchKafkas","filters","filterKey","filterValue","filterQuery","val","trim","isExact","join","kafkaItems","errorCode","code","size","selectedKafkaItem","find","onDelete","setSearchParam","useCallback","set","instance","apisService","deleteKafkaById","isDisplayKafkaEmptyState","PageSection","className","PageSectionVariants","padding","default","Card","ouiaId","doDelete","refreshKafkas","StatusColumn","getStatusIcon","Spinner","Flex","statusIcon","FlexItem","spacer","filteredstatus","st","useTooltipContent","isMaxFilter","fieldName","CloudProviderFilter","getSelectionForFilter","onDeleteChipGroup","onDeleteChip","updateFilter","removeFilterValue","isDisabledSelectOption","options","cloudProvider","disabled","ToolbarFilter","chips","deleteChip","_category","chip","deleteChipGroup","categoryName","showToolbarItem","CloudProviderSelect","selectRef","tooltipContent","FilterTooltip","Tooltip","reference","expanded","setExpanded","clear","Select","SelectVariant","onToggle","prevState","selections","isOpen","selection","isPlaceholder","placeholderText","ref","option","SelectOption","key","NameFilter","v","valid","setValid","setValue","inputRef","change","input","onKeyPress","onFilter","test","validate","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","Button","ButtonVariant","OwnerFilter","renderOwnerInput","RegionFilter","RegionSelect","FilterSelect","isFilterExpanded","setIsFilterExpanded","ToolbarItem","StatusFilter","statusFilterOptions","s","StatusSelect","StreamsFilterGroup","optionValue","newFilterValue","newFilteredValue","removeIfPresent","filterIndex","f","filterValueIndex","selectedFilters","category","filterOptions","prevFilterValue","filterChip","chipIndex","removeFilteredValue","copyFilteredValue","ToolbarGroup","StreamsToolbar","setIsMaxFilter","handleMaxFilters","maxFilterCount","provisioningStatus","deprovisionStatus","toolbarItems","isCompact","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","toggleGroupItems","Unauthorized","isFilled","emptyStateIconProps","icon","KafkaEmptyState","qsContext","QuickStartContext","Trans","i18nKey","components","isSmall","isInline","setActiveQuickStart","KasLayout","isMobileModalOpen","setIsMobileModalOpen","localStorage","window","parseInt","getItem","newCount","setItem","handleMobileModal","Level","LevelItem","TextContent","Text","component","Modal","ModalVariant","actions"],"sourceRoot":""}