{"version":3,"sources":["webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/aws-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/copy-icon.js","webpack://kas-ui/./node_modules/@patternfly/react-icons/dist/js/icons/pending-icon.js","webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/CreateInstanceModal/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/ConnectionTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/DetailsTab.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","module","e","LTS","LT","L","LL","LLL","LLLL","t","n","o","r","prototype","M","format","en","formats","this","$locale","replace","toUpperCase","slice","call","DrawerPanelContentInfo","DrawerPanelContent","DrawerHead","TextContent","Text","component","TextVariants","TextList","TextListVariants","TextListItem","TextListItemVariants","CreateInstanceModalContext","createContext","isModalOpen","setIsModalOpen","onCreate","mainToggle","refresh","cloudProviders","CreateInstanceModalProvider","Provider","useCreateInstanceModal","useContext","emptyProvider","kind","id","display_name","enabled","CreateInstanceModal","useTranslation","authContext","AuthContext","basePath","ApiContext","addAlert","newKafka","cloud_provider","region","multi_az","useState","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","fetchCloudRegions","provider","getToken","accessToken","undefined","listCloudProviderRegions","then","res","providerRegions","data","providers","concat","items","enabledRegions","filter","length","prevData","reason","response","AlertVariant","useEffect","enableCloudProviders","onCreateInstance","isValid","trim","test","message","maxLength","validateCreateForm","apisService","createKafka","toShowAlert","code","handleInstanceNameChange","handleCloudRegionChange","validRegion","getTileIcon","toLowerCase","size","color","className","onChangeAvailabilty","isSelected","event","value","currentTarget","onFormSubmit","preventDefault","createInstanceForm","isMultiSelected","Form","onSubmit","FormAlert","Alert","variant","title","isInline","FormGroup","label","helperText","helperTextInvalid","helperTextInvalidIcon","isRequired","validated","fieldId","TextInput","type","onChange","autoFocus","map","Tile","key","icon","onClick","cloudProvider","FormSelect","option","index","FormSelectOption","ToggleGroup","ToggleGroupItem","text","isDisabled","buttonId","MASCreateModal","handleModalToggle","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","Drawer","isStatic","DrawerContent","panelContent","DrawerContentBody","StatusColumn","filteredstatus","status","instanceName","Spinner","getStatusIcon","Flex","FlexItem","spacer","default","st","DeleteInstanceModal","confirmButtonProps","cancelButtonProps","textProps","instanceStatus","selectedItemData","selectedInstanceName","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","htmlFor","dangerouslySetInnerHTML","__html","onKeyPress","StreamsToolbar","setFilterSelected","filterSelected","total","page","perPage","filteredValue","setFilteredValue","isDisabledCreateButton","buttonTooltipContent","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","nameInputRef","useRef","ownerInputRef","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","regionFilterOptions","statusFilterOptions","updateFilter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","push","isInputValid","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","isDisabledSelectOption","optionValue","tooltipContent","toggleGroupItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","isOpen","onSelect","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","ValidatedOptions","placeholder","input","ref","Button","ButtonVariant","Tooltip","isVisible","content","reference","isPlaceholder","placeholderText","document","getElementById","toolbarItems","item","isAriaDisabled","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","lg","toggleGroupProps","toggleIcon","breakpoint","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToInstance","getConnectToInstancePath","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","isMaxCapacityReached","loggedInUser","isDeleteModalOpen","setIsDeleteModalOpen","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","tableColumns","transforms","sortable","setItems","searchParams","URLSearchParams","location","search","history","setSearchParam","useCallback","set","addAlertAfterSuccessDeletion","notPresentKafkas","kafka","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","incompleteKafkas","addAlertAfterSuccessCreation","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","renderNameLink","row","href","Link","to","instance","onDeleteInstance","instanceId","Error","deleteKafkaById","config","confirmActionLabel","description","additionalMessage","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","tableProps","cells","rows","tableRow","loadingCount","i","Skeleton","created_at","owner","cloudProviderDisplayName","regionDisplayName","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","style","pointerEvents","cursor","getActionResolver","onSort","myDirection","property","getParameterForSortIndex","sortBy","hasDefaultCustomRowWrapper","onRowClick","rowIndex","clickedEventType","tagName","rowDataTestId","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant","ResourcesTab","externalServer","isGenerateCredentialsModalOpen","setIsGenerateCredentialsModalOpen","isLoading","setIsLoading","credential","setCredential","ClipboardCopy","serviceAccountRequest","createServiceAccount","spinnerAriaValueText","MASGenerateCredentialsModal","setIsOpen","SampleCodeTab","ConnectionTab","activeKey","Tabs","isSecondary","Tab","eventKey","TabTitleText","DetailsTab","instanceDetail","updated_at","renderTextListItem","Grid","GridItem","span","Card","isFlat","CardBody","InstanceDrawer","onClose","activeTab","isExpanded","children","dataOuiaAppId","notRequiredDrawerContentBackground","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","selectedTab","bootstrapServerHost","handleTab1Click","_","onSelectConnectionTab","panelBodyContent","endsWith","drawerHeaderProps","headingLevel","getIsDocumentHidden","doc","hidden","msHidden","webkitHidden","usePageVisibility","setIsVisible","onVisibilityChange","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","preCreateInstance","createDialogOpen","parseInt","get","has","isOpenCreateInstanceModalState","setIsOpenCreateInstanceModalState","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","isUserUnauthorized","setIsUserUnauthorized","setIsMaxCapacityReached","setLoggedInUser","setNotRequiredDrawerContentBackground","getUsername","username","fetchKafkaServiceStatus","callback","delay","savedCallback","serviceStatus","maxCapacityReached","kafkas","max_capacity_reached","handleServerError","setIsOpenCreateInstanceModal","open","error","errorCode","fetchKafkas","justPoll","listKafkas","filters","join","kafkaInstances","kafkaItemsLength","listCloudProviders","current","setTimeout","clearInterval","refreshKafkas","getLoggedInUserKafkaInstance","getButtonTooltipContent","isKafkaInstanceExist","Banner","isSticky","isSmall","PageSection","PageSectionVariants","Level","LevelItem","padding","isFilled","createInstanceButton"],"mappings":"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","file":"568.237df4d5.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.AwsIconConfig = {\n  name: 'AwsIcon',\n  height: 512,\n  width: 640,\n  svgPath: 'M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.37 637.37 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.AwsIcon = require('../createIcon').createIcon(exports.AwsIconConfig);\nexports[\"default\"] = exports.AwsIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CopyIconConfig = {\n  name: 'CopyIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CopyIcon = require('../createIcon').createIcon(exports.CopyIconConfig);\nexports[\"default\"] = exports.CopyIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PendingIconConfig = {\n  name: 'PendingIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M512.1,895.9 C300.3,895.9 128.1,723.8 128.1,511.9 C128.1,300.2 300.3,127.9 512.1,127.9 C723.8,127.9 896,300.2 896.1,511.9 C896.1,723.7 723.8,895.9 512.1,895.9 M512.1,0 C229.7,0 0,229.7 0,512 C0,794.3 229.7,1024 512.1,1024 C794.3,1024 1024,794.3 1024,512 C1024,229.7 794.3,0 512.1,0 M704,288 L704,272 C704,263.2 696.8,256 688,256 L336,256 C327.2,256 320,263.2 320,272 L320,288 C320,447 480,449 480,512 C480,575 320,575 320,736 L320,752 C320,760.8 327.2,768 336,768 L688,768 C696.8,768 704,760.8 704,752 L704,736 C704,576 544,577 544,512 C544,447 704,448 704,288 M603.9,704 L420.3,704 C417.3,704 418.2,695 419.4,686.8 C426.8,634.5 480.1,617.4 495.2,612.3 C512.3,606.6 512.3,606.6 528.9,612.3 C544,617.6 597.6,635.4 604.8,687 C605.9,695.2 606.9,704 603.9,704',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PendingIcon = require('../createIcon').createIcon(exports.PendingIconConfig);\nexports[\"default\"] = exports.PendingIcon;","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.dayjs_plugin_localizedFormat=t()}(this,function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)}}});\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\n\nconst DrawerPanelContentInfo = () => (\n  <DrawerPanelContent>\n    <DrawerHead>\n      <TextContent>\n        <Text component={TextVariants.h2}>Cluster information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 4 MBps</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100 GB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Partitions</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Client connections</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 500</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Message size</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Availability</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>Multizone highly available</TextListItem>\n        </TextList>\n        <Text component={TextVariants.h2}>Cost information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Base Cluster</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$1.50/hr</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.02/MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.0002/GB/hr</TextListItem>\n        </TextList>\n      </TextContent>\n    </DrawerHead>\n  </DrawerPanelContent>\n);\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState, createContext } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { NewKafka, FormDataValidationState } from '../../../../models';\nimport AwsIcon from '@patternfly/react-icons/dist/js/icons/aws-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { isValidToken, ErrorCodes } from '@app/utils';\nimport { MASCreateModal } from '@app/common/MASCreateModal/MASCreateModal';\n\nexport type CreateInstanceModalProps = {\n  isModalOpen: boolean;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onCreate: () => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst CreateInstanceModalContext = createContext<CreateInstanceModalProps>({\n  isModalOpen: false,\n  setIsModalOpen: () => {},\n  onCreate: () => {},\n  mainToggle: false,\n  refresh: () => {},\n  cloudProviders: []\n});\n\nexport const CreateInstanceModalProvider = CreateInstanceModalContext.Provider;\nexport const useCreateInstanceModal = () => useContext(CreateInstanceModalContext);\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { isModalOpen, setIsModalOpen, onCreate, cloudProviders, refresh, mainToggle } = useCreateInstanceModal();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData({ ...kafkaFormData, name: '', multi_az: true });\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    if (!region || region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = validateCreateForm();\n\n    const accessToken = await authContext?.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n    } else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n          });\n          onCreate();\n          setCreationInProgress(true);\n          await apisService.createKafka(true, kafkaFormData).then((res) => {\n            resetForm();\n            setIsModalOpen(false);\n            refresh();\n          });\n        } catch (error) {\n          let reason: string | undefined;\n          let toShowAlert = true;\n          if (isServiceApiError(error)) {\n            if (error.response?.data.code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n              setIsFormValid(false);\n              toShowAlert = false;\n              setNameValidated({\n                fieldState: 'error',\n                message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n              });\n            } else {\n              reason = error.response?.data.reason;\n            }\n          }\n          /**\n           * Todo: show user friendly message according to server code\n           * and translation for specific language\n           *\n           */\n          toShowAlert &&\n            addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason, 'toastCreateKafka-failed');\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    resetForm();\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (name && name.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else {\n      if (isValid) {\n        if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n        if (nameValidated.fieldState === 'error') {\n          setNameValidated({ fieldState: 'default', message: '' });\n        }\n      } else {\n        setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n      }\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData({ ...kafkaFormData, multi_az: value === 'multi' });\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message != '' && <ExclamationCircleIcon />}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={handleInstanceNameChange}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map(\n            (provider: CloudProvider) =>\n              provider.enabled && (\n                <Tile\n                  key={`tile-${provider.name}`}\n                  title={provider?.display_name || ''}\n                  icon={getTileIcon(provider?.name)}\n                  isSelected={cloud_provider === provider.name}\n                  onClick={() => onCloudProviderSelect(provider)}\n                />\n              )\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={handleCloudRegionChange}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              (option: CloudRegion, index) =>\n                option.enabled && (\n                  <FormSelectOption\n                    key={index}\n                    value={option.id}\n                    label={option.id ? t(option.id) : option.display_name || ''}\n                  />\n                )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <ToggleGroupItem\n              text={t('single')}\n              value={'single'}\n              isDisabled\n              buttonId=\"single\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      isModalOpen={isModalOpen}\n      title={t('create_a_kafka_instance')}\n      handleModalToggle={handleModalToggle}\n      onCreate={onCreateInstance}\n      isFormValid={isFormValid}\n      primaryButtonTitle={t('create_instance')}\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateKafka-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateKafka-buttonCancel\"\n    >\n      {mainToggle === true ? (\n        <Drawer isStatic className=\"mk--create-instance-modal__drawer--content\">\n          <DrawerContent panelContent={<DrawerPanelContentInfo />}>\n            <DrawerContentBody>{createInstanceForm()}</DrawerContentBody>\n          </DrawerContent>\n        </Drawer>\n      ) : (\n        createInstanceForm()\n      )}\n    </MASCreateModal>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size=\"md\" aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const icon = getStatusIcon();\n  return (\n    <Flex>\n      {icon && <FlexItem spacer={{ default: 'spacerSm' }}>{icon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextInput } from '@patternfly/react-core';\nimport { MASDeleteModal, MASDeleteModalProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport type DeleteInstanceModalProps = MASDeleteModalProps & {\n  instanceStatus?: string;\n};\n\nexport const DeleteInstanceModal: React.FC<DeleteInstanceModalProps> = ({\n  isModalOpen,\n  title,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  instanceStatus,\n  selectedItemData,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n  return (\n    <MASDeleteModal\n      isModalOpen={isModalOpen}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteKafka-buttonDelete',\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleModalToggle}\n      textProps={textProps}\n    >\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            onKeyPress={onKeyPress}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </MASDeleteModal>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { useCreateInstanceModal } from '../../components/CreateInstanceModal';\n\nexport type StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  isDisabledCreateButton?: boolean;\n  buttonTooltipContent?: string | undefined;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  isDisabledCreateButton,\n  buttonTooltipContent,\n}) => {\n  const { isModalOpen, setIsModalOpen } = useCreateInstanceModal();\n  const { t } = useTranslation();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus = filterKey === 'status' && filterValue?.filter(({ value }) => value === 'provisioning');\n      if (provisioningStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onChangeSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"filterText\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label=\"Search instances\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <ToolbarItem>\n              <Select\n                id=\"cloud-provider-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select cloud provider\"\n                onToggle={onCloudProviderFilterToggle}\n                selections={getSelectionForFilter('cloud_provider')}\n                isOpen={isCloudProviderFilterExpanded}\n                onSelect={onCloudProviderFilterSelect}\n                placeholderText={t('filter_by_cloud_provider')}\n              >\n                {cloudProviderFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('cloud-provider-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n        >\n          {filterSelected === 'region' && (\n            <ToolbarItem>\n              <Select\n                id=\"region-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select region\"\n                onToggle={onRegionFilterToggle}\n                selections={getSelectionForFilter('region')}\n                isOpen={isRegionFilterExpanded}\n                onSelect={onRegionFilterSelect}\n                placeholderText={t('filter_by_region')}\n              >\n                {regionFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('region-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"filterOwners\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label=\"Search owners\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n        >\n          {filterSelected === 'status' && (\n            <ToolbarItem>\n              <Select\n                id=\"status-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select status\"\n                onToggle={onStatusFilterToggle}\n                selections={getSelectionForFilter('status')}\n                isOpen={isStatusFilterExpanded}\n                onSelect={onStatusFilterSelect}\n                placeholderText={t('filter_by_status')}\n              >\n                {statusFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('status-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const createButton = () => {\n    if (isDisabledCreateButton) {\n      return (\n        <Tooltip content={buttonTooltipContent}>\n          <Button\n            variant=\"primary\"\n            onClick={() => setIsModalOpen(!isModalOpen)}\n            data-testid={'tableStreams-buttonCreateKafka'}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Button\n        variant=\"primary\"\n        onClick={() => setIsModalOpen(!isModalOpen)}\n        data-testid={'tableStreams-buttonCreateKafka'}\n      >\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: createButton(),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { AlertVariant, PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { DefaultApi, KafkaRequest } from '../../../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { CreateInstanceModal } from '../CreateInstanceModal';\nimport { DeleteInstanceModal } from '../DeleteInstanceModal';\nimport { useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { StreamsToolbar, StreamsToolbarProps } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { InstanceStatus, isServiceApiError, getLoadingRowsCount, getFormattedDate } from '@app/utils';\nimport { useHistory } from 'react-router-dom';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = StreamsToolbarProps & {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n  refresh: () => void;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n  loggedInUser: string | undefined;\n  isMaxCapacityReached?: boolean | undefined;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined,\n  isMaxCapacityReached?: boolean | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const additionalMessage = isMaxCapacityReached\n    ? ' You might not be able to create a new instance because all of them are currently provisioned by other users.'\n    : '';\n\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_complete', { instanceName }) + additionalMessage;\n  } else if (\n    status === InstanceStatus.ACCEPTED ||\n    status === InstanceStatus.PROVISIONING ||\n    status === InstanceStatus.PREPARING\n  ) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName }) + additionalMessage;\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToInstance,\n  getConnectToInstancePath,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n  isMaxCapacityReached,\n  buttonTooltipContent,\n  isDisabledCreateButton,\n  loggedInUser,\n}: StreamsTableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<string>();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    // filter all kafkas with status as deprovision\n    const deprovisonedKafkas = kafkaInstanceItems.filter((kafka) => kafka.status === InstanceStatus.DEPROVISION);\n\n    // filter all new kafka which is not in deleteKafka state\n    const notPresentKafkas = deprovisonedKafkas\n      .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n      .map((k) => k.name || '');\n    // create new array by merging old and new kafka with status as deprovion\n    const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n    // update deleteKafka with new array\n    setDeletedKafkas(allDeletedKafkas);\n\n    // add alert for deleted kafkas which are completely deleted from the response\n    allDeletedKafkas.forEach((k) => {\n      if (kafkaInstanceItems.findIndex((item) => item.name === k) < 0) {\n        removeKafkaFromDeleted(k);\n        addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n      }\n    });\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-success'\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-failed'\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const onSelectKebabDropdownOption = (event: any, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <>\n        {mainToggle ? (\n          <a href=\"http://uxd-mk-data-plane-cmolloy.apps.uxd-os-research.shz4.p1.openshiftapps.com/openshiftstreams\">\n            {name}\n          </a>\n        ) : (\n          <Link\n            to={() => getConnectToInstancePath(row as KafkaRequest)}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToInstance(row as KafkaRequest);\n            }}\n            data-testid=\"tableStreams-linkKafka\"\n          >\n            {name}\n          </Link>\n        )}\n      </>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION || status !== InstanceStatus.READY\n                ? name\n                : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: getFormattedDate(created_at, t('ago')),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    setIsDeleteModalOpen(false);\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name,\n    isMaxCapacityReached\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        isDisabledCreateButton={isDisabledCreateButton}\n        buttonTooltipContent={buttonTooltipContent}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId=\"tableStreams-row\"\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n      <DeleteInstanceModal\n        isModalOpen={isDeleteModalOpen}\n        instanceStatus={selectedInstance?.status}\n        selectedItemData={selectedInstance}\n        handleModalToggle={() => setIsDeleteModalOpen(!isDeleteModalOpen)}\n        title={title}\n        confirmButtonProps={{\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        }}\n        textProps={{\n          description,\n        }}\n      />\n      <CreateInstanceModal />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React, { useState, useContext } from 'react';\nimport { Button, TextContent, Text, TextVariants, Flex, FlexItem, ClipboardCopy } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { MASGenerateCredentialsModal } from '@app/common/MASGenerateCredentialsModal/MASGenerateCredentialsModal';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DefaultApi, ServiceAccountRequest } from '../../../../../openapi/api';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n  externalServer?: string;\n  instanceName?: string;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = ({\n  mainToggle,\n  externalServer,\n  instanceName = '',\n}: ResourcesTabProps) => {\n  const { t } = useTranslation();\n  const { basePath } = useContext(ApiContext);\n  const authContext = useContext(AuthContext);\n\n  const [isGenerateCredentialsModalOpen, setIsGenerateCredentialsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [credential, setCredential] = useState<any | undefined>();\n\n  const generateCredential = async () => {\n    const accessToken = await authContext?.getToken();\n    const serviceAccountRequest: ServiceAccountRequest = {\n      name: instanceName,\n    };\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.createServiceAccount(serviceAccountRequest).then((res) => {\n        setCredential(res?.data);\n        setIsLoading(false);\n        setIsGenerateCredentialsModalOpen(true);\n      });\n    } catch (err) {\n      setIsLoading(false);\n      let reason;\n      if (isServiceApiError(err)) {\n        reason = err.response?.data.reason;\n      }\n      // TO DO: Add error - setError(reason);\n    }\n  };\n\n  const handleGenerateCredentialsModal = () => {\n    setIsLoading(true);\n    generateCredential();\n  };\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n        <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_2')}</Text>\n        <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n          {t('bootstrap_server')}\n        </Text>\n      </TextContent>\n      <Flex>\n        <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n          <ClipboardCopy data-testid=\"drawerStreams-copyBootstrapURL\">{externalServer}</ClipboardCopy>\n        </FlexItem>\n        <FlexItem className=\"pf-m-align-right\">\n          <Button\n            variant=\"secondary\"\n            onClick={handleGenerateCredentialsModal}\n            className=\"pf-u-ml-md\"\n            spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n            isLoading={isLoading}\n            data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n          >\n            {t('serviceAccount.create_service_account')}\n          </Button>\n        </FlexItem>\n      </Flex>\n      {mainToggle && (\n        <>\n          <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n            <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n            <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n          </TextContent>\n          <ClipboardCopy>https://:30123</ClipboardCopy>\n        </>\n      )}\n      <MASGenerateCredentialsModal\n        isOpen={isGenerateCredentialsModalOpen}\n        setIsOpen={setIsGenerateCredentialsModalOpen}\n        isLoading={isLoading}\n        credential={credential}\n        setCredential={setCredential}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport CopyIcon from '@patternfly/react-icons/dist/js/icons/copy-icon';\nimport { useTranslation } from 'react-i18next';\n\nexport const SampleCodeTab = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, TabsProps, Tab, TabTitleText } from '@patternfly/react-core';\nimport { ResourcesTab, ResourcesTabProps } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ConnectionTabProps = Pick<TabsProps, 'onSelect' | 'activeKey'> & ResourcesTabProps;\n\nexport const ConnectionTab: React.FC<ConnectionTabProps> = ({\n  onSelect,\n  externalServer,\n  instanceName,\n  mainToggle,\n  activeKey,\n}: ConnectionTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {mainToggle ? (\n        <div className=\"mas--details__drawer--tab-content pf-m-secondary\">\n          <Tabs activeKey={activeKey} isSecondary onSelect={onSelect}>\n            <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n              <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n            </Tab>\n            <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n              <SampleCodeTab />\n            </Tab>\n          </Tabs>\n        </div>\n      ) : (\n        <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport { KafkaRequest } from 'src/openapi';\n\nexport type DetailsTabProps = {\n  mainToggle?: boolean;\n  instanceDetail?: KafkaRequest;\n};\n\nexport const DetailsTab = ({ mainToggle, instanceDetail }: DetailsTabProps) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n\n  const { id, owner, created_at, updated_at } = instanceDetail || {};\n\n  const renderTextListItem = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mas--details__drawer--grid\">\n            <GridItem span={6} className=\"mas--details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItem(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItem(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItem(t('id'), id)}\n            {renderTextListItem(t('owner'), owner)}\n            {renderTextListItem(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItem(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { ConnectionTab } from './ConnectionTab';\nimport { DetailsTab, DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'\n> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  notRequiredDrawerContentBackground,\n}) => {\n  dayjs.extend(localizedFormat);\n\n  const { t } = useTranslation();\n  const { name } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrapServerHost } = instanceDetail || {};\n    return bootstrapServerHost?.endsWith(':443') ? bootstrapServerHost : `${bootstrapServerHost}:443`;\n  };\n\n  const panelBodyContent = () => {\n    return (\n      <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n        <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n          <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>} data-testid=\"drawerStreams-tabConnect\">\n          <ConnectionTab\n            mainToggle={mainToggle}\n            activeKey={activeTab2Key}\n            instanceName={name}\n            externalServer={getExternalServer()}\n            onSelect={onSelectConnectionTab}\n          />\n        </Tab>\n      </Tabs>\n    );\n  };\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent()}\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import { useEffect, useState } from 'react';\n\nexport function getBrowserVisibilityProp() {\n  const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp() {\n    const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden() {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility() {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  });\n  return {isVisible,setIsVisible};\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  AlertVariant,\n  Banner,\n  Alert,\n  Button,\n  ButtonVariant,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  StreamsTableView,\n  FilterType,\n  CreateInstanceModal,\n  InstanceDrawer,\n  CreateInstanceModalProvider,\n} from './components';\nimport { AlertProvider, useAlerts } from '@app/common/MASAlerts/MASAlerts';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport './OpenshiftStreams.css';\nimport { MASLoading, MASEmptyState, MASFullPageError, MASEmptyStateVariant } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { MAX_POLL_INTERVAL } from '@app/utils';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n  createDialogOpen: () => boolean;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({\n  onConnectToInstance,\n  getConnectToInstancePath,\n  preCreateInstance,\n  createDialogOpen,\n}: OpenShiftStreamsProps) => {\n  dayjs.extend(localizedFormat);\n\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [isOpenCreateInstanceModalState, setIsOpenCreateInstanceModalState] = useState(createDialogOpen());\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [isMaxCapacityReached, setIsMaxCapacityReached] = useState<boolean | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [notRequiredDrawerContentBackground, setNotRequiredDrawerContentBackground] = useState<boolean | undefined>(\n    false\n  );\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    fetchKafkaServiceStatus();\n  }, []);\n\n  const fetchKafkaServiceStatus = async () => {\n    const accessToken = await authContext?.getToken();\n\n    if (accessToken) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n\n        await apisService.serviceStatus().then((res) => {\n          const maxCapacityReached = res?.data?.kafkas?.max_capacity_reached || mainToggle;\n          setIsMaxCapacityReached(maxCapacityReached);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const setIsOpenCreateInstanceModal = async (open: boolean) => {\n    if (open) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(open);\n    }\n    setIsOpenCreateInstanceModalState(open);\n  };\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            const kafkaItemsLength = res?.data?.items?.length;\n            setRawKafkaDataLength(kafkaItemsLength);\n            kafkaItemsLength < 1 && setNotRequiredDrawerContentBackground(true);\n          });\n        }\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('common.something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  useTimeout(() => fetchKafkas(true), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  /**\n   * Show Unathorize page in case user is not authorize\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('access_permissions_needed'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('to_access_kafka_instances_contact_your_organization_administrators'),\n        }}\n      />\n    );\n  }\n\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const getBannerMessage = () => {\n    const isUserSameAsLoggedIn = getLoggedInUserKafkaInstance() !== undefined;\n    if (isMaxCapacityReached) {\n      if (isUserSameAsLoggedIn) {\n        return 'Instances are currently unavailable for creation.';\n      } else {\n        return (\n          <>\n            Instances are currently unavailable for creation, so check back later to see if any become available. In the\n            meantime,{' '}\n            <Button\n              variant={ButtonVariant.link}\n              isSmall\n              isInline\n              data-testid=\"bannerStreams-actionTour\"\n              className=\"mk--openstreams__banner\"\n            >\n              take a tour\n            </Button>{' '}\n            to learn more about the service.\n          </>\n        );\n      }\n    } else {\n      if (isUserSameAsLoggedIn) {\n        return 'Instances are available for creation. You can deploy 1 instance at a time.';\n      } else {\n        return (\n          <>\n            Instances are available for creation. For help getting started, access the{' '}\n            <Button variant={ButtonVariant.link} isSmall isInline className=\"mk--openstreams__banner\">\n              quick start guide.\n            </Button>\n          </>\n        );\n      }\n    }\n  };\n\n  const renderBanner = () => {\n    return (\n      <>\n        {kafkaInstanceItems && (\n          <Banner isSticky variant={isMaxCapacityReached ? 'warning' : 'info'}>\n            {getBannerMessage()}\n          </Banner>\n        )}\n      </>\n    );\n  };\n\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const getLoggedInUserKafkaInstance = () => {\n    const kafkaItem: KafkaRequest | undefined = kafkaInstanceItems?.filter((kafka) => kafka.owner === loggedInUser)[0];\n    return kafkaItem;\n  };\n\n  /**\n   * This is Onboarding changes\n   * Todo: remove this change after public eval\n   */\n  const renderAlertMessage = () => {\n    const kafka = getLoggedInUserKafkaInstance();\n    if (kafka) {\n      return (\n        <Alert\n          variant=\"info\"\n          isInline\n          title={`${kafka?.name} was created on ${dayjs(kafka?.created_at).format('LLLL')}`}\n        >\n          This instance will expire 48 hours after creation\n        </Alert>\n      );\n    }\n    return <></>;\n  };\n\n  const getButtonTooltipContent = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    let content = '';\n    if (isDisabledCreateButton) {\n      if (isMaxCapacityReached && isKafkaInstanceExist) {\n        content = 'You can deploy 1 instance at a time.';\n      } else if (isMaxCapacityReached) {\n        content = 'Instances are currently unavailable for creation.';\n      } else {\n        content = 'You can deploy 1 instance at a time.';\n      }\n    }\n    return content;\n  };\n\n  const createInstanceButton = () => {\n    const isKafkaInstanceExist = getLoggedInUserKafkaInstance() !== undefined;\n    const isDisabledCreateButton = isKafkaInstanceExist || isMaxCapacityReached;\n    if (isDisabledCreateButton) {\n      const content = getButtonTooltipContent();\n\n      return (\n        <Tooltip content={content}>\n          <Button\n            data-testid=\"emptyStateStreams-buttonCreateKafka\"\n            variant={ButtonVariant.primary}\n            onClick={() => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModalState)}\n            isAriaDisabled={isDisabledCreateButton}\n          >\n            {t('create_kafka_instance')}\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Button\n        data-testid=\"emptyStateStreams-buttonCreateKafka\"\n        variant={ButtonVariant.primary}\n        onClick={() => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModalState)}\n      >\n        {t('create_kafka_instance')}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      <AlertProvider>\n        <CreateInstanceModalProvider\n          value={{\n            isModalOpen: isOpenCreateInstanceModalState,\n            setIsModalOpen: setIsOpenCreateInstanceModal,\n            onCreate,\n            cloudProviders,\n            mainToggle,\n            refresh: refreshKafkas,\n          }}\n        >\n          <InstanceDrawer\n            mainToggle={mainToggle}\n            isExpanded={selectedInstance != null}\n            activeTab={activeTab}\n            isLoading={instanceDetail === undefined}\n            instanceDetail={instanceDetail}\n            onClose={onCloseDrawer}\n            data-ouia-app-id=\"controlPlane-streams\"\n            notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n          >\n            {renderBanner()}\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <TextContent>\n                    <Text component=\"h1\">{t('kafka_instances')}</Text>\n                  </TextContent>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <MASLoading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection padding={{ default: 'noPadding' }} isFilled>\n                <MASEmptyState\n                  emptyStateProps={{\n                    variant: MASEmptyStateVariant.NoItems,\n                  }}\n                  emptyStateBodyProps={{\n                    body: t('create_a_kafka_instance_to_get_started'),\n                  }}\n                  titleProps={{ title: t('no_kafka_instances_yet') }}\n                >\n                  {createInstanceButton()}\n                </MASEmptyState>\n                <CreateInstanceModal />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                {renderAlertMessage()}\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  getConnectToInstancePath={getConnectToInstancePath}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                  isDrawerOpen={selectedInstance !== null}\n                  loggedInUser={loggedInUser}\n                  isMaxCapacityReached={isMaxCapacityReached}\n                  buttonTooltipContent={getButtonTooltipContent()}\n                  isDisabledCreateButton={getLoggedInUserKafkaInstance() !== undefined || isMaxCapacityReached}\n                />\n              </PageSection>\n            )}\n          </InstanceDrawer>\n        </CreateInstanceModalProvider>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n"],"sourceRoot":""}