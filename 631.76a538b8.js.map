{"version":3,"sources":["webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/OpenshiftStreams/OpenshiftStreamsFederated.tsx"],"names":["getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","callback","delay","savedCallback","onConnectToInstance","getConnectToInstancePath","authContext","useContext","AuthContext","basePath","ApiContext","location","searchParams","URLSearchParams","search","page","parseInt","get","perPage","mainToggle","has","t","useTranslation","addAlert","isOpenCreateInstanceModal","setIsOpenCreateInstanceModal","kafkaInstanceItems","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","cloudProviders","setCloudProviders","kafkaDataLoaded","setKafkaDataLoaded","orderBy","setOrderBy","selectedInstance","setSelectedInstance","expectedTotal","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isUserUnauthorized","setIsUserUnauthorized","activeTab","instanceDetail","fetchKafkas","justPoll","getToken","accessToken","undefined","isValidToken","apisService","listKafkas","toString","filters","forEach","filter","filterKey","filterValue","length","push","map","val","value","trim","isExact","join","then","res","kafkaInstances","data","items","total","error","reason","errorCode","response","code","AlertVariant","handleServerError","listCloudProviders","providers","useRef","current","setTimeout","clearInterval","refreshKafkas","titleProps","title","headingLevel","emptyStateBodyProps","body","isModalOpen","setIsModalOpen","onCreate","refresh","isExpanded","isLoading","onClose","PageSection","variant","PageSectionVariants","Level","LevelItem","Title","size","padding","default","buttonProps","onClick","className","onViewConnection","instance","onViewInstance","onDelete","isDrawerOpen","getUsername","alertContext","BrowserRouter"],"mappings":"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","file":"631.76a538b8.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport function getBrowserVisibilityProp() {\n  const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp() {\n    const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden() {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility() {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  });\n  return {isVisible,setIsVisible};\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { Level, LevelItem, PageSection, PageSectionVariants, Title, AlertVariant } from '@patternfly/react-core';\nimport {\n  StreamsTableView,\n  FilterType,\n  CreateInstanceModal,\n  AlertProvider,\n  useAlerts,\n  InstanceDrawer,\n  CreateInstanceModalProvider,\n} from '@app/components';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport './OpenshiftStreams.css';\nimport { MASLoading, MASEmptyState, MASFullPageError } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { MAX_POLL_INTERVAL } from '@app/utils';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance, getConnectToInstancePath }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [isOpenCreateInstanceModal, setIsOpenCreateInstanceModal] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  // const [pollInterval, setPollInterval] = useState<number>(MAX_POLL_INTERVAL);\n\n  const drawerRef = React.createRef<any>();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken) && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n        }\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  useTimeout(() => fetchKafkas(true), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  /**\n   * Show Unathorize page in case user is not authorize\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('you_do_not_have_access_to_openshift_streams'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('contact_your_organization_administration_for_more_information'),\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <AlertProvider>\n        <CreateInstanceModalProvider\n          value={{\n            isModalOpen: isOpenCreateInstanceModal,\n            setIsModalOpen: setIsOpenCreateInstanceModal,\n            onCreate,\n            cloudProviders,\n            mainToggle,\n            refresh: refreshKafkas,\n          }}\n        >\n          <InstanceDrawer\n            mainToggle={mainToggle}\n            isExpanded={selectedInstance != null}\n            activeTab={activeTab}\n            isLoading={instanceDetail === undefined}\n            instanceDetail={instanceDetail}\n            onClose={onCloseDrawer}\n            data-ouia-app-id=\"controlPlane-streams\"\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <MASLoading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <MASEmptyState\n                  titleProps={{\n                    title: t('you_do_not_have_any_kafka_instances_yet'),\n                    headingLevel: 'h4',\n                  }}\n                  emptyStateBodyProps={{\n                    body: t('create_a_kafka_instance_to_get_started'),\n                  }}\n                  buttonProps={{\n                    title: t('create_a_kafka_instance'),\n                    onClick: () => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModal),\n                    ['data-testid']: 'emptyStateStreams-buttonCreateKafka',\n                  }}\n                />\n                <CreateInstanceModal />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  getConnectToInstancePath={getConnectToInstancePath}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                  isDrawerOpen={selectedInstance !== null}\n                />\n              </PageSection>\n            )}\n          </InstanceDrawer>\n        </CreateInstanceModalProvider>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport { OpenshiftStreams } from './OpenshiftStreams';\nimport { AuthContext, IAuthContext } from '@app/auth/AuthContext';\nimport { KafkaRequest } from '../../openapi';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { AlertContext, AlertContextProps } from '@app/components/Alerts/Alerts';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { BrowserRouter } from 'react-router-dom';\nimport '../../i18n/i18n';\n\n// Version of OpenshiftStreams for federation\n\nexport type OpenshiftStreamsFederatedProps = {\n  getToken: () => Promise<string>;\n  getUsername: () => Promise<string>;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  basePath: string;\n};\n\nconst OpenshiftStreamsFederated = ({ getUsername, getToken, onConnectToInstance,getConnectToInstancePath, addAlert, basePath }: OpenshiftStreamsFederatedProps) => {\n\n  const authContext = {\n    getToken,\n    getUsername\n  } as IAuthContext;\n\n  const alertContext = {\n    addAlert\n  } as AlertContextProps;\n\n  return (\n    // TODO don't add BrowserRouter here - see  https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/74\n    <BrowserRouter>\n      <ApiContext.Provider value={\n        {\n          basePath: basePath\n        }\n      }>\n        <AlertContext.Provider value={alertContext}>\n          <AuthContext.Provider value={authContext}>\n            <OpenshiftStreams onConnectToInstance={onConnectToInstance} getConnectToInstancePath={getConnectToInstancePath}></OpenshiftStreams>\n          </AuthContext.Provider>\n        </AlertContext.Provider>\n      </ApiContext.Provider>\n    </BrowserRouter>\n  )\n    ;\n};\n\nexport default OpenshiftStreamsFederated;\n"],"sourceRoot":""}