{"version":3,"file":"4321.dba2c237.js","mappings":"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","sources":["webpack://kas-ui/./src/app/models/openshiftStreamsModel.ts","webpack://kas-ui/./src/app/models/serviceAccountsModel.ts","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccount.tsx"],"sourcesContent":["export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = true;\n    this.region = '';\n    this.name = '';\n  }\n}\n","export class NewServiceAccount {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Alert, Form, FormAlert, FormGroup, TextInput, TextArea, AlertVariant } from '@patternfly/react-core';\nimport { Configuration, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport { NewServiceAccount, FormDataValidationState } from '../../../../models';\nimport { MASCreateModal, useRootModalContext, MODAL_TYPES } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError, MAX_SERVICE_ACCOUNT_NAME_LENGTH, MAX_SERVICE_ACCOUNT_DESC_LENGTH } from '@app/utils';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\n\nconst CreateServiceAccount: React.FunctionComponent = () => {\n  const newServiceAccount: NewServiceAccount = new NewServiceAccount();\n  const { store, showModal, hideModal } = useRootModalContext();\n  const { fetchServiceAccounts } = store?.modalProps || {};\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert();\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [descriptionValidated, setDescriptionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [serviceAccountFormData, setServiceAccountFormData] = useState<NewServiceAccount>(newServiceAccount);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setNameValidated({ fieldState: 'default' });\n    setDescriptionValidated({ fieldState: 'default' });\n    setServiceAccountFormData(newServiceAccount);\n    setIsFormValid(true);\n  };\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error' && descriptionValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated.fieldState, descriptionValidated.fieldState]);\n\n  const handleTextInputName = (name: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, name });\n    let isValid = true;\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name && name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({ fieldState: 'error', message: t('common.input_filed_invalid_helper_text') });\n    }\n  };\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert({\n      title: t('something_went_wrong'),\n      variant: AlertVariant.danger,\n      description: reason,\n    });\n  };\n\n  const handleTextInputDescription = (description: string) => {\n    setServiceAccountFormData({ ...serviceAccountFormData, description });\n    let isValid = true;\n    if (description && !/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n    }\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_description_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    } else if (isValid && descriptionValidated.fieldState === 'error') {\n      setDescriptionValidated({\n        fieldState: 'default',\n        message: '',\n      });\n    } else if (!isValid) {\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, description } = serviceAccountFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('common.this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common.input_filed_invalid_helper_text'),\n      });\n    } else if (!/^[a-zA-Z0-9.,\\-\\s]*$/.test(description.trim())) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('common.input_text_area_invalid_helper_text'),\n      });\n    }\n\n    if (name.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n        }),\n      });\n    }\n\n    if (description && description.length > MAX_SERVICE_ACCOUNT_DESC_LENGTH) {\n      isValid = false;\n      setDescriptionValidated({\n        fieldState: 'error',\n        message: t('serviceAccount.service_account_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n        }),\n      });\n    }\n\n    return isValid;\n  };\n\n  const createServiceAccount = async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.kas.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        setCreationInProgress(true);\n        await apisService.createServiceAccount(serviceAccountFormData).then((res) => {\n          const credential = res?.data;\n          //close current modal i.e. create service account\n          hideModal();\n          //open generate credential modal\n          showModal(MODAL_TYPES.GENERATE_CREDENTIALS, { credential });\n          resetForm();\n          addAlert({\n            title: t('serviceAccount.service_account_creation_success_message'),\n            variant: AlertVariant.success,\n          });\n          fetchServiceAccounts && fetchServiceAccounts();\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    resetForm();\n    hideModal();\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    createServiceAccount();\n  };\n\n  const createForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, description } = serviceAccountFormData;\n    const { message: descMessage, fieldState: descFieldState } = descriptionValidated;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('common.form_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"text-input-name\"\n          helperTextInvalid={message}\n          validated={fieldState}\n          helperText={t('common.input_filed_invalid_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-name\"\n            name=\"text-input-name\"\n            value={name}\n            onChange={handleTextInputName}\n            validated={fieldState}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Description\"\n          fieldId=\"text-input-description\"\n          helperTextInvalid={descMessage}\n          validated={descFieldState}\n          helperText={t('common.input_text_area_invalid_helper_text')}\n        >\n          <TextArea\n            id=\"text-input-description\"\n            name=\"text-input-description\"\n            value={description}\n            onChange={handleTextInputDescription}\n            validated={descFieldState}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      id=\"modalCreateSAccount\"\n      isModalOpen={true}\n      title={t('serviceAccount.create_a_service_account')}\n      handleModalToggle={handleCreateModal}\n      onCreate={createServiceAccount}\n      isFormValid={isFormValid}\n      primaryButtonTitle=\"Create\"\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit=\"modalCreateServiceAccount-buttonSubmit\"\n      dataTestIdCancel=\"modalCreateServiceAccount-buttonCancel\"\n    >\n      {createForm()}\n    </MASCreateModal>\n  );\n};\n\nexport { CreateServiceAccount };\nexport default CreateServiceAccount;\n"],"names":["this","cloud_provider","multi_az","region","name","description","CreateServiceAccount","newServiceAccount","N","store","showModal","hideModal","fetchServiceAccounts","modalProps","t","useTranslation","auth","useAuth","basePath","useConfig","addAlert","useAlert","useState","fieldState","nameValidated","setNameValidated","descriptionValidated","setDescriptionValidated","serviceAccountFormData","setServiceAccountFormData","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","useEffect","message","descMessage","descFieldState","handleTextInputName","isValid","test","trim","length","maxLength","handleTextInputDescription","createServiceAccount","validateCreateForm","kas","getToken","accessToken","apisService","SecurityApi","Configuration","then","res","credential","data","title","variant","AlertVariant","error","reason","response","handleServerError","onFormSubmit","event","preventDefault","id","isModalOpen","handleModalToggle","onCreate","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","Form","onSubmit","FormAlert","Alert","isInline","FormGroup","label","isRequired","fieldId","helperTextInvalid","validated","helperText","TextInput","type","value","onChange","autoFocus","TextArea"],"sourceRoot":""}