{"version":3,"file":"3363.15fa7f96.js","mappings":"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","sources":["webpack://kas-ui/./src/app/models/service-account.ts","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateForm.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccount.tsx"],"sourcesContent":["import { Validated } from '@app/models/validated';\nimport { ServiceAccountRequest } from '@rhoas/kafka-management-sdk';\n\nexport type NewServiceAccountRequest = {\n  name: Validated<string | undefined>;\n  description: Validated<string | undefined>;\n};\n\nexport const asServiceAccountRequest = (\n  value: NewServiceAccountRequest\n): ServiceAccountRequest => {\n  if (value.name.value === undefined) {\n    throw new Error('ServiceAccountRequest.name must not be undefined');\n  }\n  if (value.description.value === undefined) {\n    throw new Error('ServiceAccountRequest.description must not be undefined');\n  }\n  return {\n    name: value.name.value,\n    description: value.description.value,\n  };\n};\n\nexport const isServiceAccountRequestValidated = (\n  value: NewServiceAccountRequest\n): boolean => {\n  return (\n    value.name.validated === 'success' &&\n    value.description.validated !== 'error'\n  );\n};\n\nexport const isServiceAccountRequestInvalid = (\n  value: NewServiceAccountRequest\n): boolean => {\n  return (\n    value.name.validated === 'error' || value.description.validated === 'error'\n  );\n};\n\nexport const createEmptyNewServiceAccountRequest =\n  (): NewServiceAccountRequest => {\n    return {\n      name: {\n        value: '',\n      },\n      description: {\n        value: '',\n      },\n    };\n  };\n","import {\n  createEmptyNewServiceAccountRequest,\n  isServiceAccountRequestInvalid,\n  NewServiceAccountRequest,\n} from '@app/models';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_SERVICE_ACCOUNT_DESC_LENGTH,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n} from '@app/utils';\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  FormGroup,\n  TextArea,\n  TextInput,\n} from '@patternfly/react-core';\n\nexport type CreateFormProps = {\n  createServiceAccount: () => Promise<void>;\n  serviceAccountRequest: NewServiceAccountRequest;\n  setServiceAccountRequest: React.Dispatch<\n    React.SetStateAction<NewServiceAccountRequest>\n  >;\n  id: string;\n};\n\nexport const CreateForm: React.FunctionComponent<CreateFormProps> = ({\n  serviceAccountRequest,\n  createServiceAccount,\n  setServiceAccountRequest,\n  id,\n}) => {\n  const { t } = useTranslation();\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const validateDescription = (\n    serviceAccountRequest: NewServiceAccountRequest\n  ) => {\n    //validate required field\n    if (\n      serviceAccountRequest.description.value !== undefined &&\n      !/^[a-zA-Z0-9.,\\-\\s]*$/.test(\n        serviceAccountRequest.description.value.trim()\n      )\n    ) {\n      serviceAccountRequest.description.validated = 'error';\n      serviceAccountRequest.description.errorMessage = t(\n        'common.input_filed_invalid_helper_text'\n      );\n    }\n    //validate max length\n    else if (\n      serviceAccountRequest.description.value !== undefined &&\n      serviceAccountRequest.description.value.length >\n        MAX_SERVICE_ACCOUNT_DESC_LENGTH\n    ) {\n      serviceAccountRequest.description.validated = 'error';\n      serviceAccountRequest.description.errorMessage = t(\n        'serviceAccount.service_account_description_length_is_greater_than_expected',\n        {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        }\n      );\n    } else {\n      serviceAccountRequest.description.validated = 'default';\n    }\n    return serviceAccountRequest;\n  };\n\n  const validateName = (serviceAccountRequest: NewServiceAccountRequest) => {\n    //validate required field\n    if (\n      serviceAccountRequest.name.value === undefined ||\n      serviceAccountRequest.name.value.trim() === ''\n    ) {\n      serviceAccountRequest.name.validated = 'error';\n      serviceAccountRequest.name.errorMessage = t(\n        'common.this_is_a_required_field'\n      );\n    } else if (\n      serviceAccountRequest.name.value !== undefined &&\n      !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(\n        serviceAccountRequest.name.value.trim()\n      )\n    ) {\n      serviceAccountRequest.name.validated = 'error';\n      serviceAccountRequest.name.errorMessage = t(\n        'common.input_filed_invalid_helper_text'\n      );\n    }\n    //validate max length\n    else if (\n      serviceAccountRequest.name.value !== undefined &&\n      serviceAccountRequest.name.value.length > MAX_SERVICE_ACCOUNT_NAME_LENGTH\n    ) {\n      serviceAccountRequest.name.validated = 'error';\n      serviceAccountRequest.name.errorMessage = t(\n        'serviceAccount.service_account_name_length_is_greater_than_expected',\n        {\n          maxLength: MAX_INSTANCE_NAME_LENGTH,\n        }\n      );\n    } else {\n      serviceAccountRequest.name.validated = 'success';\n    }\n    return serviceAccountRequest;\n  };\n\n  const setName = (name: string) => {\n    setServiceAccountRequest((prevState) => {\n      const value = {\n        ...prevState,\n        name: {\n          value: name,\n        },\n      };\n      return validateName(value);\n    });\n  };\n\n  const setDescription = (description: string) => {\n    setServiceAccountRequest((prevState) => {\n      const value = {\n        ...prevState,\n        description: {\n          value: description,\n        },\n      };\n      return validateDescription(value);\n    });\n  };\n\n  const FormValidAlert: React.FunctionComponent = () => {\n    if (\n      formSubmitted &&\n      isServiceAccountRequestInvalid(serviceAccountRequest)\n    ) {\n      return (\n        <FormAlert>\n          <Alert\n            variant='danger'\n            title={t('common.form_invalid_alert')}\n            aria-live='polite'\n            isInline\n          />\n        </FormAlert>\n      );\n    }\n    return <></>;\n  };\n\n  const submit = (event) => {\n    event.preventDefault();\n    setFormSubmitted(true);\n    const validated = validateName(validateDescription(serviceAccountRequest));\n    setServiceAccountRequest({ ...validated });\n\n    if (!isServiceAccountRequestInvalid(validated)) {\n      createServiceAccount().then(() => resetForm());\n    }\n  };\n\n  const resetForm = () => {\n    setServiceAccountRequest(createEmptyNewServiceAccountRequest());\n  };\n\n  return (\n    <Form onSubmit={submit} id={id}>\n      <FormValidAlert />\n      <FormGroup\n        label='Name'\n        isRequired\n        fieldId='text-input-name'\n        helperTextInvalid={serviceAccountRequest.name.errorMessage}\n        validated={serviceAccountRequest.name.validated}\n        helperText={t('common.input_filed_invalid_helper_text')}\n      >\n        <TextInput\n          isRequired\n          type='text'\n          id='text-input-name'\n          name='text-input-name'\n          value={serviceAccountRequest.name.value}\n          onChange={setName}\n          validated={serviceAccountRequest.name.validated}\n          autoFocus={true}\n        />\n      </FormGroup>\n      <FormGroup\n        label='Description'\n        fieldId='text-input-description'\n        helperTextInvalid={serviceAccountRequest.description.errorMessage}\n        validated={serviceAccountRequest.description.validated}\n        helperText={t('common.input_text_area_invalid_helper_text')}\n      >\n        <TextArea\n          id='text-input-description'\n          name='text-input-description'\n          value={serviceAccountRequest.description.value}\n          onChange={setDescription}\n          validated={serviceAccountRequest.description.validated}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n","import React, { useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { Configuration, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport {\n  KAFKA_MODAL_TYPES,\n  MASCreateModal,\n  useRootModalContext,\n} from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { isServiceApiError } from '@app/utils';\nimport {\n  asServiceAccountRequest,\n  createEmptyNewServiceAccountRequest,\n  isServiceAccountRequestInvalid,\n  NewServiceAccountRequest,\n} from '@app/models';\nimport { useAlert, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { CreateForm } from '@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateForm';\n\nconst FORM_ID = 'create_service_account_form';\n\nconst CreateServiceAccount: React.FunctionComponent = () => {\n  const { store, showModal, hideModal } = useRootModalContext();\n  const { fetchServiceAccounts } = store?.modalProps || {};\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig() || { kas: {} };\n  const { addAlert } = useAlert() || {};\n\n  const [serviceAccountRequest, setServiceAccountRequest] =\n    useState<NewServiceAccountRequest>(createEmptyNewServiceAccountRequest());\n  const [isCreationInProgress, setCreationInProgress] =\n    useState<boolean>(false);\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t('something_went_wrong'),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  const createServiceAccount = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        setCreationInProgress(true);\n        const serviceAccount = await apisService\n          .createServiceAccount(asServiceAccountRequest(serviceAccountRequest))\n          .then((res) => res?.data);\n        //open generate serviceAccount modal\n        showModal(KAFKA_MODAL_TYPES.CREDENTIALS, { serviceAccount });\n        addAlert &&\n          addAlert({\n            title: t('serviceAccount.service_account_creation_success_message'),\n            variant: AlertVariant.success,\n          });\n        fetchServiceAccounts && fetchServiceAccounts();\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n    setCreationInProgress(false);\n  };\n\n  const handleCreateModal = () => {\n    hideModal();\n  };\n\n  return (\n    <MASCreateModal\n      id='modalCreateSAccount'\n      isModalOpen={true}\n      title={t('serviceAccount.create_a_service_account')}\n      handleModalToggle={handleCreateModal}\n      isFormValid={!isServiceAccountRequestInvalid(serviceAccountRequest)}\n      primaryButtonTitle='Create'\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit='modalCreateServiceAccount-buttonSubmit'\n      dataTestIdCancel='modalCreateServiceAccount-buttonCancel'\n      formId={FORM_ID}\n    >\n      <CreateForm\n        createServiceAccount={createServiceAccount}\n        setServiceAccountRequest={setServiceAccountRequest}\n        serviceAccountRequest={serviceAccountRequest}\n        id={FORM_ID}\n      />\n    </MASCreateModal>\n  );\n};\n\nexport { CreateServiceAccount };\nexport default CreateServiceAccount;\n"],"names":["asServiceAccountRequest","value","undefined","name","Error","description","isServiceAccountRequestInvalid","validated","CreateForm","serviceAccountRequest","createServiceAccount","setServiceAccountRequest","id","t","useTranslation","useState","formSubmitted","setFormSubmitted","validateDescription","test","trim","length","errorMessage","maxLength","validateName","resetForm","Form","onSubmit","event","preventDefault","then","FormAlert","Alert","variant","title","isInline","FormGroup","label","isRequired","fieldId","helperTextInvalid","helperText","TextInput","type","onChange","prevState","autoFocus","TextArea","FORM_ID","CreateServiceAccount","store","showModal","hideModal","fetchServiceAccounts","modalProps","auth","useAuth","basePath","useConfig","kas","addAlert","useAlert","isCreationInProgress","setCreationInProgress","isModalOpen","handleModalToggle","isFormValid","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","formId","getToken","accessToken","apisService","SecurityApi","Configuration","res","data","serviceAccount","AlertVariant","error","reason","response","handleServerError"],"sourceRoot":""}