{"version":3,"file":"1956.fd81eac0.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstance.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DeleteModal } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type DeleteInstanceModalProps = {\n  kafka: KafkaRequest;\n  onClose?: () => void;\n  hideModal: () => void;\n  onDelete: () => void;\n  isLoading: boolean;\n};\n\nexport const DeleteInstanceModal: React.FunctionComponent<DeleteInstanceModalProps> =\n  ({ kafka, onClose, hideModal, onDelete, isLoading }) => {\n    const { t } = useTranslation();\n    const selectedInstanceName = kafka?.name;\n\n    const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n    const handleInstanceName = (value: string) => {\n      setInstanceNameInput(value);\n    };\n\n    const isConfirmButtonDisabled = () => {\n      if (kafka.status === InstanceStatus.READY) {\n        if (\n          instanceNameInput?.toLowerCase() ===\n          selectedInstanceName?.toLowerCase()\n        ) {\n          return false;\n        }\n        return true;\n      }\n      return false;\n    };\n\n    const onKeyPress = (event) => {\n      if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n        submit();\n      }\n    };\n\n    const submit = () => {\n      onDelete && onDelete();\n    };\n\n    const handleToggle = () => {\n      setInstanceNameInput('');\n      hideModal();\n      onClose && onClose();\n    };\n\n    if (kafka.status === InstanceStatus.READY) {\n      return (\n        <DeleteModal\n          isModalOpen={true}\n          title={`${t('delete_instance')}?`}\n          confirmButtonProps={{\n            isDisabled: isConfirmButtonDisabled(),\n            'data-testid': 'modalDeleteKafka-buttonDelete',\n            label: t('delete'),\n            onClick: submit,\n            isLoading,\n          }}\n          handleModalToggle={handleToggle}\n          textProps={{\n            description: t('delete_instance_status_complete', {\n              instanceName: kafka.name,\n            }),\n          }}\n          selectedItemData={kafka}\n          textInputProps={{\n            showTextInput: kafka.status === InstanceStatus.READY,\n            label: t('instance_name_label', { name: selectedInstanceName }),\n            value: instanceNameInput,\n            onChange: handleInstanceName,\n            onKeyPress,\n            autoFocus: true,\n          }}\n        />\n      );\n    } else if (\n      kafka.status === InstanceStatus.ACCEPTED ||\n      kafka.status === InstanceStatus.PROVISIONING ||\n      kafka.status === InstanceStatus.PREPARING\n    ) {\n      return (\n        <DeleteModal\n          isModalOpen={true}\n          title={`${t('delete_instance')}?`}\n          confirmButtonProps={{\n            isDisabled: isConfirmButtonDisabled(),\n            'data-testid': 'modalDeleteKafka-buttonDelete',\n            label: t('delete'),\n            onClick: submit,\n            isLoading,\n          }}\n          handleModalToggle={handleToggle}\n          textProps={{\n            description: t('delete_instance_status_accepted_or_provisioning', {\n              instanceName: kafka.name,\n            }),\n          }}\n          selectedItemData={kafka}\n          textInputProps={{\n            showTextInput: false,\n            label: t('instance_name_label', { name: selectedInstanceName }),\n            value: instanceNameInput,\n            onChange: handleInstanceName,\n            onKeyPress,\n            autoFocus: true,\n          }}\n        />\n      );\n    } else {\n      return (\n        <DeleteModal\n          isModalOpen={true}\n          title=''\n          confirmButtonProps={{\n            isDisabled: isConfirmButtonDisabled(),\n            'data-testid': 'modalDeleteKafka-buttonDelete',\n            label: t('delete'),\n            onClick: submit,\n            isLoading,\n          }}\n          handleModalToggle={handleToggle}\n          selectedItemData={kafka}\n          textInputProps={{\n            showTextInput: kafka.status === InstanceStatus.READY,\n            label: t('instance_name_label', { name: selectedInstanceName }),\n            value: instanceNameInput,\n            onChange: handleInstanceName,\n            onKeyPress,\n            autoFocus: true,\n          }}\n        />\n      );\n    }\n  };\n\nexport default DeleteInstanceModal;\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport {\n  BaseModalProps,\n  DeleteInstanceProps,\n  useAlert,\n  useAuth,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { DeleteInstanceModal } from './DeleteInstance';\nimport { isServiceApiError } from '@app/utils';\n\nconst DeleteInstanceConnected: React.FunctionComponent<\n  DeleteInstanceProps & BaseModalProps\n> = ({ kafka, onDelete, hideModal }) => {\n  const { addAlert } = useAlert() || {};\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const closeModal = () => {\n    hideModal();\n  };\n\n  const deleteInstance = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && kafka.id) {\n      try {\n        setIsLoading(true);\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.deleteKafkaById(kafka.id, true).then(() => {\n          setIsLoading(false);\n        });\n        closeModal();\n        onDelete && onDelete();\n      } catch (error) {\n        setIsLoading(false);\n        handleServerError(error);\n      }\n    }\n  };\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t('something_went_wrong'),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  return (\n    <DeleteInstanceModal\n      hideModal={hideModal}\n      onClose={closeModal}\n      kafka={kafka}\n      onDelete={deleteInstance}\n      isLoading={isLoading}\n    />\n  );\n};\n\nexport { DeleteInstanceConnected };\nexport default DeleteInstanceConnected;\n"],"names":["DeleteInstanceModal","kafka","onClose","hideModal","onDelete","isLoading","t","useTranslation","selectedInstanceName","name","useState","instanceNameInput","setInstanceNameInput","handleInstanceName","value","isConfirmButtonDisabled","status","toLowerCase","onKeyPress","event","key","submit","handleToggle","isModalOpen","title","confirmButtonProps","isDisabled","label","onClick","handleModalToggle","textProps","description","instanceName","selectedItemData","textInputProps","showTextInput","onChange","autoFocus","DeleteInstanceConnected","addAlert","useAlert","auth","useAuth","basePath","useConfig","setIsLoading","closeModal","handleServerError","error","reason","response","data","variant","AlertVariant","kas","getToken","accessToken","id","DefaultApi","Configuration","deleteKafkaById","then"],"sourceRoot":""}