{"version":3,"sources":["webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/common/MASDeleteModal/MASDeleteModal.tsx","webpack://kas-ui/./src/app/common/MASLoading/MASLoading.tsx","webpack://kas-ui/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://kas-ui/./src/app/common/MASPagination/MASPagination.tsx","webpack://kas-ui/./src/app/common/MASTable/CustomRowWrapper.tsx","webpack://kas-ui/./src/app/common/MASTable/MASTable.tsx","webpack://kas-ui/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://kas-ui/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://kas-ui/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://kas-ui/./src/app/components/ErrorBoundary/UnexpectedError.tsx","webpack://kas-ui/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/i18n/i18n.ts","webpack://kas-ui/./src/openapi/base.ts"],"names":["getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","callback","delay","savedCallback","onConnectToInstance","getConnectToInstancePath","authContext","useContext","AuthContext","basePath","ApiContext","location","searchParams","URLSearchParams","search","page","parseInt","get","perPage","mainToggle","has","t","useTranslation","addAlert","isOpenCreateInstanceModal","setIsOpenCreateInstanceModal","kafkaInstanceItems","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","cloudProviders","setCloudProviders","kafkaDataLoaded","setKafkaDataLoaded","orderBy","setOrderBy","selectedInstance","setSelectedInstance","expectedTotal","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isUserUnauthorized","setIsUserUnauthorized","activeTab","instanceDetail","fetchKafkas","justPoll","getToken","accessToken","undefined","isValidToken","apisService","listKafkas","toString","filters","forEach","filter","filterKey","filterValue","length","push","map","val","value","trim","isExact","join","then","res","kafkaInstances","data","items","total","error","reason","errorCode","response","code","AlertVariant","handleServerError","listCloudProviders","providers","useRef","current","setTimeout","clearInterval","refreshKafkas","titleProps","title","headingLevel","emptyStateBodyProps","body","isModalOpen","setIsModalOpen","onCreate","refresh","isExpanded","isLoading","onClose","PageSection","variant","PageSectionVariants","Level","LevelItem","Title","size","padding","default","buttonProps","onClick","className","onViewConnection","instance","onViewInstance","onDelete","isDrawerOpen","MASDeleteModal","modalProps","confirmButtonProps","cancelButtonProps","handleModalToggle","textProps","children","selectedItemData","ModalVariant","titleIconVariant","ariaLabel","showClose","restModalProps","id","key","buttonConfirmVariant","ButtonVariant","onClickConfirmButton","isDisabledConfirmButton","label","confirmActionLabel","restConfirmButtonProps","cancelButtonId","cancelButtonKey","cancelButtonVariant","cancelActionLabel","restCancelButtonProps","description","restTextProps","Modal","isOpen","actions","Button","isDisabled","Text","dangerouslySetInnerHTML","__html","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","MASDrawer","drawerPanelContentProps","drawerHeaderProps","panelBodyContent","onExpand","widths","restDrawerPanelContentProps","text","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextContent","component","TextVariants","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","MASPagination","itemCount","PaginationVariant","isCompact","titles","restProps","history","setSearchParam","useCallback","name","set","onSetPage","_","newPage","onPerPageSelect","newPerPage","CustomRowWrapperContext","createContext","activeRow","onRowClick","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","trRef","rowProps","row","props","rowIndex","originalData","isRowDeleted","status","tabIndex","ref","css","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","rowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","toggleIcon","breakpoint","toolbarToggleGroupProps","ToolbarContent","ToolbarToggleGroup","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","Alert","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","DeleteInstanceModal","instanceStatus","selectedInstanceName","instanceNameInput","setInstanceNameInput","isConfirmButtonDisabled","toLowerCase","htmlFor","TextInput","type","onChange","onKeyPress","autoFocus","UnexpectedError","updateState","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","ExclamationCircleIcon","StatusColumn","filteredstatus","instanceName","CheckCircleIcon","PendingIcon","IconSize","getStatusIcon","Flex","FlexItem","spacer","st","StreamsToolbar","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","nameInputRef","ownerInputRef","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","option","updateFilter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterValueIndex","splice","isInputValid","test","onFilter","filterType","clearSelection","copyFilteredValue","onInputPress","fieldName","target","getSelectionForFilter","selectedFilters","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","find","chipIndex","onDeleteChipGroup","maxFilterCount","provisioningStatus","isDisabledSelectOption","optionValue","tooltipContent","ToolbarGroup","Select","SelectVariant","onToggle","selections","onSelect","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","validated","ValidatedOptions","placeholder","input","SearchIcon","Tooltip","content","reference","isPlaceholder","placeholderText","getElementById","widgetId","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","lg","FilterIcon","pseudolocalizationEnabled","window","enabled","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","format","lng","options","Intl","NumberFormat","Date","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","BASE_PATH","replace","configuration","axios","this","field","msg","Error"],"mappings":"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","file":"965.33a8af82be7ed8f1581b.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport function getBrowserVisibilityProp() {\n  const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp() {\n    const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden() {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility() {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  });\n  return {isVisible,setIsVisible};\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { Level, LevelItem, PageSection, PageSectionVariants, Title, AlertVariant } from '@patternfly/react-core';\nimport {\n  StreamsTableView,\n  FilterType,\n  CreateInstanceModal,\n  AlertProvider,\n  useAlerts,\n  InstanceDrawer,\n  CreateInstanceModalProvider,\n} from '@app/components';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport './OpenshiftStreams.css';\nimport { MASLoading, MASEmptyState, MASFullPageError } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { InstanceStatus, MIN_POLL_INTERVAL, MAX_POLL_INTERVAL } from '@app/utils';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance, getConnectToInstancePath }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [isOpenCreateInstanceModal, setIsOpenCreateInstanceModal] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  // const [pollInterval, setPollInterval] = useState<number>(MAX_POLL_INTERVAL);\n\n  const drawerRef = React.createRef<any>();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken) && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n        }\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy, isVisible]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  // uncomment if changing the poll interval is required for incomplete kafkas\n  // useEffect(() => {\n  //   if (kafkaInstanceItems) {\n  //     let allAreReady = true;\n  //     const statuses: string[] = [\n  //       InstanceStatus.ACCEPTED,\n  //       InstanceStatus.PREPARING,\n  //       InstanceStatus.PROVISIONING,\n  //       InstanceStatus.DEPROVISION,\n  //     ];\n  //     for (let i = 0; i < kafkaInstanceItems.length; i++) {\n  //       const item = kafkaInstanceItems[i];\n  //       if (item.status && statuses.includes(item.status)) {\n  //         allAreReady = false;\n  //         break;\n  //       }\n  //     }\n\n  //     if (!allAreReady) {\n  //       // Decrease the poll interval if any instance is not in ready or failed state\n  //       setPollInterval(MIN_POLL_INTERVAL);\n  //     } else {\n  //       // Increase the poll interval if all instances are in ready or failed state\n  //       setPollInterval(MAX_POLL_INTERVAL);\n  //     }\n  //   }\n  // }, [kafkaInstanceItems]);\n\n  useTimeout(() => fetchKafkas(true), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  /**\n   * Show Unathorize page in case user is not authorize\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('you_do_not_have_access_to_openshift_streams'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('contact_your_organization_administration_for_more_information'),\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <AlertProvider>\n        <CreateInstanceModalProvider\n          value={{\n            isModalOpen: isOpenCreateInstanceModal,\n            setIsModalOpen: setIsOpenCreateInstanceModal,\n            onCreate,\n            cloudProviders,\n            mainToggle,\n            refresh: refreshKafkas,\n          }}\n        >\n          <InstanceDrawer\n            mainToggle={mainToggle}\n            isExpanded={selectedInstance != null}\n            activeTab={activeTab}\n            isLoading={instanceDetail === undefined}\n            instanceDetail={instanceDetail}\n            onClose={onCloseDrawer}\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <MASLoading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <MASEmptyState\n                  titleProps={{\n                    title: t('you_do_not_have_any_kafka_instances_yet'),\n                    headingLevel: 'h4',\n                  }}\n                  emptyStateBodyProps={{\n                    body: t('create_a_kafka_instance_to_get_started'),\n                  }}\n                  buttonProps={{\n                    title: t('create_a_kafka_instance'),\n                    onClick: () => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModal),\n                  }}\n                />\n                <CreateInstanceModal />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  getConnectToInstancePath={getConnectToInstancePath}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                  isDrawerOpen={selectedInstance !== null}\n                />\n              </PageSection>\n            )}\n          </InstanceDrawer>\n        </CreateInstanceModalProvider>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  Text,\n  ButtonProps,\n  TextProps,\n} from '@patternfly/react-core';\nimport './MASDeleteModal.css';\n\nexport type MASDeleteModalProps = {\n  isModalOpen: boolean;\n  modalProps: Omit<ModalProps, 'children' | 'ref'>;\n  handleModalToggle: () => void;\n  children?: React.ReactNode;\n  selectedItemData?: any;\n  confirmButtonProps?: Omit<ButtonProps, 'children' | 'onClick'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n    onClick?: (data?: any) => Promise<void> | void;\n  };\n  cancelButtonProps?: Omit<ButtonProps, 'children'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n  };\n  textProps?: Omit<TextProps, 'children'> & {\n    description?: string;\n  };\n};\n\nexport const MASDeleteModal: React.FC<MASDeleteModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  children,\n  selectedItemData = '',\n}: MASDeleteModalProps) => {\n  const {\n    variant = ModalVariant.small,\n    titleIconVariant = 'warning',\n    ['aria-label']: ariaLabel,\n    title,\n    showClose = true,\n    ...restModalProps\n  } = modalProps || {};\n\n  const {\n    id = 'mas--confirm__button',\n    key = 'confirm-button',\n    variant: buttonConfirmVariant = ButtonVariant.danger,\n    onClick: onClickConfirmButton,\n    isDisabled: isDisabledConfirmButton,\n    label: confirmActionLabel = 'Delete',\n    ...restConfirmButtonProps\n  } = confirmButtonProps || {};\n\n  const {\n    id: cancelButtonId = 'mas--cancel__button',\n    key: cancelButtonKey = '\"cancel-button',\n    variant: cancelButtonVariant = ButtonVariant.link,\n    onClick: onClickCancelButton,\n    isDisabled: isDisabledCancelButton,\n    label: cancelActionLabel = 'Cancel',\n    ...restCancelButtonProps\n  } = cancelButtonProps || {};\n\n  const { className = 'mas--delete-item__modal--text', description, ...restTextProps } = textProps || {};\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={ariaLabel}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={showClose}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          id={id}\n          key={key}\n          variant={buttonConfirmVariant}\n          onClick={() => onClickConfirmButton && onClickConfirmButton(selectedItemData)}\n          isDisabled={isDisabledConfirmButton}\n          {...restConfirmButtonProps}\n        >\n          {confirmActionLabel}\n        </Button>,\n        <Button\n          id={cancelButtonId}\n          key={cancelButtonKey}\n          variant={cancelButtonVariant}\n          onClick={handleModalToggle}\n          {...restCancelButtonProps}\n        >\n          {cancelActionLabel}\n        </Button>,\n      ]}\n      {...restModalProps}\n    >\n      {description && (\n        <Text className={className} dangerouslySetInnerHTML={{ __html: description || '' }} {...restTextProps} />\n      )}\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/common';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps: {\n    text: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n}: MASDrawerProps) => {\n  const { hidden = false, widths, ...restDrawerPanelContentProps } = drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = () => {\n    return (\n      <DrawerPanelContent widths={widths || { default: 'width_50' }} hidden={hidden} {...restDrawerPanelContentProps}>\n        {isLoading ? (\n          <MASLoading />\n        ) : (\n          <>\n            <DrawerHead>\n              <TextContent>\n                <Text component={text?.component || TextVariants.small} className={text?.className || 'pf-u-mb-0'}>\n                  {text?.label}\n                </Text>\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'pf-u-mt-0'}\n                >\n                  {title?.value}\n                </Title>\n              </TextContent>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <DrawerPanelBody>{panelBodyContent}</DrawerPanelBody>\n          </>\n        )}\n      </DrawerPanelContent>\n    );\n  };\n\n  return (\n    <Drawer isExpanded={isExpanded} onExpand={onExpand}>\n      <DrawerContent panelContent={panelContent()}>{children}</DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport interface PaginationProps extends Omit<PFPaginationProps, 'children' | 'ref'> {}\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { createContext, useContext } from 'react';\nimport { InstanceStatus } from '@app/utils';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick: (event: any, rowIndex: number, row: any) => void;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => {},\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps) => {\n  const { activeRow, onRowClick } = useContext(CustomRowWrapperContext);\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n  const isRowDeleted = originalData?.status === InstanceStatus.DEPROVISION;\n\n  return (\n    <tr\n      tabIndex={0}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        isRowDeleted ? 'pf-m-disabled' : 'pf-m-selectable',\n        activeRow && activeRow === originalData?.name && 'pf-m-selected'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: any) => !isRowDeleted && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { CustomRowWrapper, CustomRowWrapperProvider, CustomRowWrapperContextProps } from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'>;\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    rowWrapper,\n    ...restProps\n  } = tableProps;\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n      }}\n    >\n      <PFTable\n        className={css('mas--streams-table-view__table', className)}\n        rowWrapper={rowWrapper || CustomRowWrapper}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar as PFToolbar,\n  ToolbarProps as PFToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport interface ToolbarItemProps extends Omit<PFToolbarItemProps, 'children'> {\n  item: JSX.Element;\n}\ninterface ToolbarProps {\n  toolbarProps: Omit<PFToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems: JSX.Element;\n  toolbarItems: ToolbarItemProps[];\n}\n\nconst MASToolbar: React.FunctionComponent<ToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n  const { toggleIcon, breakpoint = 'md', ...toolbarToggleGroupProps } = toggleGroupProps;\n  return (\n    <>\n      <PFToolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={toggleIcon} breakpoint={breakpoint} {...toolbarToggleGroupProps}>\n            {toggleGroupItems}\n          </ToolbarToggleGroup>\n          {toolbarItems.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </PFToolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type AlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string|React.ReactElement;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextInput } from '@patternfly/react-core';\nimport { MASDeleteModal, MASDeleteModalProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport type DeleteInstanceModalProps = MASDeleteModalProps & {\n  instanceStatus?: string;\n};\n\nexport const DeleteInstanceModal: React.FC<DeleteInstanceModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  instanceStatus,\n  selectedItemData,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled()) {\n      confirmButtonProps?.onClick && confirmButtonProps.onClick(selectedItemData);\n    }\n  };\n  return (\n    <MASDeleteModal\n      isModalOpen={isModalOpen}\n      modalProps={modalProps}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleModalToggle}\n      textProps={textProps}\n    >\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            onKeyPress={onKeyPress}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </MASDeleteModal>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, TitleSizes, Button, EmptyStateVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './UnexpectedError.css';\nimport { MASEmptyState } from '@app/common';\n\ntype UnexpectedError = {\n  updateState: (hasError: boolean) => void;\n};\n\nconst UnexpectedError = ({ updateState }: UnexpectedError) => {\n  const { t } = useTranslation();\n\n  const GoHomeBtn = () => {\n    const history = useHistory();\n    function handleClick() {\n      updateState(false);\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('go_to_openshift_streams')}</Button>;\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.full,\n        }}\n        emptyStateIconProps={{\n          icon: ExclamationCircleIcon,\n          className: 'icon-color',\n        }}\n        titleProps={{\n          title: t('something_went_wrong'),\n          headingLevel: 'h1',\n          size: TitleSizes.lg,\n        }}\n        emptyStateBodyProps={{\n          body: t('unexpected_error'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { UnexpectedError };\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size={IconSize.md} aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const icon = getStatusIcon();\n  return (\n    <Flex>\n      {icon && <FlexItem spacer={{ default: 'spacerSm' }}>{icon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { useCreateInstanceModal } from '@app/components';\n\ntype StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n}) => {\n  const { isModalOpen, setIsModalOpen } = useCreateInstanceModal();\n  const { t } = useTranslation();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus = filterKey === 'status' && filterValue?.filter(({ value }) => value === 'provisioning');\n      if (provisioningStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onChangeSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"filterText\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label=\"Search instances\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <ToolbarItem>\n              <Select\n                id=\"cloud-provider-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select cloud provider\"\n                onToggle={onCloudProviderFilterToggle}\n                selections={getSelectionForFilter('cloud_provider')}\n                isOpen={isCloudProviderFilterExpanded}\n                onSelect={onCloudProviderFilterSelect}\n                placeholderText={t('filter_by_cloud_provider')}\n              >\n                {cloudProviderFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('cloud-provider-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n        >\n          {filterSelected === 'region' && (\n            <ToolbarItem>\n              <Select\n                id=\"region-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select region\"\n                onToggle={onRegionFilterToggle}\n                selections={getSelectionForFilter('region')}\n                isOpen={isRegionFilterExpanded}\n                onSelect={onRegionFilterSelect}\n                placeholderText={t('filter_by_region')}\n              >\n                {regionFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('region-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"filterOwners\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label=\"Search owners\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n        >\n          {filterSelected === 'status' && (\n            <ToolbarItem>\n              <Select\n                id=\"status-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select status\"\n                onToggle={onStatusFilterToggle}\n                selections={getSelectionForFilter('status')}\n                isOpen={isStatusFilterExpanded}\n                onSelect={onStatusFilterSelect}\n                placeholderText={t('filter_by_status')}\n              >\n                {statusFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('status-select')}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button variant=\"primary\" onClick={() => setIsModalOpen(!isModalOpen)}>\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: FilterIcon, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const __PUBLIC_PATH__: string;\ndeclare const window: Window & {\n  windowError: string;\n};\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__PUBLIC_PATH__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: '~',\n      keySeparator: false,\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        // window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        // console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\ni18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n"],"sourceRoot":""}