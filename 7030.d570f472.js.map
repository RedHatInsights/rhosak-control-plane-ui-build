{"version":3,"file":"7030.d570f472.js","mappings":"kIA8BO,SAASA,IACd,OAAQC,UAXFC,EAAiBD,cACG,IAAfC,EAAIC,OACN,cAC0B,IAAjBD,EAAIE,SACb,gBAC8B,IAArBF,EAAIG,aACb,eAEF,KATF,IACCH,EAcD,SAASI,IAIR,OAA4B,IAAAC,UAASP,KAApCQ,EAAS,KAAEC,EAAY,KACxBC,EAAqB,WAAM,OAAAD,EAAaT,MAQ9C,OAPA,IAAAW,YAAU,WACR,IAjCIT,EAiCEU,OAhCkB,KADpBV,EAAiBD,UACRE,OAEN,wBAC0B,IAAjBD,EAAIE,SACb,0BAC8B,IAArBF,EAAIG,aACb,yBAEF,GA0BL,OADAJ,SAASY,iBAAiBD,EAAkBF,GAAoB,GACzD,WACLT,SAASa,oBAAoBF,EAAkBF,MAEhD,IACI,CAAEF,UAAS,EAAEC,aAAY,K,sJC1B5BM,EAA+D,SAAC,G,IACpEC,EAAU,aACVC,EAAO,UACPC,EAAc,iBACdC,EAAU,aACVC,EAAS,YACTC,EAAQ,WACYC,EAAa,sBACjCC,EAAgB,mBAChBC,EAAkC,qCAElC,WAAa,KACL,IAAAC,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,KAAS,CACRP,WAAYA,EACZC,UAAWA,EACXH,QAASA,EACTU,iBACE,kBAACC,EAAA,GAAqB,CACpBZ,WAAYA,EACZE,eAAgBA,EAChBK,iBAAkBA,IAGtBM,kBAAmB,CACjBC,KAAM,CAAEC,MAAON,EAAE,kBACjBO,MAAO,CAAEC,MAAOf,MAAAA,OAAc,EAAdA,EAAgBgB,KAAMC,aAAc,OACrD,mBACiBb,EAClBE,mCAAoCA,GAEnCH,K,+CC3CKe,E,gEAHCC,EAAe,UAAW,WAAM,0CAChCC,EAAa,UAAW,WAAM,2CAE3C,SAAYF,GACV,oBACA,0BAFF,CAAYA,IAAAA,EAAkB,KAUvB,IAAMR,EACX,SAAC,G,IAgBWW,EAhBTvB,EAAU,aAAEE,EAAc,iBAAEK,EAAgB,mBACrCE,GAAM,IAAAC,kBAAgB,EAExB,GAA4B,IAAAnB,UAChCS,GAAcoB,EAAmBI,SAD5BC,EAAS,KAAEC,EAAY,KAmBxBC,GACJzB,MAAAA,OAAc,EAAdA,EAAgB0B,UAAW,gBAC3B1B,MAAAA,OAAc,EAAdA,EAAgB0B,UAAW,eAE7B,OACE,kBAAC,aAAc,CAACC,SAAU,kBAAC,KAAU,OACnC,kBAAC,EAAAC,KAAI,CACHC,UAAWN,EAAUO,WACrBC,SAAU,SAACC,EAAGC,GAAQ,OAvBV,SAACA,GACbA,IAAQf,EAAmBgB,WAC7BV,EAAaN,EAAmBgB,YAEhCV,EAAaN,EAAmBI,SAmBRa,CAAUF,KAEhC,kBAAC,EAAAG,IAAG,CACFC,SAAUnB,EAAmBI,QAAQQ,WACrChB,MAAO,kBAAC,EAAAwB,aAAY,KAAE/B,EAAE,aAExB,kBAACa,EAAU,CAACpB,eAAgBA,KAE9B,kBAAC,EAAAoC,IAAG,CACFC,SAAUnB,EAAmBgB,WAAWJ,WACxChB,MAAO,kBAAC,EAAAwB,aAAY,KAAE/B,EAAE,eAA6B,cACzC,4BAEZ,kBAACY,EAAY,CACXoB,gBA5BAlB,GAA0BrB,GAAkB,IAAE,uBAC/CqB,MAAAA,OAAqB,EAArBA,EAAuBmB,SAAS,SACnCnB,EACGA,EAAqB,QA0BpBI,eAAgBA,EAChBpB,iBAAkBA,S,uJClEzB,SAASoC,EAAcC,EAAaC,GACzC,IAAMC,GAAgB,IAAAC,WAEtB,IAAApD,YAAU,WACRmD,EAAcE,QAAUJ,IACvB,CAACA,KAEJ,IAAAjD,YAAU,WAIR,GAAc,OAAVkD,EAAgB,CAClB,IAAM,EAAKI,YAJb,WACEH,EAAcE,YAGcH,GAC5B,OAAO,WACLK,cAAc,OAIjB,CAACN,EAAUC,I,gFCuBVM,EAA+D,SAAC,G,UACpEC,EAAiB,oBACjB,IAAAC,eAAAA,OAAc,IAAG,SAAM,EACvBC,EAAK,QACLC,EAAI,OACJC,EAAO,UACPC,EAAa,gBACbC,EAAgB,mBAChBC,EAAyB,4BAEjBlD,GAAM,IAAAC,kBAAgB,EACxBkD,GAAe,IAAAb,UACfc,GAAgB,IAAAd,UAEhB,GAA0C,IAAAxD,WAAS,GAAlDuE,EAAgB,KAAEC,EAAmB,KACtC,GACJ,IAAAxE,WAAS,GADJyE,EAA6B,KAAEC,EAAgC,KAEhE,GAAsD,IAAA1E,WAAS,GAA9D2E,EAAsB,KAAEC,EAAyB,KAClD,GAAsD,IAAA5E,WAAS,GAA9D6E,EAAsB,KAAEC,EAAyB,KAClD,GAAsC,IAAA9E,YAArC+E,EAAc,KAAEC,EAAiB,KAClC,GAAwC,IAAAhF,YAAvCiF,EAAe,KAAEC,EAAkB,KACpC,GAAgC,IAAAlF,WAAkB,GAAjDmF,EAAW,KAAEC,EAAc,KAC5B,GAAkC,IAAApF,WAAkB,GAAnDqF,EAAY,KAAEC,EAAe,KAC9B,GAAgC,IAAAtF,WAAkB,GAAjDuF,EAAW,KAAEC,EAAc,KAG5BC,EAAoB,CACxB,CAAEjE,MAAON,EAAE,QAASQ,MAAO,OAAQgE,UAAU,GAC7C,CAAElE,MAAON,EAAE,kBAAmBQ,MAAO,iBAAkBgE,UAAU,GACjE,CAAElE,MAAON,EAAE,UAAWQ,MAAO,SAAUgE,UAAU,GACjD,CAAElE,MAAON,EAAE,SAAUQ,MAAO,QAASgE,UAAU,GAC/C,CAAElE,MAAON,EAAE,UAAWQ,MAAO,SAAUgE,UAAU,KAGnD,IAAAtF,YAAU,WACRuF,OACC,CAACzB,IAEJ,IAAM0B,EAA6B,UACjC,SAACC,GACC,MAAO,CACLrE,MAAON,EAAE2E,EAAcnE,OACvBA,MAAOmE,EAAcnE,MACrBgE,UAAU,MAKVI,EAAsB,UAAuB,SAACC,GAClD,MAAO,CAAEvE,MAAON,EAAE6E,EAAOrE,OAAQA,MAAOqE,EAAOrE,MAAOgE,UAAU,MAG5DM,GAAsB,aAExB,SAACC,GACC,OAAAA,EAAEvE,QAAU,gBACZuE,EAAEvE,QAAU,gBAEfwE,KAAI,SAAC7D,GACJ,MAAO,CAAEb,MAAON,EAAEmB,EAAOX,OAAQA,MAAOW,EAAOX,MAAOgE,UAAU,MAkC9DS,GAAe,SACnBC,EACAC,EACAC,GAEA,IAAMC,EAA+BC,OAAOC,OAAO,GAAIvC,GACjDwC,EAAcH,EAAeI,WAAU,SAACC,GAAM,OAAAA,EAAEC,YAAcT,KACpE,GAAIM,GAAe,EAAG,CAEpB,IAAMI,EAAcP,EAAeG,GACnC,GAAII,EAAYA,aAAeA,EAAYA,YAAYC,OAAS,EAAG,CAEjE,IAAMC,EAAmBF,EAAYA,YAAYH,WAC/C,SAACC,GAAM,OAAAA,EAAElF,QAAU2E,EAAO3E,SAE5B,GAAIsF,GAAoB,EAAG,CAEzB,IAAIV,EAGF,OAFAQ,EAAYA,YAAYG,OAAOD,EAAkB,QAMnDT,EAAeG,GAAaI,YAAYI,KAAKb,QAI/CE,EAAeG,GAAaI,YAAc,CAACT,QAI7CE,EAAeW,KAAK,CAAEL,UAAWT,EAAKU,YAAa,CAACT,KAEtDlC,EAAiBoC,IAGbY,GAAe,SAACzF,GACpB,OAAOA,GACH,qCAAqC0F,KAAK1F,EAAM2F,SAIhDC,GAAW,SAACC,GAEC,SAAfA,GACAxC,GACyB,IAAzBA,EAAesC,OAEXF,GAAapC,IACfoB,GAAa,OAAQ,CAAEzE,MAAOqD,EAAgByC,SAAS,IAAS,GAChExC,EAAkB,KAElBI,GAAe,GAGF,UAAfmC,GACAtC,GAC0B,IAA1BA,EAAgBoC,SAEZF,GAAalC,IACfkB,GACE,QACA,CAAEzE,MAAOuD,EAAiBuC,SAAS,IACnC,GAEFtC,EAAmB,KAEnBI,GAAgB,KAsDhBmC,GAAiB,SAAC/F,GACtB,IAAMgG,EAAkClB,OAAOC,OAAO,GAAIvC,GACpDwC,EAAcgB,EAAkBf,WACpC,SAACN,GAAW,OAAAA,EAAOQ,YAAcnF,KAE/BgF,GAAe,GACjBgB,EAAkBT,OAAOP,EAAa,GAExCvC,EAAiBuD,GACH,SAAVhG,GACFsD,EAAkB,IAEN,UAAVtD,GACFwD,EAAmB,IAEP,mBAAVxD,GACFoD,GAA0B,GAEd,WAAVpD,GACFkD,GAA0B,GAEd,WAAVlD,GACFoD,GAA0B,IAIxB6C,GAAe,SAACC,G,MACpB,GAAkB,UAAdA,EAAMxB,MAAoBb,EAAa,CACzC,IAAMsC,EAAyB,QAAb,EAAAD,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAEnG,KACjC2F,GAASO,KAIPE,GAAwB,SAAC3B,GAC7B,IAAM4B,EAAkB9D,EAAcmC,QACpC,SAACA,GAAW,OAAAA,EAAOQ,YAAcT,KAEnC,GAAI4B,EAAgBjB,OAAS,EAC3B,OAAOiB,EAAgB,GAAGlB,YAAYZ,KAAI,SAAC+B,GAAQ,OAAAA,EAAIvG,UAKrDwG,GAAe,SACnBC,EACAC,EACAC,G,QAEMC,EAAiC9B,OAAOC,OAAO,GAAIvC,GACnDwC,EAAc4B,EAAiB3B,WACnC,SAACN,GAAW,OAAAA,EAAOQ,YAAcsB,KAE7BI,EAAiC/B,OAAOC,OAC5C,GAC6B,QAA7B,EAAA6B,EAAiB5B,UAAY,eAAEI,aAE7B0B,EAAiCJ,EAAK3F,WAItC4F,IAAiBA,MAAAA,OAAa,EAAbA,EAAetB,QAAS,IAC3CyB,EAEC,QAFY,EAAAH,MAAAA,OAAa,EAAbA,EAAeI,MAC1B,SAACC,GAAW,OAAAA,EAAOlH,QAAU4G,EAAK3F,qBACnC,eAAEf,OAKL,IAAMiH,EAAYJ,EAAgB5B,WAChC,SAACsB,GAAQ,OAAAA,EAAIvG,QAAU8G,KAErBG,GAAa,IACfL,EAAiB5B,GAAaI,YAAYG,OAAO0B,EAAW,GAC5DxE,EAAiBmE,KAIfM,GAAoB,SAACT,GACzB,IAAMG,EAAiC9B,OAAOC,OAAO,GAAIvC,GACnDwC,EAAc4B,EAAiB3B,WACnC,SAACN,GAAW,OAAAA,EAAOQ,YAAcsB,KAE/BzB,GAAe,IACjB4B,EAAiBrB,OAAOP,EAAa,GACrCvC,EAAiBmE,KAIf3C,GAAmB,WACvB,IAAIkD,EAAiB,EACrB3E,MAAAA,GAAAA,EAAe4E,SAAQ,SAACzC,GACd,IAAAS,EAA2BT,EAAM,YAApBQ,EAAcR,EAAM,UACnC0C,EACU,WAAdlC,IACAC,MAAAA,OAAW,EAAXA,EAAaT,QACX,SAAC,GAAc,OAAP,UAAiB,sBAEvB2C,EACU,WAAdnC,IACAC,MAAAA,OAAW,EAAXA,EAAaT,QACX,SAAC,GAAc,OAAP,UAAiB,sBAGzB0C,MAAAA,OAAkB,EAAlBA,EAAoBhC,QAAS,IAAKiC,MAAAA,OAAiB,EAAjBA,EAAmBjC,QAAS,EAChE8B,IAAkB/B,MAAAA,OAAW,EAAXA,EAAaC,QAAS,GAExCgC,MAAAA,OAAkB,EAAlBA,EAAoBhC,QAAS,IAC7BiC,MAAAA,OAAiB,EAAjBA,EAAmBjC,QAAS,EAE5B8B,IAAkB/B,MAAAA,OAAW,EAAXA,EAAaC,QAAS,EAExC8B,GAAkB/B,MAAAA,OAAW,EAAXA,EAAaC,UAI/B8B,GAAkB,KACpBrD,GAAe,GAEfA,GAAe,IAIbyD,GAAyB,SAAC7C,EAAa8C,GAC3C,IAAI3C,EACE+B,EAAmBpE,MAAAA,OAAa,EAAbA,EAAemC,QACtC,SAAC,GAAkB,OAAP,cAAqBD,KAEnC,GAAIkC,IAAoBA,MAAAA,OAAgB,EAAhBA,EAAkBvB,QAAS,EAAG,CAC5C,IAAAD,EAAgBwB,EAAiB,GAAE,YAC3C/B,EAAiBO,MAAAA,OAAW,EAAXA,EAAa2B,MAAK,SAAC,GAAc,OAAP,UAAiBS,KAE9D,OAAK3C,GAMD4C,GAAiB,SAACtB,GACtB,OAAItC,EACK,6BAAMrE,EAAE,uBAEV,6BAAMA,EAAE,8BAA+B,CAAES,KAAMkG,MAGlDuB,GACJ,oCACE,kBAAC,EAAAC,aAAY,CAACC,QAAQ,gBACpB,kBAAC,EAAAC,OAAM,CACLD,QAAS,EAAAE,cAAA,OAAoB,aAClB,gBACXC,SA/Se,WACrBjF,GAAqBD,IA+SfmF,WAAY5F,EACZ6F,OAAQpF,EACR7B,SA1Me,SACrBkH,EACAC,GAEArF,GAAqBD,GACrBV,EAAkBgG,MAAAA,OAAS,EAATA,EAAWpH,cAuMtBgD,EAAkBS,KAAI,SAACwC,EAAQoB,GAAU,OACxC,kBAAC,EAAAC,aAAY,CACXC,WAAYtB,EAAOhD,SACnBU,IAAK0D,EACLpI,MAAOgH,EAAOhH,OAEbgH,EAAOlH,WAId,kBAAC,EAAAyI,cAAa,CACZC,MAAOnC,GAAsB,QAC7BoC,WAAY,SAACC,EAAWhC,GAAS,OAAAF,GAAa,OAAQE,IACtDiC,gBAAiB,WAAM,OAAAzB,GAAkB,SACzC0B,aAAcpJ,EAAE,QAChBqJ,gBAAmD,UAAlCzG,MAAAA,OAAc,EAAdA,EAAgB0G,gBAEE,UAAlC1G,MAAAA,OAAc,EAAdA,EAAgB0G,gBACf,kBAAC,EAAAC,WAAU,CAACC,UAAU,6CACpB,kBAAC,EAAAC,UAAS,CACRhJ,KAAK,OACLiJ,GAAG,aACHC,KAAK,SAAQ,aACF,sBACXC,WACG3F,GAAeI,EACZ,EAAAwF,iBAAA,MACA,EAAAA,iBAAA,QAENC,YAAa9J,EAAE,wBACf+J,SAlUY,SAACC,GACzBlG,EAAkBkG,IACjB/F,GAAeC,GAAe,IAiUnB+F,WAAYxD,GACZjG,MAAOqD,EACPqG,IAAK/G,IAEP,kBAAC,EAAAgH,OAAM,CACL/B,QAAS,EAAAgC,cAAA,QACTtB,YAAa7E,GAAeI,EAC5BgG,QAAS,WAAM,OAAAjE,GAAS,SAAO,aACpB,oBAEX,kBAAC,KAAU,SAEVnC,GAAeI,IAChB,kBAAC,EAAAiG,QAAO,CACNvL,UAAWsF,IAAgBJ,EAC3BsG,QAAStC,GAAe,QACxBuC,UAAWrH,MAMrB,kBAAC,EAAA4F,cAAa,CACZC,MAA8C,QAAvC,EAAAnC,GAAsB,yBAAiB,eAAE7B,KAAI,SAAC+B,GAAQ,OAAA/G,EAAE+G,MAC/DkC,WAAY,SAACC,EAAWhC,GACtB,OAAAF,GAAa,iBAAkBE,EAAMxC,IAEvCyE,gBAAiB,WAAM,OAAAzB,GAAkB,mBACzC0B,aAAcpJ,EAAE,kBAChBqJ,gBAAoC,mBAAnBzG,GAEG,mBAAnBA,GACC,kBAAC,EAAAyF,OAAM,CACLqB,GAAG,wBACHtB,QAAS,EAAAE,cAAA,SAAsB,aACpB,wBACXC,SAnXwB,WAClC/E,GAAkCD,IAmXxBiF,WAAY3B,GAAsB,kBAClC4B,OAAQlF,EACR/B,SA1QwB,SAClCkH,EACAC,EACA8B,GAEIA,GAAelE,GAAe,kBAClCtB,GACE,iBACA,CAAEzE,MAAOmI,EAAUpH,WAAY+E,SAAS,IACxC,GAEF,YAA8B,GAAK9C,GAAiC,IAgQ1DkH,gBAAiB1K,EAAE,4BACnBwJ,UAAU,uBAET9E,EAA2BM,KAAI,SAACwC,EAAQoB,GACvC,IAAM4B,EAAYhM,SAASmM,eACzB,yBAEF,OACE,kBAAC,EAAA9B,aAAY,CACXC,WACEtB,EAAOhD,UACNH,GACC0D,GAAuB,iBAAkBP,EAAOhH,OAEpD0E,IAAK0D,EACLpI,MAAOgH,EAAOhH,OAEb6D,GACC,kBAAC,EAAAiG,QAAO,CACNvL,UAAWsF,EACXkG,QAAStC,KACTuC,UAAWA,QAAaI,IAG3BpD,EAAOlH,YAOpB,kBAAC,EAAAyI,cAAa,CACZC,MAAsC,QAA/B,EAAAnC,GAAsB,iBAAS,eAAE7B,KAAI,SAAC+B,GAAQ,OAAA/G,EAAE+G,MACvDkC,WAAY,SAACC,EAAWhC,GACtB,OAAAF,GAAa,SAAUE,EAAMtC,IAE/BuE,gBAAiB,WAAM,OAAAzB,GAAkB,WACzC0B,aAAcpJ,EAAE,UAChBqJ,gBAAoC,WAAnBzG,GAEG,WAAnBA,GACC,kBAAC,EAAAyF,OAAM,CACLqB,GAAG,gBACHtB,QAAS,EAAAE,cAAA,SAAsB,aACpB,gBACXC,SAhaiB,WAC3B7E,GAA2BD,IAgajB+E,WAAY3B,GAAsB,UAClC4B,OAAQhF,EACRjC,SA7SiB,SAC3BkH,EACAC,EACA8B,GAEIA,GAAelE,GAAe,UAClCtB,GACE,SACA,CAAEzE,MAAOmI,EAAUpH,WAAY+E,SAAS,IACxC,GAEF1B,EAAoBiB,OAAS,GAAKnC,GAA0B,IAmSlDgH,gBAAiB1K,EAAE,oBACnBwJ,UAAU,uBAET5E,EAAoBI,KAAI,SAACwC,EAAQoB,GAChC,IAAM4B,EAAYhM,SAASmM,eAAe,iBAC1C,OACE,kBAAC,EAAA9B,aAAY,CACXC,WACEtB,EAAOhD,UACNH,GACC0D,GAAuB,SAAUP,EAAOhH,OAE5C0E,IAAK0D,EACLpI,MAAOgH,EAAOhH,OAEb6D,GACC,kBAAC,EAAAiG,QAAO,CACNvL,UAAWsF,EACXkG,QAAStC,KACTuC,UAAWA,QAAaI,IAG3BpD,EAAOlH,YAOpB,kBAAC,EAAAyI,cAAa,CACZC,MAAOnC,GAAsB,SAC7BoC,WAAY,SAACC,EAAWhC,GAAS,OAAAF,GAAa,QAASE,IACvDiC,gBAAiB,WAAM,OAAAzB,GAAkB,UACzC0B,aAAcpJ,EAAE,SAChBqJ,gBAAmD,WAAlCzG,MAAAA,OAAc,EAAdA,EAAgB0G,gBAEC,UAAjC1G,EAAe0G,eACd,kBAAC,EAAAC,WAAU,CAACC,UAAU,6CACpB,kBAAC,EAAAC,UAAS,CACRhJ,KAAK,QACLiJ,GAAG,eACHC,KAAK,SAAQ,aACF,sBACXG,YAAa9J,EAAE,mBACf4J,WACGzF,GAAgBE,EACb,EAAAwF,iBAAA,MACA,EAAAA,iBAAA,QAENE,SAxca,SAACC,GAC1BhG,EAAmBgG,IAClB7F,GAAgBC,GAAgB,IAucrB6F,WAAYxD,GACZjG,MAAOuD,EACPmG,IAAK9G,IAEP,kBAAC,EAAA+G,OAAM,CACLrB,YAAa3E,GAAgBE,EAC7B+D,QAAS,EAAAgC,cAAA,QACTC,QAAS,WAAM,OAAAjE,GAAS,UAAQ,aACrB,iBAEX,kBAAC,KAAU,SAEVjC,GAAgBE,IACjB,kBAAC,EAAAiG,QAAO,CACNvL,UAAWsF,IAAgBF,EAC3BoG,QAAStC,GAAe,SACxBuC,UAAWpH,MAMrB,kBAAC,EAAA2F,cAAa,CACZC,MAAsC,QAA/B,EAAAnC,GAAsB,iBAAS,eAAE7B,KAAI,SAAC+B,GAAQ,OAAA/G,EAAE+G,MACvDkC,WAAY,SAACC,EAAWhC,GACtB,OAAAF,GAAa,SAAUE,EAAMpC,KAE/BqE,gBAAiB,WAAM,OAAAzB,GAAkB,WACzC0B,aAAcpJ,EAAE,UAChBqJ,gBAAoC,WAAnBzG,GAEG,WAAnBA,GACC,kBAAC,EAAAyF,OAAM,CACLqB,GAAG,gBACHtB,QAAS,EAAAE,cAAA,SAAsB,aACpB,gBACXC,SAtfiB,WAC3B3E,GAA2BD,IAsfjB6E,WAAY3B,GAAsB,UAClC4B,OAAQ9E,EACRnC,SAzXiB,SAC3BkH,EACAC,EACA8B,GAEIA,GAAelE,GAAe,UAClCtB,GACE,SACA,CAAEzE,MAAOmI,EAAUpH,WAAY+E,SAAS,IACxC,IAiXQoE,gBAAiB1K,EAAE,oBACnBwJ,UAAU,uBAET1E,GAAoBE,KAAI,SAACwC,EAAQoB,GAChC,IAAM4B,EAAYhM,SAASmM,eAAe,iBAC1C,OACE,kBAAC,EAAA9B,aAAY,CACXC,WACEtB,EAAOhD,UACNH,GACC0D,GAAuB,SAAUP,EAAOhH,OAE5C0E,IAAK0D,EACLpI,MAAOgH,EAAOhH,OAEb6D,GACC,kBAAC,EAAAiG,QAAO,CACNvL,UAAWsF,EACXkG,QAAStC,KACTuC,UAAWA,QAAaI,IAG3BpD,EAAOlH,cAWpBuK,GAAmC,CACvC,CACEC,KACE,kBAAC,EAAAX,OAAM,CACL/B,QAAQ,UACRiC,QAASnH,EAAyB,cACrB,kCAEZlD,EAAE,4BAgCX,OA1BI6C,GAASA,EAAQ,GAAKgI,GAAahF,OAAS,GAC9CgF,GAAa7E,KAAK,CAChB8E,KACE,kBAAC,KAAa,CACZC,SAAS,8BACTC,UAAWnI,EACXC,KAAMA,EACNC,QAASA,EACTkI,WAAW,EACXC,OAAQ,CACNC,gBAAiBnL,EAAE,sBACnBoL,cAAepL,EAAE,mBACjBqL,YAAarL,EAAE,iBACfsL,eAAgBtL,EAAE,oBAClBuL,WAAYvL,EAAE,gBACdwL,WAAYxL,EAAE,gBACdyL,cAAezL,EAAE,kBACjB0L,SAAU1L,EAAE,gBAIlBoI,QAAS,aACTuD,UAAW,CAAEC,QAAS,gBAKxB,kBAAC,KAAU,CACTC,aAAc,CACZnC,GAAI,mBACJoC,gBAzjBU,WACd7I,EAAiB,IACjBqB,GAAe,IAwjBXyH,gCAAiC,KACjCC,MAAO,CAAEC,GAAI,YAEfC,iBAAkB,CAAEC,WAAY,kBAAC,KAAU,MAAKC,WAAY,MAC5DlE,iBAAkBA,GAClB2C,aAAcA,M,4CCprBdwB,EAA2D,SAAC,G,IAOxDC,EANRnL,EAAM,SACNoL,EAAY,eAEJvM,GAAM,IAAAC,kBAAgB,EA0CxBuM,EA7BgB,WACpB,OAAQrL,MAAAA,OAAM,EAANA,EAAQmI,eACd,KAAK,cACH,OACE,kBAAC,KAAe,CAACE,UAAU,0CAE/B,KAAK,cACH,OACE,kBAAC,KAAqB,CAACA,UAAU,uCAErC,KAAK,cACH,OAAO,kBAAC,KAAW,MACrB,KAAK,cACL,KAAK,cACH,OACE,kBAAC,EAAAiD,QAAO,CACNC,KAAK,KAAI,aACGH,EAAY,iBACT,yBAGrB,KAAK,cACL,KAAK,cACH,OACF,QACE,OAAO,kBAAC,KAAW,OAINI,GAEnB,OACE,kBAAC,EAAAC,KAAI,KACFJ,GACC,kBAAC,EAAAK,SAAQ,CAACC,OAAQ,CAAElB,QAAS,aAAeY,GAE9C,kBAAC,EAAAK,SAAQ,KA3CmB,KAHxBP,EAAiB,aACrB,SAACS,GAAO,OAAAA,EAAGvM,SAAUW,MAAAA,OAAM,EAANA,EAAQmI,mBAEZzD,OACV7F,EAAEsM,EAAe,GAAG9L,OAEpBR,EAAE,uB,WC4CTgN,EAA+D,SAAC,G,IACpEC,EAAkB,qBAClBC,EAAc,iBACdC,EAAgB,mBAChBC,EAAO,UACPtK,EAAI,OACJC,EAAO,UACPF,EAAK,QACLwK,EAAe,kBACfC,EAAQ,WACRC,EAAa,gBACbvK,EAAa,gBACbC,EAAgB,mBAChBN,EAAiB,oBACjBC,EAAc,iBACd4K,EAAO,UACPC,EAAU,aACVC,EAAY,eACZC,EAAY,eACZC,EAAmB,sBACnBC,EAAiB,oBACjBC,EAAQ,WACR5K,EAAyB,4BAEnB6K,GAAO,IAAAC,WAEQC,KADL,IAAAC,cAAe,IAAE,KACQ,IAAE,YACnClO,GAAM,IAAAC,kBAAgB,EACxBkO,EAAe,IAAIC,gBAAgBC,SAASC,QAC5CC,GAAU,IAAAC,cACRC,IAAa,IAAAC,aAAc,IAAE,SAE/B,GAA2B,IAAAC,YAAzBC,EAAS,YAAEC,EAAS,YACtB,GAA0C,IAAA/P,UAE9C,IAFKgQ,EAAgB,KAAEC,EAAmB,KAGtC,GAA4B,IAAAjQ,YAA3BkQ,EAAS,KAAEC,EAAY,KACxB,GAAoC,IAAAnQ,UAAmB,IAAtDoQ,EAAa,KAAEC,EAAgB,KAChC,IAAoB,IAAArQ,UAA8B,IAAjDsQ,GAAK,MAAEC,GAAQ,MAChB,IAA8B,IAAAvQ,YAA7BwQ,GAAU,MAAEC,GAAa,MAE1BC,GAAe,CACnB,CAAEjP,MAAOP,EAAE,QAASyP,WAAY,CAAC,EAAAC,WACjC,CAAEnP,MAAOP,EAAE,kBAAmByP,WAAY,CAAC,EAAAC,WAC3C,CAAEnP,MAAOP,EAAE,UAAWyP,WAAY,CAAC,EAAAC,WACnC,CAAEnP,MAAOP,EAAE,SAAUyP,WAAY,CAAC,EAAAC,WAClC,CAAEnP,MAAOP,EAAE,UAAWyP,WAAY,CAAC,EAAAC,WACnC,CAAEnP,MAAOP,EAAE,gBAAiByP,WAAY,CAAC,EAAAC,aAG3C,IAAAxQ,YAAU,W,MACS,QAAjB,EAAA6O,EAAKuB,oBAAY,SAAEK,MAAK,SAACL,GAAe,OAAAC,GAAcD,QACrD,CAACvB,IAEJ,IASM6B,IAAiB,IAAAC,cACrB,SAACpP,EAAcD,GACb2N,EAAa2B,IAAIrP,EAAMD,EAAMe,cAE/B,CAAC4M,KAGH,IAAAjP,YAAU,WACHwO,GACHuB,EAAa,MAEd,CAACvB,IAEJ,IAAMqC,GAA+B,WACnC,GAAIlC,EAAmB,CAErB,IAOMmC,EAPqCnC,EAAkB1I,QAC3D,SAAC8K,GACC,OAAAA,EAAE9O,SAAW,kBACb8O,EAAE9O,SAAW,gBAKdgE,QAAO,SAAC8K,GAAM,OAAAf,EAAczJ,WAAU,SAACyK,GAAO,OAAAA,IAAOD,EAAExP,QAAQ,KAC/DuE,KAAI,SAACiL,GAAM,OAAAA,EAAExP,MAAQ,MAElB0P,GAAgB,0CACjBjB,GAAa,GACbc,GAAgB,GAGrBb,EAAiBgB,GAGjBA,EAAiBvI,SAAQ,SAACqI,IACLpC,MAAAA,OAAiB,EAAjBA,EAAmBpI,WACpC,SAACqF,GAAS,OAAAA,EAAKrK,OAASwP,MAET,KAhDQ,SAACxP,GAC9B,IAAMmI,EAAQsG,EAAczJ,WAAU,SAACwK,GAAM,OAAAA,IAAMxP,KACnD,GAAImI,GAAS,EAAG,CACd,IAAMwH,EAAO9K,OAAOC,OAAO,GAAI2J,GAC/BkB,EAAKrK,OAAO6C,EAAO,GACnBuG,EAAiBiB,IA4CbC,CAAuBJ,GACvBxB,GACEA,EAAS,CACPlO,MAAOP,EAAE,6BAA8B,CAAES,KAAMwP,IAC/C7H,QAAS,EAAAkI,aAAA,iBAuErB,IAAApR,YAAU,WACJ4D,EAAO,GACyB,IAA9BmK,EAAmBpH,SACrB+J,GAAe,QAAS9M,EAAO,GAAGvB,YAClCqO,GAAe,UAAW7M,EAAQxB,YAClCgN,EAAQvI,KAAK,CACXsI,OAAQH,EAAa5M,cAK3BwO,KA3EmC,WACnC,IAAMQ,EAAiCC,KAAKC,MAAMD,KAAKE,UAAUtB,KACjE,GAAIA,IAASA,GAAMvJ,OAAS,EAAG,CAC7B,IAAM,EAAyBP,OAAOC,OACpC,GACA0H,GACA9H,QACA,SAAC2F,GACC,OAAAA,EAAK3J,SAAW,YAChB2J,EAAK3J,SAAW,eAEpBoP,EAAe3I,SAAQ,SAACkD,G,QAChB6F,EAA4B,EAAuBxL,QACvD,SAACyL,GAAyB,OAAA9F,EAAKpB,KAAOkH,EAAOlH,MAE3CiH,GAAaA,EAAU9K,OAAS,IAC9B8K,EAAU,GAAGxP,SAAW,WAC1BsN,GACEA,EAAS,CACPlO,MAAOP,EAAE,8BACToI,QAAS,EAAAkI,aAAA,QACTO,YACE,0BACEC,wBAAyB,CACvBC,OAAQ/Q,EAAE,wBAAyB,CACjCS,KAAkB,QAAZ,EAAAkQ,EAAU,UAAE,eAAElQ,UAK5BuQ,WAAY,6BAEPL,EAAU,GAAGxP,SAAW,aACjCsN,GACEA,EAAS,CACPlO,MAAOP,EAAE,qBACToI,QAAS,EAAAkI,aAAA,OACTO,YACE,0BACEC,wBAAyB,CACvBC,OAAQ/Q,EAAE,uBAAwB,CAChCS,KAAkB,QAAZ,EAAAkQ,EAAU,UAAE,eAAElQ,UAK5BuQ,WAAY,gCAMxB,IAAMC,EAAmB3L,OAAOC,OAC9B,GACA0H,MAAAA,OAAkB,EAAlBA,EAAoB9H,QAClB,SAAC2F,GACC,OAAAA,EAAK3J,SAAW,mBAChB2J,EAAK3J,SAAW,kBAGtBkO,GAAS4B,GAiBTC,KACC,CAACpO,EAAMC,EAASkK,EAAoBY,IAEvC,IA4FQsD,GACAC,GA7FFC,GAA8B,SAClC3K,EACA4K,EACAC,G,UAEuB,kBAAnBA,GACFrE,EAAeoE,GAEfrC,EAAaqC,MAAAA,OAAY,EAAZA,EAAc7Q,OACC,qBAAnB8Q,GACTpE,EAAiBmE,GACjBrC,EAAaqC,MAAAA,OAAY,EAAZA,EAAc7Q,OACC,oBAAnB8Q,GACTC,GAAuBF,GAGzB,IAAMG,EACuC,QAA3C,EAA4B,QAA5B,EAAa,QAAb,EAAA/K,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAE8K,qBAAa,eAAEA,qBAAa,eAAEC,gBAC3CF,MAAAA,GACDA,EAA6BG,SAuI5BJ,GAAyB,SAACK,GACtB,IAAA1Q,EAAiB0Q,EAAQ,OAARA,EAAQ,KACjC9C,EAAoB8C,GAChB1Q,IAAW,YACb2Q,GAAiBD,GAEjBjD,EAAU,EAAAmD,UAAA,kBAA6B,CACrCzE,SAAU,WAAM,OAAAwE,GAAiBD,IACjCG,MAAOH,KAKPC,GAAmB,SAAOD,GAAsB,uD,iFAMpD,QAAmBjH,KALbqH,GAAanD,MAAAA,OAAgB,EAAhBA,EAAkBpF,MAAMmI,MAAAA,OAAQ,EAARA,EAAUnI,KAMnD,MAAM,IAAIwI,MAAM,gCAEE,SAAMnE,MAAAA,OAAI,EAAJA,EAAMoE,IAAIC,Y,OAA9BC,EAAc,SACdC,EAAc,IAAI,EAAAC,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXpE,SAAQ,KAGZX,IACAuB,I,iBAGE,O,sBAAA,GAAMyD,EAAYG,gBAAgBR,GAAY,GAAMtC,MAAK,WACvDV,OAAarE,GACbgD,GAAoB,GACpBR,IACA2B,OAAoBnE,O,cAJtB,S,+BAOI8H,OAAM,GACN,QAAkB,KACpBA,EAAuB,QAAd,IAAMC,gBAAQ,eAAEC,KAAKF,QAOhCjE,GACEA,EAAS,CACPlO,MAAOP,EAAE,+BACToI,QAAS,EAAAkI,aAAA,OACTO,YAAa6B,I,+BAwBfG,GAA2B,SAACC,GAChC,OAAQA,EAAUxJ,eAChB,IAAK,OACH,OAAO,EACT,IAAK,iBACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,aACH,OAAO,EACT,QACE,SAmBAyJ,GAAY,WAChB,IAAMC,GAAiBxF,MAAAA,OAAO,EAAPA,EAASyF,MAAM,OAAQ,GAC9C,GAAID,EAAKnN,OAAS,EAChB,MAAO,CACL+C,MAAOiK,GAAyBG,EAAK,IACrCE,UACEF,EAAK,KAAO,EAAAG,gBAAA,IACR,EAAAA,gBAAA,IACA,EAAAA,gBAAA,OAkBZ,OACE,oCACE,kBAACzQ,EAAc,CACbE,eAAgBA,EAChBD,kBAAmBA,EACnBE,MAAOA,EACPC,KAAMA,EACNC,QAASA,EACTC,cAAeA,EACfC,iBAAkBA,EAClB6K,SAAUA,EACVV,QAASA,EACTlK,0BAA2BA,IAE7B,kBAAC,KAAQ,CACPkQ,WAAY,CACVC,MAAO7D,GACP8D,MAxNAnC,GAAgD,GAChDC,IAAuB,QAC3BtO,EACAC,EACAwK,GAEGF,GAOLJ,EAAmBrF,SAAQ,SAAC2L,GAExB,IAAA9S,EAOE8S,EAAG,KANLC,EAMED,EAAG,eALL1O,EAKE0O,EAAG,OAJLE,EAIEF,EAAG,WAHLpS,EAGEoS,EAAG,OAFLG,EAEEH,EAAG,MADLI,EACEJ,EAAG,cACDK,EAA2B5T,EAAEwT,GAC7BK,EAAoB7T,EAAE6E,GAC5BsM,GAASnL,KAAK,CACZqN,MAAO,CACL,CACE9S,MACEY,IAAW,kBACXA,IAAW,WAAuB,EAGhC,kBAAC,EAAA2S,KAAI,CAACC,GAAI,WAAUR,MAAAA,OAAG,EAAHA,EAAK7J,KAAOjJ,IAGtCmT,EACAC,EACAH,EACA,CACEnT,MAAO,kBAAC8L,EAAY,CAAClL,OAAQA,EAAQoL,aAAc9L,KAErD,CACEF,MACE,qCACG,QAAiBkT,EAAYzT,EAAE,QAChC,6BACC2T,KAA8B,OAAZ,WAAY,IAAZ,UAAY,EAAZ,YAAsB,uBAKjDrC,aAAciC,OAGXpC,KAhDE,QAAmB,CACxBC,aAAY,GACZ4C,SAAU,kBAAC,EAAAC,SAAQ,MACnBpO,OAAQ2J,GAAa3J,UA+MnB,aAAc7F,EAAE,yBAChBkU,eAhKe,SAACC,GACtB,OAhIwB,SAACA,G,UACzB,IAAK9G,EACH,MAAO,GAET,IAAMiE,EAA6B6C,EAAQ7C,aAC3C,GACEA,EAAanQ,SAAW,kBACxBmQ,EAAanQ,SAAW,aAExB,MAAO,GAET,IAEIiT,EAFEC,EACJ/C,EAAaoC,QAAU/F,GAAgB2B,GAqDzC,OAnDK+E,IACHD,EAAkB,CAChBE,SAAS,EACTxL,YAAY,EACZyL,MAAO,CACLC,cAAe,OACfC,OAAQ,aAI6B,E,iCAEvClU,MAAOP,EAAE,gBACT0J,GAAI,iBAAe,EAClB,eAAgB,6BACjB,EAAAW,QAAS,SAAC3D,GACR,OAAA2N,GACAhD,GAA4B3K,EAAO4K,EAAc,kBAAgB,GAChE8C,GAAe,CAClBM,aAAc,CACZC,SAAU,OACVpK,QAASvK,EAAE,mC,iCAIbO,MAAOP,EAAE,+BACT0J,GAAI,oBAAkB,EACrB,eAAgB,gCACjB,EAAAW,QAAS,SAAC3D,GACR,OAAA2N,GACAhD,GAA4B3K,EAAO4K,EAAc,qBAAmB,GACnE8C,GAAe,CAClBM,aAAc,CACZC,SAAU,OACVpK,QAASvK,EAAE,sC,iCAIbO,MAAOP,EAAE,mBACT0J,GAAI,mBAAiB,EACpB,eAAgB,4BACjB,EAAAW,QAAS,SAAC3D,GACR,OAAA2N,GACAhD,GAA4B3K,EAAO4K,EAAc,oBAAkB,GAClE8C,GAAe,CAClBM,aAAc,CACZC,SAAU,OACVpK,QAASvK,EAAE,qCAmEV4U,CAAkBT,IAgKnBU,OA7DO,SACbnM,EACAE,EACAsK,EACA4B,G,MAEIC,EAAc7B,GACH,QAAX,EAAAH,YAAW,eAAEnK,SAAUA,GAAgC,iBAAvBkM,EAAUE,WAG5CD,EAAc,QAEhBtH,EAlD+B,SAAC7E,GAChC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,iBACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,aACT,QACE,MAAO,IAmCGqM,CAAyBrM,GAAM,IAAImM,IAkD3CG,OAAQnC,KACRoC,4BAA4B,GAE9BnG,UAAWA,EACXoG,WArCa,SAAC1O,EAAY2O,EAAkB9B,G,QACxCjC,EAAiBiC,EAAG,aACtB+B,EAAgC,QAAb,EAAA5O,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAE+C,KAClC4L,EAAuB,QAAb,EAAA7O,MAAAA,OAAK,EAALA,EAAOE,cAAM,eAAE2O,QAGN,WAArBD,GAA4D,OAA3BC,MAAAA,OAAO,EAAPA,EAASjM,iBAC5C4D,EAAeoE,GACfrC,EAAaqC,MAAAA,OAAY,EAAZA,EAAc7Q,QA8BzB+U,cAAc,mBACd7H,aAAcA,IAEfV,EAAmBpH,OAAS,GAAKwH,GAChC,kBAAC,KAAa,CACZoI,gBAAiB,CACfrN,QAAS,eAEXsN,WAAY,CACVnV,MAAOP,EAAE,qBAEX2V,oBAAqB,CACnBC,KAAM5V,EAAE,wCAIb6C,EAAQ,GACP,kBAAC,KAAa,CACZkI,SAAS,iCACTC,UAAWnI,EACXuF,QAAS,EAAAyN,kBAAA,OACT/S,KAAMA,EACNC,QAASA,EACTmI,OAAQ,CACNC,gBAAiBnL,EAAE,mBACnBoL,cAAepL,EAAE,mBACjBqL,YAAarL,EAAE,iBACfsL,eAAgBtL,EAAE,oBAClBuL,WAAYvL,EAAE,gBACdwL,WAAYxL,EAAE,gBACdyL,cAAezL,EAAE,kBACjB0L,SAAU1L,EAAE,kB,2CC1hBlB8V,EAAmE,SAAC,G,IACxEC,EAAiB,oBACjBjW,EAAgB,mBAEhB,WAAa,KACL,IAAAkW,IAA0B,UAAkB,IAAE,sBAEhDjI,GAAO,IAAAC,WAEQC,KADL,IAAAC,cAAe,IAAE,KACQ,IAAE,YACnCnP,GAAc,EAAAF,EAAA,MAAmB,UACnCwP,GAAW,IAAA4H,eACX9H,EAAe,IAAIC,gBAAgBC,EAASC,QAC5C,GAA6B,WAAmB,GAA9C,IAAAxL,KAAAA,OAAI,IAAG,IAAC,EAAE,IAAAC,QAAAA,OAAO,IAAG,KAAE,EACxBmT,EAAa/H,EAAagI,IAAI,gBAC5BnW,GAAM,IAAAC,kBAAgB,EACtBwO,IAAa,IAAAC,aAAc,IAAE,SAC7BE,GAAc,IAAAD,YAAuC,UACvDyH,EAAeC,OAAOD,aACtBE,EACJ,eAAiB,EAAAC,mBAGb,GAA8C,IAAAzX,YAA7CmO,EAAkB,KAAEuJ,EAAqB,KAG1C,GACJ,IAAA1X,UAA2B,IADtB2X,EAAkB,KAAEC,EAAqB,KAE1C,GAAwC,IAAA5X,WAAS,GAAhDuO,EAAe,KAAEsJ,EAAkB,KACpC,GAAwB,IAAA7X,UAAiB,mBAAxC0O,EAAO,KAAEC,EAAU,KACpB,GACJ,IAAA3O,YADKgQ,EAAgB,KAAEC,GAAmB,KAGtC,IAAoC,IAAAjQ,UAAiB,GAApDyO,GAAa,MAAEqJ,GAAgB,MAChC,IAA0D,IAAA9X,eAE9D8L,GAFKiM,GAAwB,MAAEC,GAA2B,MAGtD,IAAsC,IAAAhY,UAAS,QAA9C8D,GAAc,MAAED,GAAiB,MAClC,IAAoC,IAAA7D,UAAuB,IAA1DkE,GAAa,MAAEC,GAAgB,MAChC,IAA8C,IAAAnE,WAAkB,GAA/DiY,GAAkB,MAAEC,GAAqB,MAC1C,IAA4C,IAAAlY,WAAkB,GAA7DmY,GAAiB,MAAEC,GAAoB,MACxC,IAA0C,IAAApY,WAAkB,GAA3DqY,GAAgB,MAAEvJ,GAAmB,MACtC,IAAkC,IAAA9O,eACtC8L,GADK+C,GAAY,MAAEyJ,GAAe,MAG9B,IAA4C,IAAAtY,YAA3CuY,GAAiB,MAAEC,GAAoB,MAIxC,GAAgCxI,GAAoB,GAAlD9N,GAAS,aAAEvB,GAAc,kBACP4X,MAAAA,IAAAA,GAAmBE,MAC3C,SAACtH,GAAM,OAAAA,MAAAA,OAAC,EAADA,EAAG0D,kBAA8B,OAAZ,WAAY,IAAZ,UAAY,EAAZ,eAgB9B,IAAAzU,YAAU,WACR,IAAI,WACEkX,EAAc,CAChB,IAAMoB,EAAQC,SAASrB,EAAasB,QAAQ,iBAAmB,KACzDC,EAAWH,EAAQ,EACrBA,EAAQ,IACVpB,EAAawB,QAAQ,eAAgB,GAAGD,GACxCT,IAAqB,OAI1B,IAEH,IAAMW,GAAoB,WACxBX,IAAsBD,MAGxB,IAAA/X,YAAU,YACU,gD,8EAEd,EAAA8W,GAA0B,GAAMA,KAAhC,M,OAAyB,EAAC,S,wBADZ,GAGd8B,K,aAIH,CAAC9B,IAEJ,IAAM8B,GAAoB,WACxBlJ,EAAU,EAAAmD,UAAA,kBAA6B,CACrCjE,SAAU,WACRA,KACAiK,SAKA7U,GAA4B,kE,8EAE5B6S,EAGK,GAAMA,GAAkB,IAH7B,M,OAGFiC,EAAO,S,wBAGLA,IACFC,KACAH,M,YAQE5K,GAAiB,SAAC2E,GACtB9C,GAAoB,CAClBtP,eAAgBoS,EAChB7Q,UAAW,gBAITmM,GAAmB,SAAC0E,GACxB9C,GAAoB,CAClBtP,eAAgBoS,EAChB7Q,UAAW,mBAkCTkX,GAAoB,SAACC,G,UACrBzF,EACA0F,GACA,QAAkBD,KACpBzF,EAAuB,QAAd,EAAAyF,EAAMxF,gBAAQ,eAAEC,KAAKF,OAC9B0F,EAAgC,QAApB,EAAc,QAAd,EAAAD,EAAMxF,gBAAQ,eAAEC,YAAI,eAAEyF,MAGhCD,IAAc,uBAChBpB,IAAsB,GAEtBvI,GACEA,EAAS,CACPrG,QAAS,EAAAkI,aAAA,OACT/P,MAAOP,EAAE,+BACT6Q,YAAa6B,KAMf4F,GAAc,kE,2EAEE,OApDdC,EAAoB,GAC1BvV,GAAc4E,SAAQ,SAACzC,GACb,IAAAQ,EAA2BR,EAAM,UAAtBS,EAAgBT,EAAM,YACzC,GAAIS,GAAeA,EAAYC,OAAS,EAAG,CACzC,IAAI2S,EAAc,IAClBA,GAAe5S,EACZZ,KAAI,SAAC+B,GACJ,IAAMvG,EAAQuG,EAAIvG,MAAM2F,OACxB,OAAI3F,IAAU,kBACFmF,EAAS,MAAM,eAAwB,OAAOA,EAAS,MAAM,kBAErEnF,IAAU,iBACFmF,EAAS,MAAM,iBAA0B,OAAOA,EAAS,MAAM,aAE1D,KAAVnF,EACAmF,EAAS,MACM,IAAhBoB,EAAIT,QAAmB,KAAK9F,EAAU,SAASA,EAAK,KAEtD,MAELiY,KAAK,QACRD,GAAe,IAEfD,EAAQvS,KAAKwS,OA4BXA,EAzBCD,EAAQE,KAAK,SA0BA,GAAM1K,MAAAA,OAAI,EAAJA,EAAMoE,IAAIC,Y,YAA9BC,EAAc,YAEDtT,EAAf,Y,iBASA,O,sBAAA,GAPoB,IAAI,EAAAwT,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXpE,SAAQ,KAKTyK,UACC5V,MAAAA,OAAI,EAAJA,EAAMvB,WACNwB,MAAAA,OAAO,EAAPA,EAASxB,WACTiM,EACAgL,GAED7I,MAAK,SAACgJ,GACL,IAAMC,EAAiBD,EAAI/F,KACrBiG,GAAaD,MAAAA,OAAc,EAAdA,EAAgBxJ,QAAS,GAC5CsH,EAAsBkC,GACtBpC,EAAsBqC,QAGUjO,KAA9B6L,MAAAA,OAAkB,EAAlBA,EAAoB5T,QACpB4T,EAAmB5T,MAAQ0K,IAE3BqJ,GAAiBH,EAAmB5T,OAIpCsU,IACAnU,GAAc6C,OAAS,GACD,IAAtBgT,MAAAA,OAAU,EAAVA,EAAYhT,UAEZiR,IAA4B,GAC5BlJ,IAAoB,IAGtB+I,GAAmB,O,cA7BvB,S,+BAgCAuB,GAAkB,G,uBAhGD,IACfK,UA6HR,IAAArZ,YAAU,aACH+N,IAAsBA,MAAAA,OAAkB,EAAlBA,EAAoBpH,SAAU,KA1BlC,gD,yEACH,SAAMkI,MAAAA,OAAI,EAAJA,EAAMoE,IAAIC,Y,YAA9BC,EAAc,YACDtT,EAAf,Y,iBASA,O,sBAAA,GAPoB,IAAI,EAAAwT,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXpE,SAAQ,KAIMyK,UAAU,IAAK,KAAK/I,MAAK,SAACgJ,G,QACpCG,EAAmC,QAAhB,EAAS,QAAT,EAAAH,MAAAA,OAAG,EAAHA,EAAK/F,YAAI,eAAExD,aAAK,eAAEvJ,OAEzCiR,IADGgC,GAAoBA,EAAmB,O,cAF9C,S,+BASAZ,GAAkB,G,gCASrB,CAACjL,IAEJ,IAAMgL,GAAyB,kE,2EACT,SAAMlK,MAAAA,OAAI,EAAJA,EAAMoE,IAAIC,Y,UAA9BC,EAAc,SACdlN,EAAS,WAAWwI,IACtB0E,IAAetT,EAAf,Y,iBAQA,O,sBAAA,GANoB,IAAI,EAAAwT,WACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXpE,SAAQ,KAGMyK,UAAU,GAAI,GAAI,GAAIvT,GAAQwK,MAAK,SAACgJ,GACpD,IAAMC,EAAiBD,EAAI/F,KAC3B0E,GAAqBsB,EAAexJ,W,cAFtC,S,+BAKA8I,GAAkB,G,gCAKxB,IAAAhZ,YAAU,WACRyO,IAAgBsK,OACf,CAACtK,KAEJzL,GAAW,WAAM,OAAA+V,OAA0B,OAE3C,IAAA/Y,YAAU,WACRyX,GAAmB,GACnB2B,OACC,CAACvK,EAAMjL,EAAMC,EAASC,GAAewK,KAExC,IAAAtO,YAAU,WACRoZ,OACC,KAEH,IAAApZ,YAAU,YA1P0B,WAClC,GAAI+N,IAAsBA,MAAAA,OAAkB,EAAlBA,EAAoBpH,QAAS,EAAG,CACxD,IAAMkT,EAAoB9L,MAAAA,OAAkB,EAAlBA,EAAoB9H,QAC5C,SAAC6M,GAAK,MAAK,OAAAA,MAAAA,OAAK,EAALA,EAAOtI,OAAuC,QAAhC,EAAAoF,MAAAA,OAAgB,EAAhBA,EAAkBrP,sBAAc,eAAEiK,OAC3D,GACIsP,GAAQ,gCACTlK,GAAgB,CACnBrP,eAAgBsZ,IAElBA,GAAqBhK,GAAoBiK,IAkP3CC,KACC,CAAChM,KAEJ,IAAA/N,YAAU,W,MACU,QAAlB,EAAA6O,EAAKmL,qBAAa,SAAEvJ,MAAK,SAACwJ,GAAa,OAAA/B,GAAgB+B,QACtD,CAACpL,IAEJ7L,GAAW,WAAM,OAAAoW,OAAe,MAEhC,IAAMP,GAAgB,WAEhB9K,GAAqD,KAA/BA,MAAAA,OAAkB,EAAlBA,EAAoBpH,QAC5C8Q,GAAmB,GAEnBA,GAAmB,GAErB2B,MAIIxK,GAAW,WACf8I,GAAiBH,EAAmB5T,MAAQ,IAIxCyK,GAAW,WACfqJ,GAAmB,GACnBC,GAAiBH,EAAmB5T,MAAQ,IAG9C,GAAIkU,GACF,OACE,kBAAC,EAAAqC,YAAW,CACVhR,QAAS,EAAAiR,oBAAA,QACTC,QAAS,CAAE1N,QAAS,aACpB2N,UAAQ,GAER,kBAAC,KAAa,CACZ7D,WAAY,CACVnV,MAAOP,EAAE,6BACTU,aAAc,MAEhB8Y,oBAAqB,CACnBC,KAAM,MAER9D,oBAAqB,CACnBC,KAAM5V,EACJ,0EAmGZ,OACE,oCACE,kBAACV,EAAA,EAAc,CACbI,WAAgC,MAApBoP,EACZvP,WAAYyB,GACZrB,eAA8BiL,IAAnBnL,GACXA,eAAgBA,GAChBD,QApVgB,WACpBuP,GAAoB,OAmVM,mBACL,uBACjBjP,iBAAkBA,EAClBC,mCAAoC8W,IAEpC,0BAAMrN,UAAU,mBACd,kBAAC,EAAA4P,YAAW,CAAChR,QAAS,EAAAiR,oBAAA,OACpB,kBAAC,EAAAK,MAAK,KACJ,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAU,MAAM9Z,EAAE,6BA3GX4K,IAAvBqC,EAEA,kBAAC,EAAAmM,YAAW,CACVhR,QAAS,EAAAiR,oBAAA,MACTC,QAAS,CAAE1N,QAAS,cAEpB,kBAAC,KAAU,OAGNiL,GAEP,kBAAC,EAAAuC,YAAW,CAACE,QAAS,CAAE1N,QAAS,aAAe2N,UAAQ,GACtD,kBAAC,KAAa,CACZ9D,gBAAiB,CACfrN,QAAS,cAEXuN,oBAAqB,CACnBC,KACE,oCACE,kBAAC,EAAAmE,MAAK,CACJC,QAAQ,yCACRC,WAAY,CACV,kBAAC,EAAA9P,OAAM,CACL/B,QAAS,EAAAgC,cAAA,KACT8P,SAAO,EACPC,UAAQ,EACRjV,IAAI,kBACJmF,QAAS,WACP,OAAAiM,EAAU8D,qBACV9D,EAAU8D,oBAAoB,2BAQ5C1E,WAAY,CAAEnV,MAAOP,EAAE,4BAEvB,kBAAC,EAAAmK,OAAM,eACO,sCACZ/B,QAAS,EAAAgC,cAAA,QACTC,QAAS,WAAM,OAAAnH,OAEdlD,EAAE,2B,KAMFiN,QAAmDrC,IAA7BiM,GAE7B,kBAAC,EAAAuC,YAAW,CACV5P,UAAU,wDACVpB,QAAS,EAAAiR,oBAAA,QACTC,QAAS,CAAE1N,QAAS,cAEpB,kBAAC,EAAAyO,KAAI,KACH,kBAACrN,EAAgB,CACfC,mBAAoBA,EACpBiJ,WAAYA,EACZ/I,iBAAkBA,GAClBD,eAAgBA,GAChBE,QAAS2K,GACT1K,gBAAiBA,EACjBO,oBAAqBA,GACrBN,SAAUA,GACVxK,KAAMA,EACNC,QAASA,EACTF,MAAO4T,MAAAA,OAAkB,EAAlBA,EAAoB5T,MAC3B0K,cAAeA,GACfvK,cAAeA,GACfC,iBAAkBA,GAClBN,kBAAmBA,GACnBC,eAAgBA,GAChB4K,QAASA,EACTC,WAAYA,EACZC,aAAmC,OAArBoB,EACdnB,aAAcA,GACdE,kBAAmBwJ,GACnBvJ,SAAUA,GACV5K,0BAA2BA,OAM9B,uCA4BL,kBAAC,EAAAoX,MAAK,CACJlS,QAAS,EAAAmS,aAAA,MACTha,MAAM,oBACNkI,OAAQwO,GACRzX,QAAS,WAAM,OAAAqY,MACf2C,QAAS,CACP,kBAAC,EAAArQ,OAAM,CACLjF,IAAI,UACJkD,QAAQ,UACRiC,QAAS,WAAM,OAAAwN,OAAmB,QAIrC","sources":["webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerContent.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/OpenshiftStreams.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawerProps, MASDrawer } from '@app/common';\nimport { DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\nimport {\n  InstanceDrawerContent,\n  InstanceDrawerContentProps,\n} from '@app/modules/InstanceDrawer/InstanceDrawerContent';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'\n> &\n  DetailsTabProps &\n  InstanceDrawerContentProps;\n\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  initialTab,\n  onClose,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n  tokenEndPointUrl,\n  notRequiredDrawerContentBackground,\n}) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={\n        <InstanceDrawerContent\n          initialTab={initialTab}\n          instanceDetail={instanceDetail}\n          tokenEndPointUrl={tokenEndPointUrl}\n        />\n      }\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: instanceDetail?.name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import { DetailsTabProps } from '@app/modules/InstanceDrawer/DetailsTab';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/utils';\nimport { MASLoading } from '@app/common';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { ConnectionTabProps } from '@app/modules/InstanceDrawer/ConnectionTab';\n\nexport const ResourcesTab = React.lazy(() => import('./ConnectionTab'));\nexport const DetailsTab = React.lazy(() => import('./DetailsTab'));\n\nexport enum InstanceDrawerTabs {\n  DETAILS = 'details',\n  CONNECTION = 'connection',\n}\n\nexport type InstanceDrawerContentProps = DetailsTabProps &\n  Pick<ConnectionTabProps, 'tokenEndPointUrl'> & {\n    initialTab?: InstanceDrawerTabs;\n  };\n\nexport const InstanceDrawerContent: React.FunctionComponent<InstanceDrawerContentProps> =\n  ({ initialTab, instanceDetail, tokenEndPointUrl }) => {\n    const { t } = useTranslation();\n\n    const [activeTab, setActiveTab] = useState<InstanceDrawerTabs>(\n      initialTab || InstanceDrawerTabs.DETAILS\n    );\n\n    const selectTab = (tab: string | number) => {\n      if (tab === InstanceDrawerTabs.CONNECTION) {\n        setActiveTab(InstanceDrawerTabs.CONNECTION);\n      } else {\n        setActiveTab(InstanceDrawerTabs.DETAILS);\n      }\n    };\n\n    const getExternalServer = () => {\n      const { bootstrap_server_host } = instanceDetail || {};\n      return bootstrap_server_host?.endsWith(':443')\n        ? bootstrap_server_host\n        : `${bootstrap_server_host}:443`;\n    };\n\n    const isKafkaPending =\n      instanceDetail?.status === InstanceStatus.ACCEPTED ||\n      instanceDetail?.status === InstanceStatus.PREPARING;\n\n    return (\n      <React.Suspense fallback={<MASLoading />}>\n        <Tabs\n          activeKey={activeTab.toString()}\n          onSelect={(_, tab) => selectTab(tab)}\n        >\n          <Tab\n            eventKey={InstanceDrawerTabs.DETAILS.toString()}\n            title={<TabTitleText>{t('details')}</TabTitleText>}\n          >\n            <DetailsTab instanceDetail={instanceDetail} />\n          </Tab>\n          <Tab\n            eventKey={InstanceDrawerTabs.CONNECTION.toString()}\n            title={<TabTitleText>{t('connection')}</TabTitleText>}\n            data-testid='drawerStreams-tabConnect'\n          >\n            <ResourcesTab\n              externalServer={getExternalServer()}\n              isKafkaPending={isKafkaPending}\n              tokenEndPointUrl={tokenEndPointUrl}\n            />\n          </Tab>\n        </Tabs>\n      </React.Suspense>\n    );\n  };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  TextInput,\n  ToolbarChip,\n  ToolbarFilter,\n  ToolbarGroup,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport {\n  cloudProviderOptions,\n  cloudRegionOptions,\n  InstanceStatus,\n  MAX_FILTER_LIMIT,\n  statusOptions,\n} from '@app/utils';\nimport './StreamsToolbar.css';\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation();\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n  //states\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] =\n    useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map(\n    (cloudProvider) => {\n      return {\n        label: t(cloudProvider.value),\n        value: cloudProvider.value,\n        disabled: false,\n      };\n    }\n  );\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (\n    key: string,\n    filter: FilterValue,\n    removeIfPresent: boolean\n  ) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex(\n          (f) => f.value === filter.value\n        ); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (\n      filterType === 'name' &&\n      nameInputValue &&\n      nameInputValue.trim() != ''\n    ) {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (\n      filterType === 'owner' &&\n      ownerInputValue &&\n      ownerInputValue.trim() != ''\n    ) {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter(\n          'owner',\n          { value: ownerInputValue, isExact: false },\n          false\n        );\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter(\n      'cloud_provider',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter(\n      'region',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter(\n      'status',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex(\n      (filter) => filter.filterKey === value\n    );\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter(\n      (filter) => filter.filterKey === key\n    );\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return;\n  };\n\n  const onDeleteChip = (\n    category: string,\n    chip: string | ToolbarChip,\n    filterOptions?: Array<any>\n  ) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    const prevFilterValue: FilterValue[] = Object.assign(\n      [],\n      newFilteredValue[filterIndex]?.filterValue\n    );\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find(\n        (option) => option.label === chip.toString()\n      )?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex(\n      (val) => val.value === filterChip\n    );\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status' &&\n        filterValue?.filter(\n          ({ value }) => value === InstanceStatus.PROVISIONING\n        );\n      const deprovisionStatus =\n        filterKey === 'status' &&\n        filterValue?.filter(\n          ({ value }) => value === InstanceStatus.DEPROVISION\n        );\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(\n      ({ filterKey }) => filterKey === key\n    );\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant='filter-group'>\n        <Select\n          variant={SelectVariant.single}\n          aria-label='Select filter'\n          onToggle={onFilterToggle}\n          selections={filterSelected}\n          isOpen={isFilterExpanded}\n          onSelect={onChangeSelect}\n        >\n          {mainFilterOptions.map((option, index) => (\n            <SelectOption\n              isDisabled={option.disabled}\n              key={index}\n              value={option.value}\n            >\n              {option.label}\n            </SelectOption>\n          ))}\n        </Select>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <InputGroup className='mk--filter-instances__toolbar--text-input'>\n              <TextInput\n                name='name'\n                id='filterText'\n                type='search'\n                aria-label='Search filter input'\n                validated={\n                  !isNameValid || isMaxFilter\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                placeholder={t('filter_by_name_lower')}\n                onChange={onNameInputChange}\n                onKeyPress={onInputPress}\n                value={nameInputValue}\n                ref={nameInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                isDisabled={!isNameValid || isMaxFilter}\n                onClick={() => onFilter('name')}\n                aria-label='Search instances'\n              >\n                <SearchIcon />\n              </Button>\n              {(!isNameValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isNameValid}\n                  content={tooltipContent('name')}\n                  reference={nameInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) =>\n            onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)\n          }\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n          showToolbarItem={filterSelected === 'cloud_provider'}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <Select\n              id='cloud-provider-select'\n              variant={SelectVariant.checkbox}\n              aria-label='Select cloud provider'\n              onToggle={onCloudProviderFilterToggle}\n              selections={getSelectionForFilter('cloud_provider')}\n              isOpen={isCloudProviderFilterExpanded}\n              onSelect={onCloudProviderFilterSelect}\n              placeholderText={t('filter_by_cloud_provider')}\n              className='select-custom-width'\n            >\n              {cloudProviderFilterOptions.map((option, index) => {\n                const reference = document.getElementById(\n                  'cloud-provider-select'\n                );\n                return (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled ||\n                      (isMaxFilter &&\n                        isDisabledSelectOption('cloud_provider', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={reference || undefined}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) =>\n            onDeleteChip('region', chip, regionFilterOptions)\n          }\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n          showToolbarItem={filterSelected === 'region'}\n        >\n          {filterSelected === 'region' && (\n            <Select\n              id='region-select'\n              variant={SelectVariant.checkbox}\n              aria-label='Select region'\n              onToggle={onRegionFilterToggle}\n              selections={getSelectionForFilter('region')}\n              isOpen={isRegionFilterExpanded}\n              onSelect={onRegionFilterSelect}\n              placeholderText={t('filter_by_region')}\n              className='select-custom-width'\n            >\n              {regionFilterOptions.map((option, index) => {\n                const reference = document.getElementById('region-select');\n                return (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled ||\n                      (isMaxFilter &&\n                        isDisabledSelectOption('region', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={reference || undefined}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n          showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <InputGroup className='mk--filter-instances__toolbar--text-input'>\n              <TextInput\n                name='owner'\n                id='filterOwners'\n                type='search'\n                aria-label='Search filter input'\n                placeholder={t('filter_by_owner')}\n                validated={\n                  !isOwnerValid || isMaxFilter\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                onChange={onOwnerInputChange}\n                onKeyPress={onInputPress}\n                value={ownerInputValue}\n                ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n              />\n              <Button\n                isDisabled={!isOwnerValid || isMaxFilter}\n                variant={ButtonVariant.control}\n                onClick={() => onFilter('owner')}\n                aria-label='Search owners'\n              >\n                <SearchIcon />\n              </Button>\n              {(!isOwnerValid || isMaxFilter) && (\n                <Tooltip\n                  isVisible={isMaxFilter || !isOwnerValid}\n                  content={tooltipContent('owner')}\n                  reference={ownerInputRef}\n                />\n              )}\n            </InputGroup>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) =>\n            onDeleteChip('status', chip, statusFilterOptions)\n          }\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n          showToolbarItem={filterSelected === 'status'}\n        >\n          {filterSelected === 'status' && (\n            <Select\n              id='status-select'\n              variant={SelectVariant.checkbox}\n              aria-label='Select status'\n              onToggle={onStatusFilterToggle}\n              selections={getSelectionForFilter('status')}\n              isOpen={isStatusFilterExpanded}\n              onSelect={onStatusFilterSelect}\n              placeholderText={t('filter_by_status')}\n              className='select-custom-width'\n            >\n              {statusFilterOptions.map((option, index) => {\n                const reference = document.getElementById('status-select');\n                return (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled ||\n                      (isMaxFilter &&\n                        isDisabledSelectOption('status', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={reference || undefined}\n                      />\n                    )}\n                    {option.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant='primary'\n          onClick={handleCreateInstanceModal}\n          data-testid={'tableStreams-buttonCreateKafka'}\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='pagination-options-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: React.FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation();\n\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className='mk--instances__table--icon--completed' />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className='mk--instances__table--icon--failed' />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size='md'\n            aria-label={instanceName}\n            aria-valuetext='Creation in progress'\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const statusIcon = getStatusIcon();\n\n  return (\n    <Flex>\n      {statusIcon && (\n        <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>\n      )}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory } from 'react-router-dom';\nimport {\n  IAction,\n  IExtraColumnData,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { PaginationVariant, Skeleton } from '@patternfly/react-core';\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n  isServiceApiError,\n} from '@app/utils';\nimport {\n  MASEmptyState,\n  MASEmptyStateVariant,\n  MASPagination,\n  MASTable,\n} from '@app/common';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n} from '@rhoas/kafka-management-sdk';\nimport './StatusColumn.css';\nimport { StreamsToolbar, StreamsToolbarProps } from './StreamsToolbar';\nimport { StatusColumn } from './StatusColumn';\nimport {\n  AlertVariant,\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = StreamsToolbarProps & {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: (arg0?: boolean) => void;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n  loggedInUser: string | undefined;\n  setWaitingForDelete: (arg0: boolean) => void;\n  currentUserkafkas: KafkaRequest[] | undefined;\n};\n\nconst StreamsTableView: React.FunctionComponent<StreamsTableProps> = ({\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n  loggedInUser,\n  setWaitingForDelete,\n  currentUserkafkas,\n  onCreate,\n  handleCreateInstanceModal,\n}) => {\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { t } = useTranslation();\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n  const { addAlert } = useAlert() || {};\n\n  const { showModal, hideModal } = useModal<ModalType.KasDeleteInstance>();\n  const [selectedInstance, setSelectedInstance] = useState<\n    KafkaRequest | undefined\n  >({});\n  const [activeRow, setActiveRow] = useState<string>();\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  useEffect(() => {\n    auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const addAlertAfterSuccessDeletion = () => {\n    if (currentUserkafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserkafkas.filter(\n        (k) =>\n          k.status === InstanceStatus.DEPROVISION ||\n          k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [\n        ...deletedKafkas,\n        ...notPresentKafkas,\n      ];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserkafkas?.findIndex(\n          (item) => item.name === k\n        );\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t('kafka_successfully_deleted', { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign(\n        [],\n        kafkaInstanceItems\n      ).filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.READY ||\n          item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_successfully_created'),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_success_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-success',\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_not_created'),\n                variant: AlertVariant.danger,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_failed_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.PROVISIONING ||\n          item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems, currentUserkafkas]);\n\n  const onSelectKebabDropdownOption = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    const previousNode =\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const getActionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: tableColumns.length,\n      });\n    }\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link to={`kafkas/${row?.id}`}>{name}</Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t('ago'))}\n                <br />\n                {instance_type === InstanceType?.eval && '48 hours duration'}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData) => {\n    return getActionResolver(rowData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status, name } = instance;\n    setSelectedInstance(instance);\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      showModal(ModalType.KasDeleteInstance, {\n        onDelete: () => onDeleteInstance(instance),\n        kafka: instance,\n      });\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n    const accessToken = await auth?.kas.getToken();\n    const apisService = new DefaultApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    onDelete();\n    hideModal();\n\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        setWaitingForDelete(true);\n        refresh();\n        setSelectedInstance(undefined);\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert &&\n        addAlert({\n          title: t('common.something_went_wrong'),\n          variant: AlertVariant.danger,\n          description: reason,\n        });\n    }\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (\n    _event: any,\n    index: number,\n    direction: string,\n    extraData: IExtraColumnData\n  ) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId='tableStreams-row'\n        loggedInUser={loggedInUser}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n          }}\n          emptyStateBodyProps={{\n            body: t('adjust_your_filters_and_try_again'),\n          }}\n        />\n      )}\n      {total > 0 && (\n        <MASPagination\n          widgetId='pagination-options-menu-bottom'\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Trans, useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Card,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport {\n  MASEmptyState,\n  MASEmptyStateVariant,\n  MASLoading,\n  usePagination,\n} from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  InstanceType,\n  isMobileTablet,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport {\n  FilterType,\n  InstanceDrawer,\n  InstanceDrawerProps,\n  StreamsTableView,\n} from './components';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from '@rhoas/kafka-management-sdk';\nimport './OpenshiftStreams.css';\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\nimport { useFederated } from '@app/contexts';\nimport { InstanceDrawerTabs } from '@app/modules/InstanceDrawer/InstanceDrawerContent';\n\nexport type OpenShiftStreamsProps = Pick<\n  InstanceDrawerProps,\n  'tokenEndPointUrl'\n> & {\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: InstanceDrawerTabs.DETAILS | InstanceDrawerTabs.CONNECTION;\n};\n\nconst OpenshiftStreams: React.FunctionComponent<OpenShiftStreamsProps> = ({\n  preCreateInstance,\n  tokenEndPointUrl,\n}: OpenShiftStreamsProps) => {\n  dayjs.extend(localizedFormat);\n  const { shouldOpenCreateModal } = useFederated() || {};\n\n  const auth = useAuth();\n  const { kas } = useConfig() || {};\n  const { apiBasePath: basePath } = kas || {};\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const { page = 1, perPage = 10 } = usePagination() || {};\n  const mainToggle = searchParams.has('user-testing');\n  const { t } = useTranslation();\n  const { addAlert } = useAlert() || {};\n  const { showModal } = useModal<ModalType.KasCreateInstance>();\n  const localStorage = window.localStorage;\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n\n  // States\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [kafkaInstancesList, setKafkaInstancesList] =\n    useState<KafkaRequestList>({} as KafkaRequestList);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] =\n    useState<SelectedInstance | null>();\n  // state to store the expected total kafka instances based on the operation\n  const [expectedTotal, setExpectedTotal] = useState<number>(0);\n  const [isDisplayKafkaEmptyState, setIsDisplayKafkaEmptyState] = useState<\n    boolean | undefined\n  >(undefined);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n  const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n  const hasUserTrialKafka = currentUserKafkas?.some(\n    (k) => k?.instance_type === InstanceType?.eval\n  );\n\n  const updateSelectedKafkaInstance = () => {\n    if (kafkaInstanceItems && kafkaInstanceItems?.length > 0) {\n      const selectedKafkaItem = kafkaInstanceItems?.filter(\n        (kafka) => kafka?.id === selectedInstance?.instanceDetail?.id\n      )[0];\n      const newState: any = {\n        ...selectedInstance,\n        instanceDetail: selectedKafkaItem,\n      };\n      selectedKafkaItem && setSelectedInstance(newState);\n    }\n  };\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem('openSessions') || '0');\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen =\n        shouldOpenCreateModal && (await shouldOpenCreateModal());\n      if (shouldOpen) {\n        handleCreateModal();\n      }\n    };\n    openModal();\n  }, [shouldOpenCreateModal]);\n\n  const handleCreateModal = () => {\n    showModal(ModalType.KasCreateInstance, {\n      onCreate: () => {\n        onCreate();\n        refreshKafkas();\n      },\n    });\n  };\n\n  const handleCreateInstanceModal = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n\n    if (open) {\n      fetchCurrentUserKafkas();\n      handleCreateModal();\n    }\n  };\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({\n      instanceDetail: instance,\n      activeTab: InstanceDrawerTabs.DETAILS,\n    });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({\n      instanceDetail: instance,\n      activeTab: InstanceDrawerTabs.CONNECTION,\n    });\n  };\n\n  const getFilterQuery = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        let filterQuery = '(';\n        filterQuery += filterValue\n          .map((val) => {\n            const value = val.value.trim();\n            if (value === InstanceStatus.PROVISIONING) {\n              return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n            }\n            if (value === InstanceStatus.DEPROVISION) {\n              return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n            }\n            return value !== ''\n              ? `${filterKey} ${\n                  val.isExact === true ? `= ${value}` : `like %${value}%`\n                }`\n              : '';\n          })\n          .join(' or ');\n        filterQuery += ')';\n\n        filters.push(filterQuery);\n      }\n    });\n    return filters.join(' and ');\n  };\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert &&\n        addAlert({\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description: reason,\n        });\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async () => {\n    const filterQuery = getFilterQuery();\n    const accessToken = await auth?.kas.getToken();\n\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService\n          .getKafkas(\n            page?.toString(),\n            perPage?.toString(),\n            orderBy,\n            filterQuery\n          )\n          .then((res) => {\n            const kafkaInstances = res.data;\n            const kafkaItems = kafkaInstances?.items || [];\n            setKafkaInstancesList(kafkaInstances);\n            setKafkaInstanceItems(kafkaItems);\n\n            if (\n              kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal\n            ) {\n              setExpectedTotal(kafkaInstancesList.total);\n            }\n\n            if (\n              waitingForDelete &&\n              filteredValue.length < 1 &&\n              kafkaItems?.length == 0\n            ) {\n              setIsDisplayKafkaEmptyState(true);\n              setWaitingForDelete(false);\n            }\n\n            setKafkaDataLoaded(true);\n          });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchSingleKafka = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n\n        await apisService.getKafkas('1', '1').then((res) => {\n          const kafkaItemsLength = res?.data?.items?.length;\n          if (!kafkaItemsLength || kafkaItemsLength < 1) {\n            setIsDisplayKafkaEmptyState(true);\n          } else {\n            setIsDisplayKafkaEmptyState(false);\n          }\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!kafkaInstanceItems || kafkaInstanceItems?.length <= 1) {\n      fetchSingleKafka();\n    }\n  }, [kafkaInstanceItems]);\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      try {\n        const apisService = new DefaultApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        await apisService.getKafkas('', '', '', filter).then((res) => {\n          const kafkaInstances = res.data;\n          setCurrentUserKafkas(kafkaInstances.items);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas();\n  }, [auth, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchKafkas();\n  }, []);\n\n  useEffect(() => {\n    updateSelectedKafkaInstance();\n  }, [kafkaInstanceItems]);\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    if (kafkaInstanceItems && kafkaInstanceItems?.length === 1) {\n      setKafkaDataLoaded(true);\n    } else {\n      setKafkaDataLoaded(false);\n    }\n    fetchKafkas();\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n  const onCreate = () => {\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  if (isUserUnauthorized) {\n    return (\n      <PageSection\n        variant={PageSectionVariants.default}\n        padding={{ default: 'noPadding' }}\n        isFilled\n      >\n        <MASEmptyState\n          titleProps={{\n            title: t('access_permissions_needed'),\n            headingLevel: 'h2',\n          }}\n          emptyStateIconProps={{\n            icon: LockIcon,\n          }}\n          emptyStateBodyProps={{\n            body: t(\n              'to_access_kafka_instances_contact_your_organization_administrators'\n            ),\n          }}\n        />\n      </PageSection>\n    );\n  }\n\n  const renderStreamsTable = () => {\n    if (kafkaInstanceItems === undefined) {\n      return (\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (isDisplayKafkaEmptyState) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoItems,\n            }}\n            emptyStateBodyProps={{\n              body: (\n                <>\n                  <Trans\n                    i18nKey='create_a_kafka_instance_to_get_started'\n                    components={[\n                      <Button\n                        variant={ButtonVariant.link}\n                        isSmall\n                        isInline\n                        key='btn-quick-start'\n                        onClick={() =>\n                          qsContext.setActiveQuickStart &&\n                          qsContext.setActiveQuickStart('getting-started')\n                        }\n                      />,\n                    ]}\n                  />\n                </>\n              ),\n            }}\n            titleProps={{ title: t('no_kafka_instances_yet') }}\n          >\n            <Button\n              data-testid='emptyStateStreams-buttonCreateKafka'\n              variant={ButtonVariant.primary}\n              onClick={() => handleCreateInstanceModal()}\n            >\n              {t('create_kafka_instance')}\n            </Button>\n          </MASEmptyState>\n          )\n        </PageSection>\n      );\n    } else if (kafkaInstanceItems && isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className='mk--main-page__page-section--table pf-m-padding-on-xl'\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card>\n            <StreamsTableView\n              kafkaInstanceItems={kafkaInstanceItems}\n              mainToggle={mainToggle}\n              onViewConnection={onViewConnection}\n              onViewInstance={onViewInstance}\n              refresh={refreshKafkas}\n              kafkaDataLoaded={kafkaDataLoaded}\n              setWaitingForDelete={setWaitingForDelete}\n              onDelete={onDelete}\n              page={page}\n              perPage={perPage}\n              total={kafkaInstancesList?.total}\n              expectedTotal={expectedTotal}\n              filteredValue={filteredValue}\n              setFilteredValue={setFilteredValue}\n              setFilterSelected={setFilterSelected}\n              filterSelected={filterSelected}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              isDrawerOpen={selectedInstance !== null}\n              loggedInUser={loggedInUser}\n              currentUserkafkas={currentUserKafkas}\n              onCreate={onCreate}\n              handleCreateInstanceModal={handleCreateInstanceModal}\n            />\n          </Card>\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        isExpanded={selectedInstance != null}\n        initialTab={activeTab}\n        isLoading={instanceDetail === undefined}\n        instanceDetail={instanceDetail}\n        onClose={onCloseDrawer}\n        data-ouia-app-id='controlPlane-streams'\n        tokenEndPointUrl={tokenEndPointUrl}\n        notRequiredDrawerContentBackground={isDisplayKafkaEmptyState}\n      >\n        <main className='pf-c-page__main'>\n          <PageSection variant={PageSectionVariants.light}>\n            <Level>\n              <LevelItem>\n                <TextContent>\n                  <Text component='h1'>{t('kafka_instances')}</Text>\n                </TextContent>\n              </LevelItem>\n            </Level>\n          </PageSection>\n          {renderStreamsTable()}\n        </main>\n      </InstanceDrawer>\n      <Modal\n        variant={ModalVariant.small}\n        title='Mobile experience'\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n"],"names":["getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","InstanceDrawer","initialTab","onClose","instanceDetail","isExpanded","isLoading","children","dataOuiaAppId","tokenEndPointUrl","notRequiredDrawerContentBackground","t","useTranslation","panelBodyContent","InstanceDrawerContent","drawerHeaderProps","text","label","title","value","name","headingLevel","InstanceDrawerTabs","ResourcesTab","DetailsTab","bootstrap_server_host","DETAILS","activeTab","setActiveTab","isKafkaPending","status","fallback","Tabs","activeKey","toString","onSelect","_","tab","CONNECTION","selectTab","Tab","eventKey","TabTitleText","externalServer","endsWith","useTimeout","callback","delay","savedCallback","useRef","current","setTimeout","clearInterval","StreamsToolbar","setFilterSelected","filterSelected","total","page","perPage","filteredValue","setFilteredValue","handleCreateInstanceModal","nameInputRef","ownerInputRef","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","s","map","updateFilter","key","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","push","isInputValid","test","trim","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","event","fieldName","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","find","option","chipIndex","onDeleteChipGroup","maxFilterCount","forEach","provisioningStatus","deprovisionStatus","isDisabledSelectOption","optionValue","tooltipContent","toggleGroupItems","ToolbarGroup","variant","Select","SelectVariant","onToggle","selections","isOpen","_event","selection","index","SelectOption","isDisabled","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","showToolbarItem","toLowerCase","InputGroup","className","TextInput","id","type","validated","ValidatedOptions","placeholder","onChange","input","onKeyPress","ref","Button","ButtonVariant","onClick","Tooltip","content","reference","isPlaceholder","placeholderText","getElementById","undefined","toolbarItems","item","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","default","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","StatusColumn","filteredstatus","instanceName","statusIcon","Spinner","size","getStatusIcon","Flex","FlexItem","spacer","st","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","refresh","kafkaDataLoaded","onDelete","expectedTotal","orderBy","setOrderBy","isDrawerOpen","loggedInUser","setWaitingForDelete","currentUserkafkas","onCreate","auth","useAuth","basePath","useConfig","searchParams","URLSearchParams","location","search","history","useHistory","addAlert","useAlert","useModal","showModal","hideModal","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","items","setItems","isOrgAdmin","setIsOrgAdmin","tableColumns","transforms","sortable","then","setSearchParam","useCallback","set","addAlertAfterSuccessDeletion","notPresentKafkas","k","dk","allDeletedKafkas","prev","removeKafkaFromDeleted","AlertVariant","lastItemsState","JSON","parse","stringify","instances","cfItem","description","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","addAlertAfterSuccessCreation","tableRow","loadingCount","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","previousNode","parentElement","previousSibling","focus","instance","onDeleteInstance","ModalType","kafka","instanceId","Error","kas","getToken","accessToken","apisService","DefaultApi","Configuration","deleteKafkaById","reason","response","data","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","tableProps","cells","rows","row","cloud_provider","created_at","owner","instance_type","cloudProviderDisplayName","regionDisplayName","Link","to","skeleton","Skeleton","actionResolver","rowData","additionalProps","isUserSameAsLoggedIn","tooltip","style","pointerEvents","cursor","tooltipProps","position","getActionResolver","onSort","extraData","myDirection","property","getParameterForSortIndex","sortBy","hasDefaultCustomRowWrapper","onRowClick","rowIndex","clickedEventType","tagName","rowDataTestId","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant","OpenshiftStreams","preCreateInstance","shouldOpenCreateModal","useLocation","mainToggle","has","localStorage","window","qsContext","QuickStartContext","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","isDisplayKafkaEmptyState","setIsDisplayKafkaEmptyState","isUserUnauthorized","setIsUserUnauthorized","isMobileModalOpen","setIsMobileModalOpen","waitingForDelete","setLoggedInUser","currentUserKafkas","setCurrentUserKafkas","some","count","parseInt","getItem","newCount","setItem","handleMobileModal","handleCreateModal","refreshKafkas","open","fetchCurrentUserKafkas","handleServerError","error","errorCode","code","fetchKafkas","filters","filterQuery","join","getKafkas","res","kafkaInstances","kafkaItems","kafkaItemsLength","selectedKafkaItem","newState","updateSelectedKafkaInstance","getUsername","username","PageSection","PageSectionVariants","padding","isFilled","emptyStateIconProps","icon","Level","LevelItem","TextContent","Text","component","Trans","i18nKey","components","isSmall","isInline","setActiveQuickStart","Card","Modal","ModalVariant","actions"],"sourceRoot":""}