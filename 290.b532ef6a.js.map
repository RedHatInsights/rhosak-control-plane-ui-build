{"version":3,"sources":["webpack://kas-ui/./node_modules/dayjs/plugin/localizedFormat.js","webpack://kas-ui/./node_modules/react-router-dom/esm/react-router-dom.js","webpack://kas-ui/./src/app/bgimages/Patternfly-Logo.svg","webpack://kas-ui/./src/app/api/ApiContext.tsx","webpack://kas-ui/./src/app/auth/AuthContext.tsx","webpack://kas-ui/./src/app/common/MASEmptyState/MASEmptyState.tsx","webpack://kas-ui/./src/app/common/MASFullPageError/MASFullPageError.tsx","webpack://kas-ui/./src/app/components/Alerts/Alerts.tsx","webpack://kas-ui/./src/app/components/ErrorBoundary/ErrorBoundary.tsx","webpack://kas-ui/./src/app/models/models.ts","webpack://kas-ui/./src/app/components/CreateInstanceModal/DrawerPanelContentInfo.tsx","webpack://kas-ui/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://kas-ui/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/GenerateCredential.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/ResourcesTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/SampleCodeTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/ConnectionTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/DetailsTab.tsx","webpack://kas-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/components/NotFound/NotFound.tsx","webpack://kas-ui/./src/app/components/ServiceRegistryHeader/ServiceRegistryHeader.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts","webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/ServiceRegistry/ServiceRegistry.tsx","webpack://kas-ui/./src/app/routes.tsx","webpack://kas-ui/./src/app/auth/keycloak/keycloakAuth.ts","webpack://kas-ui/./src/app/index.tsx","webpack://kas-ui/./src/app/OpenshiftStreams/OpenshiftStreamsConnected.tsx","webpack://kas-ui/./src/app/ServiceRegistry/ServiceRegistryConnected.tsx","webpack://kas-ui/./src/app/auth/keycloak/KeycloakContext.tsx","webpack://kas-ui/./src/app/AppLayout/AppLayout.tsx","webpack://kas-ui/./src/bootstrap.tsx","webpack://kas-ui/./src/openapi/api.ts"],"names":["module","exports","e","LTS","LT","L","LL","LLL","LLLL","t","n","o","r","prototype","M","format","en","formats","this","$locale","replace","toUpperCase","slice","call","BrowserRouter","_React$Component","_this","_len","arguments","length","args","Array","_key","apply","concat","history","createBrowserHistory","props","render","children","HashRouter","createHashHistory","resolveToLocation","to","currentLocation","normalizeToLocation","createLocation","forwardRefShim","C","forwardRef","LinkAnchor","_ref","forwardedRef","innerRef","navigate","_onClick","onClick","rest","target","event","ex","preventDefault","defaultPrevented","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","ref","Link","_ref2","_ref2$component","component","context","location","href","createHref","push","forwardRefShim$1","forwardRef$1","NavLink","_ref$ariaCurrent","ariaCurrent","_ref$activeClassName","activeClassName","activeStyle","classNameProp","className","exact","isActiveProp","isActive","locationProp","sensitive","strict","styleProp","style","toLocation","path","pathname","escapedPath","match","classnames","filter","i","join","joinClassnames","ApiContext","basePath","undefined","AuthContext","MASEmptyState","titleProps","buttonProps","emptyStateIconProps","emptyStateProps","emptyStateBodyProps","variant","ButtonVariant","restButtonProps","icon","PlusCircleIcon","restEmptyStateIconProps","title","size","TitleSizes","headingLevel","restTitleProps","body","restEmptyStateBodyProps","restEmptyStateProps","css","EmptyStateIcon","Title","EmptyStateBody","Button","MASFullPageError","pageSection","PageSectionVariants","restPageSectionProps","PageSection","padding","default","LockIcon","AlertContext","createContext","addAlert","useAlerts","useContext","AlertProvider","useState","alerts","setAlerts","timers","setTimers","useEffect","timersKeys","map","timer","key","timeOuts","alert","includes","timeOut","setTimeout","hideAlert","forEach","clearTimeout","el","Provider","value","dataTestId","AlertVariant","Date","getTime","onCloseAlert","state","hasError","updateState","setState","getDerivedStateFromError","_","componentDidCatch","error","errorInfo","console","UnexpectedError","Component","cloud_provider","multi_az","region","name","DrawerPanelContentInfo","DrawerPanelContent","DrawerHead","TextContent","Text","TextVariants","TextList","TextListVariants","TextListItem","TextListItemVariants","CreateInstanceModalContext","isModalOpen","setIsModalOpen","onCreate","mainToggle","refresh","cloudProviders","CreateInstanceModalProvider","useCreateInstanceModal","emptyProvider","kind","id","display_name","enabled","CreateInstanceModal","useTranslation","authContext","newKafka","NewKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","resetForm","fetchCloudRegions","provider","getToken","accessToken","listCloudProviderRegions","then","res","providerRegions","data","providers","items","enabledRegions","prevData","reason","response","enableCloudProviders","onCreateInstance","isValid","trim","test","message","maxLength","validateCreateForm","apisService","createKafka","toShowAlert","code","handleModalToggle","handleInstanceNameChange","handleCloudRegionChange","validRegion","getTileIcon","toLowerCase","AwsIcon","color","onChangeAvailabilty","isSelected","currentTarget","onFormSubmit","createInstanceForm","isMultiSelected","Form","onSubmit","FormAlert","Alert","isInline","FormGroup","label","helperText","helperTextInvalid","helperTextInvalidIcon","ExclamationCircleIcon","isRequired","validated","fieldId","TextInput","type","onChange","autoFocus","Tile","cloudProvider","FormSelect","option","index","FormSelectOption","ToggleGroup","ToggleGroupItem","text","isDisabled","buttonId","Modal","ModalVariant","isOpen","onClose","actions","spinnerAriaValueText","isLoading","Drawer","isStatic","DrawerContent","panelContent","DrawerContentBody","StreamsTableView","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToInstance","getConnectToInstancePath","page","perPage","total","kafkaDataLoaded","onDelete","expectedTotal","filteredValue","setFilteredValue","setFilterSelected","filterSelected","orderBy","setOrderBy","isDrawerOpen","isDeleteModalOpen","setIsDeleteModalOpen","selectedInstance","setSelectedInstance","activeRow","setActiveRow","deletedKafkas","setDeletedKafkas","tableColumns","transforms","sortable","setItems","loggedInUser","setLoggedInUser","searchParams","URLSearchParams","search","setSearchParam","useCallback","set","toString","getUsername","username","addAlertAfterSuccessDeletion","notPresentKafkas","kafka","status","k","findIndex","dk","allDeletedKafkas","item","prev","Object","assign","splice","removeKafkaFromDeleted","lastItemsState","JSON","parse","stringify","instances","cfItem","dangerouslySetInnerHTML","__html","incompleteKafkas","addAlertAfterSuccessCreation","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","renderNameLink","row","instance","onDeleteInstance","instanceId","Error","deleteKafkaById","instanceName","config","confirmActionLabel","description","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","StreamsToolbar","tableProps","cells","rows","tableRow","loadingCount","loadingRowCount","totalPage","Math","floor","getLoadingRowsCount","Skeleton","date","created_at","owner","cloudProviderDisplayName","regionDisplayName","StatusColumn","formatDistance","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","content","pointerEvents","cursor","getActionResolver","onSort","_event","myDirection","property","getParameterForSortIndex","sortBy","onRowClick","rowIndex","clickedEventType","tagName","EmptyStateVariant","widgetId","itemCount","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","DeleteInstanceModal","instanceStatus","selectedItemData","modalProps","confirmButtonProps","textProps","GenerateCredential","steps","isCreated","setIsCreated","setIsOpen","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","credential","setCredential","setIsLoading","setError","onMove","curr","_prev","handleChangeStep1","_checked","checked","handleChangeStep4","step1","placeholder","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","bodyContent","step3","step4","clientID","KeyIcon","InputGroup","InputGroupText","ClipboardCopy","isReadOnly","clientSecret","Bullseye","Checkbox","FlexItem","serviceAccountRequest","createServiceAccount","Wizard","isFinishedStep","unshift","nextButtonText","onNext","onBack","hideClose","ResourcesTab","externalServer","Flex","SampleCodeTab","CopyIcon","ConnectionTab","onSelect","activeKey","Tabs","isSecondary","Tab","eventKey","TabTitleText","DetailsTab","instanceDetail","updated_at","renderTextListItem","Grid","GridItem","span","Card","isFlat","CardBody","InstanceDrawer","activeTab","isExpanded","dataOuiaAppId","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","selectedTab","bootstrapServerHost","handleTab1Click","onSelectConnectionTab","panelBodyContent","endsWith","drawerHeaderProps","NotFound","ExclamationTriangleIcon","ServiceRegistryHeader","onConnectToRegistry","onDeleteRegistry","dropdownItems","DropdownItem","Level","LevelItem","Dropdown","toggle","KebabToggle","onToggle","isPlain","DropdownPosition","ErrorCodes","isServiceApiError","useDocumentTitle","originalTitle","document","accessibleRouteChangeHandler","window","mainContainer","getElementById","InstanceStatus","cloudProviderOptions","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_POLL_INTERVAL","isValidToken","getIsDocumentHidden","doc","hidden","msHidden","webkitHidden","usePageVisibility","isVisible","setIsVisible","onVisibilityChange","visibilityChange","addEventListener","removeEventListener","OpenshiftStreams","callback","delay","savedCallback","parseInt","get","has","isOpenCreateInstanceModal","setIsOpenCreateInstanceModal","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","isUserUnauthorized","setIsUserUnauthorized","fetchKafkas","justPoll","listKafkas","filters","filterKey","filterValue","val","isExact","kafkaInstances","errorCode","handleServerError","listCloudProviders","useRef","current","clearInterval","refreshKafkas","routeFocusTimer","keycloak","routes","__BASE_PATH__","RouteWithTitleUpdates","isAsync","lastNavigation","useLastLocation","useA11yRouteChange","routeProps","PageNotFound","flattenedRoutes","reduce","flattened","route","AppRoutes","LastLocationProvider","idx","getKeycloakInstance","init","onLoad","warn","getKeyCloakToken","Promise","updateToken","token","KeycloakContext","KeycloakAuthProvider","authTokenContext","tokenParsed","AppLayout","isNavOpen","setIsNavOpen","isMobileView","setIsMobileView","isNavOpenMobile","setIsNavOpenMobile","keycloakContext","authenticated","login","email","HeaderTools","PageHeaderTools","Header","PageHeader","logo","src","alt","showNavToggle","headerTools","onNavToggle","renderNavItem","NavItem","Navigation","Nav","role","theme","NavList","group","groupIndex","NavExpandable","some","Sidebar","PageSidebar","nav","PageSkipToContent","SkipToContent","Page","mainContainerId","header","sidebar","onPageResize","mobileView","skipToContent","initialized","setInitialized","profile","fallback","ErrorBoundary","DefaultApiAxiosParamCreator","configuration","async","kafkaRequestPayload","options","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","needsSerialization","url","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByKafkaId","duration","interval","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axios","axiosRequestArgs","request"],"mappings":"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","file":"290.b532ef6a.js","sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.dayjs_plugin_localizedFormat=t()}(this,function(){\"use strict\";var e={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t=\"YYYY-MM-DDTHH:mm:ssZ\");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)}}});\n","import { Router, __RouterContext, matchPath } from 'react-router';\nexport { MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, useHistory, useLocation, useParams, useRouteMatch, withRouter } from 'react-router';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport React from 'react';\nimport { createBrowserHistory, createHashHistory, createLocation } from 'history';\nimport PropTypes from 'prop-types';\nimport warning from 'tiny-warning';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport invariant from 'tiny-invariant';\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createBrowserHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  BrowserRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    forceRefresh: PropTypes.bool,\n    getUserConfirmation: PropTypes.func,\n    keyLength: PropTypes.number\n  };\n\n  BrowserRouter.prototype.componentDidMount = function () {\n    process.env.NODE_ENV !== \"production\" ? warning(!this.props.history, \"<BrowserRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { BrowserRouter as Router }`.\") : void 0;\n  };\n}\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar HashRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createHashHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  HashRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    getUserConfirmation: PropTypes.func,\n    hashType: PropTypes.oneOf([\"hashbang\", \"noslash\", \"slash\"])\n  };\n\n  HashRouter.prototype.componentDidMount = function () {\n    process.env.NODE_ENV !== \"production\" ? warning(!this.props.history, \"<HashRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { HashRouter as Router }`.\") : void 0;\n  };\n}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === \"function\" ? to(currentLocation) : to;\n};\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === \"string\" ? createLocation(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = React.forwardRef;\n\nif (typeof forwardRef === \"undefined\") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"innerRef\", \"navigate\", \"onClick\"]);\n\n  var target = rest.target;\n\n  var props = _extends({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === \"_self\") && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return React.createElement(\"a\", props);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  LinkAnchor.displayName = \"LinkAnchor\";\n}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"component\", \"replace\", \"to\", \"innerRef\"]);\n\n  return React.createElement(__RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <Link> outside a <Router>\") : invariant(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : \"\";\n\n    var props = _extends({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var method = replace ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return React.createElement(component, props);\n  });\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  var toType = PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]);\n  var refType = PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]);\n  Link.displayName = \"Link\";\n  Link.propTypes = {\n    innerRef: refType,\n    onClick: PropTypes.func,\n    replace: PropTypes.bool,\n    target: PropTypes.string,\n    to: toType.isRequired\n  };\n}\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = React.forwardRef;\n\nif (typeof forwardRef$1 === \"undefined\") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(\" \");\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref[\"aria-current\"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? \"page\" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? \"active\" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"aria-current\", \"activeClassName\", \"activeStyle\", \"className\", \"exact\", \"isActive\", \"location\", \"sensitive\", \"strict\", \"style\", \"to\", \"innerRef\"]);\n\n  return React.createElement(__RouterContext.Consumer, null, function (context) {\n    !context ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You should not use <NavLink> outside a <Router>\") : invariant(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n    var match = escapedPath ? matchPath(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;\n    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;\n\n    var props = _extends({\n      \"aria-current\": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return React.createElement(Link, props);\n  });\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n  var ariaCurrentType = PropTypes.oneOf([\"page\", \"step\", \"location\", \"date\", \"time\", \"true\"]);\n  NavLink.propTypes = _extends({}, Link.propTypes, {\n    \"aria-current\": ariaCurrentType,\n    activeClassName: PropTypes.string,\n    activeStyle: PropTypes.object,\n    className: PropTypes.string,\n    exact: PropTypes.bool,\n    isActive: PropTypes.func,\n    location: PropTypes.object,\n    sensitive: PropTypes.bool,\n    strict: PropTypes.bool,\n    style: PropTypes.object\n  });\n}\n\nexport { BrowserRouter, HashRouter, Link, NavLink };\n//# sourceMappingURL=react-router-dom.js.map\n","module.exports = \"data:image/svg+xml,%3csvg width='175px' height='32px' viewBox='0 0 175 32' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e %3c!-- Generator: Sketch 53.2 (72643) - https://sketchapp.com --%3e %3ctitle%3ePatternFly Logo%3c/title%3e %3cdesc%3eCreated with Sketch.%3c/desc%3e %3cdefs%3e %3clinearGradient x1='50.0004769%25' y1='3.02475509%25' x2='50.0004769%25' y2='95.3620086%25' id='linearGradient-1'%3e %3cstop stop-color='%2360EFFF' offset='0%25'%3e%3c/stop%3e %3cstop stop-color='%231F89C7' offset='100%25'%3e%3c/stop%3e %3c/linearGradient%3e %3c/defs%3e %3cg id='Symbols' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3e %3cg id='Nav-bar-(desktop)' transform='translate(-150.000000, -16.000000)' fill-rule='nonzero'%3e %3cg id='PatternFly-Logo'%3e %3cg transform='translate(150.000000, 16.000000)'%3e %3cg id='Group' transform='translate(44.748858, 11.200000)' fill='%23FFFFFF'%3e %3cpath d='M0.302054795,9.3488 L0.302054795,0.3264 L4.16883562,0.3264 C4.73858447,0.3264 5.21723744,0.4096 5.60719178,0.5744 C5.99714612,0.7408 6.31358447,0.9576 6.55650685,1.2296 C6.79942922,1.5008 6.97442922,1.8048 7.08150685,2.1456 C7.18778539,2.4856 7.24212329,2.8288 7.24212329,3.1768 C7.24212329,3.3936 7.2173516,3.616 7.16541096,3.8408 C7.11506849,4.064 7.03835616,4.284 6.9336758,4.496 C6.82819635,4.708 6.69474886,4.9048 6.53093607,5.0912 C6.36712329,5.2752 6.17054795,5.4384 5.94280822,5.5784 C5.71426941,5.7184 5.45376712,5.828 5.15810502,5.908 C4.86164384,5.988 4.53242009,6.0272 4.16803653,6.0272 L2.04246575,6.0272 L2.04246575,9.3472 L0.302054795,9.3488 L0.302054795,9.3488 Z M4.24315068,4.372 C4.4652968,4.372 4.65308219,4.3368 4.8033105,4.2664 C4.95353881,4.1936 5.07579909,4.1024 5.17089041,3.988 C5.26598174,3.8744 5.33310502,3.7464 5.37465753,3.6048 C5.41700913,3.4616 5.43938356,3.32 5.43938356,3.176 C5.43938356,3.0464 5.42100457,2.9112 5.38424658,2.7688 C5.34908676,2.6304 5.2859589,2.5024 5.19646119,2.3832 C5.10616438,2.2664 4.98230594,2.1696 4.82888128,2.0952 C4.67305936,2.0192 4.47888128,1.9808 4.24394977,1.9808 L2.04406393,1.9808 L2.04406393,4.3712 L4.24315068,4.372 L4.24315068,4.372 Z' id='Shape'%3e%3c/path%3e %3cpath d='M19.2555936,9.3488 L18.5571918,7.4816 L15.0803653,7.4816 L14.3899543,9.3488 L12.5216895,9.3488 L15.9737443,0.3264 L17.6694064,0.3264 L21.1214612,9.3488 L19.2555936,9.3488 Z M17.1052511,3.548 C17.0589041,3.44 17.0093607,3.3088 16.956621,3.1584 C16.9062785,3.0056 16.8599315,2.8664 16.8223744,2.7352 C16.7880137,2.8672 16.7440639,3.0056 16.689726,3.1584 C16.6361872,3.3088 16.5858447,3.44 16.5386986,3.548 L15.6461187,5.8952 L17.9922374,5.8952 L17.1052511,3.548 Z' id='Shape'%3e%3c/path%3e %3cpolygon id='Path' points='30.9038813 2.0064 30.9038813 9.3488 29.169863 9.3488 29.169863 2.0064 26.5920091 2.0064 26.5920091 0.3264 33.4809361 0.3264 33.4809361 2.0064'%3e%3c/polygon%3e %3cpolygon id='Path' points='44.3932648 2.0064 44.3932648 9.3488 42.6584475 9.3488 42.6584475 2.0064 40.0805936 2.0064 40.0805936 0.3264 46.9695205 0.3264 46.9695205 2.0064'%3e%3c/polygon%3e %3cpolygon id='Path' points='54.1509132 9.3488 54.1509132 0.3264 60.3022831 0.3264 60.3022831 1.9816 55.8905251 1.9816 55.8905251 3.8752 58.4859589 3.8752 58.4859589 5.5232 55.8905251 5.5232 55.8905251 7.7016 60.5715753 7.7016 60.5715753 9.3512'%3e%3c/polygon%3e %3cpath d='M67.8848174,9.3488 L67.8848174,0.3264 L72.0704338,0.3264 C72.6401826,0.3264 73.1172374,0.4032 73.5,0.5624 C73.8827626,0.7192 74.1928082,0.928 74.4269406,1.188 C74.6594749,1.4488 74.8296804,1.7488 74.9295662,2.088 C75.0278539,2.428 75.0805936,2.7832 75.0805936,3.152 C75.0805936,3.4072 75.0422374,3.6664 74.9679224,3.928 C74.8928082,4.1904 74.7849315,4.4392 74.6394977,4.6744 C74.4900685,4.9096 74.310274,5.1216 74.0905251,5.3128 C73.8739726,5.504 73.6190639,5.6536 73.3305936,5.756 L75.0789954,9.3488 L73.122032,9.3488 L71.4375571,5.984 L69.6228311,5.984 L69.6228311,9.3488 L67.8848174,9.3488 L67.8848174,9.3488 Z M72.0960046,4.3344 C72.3165525,4.3344 72.5067352,4.3016 72.6545662,4.236 C72.8047945,4.1704 72.9278539,4.084 73.0181507,3.9752 C73.1108447,3.8656 73.1787671,3.74 73.2179224,3.596 C73.2586758,3.4536 73.2754566,3.3056 73.2754566,3.1504 C73.2754566,3.008 73.2586758,2.8648 73.2243151,2.724 C73.186758,2.5832 73.1260274,2.4584 73.0413242,2.3456 C72.9542237,2.236 72.8295662,2.1464 72.6793379,2.0792 C72.5291096,2.012 72.3317352,1.9792 72.0968037,1.9792 L69.6260274,1.9792 L69.6260274,4.3328 L72.0968037,4.3328 L72.0968037,4.3344 L72.0960046,4.3344 Z' id='Shape'%3e%3c/path%3e %3cpath d='M88.1552511,9.3488 L84.5793379,4.0888 C84.5202055,4.0016 84.4578767,3.892 84.3875571,3.7648 C84.3172374,3.6376 84.2597032,3.5192 84.2061644,3.4104 C84.2221461,3.5056 84.2277397,3.6184 84.2341324,3.7496 C84.2413242,3.8792 84.2469178,3.9936 84.2469178,4.0888 L84.2469178,9.3488 L82.5176941,9.3488 L82.5176941,0.3264 L84.1502283,0.3264 L87.6390411,5.5216 C87.693379,5.6056 87.7565068,5.7136 87.8252283,5.8384 C87.8979452,5.9632 87.9610731,6.0856 88.0122146,6.2024 C88.0002283,6.0824 87.9938356,5.9568 87.9858447,5.8352 C87.9778539,5.7112 87.9746575,5.6056 87.9746575,5.52 L87.9746575,0.3248 L89.6958904,0.3248 L89.6958904,9.3472 L88.1552511,9.3488 L88.1552511,9.3488 Z' id='Path'%3e%3c/path%3e %3cpolygon id='Path' points='97.4590183 9.3488 97.4590183 0.3264 103.501712 0.3264 103.501712 1.9816 99.2002283 1.9816 99.2002283 3.8752 101.926712 3.8752 101.926712 5.5232 99.2002283 5.5232 99.2002283 9.3496'%3e%3c/polygon%3e %3cpolygon id='Path' points='110.555251 9.3488 110.555251 0.3264 112.298059 0.3264 112.298059 7.6752 116.646689 7.6752 116.646689 9.3488'%3e%3c/polygon%3e %3cpolygon id='Path' points='124.973973 9.3488 124.973973 5.832 121.634589 0.3264 123.608333 0.3264 125.835388 4.0144 128.058447 0.3264 130.03379 0.3264 126.695205 5.832 126.695205 9.3488'%3e%3c/polygon%3e %3c/g%3e %3cpath d='M33.5144977,16.5608 L16.7584475,0.1536 L0,16.5608 L6.6803653,26.036 L11.7769406,24.864 L16.790411,31.9208 L21.7942922,24.8768 L26.8341324,26.0352 L33.5144977,16.5608 Z M16.0624429,3.196 L13.8921233,23.2768 L9.74805936,17.6176 L16.0624429,3.196 Z M9.293379,16.9968 L6.71232877,13.472 L15.5877854,2.68 L9.293379,16.9968 Z M13.2041096,23.464 L13.2041096,23.464 L13.4454338,23.7968 L12.0614155,24.1144 L8.86666667,19.6184 L9.43721461,18.3208 L13.2041096,23.464 Z M16.7576484,2.9296 L18.9391553,24.2184 L16.7528539,27.2176 L14.5745434,24.2184 L16.7576484,2.9296 Z M20.309589,23.4648 L24.1180365,18.2648 L24.7141553,19.6184 L21.5106164,24.128 L20.0714612,23.7968 L20.3119863,23.4664 L20.309589,23.4648 Z M19.6223744,23.2768 L17.4800228,3.1792 L23.8079909,17.5608 L19.6223744,23.2768 Z M17.9850457,2.6768 L26.8021689,13.472 L24.2626712,16.94 L17.9850457,2.6768 Z M6.96643836,25.2856 L0.870205479,16.6408 L12.7989726,4.9672 L5.87089041,13.4504 L8.98413242,17.7008 L8.10593607,19.696 L11.3598174,24.2768 L6.96643836,25.2856 Z M16.790411,30.7712 L12.4785388,24.7032 L13.8705479,24.3824 L16.7512557,28.3496 L19.6415525,24.3824 L21.0910959,24.7168 L16.790411,30.7712 Z M22.2114155,24.2896 L25.4740868,19.696 L24.5719178,17.6448 L27.6436073,13.4504 L20.7155251,4.9672 L32.6434932,16.6408 L26.5480594,25.2864 L22.2114155,24.2896 Z' id='Shape' fill='url(%23linearGradient-1)'%3e%3c/path%3e %3c/g%3e %3c/g%3e %3c/g%3e %3c/g%3e %3c/svg%3e\"","import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n  getUsername: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext | undefined>(undefined);\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState as PFEmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  TitleSizes,\n  TitleProps,\n  ButtonProps,\n  EmptyStateIconProps,\n  EmptyStateProps as PFEmptyStateProps,\n  EmptyStateBodyProps,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\n\nexport type MASEmptyStateProps = {\n  titleProps?: Omit<TitleProps, 'children'>;\n  emptyStateProps?: Omit<PFEmptyStateProps, 'children'>;\n  emptyStateIconProps?: EmptyStateIconProps;\n  emptyStateBodyProps?: Omit<EmptyStateBodyProps, 'children'> & {\n    body?: string | React.ReactNode;\n  };\n  buttonProps?: Omit<ButtonProps, 'children'> & {\n    title?: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    'data-testid'?: string;\n  };\n  children?: React.ReactNode;\n};\n\nexport const MASEmptyState: React.FC<MASEmptyStateProps> = ({\n  titleProps,\n  buttonProps,\n  emptyStateIconProps,\n  emptyStateProps,\n  emptyStateBodyProps,\n  children,\n}: MASEmptyStateProps) => {\n  const { variant = ButtonVariant.primary, onClick, ...restButtonProps } = buttonProps || {};\n  const { icon = PlusCircleIcon, ...restEmptyStateIconProps } = emptyStateIconProps || {};\n  const { title, size = TitleSizes.lg, headingLevel = 'h1', ...restTitleProps } = titleProps || {};\n  const { body, ...restEmptyStateBodyProps } = emptyStateBodyProps || {};\n  const { className, ...restEmptyStateProps } = emptyStateProps || {};\n\n  return (\n    <>\n      <PFEmptyState className={css('pf-u-pt-2xl pf-u-pt-3xl-on-md', className)} {...restEmptyStateProps}>\n        <EmptyStateIcon icon={icon} {...restEmptyStateIconProps} />\n        {title && (\n          <Title headingLevel={headingLevel} size={size} {...restTitleProps}>\n            {title}\n          </Title>\n        )}\n        {body && <EmptyStateBody {...restEmptyStateBodyProps}>{body}</EmptyStateBody>}\n        {buttonProps?.title && (\n          <Button variant={variant} onClick={onClick} {...restButtonProps}>\n            {buttonProps?.title}\n          </Button>\n        )}\n        {children}\n      </PFEmptyState>\n    </>\n  );\n};\n","import React from 'react';\nimport { PageSection, PageSectionVariants, PageSectionProps } from '@patternfly/react-core';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { MASEmptyState, MASEmptyStateProps } from '@app/common';\n\nexport type MASFullPageErrorProps = MASEmptyStateProps & {\n  pageSection?: Omit<PageSectionProps, 'children'>;\n};\n\nexport const MASFullPageError: React.FC<MASFullPageErrorProps> = ({\n  pageSection,\n  titleProps,\n  emptyStateProps,\n  emptyStateIconProps,\n  emptyStateBodyProps,\n  buttonProps,\n}: MASFullPageErrorProps) => {\n  const { variant = PageSectionVariants.default, ...restPageSectionProps } = pageSection || {};\n  return (\n    <PageSection variant={variant} {...restPageSectionProps} padding={{ default: 'noPadding' }}>\n      <MASEmptyState\n        titleProps={titleProps}\n        emptyStateProps={emptyStateProps}\n        emptyStateIconProps={{\n          icon: emptyStateIconProps?.icon || LockIcon,\n          ...emptyStateIconProps,\n        }}\n        emptyStateBodyProps={emptyStateBodyProps}\n        buttonProps={buttonProps}\n      />\n    </PageSection>\n  );\n};\n","import React, { useState, createContext, ReactNode, useContext, useEffect } from 'react';\nimport { AlertType, AlertToastGroup } from './AlertToastGroup';\nimport { AlertVariant } from '@patternfly/react-core';\n\nexport type AlertContextProps = {\n  addAlert: (message: string, variant?: AlertVariant, body?: string | React.ReactElement, dataTestId?: string) => void;\n};\n\nexport const AlertContext = createContext<AlertContextProps>({\n  addAlert: () => {},\n});\n\nexport const useAlerts = () => useContext(AlertContext);\n\ntype TimeOut = {\n  key: number;\n  timeOut: NodeJS.Timeout;\n};\n\nexport const AlertProvider = ({ children }: { children: ReactNode }) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const createId = () => new Date().getTime();\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const addAlert = (\n    title: string,\n    variant: AlertVariant = AlertVariant.default,\n    body?: string | React.ReactElement,\n    dataTestId?: string\n  ) => {\n    setAlerts([...alerts, { key: createId(), title, variant, body, dataTestId }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <AlertToastGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { UnexpectedError } from './UnexpectedError';\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('error:', error, errorInfo);\n  }\n\n  updateState = (hasError: boolean) => {\n    this.setState({ hasError });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return <UnexpectedError updateState={this.updateState} />;\n    }\n    return this.props.children;\n  }\n}\n\nexport { ErrorBoundary };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\n\nconst DrawerPanelContentInfo = () => (\n  <DrawerPanelContent>\n    <DrawerHead>\n      <TextContent>\n        <Text component={TextVariants.h2}>Cluster information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 4 MBps</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100 GB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Partitions</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Client connections</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 500</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Message size</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Availability</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>Multizone highly available</TextListItem>\n        </TextList>\n        <Text component={TextVariants.h2}>Cost information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Base Cluster</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$1.50/hr</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.02/MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.0002/GB/hr</TextListItem>\n        </TextList>\n      </TextContent>\n    </DrawerHead>\n  </DrawerPanelContent>\n);\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState, createContext } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { MAX_INSTANCE_NAME_LENGTH } from '@app/utils/utils';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\nimport { isValidToken, ErrorCodes } from '@app/utils';\n\nexport type CreateInstanceModalProps = {\n  isModalOpen: boolean;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onCreate: () => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst CreateInstanceModalContext = createContext<CreateInstanceModalProps>({\n  isModalOpen: false,\n  setIsModalOpen: () => {},\n  onCreate: () => {},\n  mainToggle: false,\n  refresh: () => {},\n  cloudProviders: [],\n});\n\nexport const CreateInstanceModalProvider = CreateInstanceModalContext.Provider;\nexport const useCreateInstanceModal = () => useContext(CreateInstanceModalContext);\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { isModalOpen, setIsModalOpen, onCreate, cloudProviders, refresh, mainToggle } = useCreateInstanceModal();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { addAlert } = useAlerts();\n\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n\n  const resetForm = () => {\n    setKafkaFormData({ ...kafkaFormData, name: '', multi_az: true });\n    setIsFormValid(true);\n    setNameValidated({ fieldState: 'default' });\n    setCreationInProgress(false);\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, region } = kafkaFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n    if (name.length > MAX_INSTANCE_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    }\n    if (!region || region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n    return isValid;\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = validateCreateForm();\n\n    const accessToken = await authContext?.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n    } else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n          });\n          onCreate();\n          await apisService.createKafka(true, kafkaFormData).then((res) => {\n            resetForm();\n            setIsModalOpen(false);\n            refresh();\n          });\n        } catch (error) {\n          let reason: string | undefined;\n          let toShowAlert = true;\n          if (isServiceApiError(error)) {\n            if (error.response?.data.code === ErrorCodes.DUPLICATE_INSTANCE_NAME) {\n              setIsFormValid(false);\n              toShowAlert = false;\n              setNameValidated({\n                fieldState: 'error',\n                message: t('the_name_already_exists_please_enter_a_unique_name', { name: kafkaFormData.name }),\n              });\n            } else {\n              reason = error.response?.data.reason;\n            }\n          }\n          /**\n           * Todo: show user friendly message according to server code\n           * and translation for specific language\n           *\n           */\n          toShowAlert && addAlert(t('something_went_wrong'), AlertVariant.danger, reason, 'toastCreateKafka-failed');\n        }\n        setCreationInProgress(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    resetForm();\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (name && name.length > MAX_INSTANCE_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('length_is_greater_than_expected', { maxLength: MAX_INSTANCE_NAME_LENGTH }),\n      });\n    } else {\n      if (isValid) {\n        if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n        if (nameValidated.fieldState === 'error') {\n          setNameValidated({ fieldState: 'default', message: '' });\n        }\n      } else {\n        setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n      }\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n\n  const onChangeAvailabilty = (isSelected: boolean, event) => {\n    if (isSelected) {\n      const value = event.currentTarget.id;\n      setKafkaFormData({ ...kafkaFormData, multi_az: value === 'multi' });\n    }\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    onCreateInstance();\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name, cloud_provider, multi_az, region } = kafkaFormData;\n    const isMultiSelected = multi_az;\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message != '' && <ExclamationCircleIcon />}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={name}\n            onChange={handleInstanceNameChange}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map(\n            (provider: CloudProvider) =>\n              provider.enabled && (\n                <Tile\n                  key={`tile-${provider.name}`}\n                  title={provider?.display_name || ''}\n                  icon={getTileIcon(provider?.name)}\n                  isSelected={cloud_provider === provider.name}\n                  onClick={() => onCloudProviderSelect(provider)}\n                />\n              )\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={region}\n            onChange={handleCloudRegionChange}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              (option: CloudRegion, index) =>\n                option.enabled && (\n                  <FormSelectOption\n                    key={index}\n                    value={option.id}\n                    label={option.id ? t(option.id) : option.display_name || ''}\n                  />\n                )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            <ToggleGroupItem\n              text={t('single')}\n              value={'single'}\n              isDisabled\n              buttonId=\"single\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n            <ToggleGroupItem\n              text={t('multi')}\n              value=\"multi\"\n              buttonId=\"multi\"\n              isSelected={isMultiSelected}\n              onChange={onChangeAvailabilty}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        id=\"modalCreateKafka\"\n        variant={ModalVariant.medium}\n        title={t('create_a_kafka_instance')}\n        isOpen={isModalOpen}\n        onClose={handleModalToggle}\n        actions={[\n          <Button\n            key=\"create\"\n            variant=\"primary\"\n            type=\"submit\"\n            onClick={onCreateInstance}\n            isDisabled={!isFormValid || isCreationInProgress}\n            spinnerAriaValueText={t('submitting_request')}\n            isLoading={isCreationInProgress}\n            data-testid=\"modalCreateKafka-buttonSubmit\"\n          >\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle} data-testid=\"modalCreateKafka-buttonCancel\">\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {mainToggle === true ? (\n          <Drawer isStatic className=\"mk--create-instance-modal__drawer--content\">\n            <DrawerContent panelContent={<DrawerPanelContentInfo />}>\n              <DrawerContentBody>{createInstanceForm()}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        ) : (\n          createInstanceForm()\n        )}\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { AlertVariant, PaginationVariant, Skeleton, EmptyStateVariant, TitleSizes } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState } from '@app/common';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { useAlerts, DeleteInstanceModal, CreateInstanceModal } from '@app/components';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { InstanceStatus, isServiceApiError } from '@app/utils';\nimport { useHistory } from 'react-router-dom';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { formatDistance } from 'date-fns';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type StreamsTableProps = {\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n  mainToggle: boolean;\n  refresh: () => void;\n  page: number;\n  perPage: number;\n  total: number;\n  kafkaDataLoaded: boolean;\n  onDelete: () => void;\n  expectedTotal: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected: string;\n  setFilterSelected: (filterSelected: string) => void;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n  isDrawerOpen?: boolean;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToInstance,\n  getConnectToInstancePath,\n  refresh,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n  isDrawerOpen,\n}: StreamsTableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const [activeRow, setActiveRow] = useState<string>();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const removeKafkaFromDeleted = (name: string) => {\n    const index = deletedKafkas.findIndex((k) => k === name);\n    if (index > -1) {\n      const prev = Object.assign([], deletedKafkas);\n      prev.splice(index, 1);\n      setDeletedKafkas(prev);\n    }\n  };\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  // function to get exact number of skeleton count required for the current page\n  const getLoadingRowsCount = () => {\n    // initiaise loadingRowCount by perPage\n    let loadingRowCount = perPage;\n    /*\n      if number of expected count is greater than 0\n        calculate the loadingRowCount\n      else\n        leave the loadingRowCount to perPage\n     */\n    if (expectedTotal && expectedTotal > 0) {\n      // get total number of pages\n      const totalPage =\n        expectedTotal % perPage !== 0 ? Math.floor(expectedTotal / perPage) + 1 : Math.floor(expectedTotal / perPage);\n      // check whether the current page is the last page\n      if (page === totalPage) {\n        // check whether to total expected count is greater than perPage count\n        if (expectedTotal > perPage) {\n          // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n          loadingRowCount = expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n        } else {\n          loadingRowCount = expectedTotal;\n        }\n      }\n    }\n    // return the exact number of skeleton expected at the time of loading\n    return loadingRowCount !== 0 ? loadingRowCount : perPage;\n  };\n\n  const addAlertAfterSuccessDeletion = () => {\n    // filter all kafkas with status as deprovision\n    const deprovisonedKafkas = kafkaInstanceItems.filter((kafka) => kafka.status === InstanceStatus.DEPROVISION);\n\n    // filter all new kafka which is not in deleteKafka state\n    const notPresentKafkas = deprovisonedKafkas\n      .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n      .map((k) => k.name || '');\n    // create new array by merging old and new kafka with status as deprovion\n    const allDeletedKafkas: string[] = [...deletedKafkas, ...notPresentKafkas];\n    // update deleteKafka with new array\n    setDeletedKafkas(allDeletedKafkas);\n\n    // add alert for deleted kafkas which are completely deleted from the response\n    allDeletedKafkas.forEach((k) => {\n      if (kafkaInstanceItems.findIndex((item) => item.name === k) < 0) {\n        removeKafkaFromDeleted(k);\n        addAlert(t('kafka_successfully_deleted', { name: k }), AlertVariant.success);\n      }\n    });\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-success'\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />,\n              'toastCreateKafka-failed'\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const onSelectKebabDropdownOption = (event: any, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n      //set selected row for view instance and connect instance\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n      setActiveRow(originalData?.name);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (originalData.status === InstanceStatus.DEPROVISION) {\n      return [];\n    }\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n      },\n      {\n        title: t('connect_to_instance'),\n        id: 'connect-instance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'connect-instance'),\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const renderNameLink = ({ name, row }) => {\n    return (\n      <>\n        {mainToggle ? (\n          <a href=\"http://uxd-mk-data-plane-cmolloy.apps.uxd-os-research.shz4.p1.openshiftapps.com/openshiftstreams\">\n            {name}\n          </a>\n        ) : (\n          <Link\n            to={() => getConnectToInstancePath(row as KafkaRequest)}\n            onClick={(e) => {\n              e.preventDefault();\n              onConnectToInstance(row as KafkaRequest);\n            }}\n          >\n            {name}\n          </Link>\n        )}\n      </>\n    );\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount();\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    const formatDate = (date) => {\n      date = typeof date === 'string' ? new Date(date) : date;\n      return (\n        <>\n          {formatDistance(date, new Date())} {t('ago')}\n        </>\n      );\n    };\n\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title: status === InstanceStatus.DEPROVISION ? name : renderNameLink({ name, row }),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: formatDate(created_at),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    setIsDeleteModalOpen(false);\n    try {\n      await apisService.deleteKafkaById(instanceId, true).then(() => {\n        setActiveRow(undefined);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  const onRowClick = (event: any, rowIndex: number, row: IRowData) => {\n    const { originalData } = row;\n    const clickedEventType = event?.target?.type;\n    const tagName = event?.target?.tagName;\n\n    // Open modal on row click except kebab button click\n    if (clickedEventType !== 'button' && tagName?.toLowerCase() !== 'a') {\n      onViewInstance(originalData);\n      setActiveRow(originalData?.name);\n    }\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('cluster_instance_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: getSortBy(),\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n      />\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: EmptyStateVariant.full,\n          }}\n          emptyStateIconProps={{\n            icon: SearchIcon,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n            headingLevel: 'h2',\n            size: TitleSizes.lg,\n          }}\n          emptyStateBodyProps={{\n            body: t('no_results_match_the_filter_criteria'),\n          }}\n        />\n      )}\n      {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n      <DeleteInstanceModal\n        isModalOpen={isDeleteModalOpen}\n        instanceStatus={selectedInstance?.status}\n        selectedItemData={selectedInstance}\n        handleModalToggle={() => setIsDeleteModalOpen(!isDeleteModalOpen)}\n        modalProps={{\n          title,\n        }}\n        confirmButtonProps={{\n          onClick: onDeleteInstance,\n          label: confirmActionLabel,\n        }}\n        textProps={{\n          description,\n        }}\n      />\n      <CreateInstanceModal />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","import React, { useState, FunctionComponent, useContext } from 'react';\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyStateVariant,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Popover,\n  Radio,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DefaultApi, ServiceAccountRequest } from '../../../openapi/api';\nimport { MASEmptyState } from '@app/common';\n\ntype GenerateCredential = {\n  instanceName?: string;\n  mainToggle?: boolean;\n};\n\nconst GenerateCredential: FunctionComponent<GenerateCredential> = ({\n  instanceName = '',\n  mainToggle,\n}: GenerateCredential) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n  const [credential, setCredential] = useState<any | undefined>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState('');\n\n  const generateCredential = async () => {\n    const accessToken = await authContext?.getToken();\n    const serviceAccountRequest: ServiceAccountRequest = {\n      name: instanceName,\n    };\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.createServiceAccount(serviceAccountRequest).then((res) => {\n        setCredential(res?.data);\n        setIsLoading(false);\n        setIsOpen(true);\n      });\n    } catch (err) {\n      setIsLoading(false);\n      let reason;\n      if (isServiceApiError(err)) {\n        reason = err.response?.data.reason;\n      }\n      setError(reason);\n    }\n  };\n\n  const handleModalToggle = () => {\n    if (mainToggle) {\n      setIsOpen(true);\n      setIsLoading(false);\n    } else {\n      setIsLoading(true);\n      setError('');\n      setCredential(undefined);\n      generateCredential();\n    }\n  };\n\n  // useEffect(() => {\n  //   if (stepNo === 5) {\n  //     generateCredential();\n  //   }\n  // }, [stepNo]);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setIsCreated(!isCreated);\n    setCredential(undefined);\n    setConfirmationCheckbox(false);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, _prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (_checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (_checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      {mainToggle && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title=\"These credentials were not actually generated from this flow as it is part of the mock UI. For now, please turn off the mock UI to generate credentials.\"\n        />\n      )}\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.large,\n        }}\n        emptyStateIconProps={{\n          icon: KeyIcon,\n        }}\n        titleProps={{\n          title: t('credential_successfully_generated'),\n          headingLevel: 'h4',\n          size: TitleSizes.lg,\n        }}\n        emptyStateBodyProps={{\n          body: t('clientid_empty_state_body'),\n        }}\n      >\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">\n            {t('client_id')}\n          </InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\" data-testid=\"modalCredentials-copyClientID\">\n            {mainToggle ? 'srvc-acct-962bc96e-4339-4aee-9505-040d5069c6a5' : credential?.clientID}\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\" data-testid=\"modalCredentials-copyClientSecret\">\n            {mainToggle ? '441cdf77-083c-41d1-9050-c27a3b4247ac' : credential?.clientSecret}\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button\n          variant=\"primary\"\n          isDisabled={!confirmationCheckbox}\n          onClick={handleClose}\n          data-testid=\"modalCredentials-buttonClose\"\n        >\n          {t('close')}\n        </Button>\n      </MASEmptyState>\n    </>\n  );\n\n  const getSteps = () => {\n    const steps: WizardStep[] = [{ id: 5, name: t('finish'), component: clientID, isFinishedStep: true }];\n    if (mainToggle) {\n      steps.unshift(\n        { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n        { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n        { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n        { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') }\n      );\n    }\n    return steps;\n  };\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      <FlexItem className=\"pf-m-align-right\">\n        <Button\n          variant=\"secondary\"\n          onClick={handleModalToggle}\n          className=\"pf-u-ml-md\"\n          spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n          isLoading={isLoading}\n          data-testid=\"drawerStreams-buttonCreateServiceAccount\"\n        >\n          {t('generate_credential')}\n        </Button>\n      </FlexItem>\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={getSteps()}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        hideClose={true}\n      />\n      {error && (\n        <FlexItem className=\"pf-m-grow\">\n          <Alert variant=\"danger\" isInline title={error} />\n        </FlexItem>\n      )}\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Flex, FlexItem, ClipboardCopy } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { GenerateCredential } from './GenerateCredential';\n\nexport type ResourcesTabProps = {\n  mainToggle?: boolean;\n  externalServer?: string;\n  instanceName?: string;\n};\n\nexport const ResourcesTab: React.FC<ResourcesTabProps> = ({\n  mainToggle,\n  externalServer,\n  instanceName,\n}: ResourcesTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"mas--details__drawer--tab-content\">\n      <TextContent className=\"pf-u-pb-sm\">\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n        <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n        <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_2')}</Text>\n        <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n          {t('external_server')}\n        </Text>\n      </TextContent>\n      <Flex>\n        <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n          <ClipboardCopy data-testid=\"drawerStreams-copyBootstrapURL\">{externalServer}</ClipboardCopy>\n        </FlexItem>\n        <GenerateCredential instanceName={instanceName} mainToggle={mainToggle} />\n      </Flex>\n      {mainToggle && (\n        <>\n          <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n            <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n            <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n          </TextContent>\n          <ClipboardCopy>https://:30123</ClipboardCopy>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { TextContent, Text, TextVariants, Button } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\nexport const SampleCodeTab = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, TabsProps, Tab, TabTitleText } from '@patternfly/react-core';\nimport { ResourcesTab, ResourcesTabProps } from './ResourcesTab';\nimport { SampleCodeTab } from './SampleCodeTab';\n\nexport type ConnectionTabProps = Pick<TabsProps, 'onSelect' | 'activeKey'> & ResourcesTabProps;\n\nexport const ConnectionTab: React.FC<ConnectionTabProps> = ({\n  onSelect,\n  externalServer,\n  instanceName,\n  mainToggle,\n  activeKey,\n}: ConnectionTabProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {mainToggle ? (\n        <div className=\"mas--details__drawer--tab-content pf-m-secondary\">\n          <Tabs activeKey={activeKey} isSecondary onSelect={onSelect}>\n            <Tab eventKey={0} title={<TabTitleText>{t('resources')}</TabTitleText>}>\n              <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n            </Tab>\n            <Tab eventKey={1} title={<TabTitleText>{t('sample_code')}</TabTitleText>}>\n              <SampleCodeTab />\n            </Tab>\n          </Tabs>\n        </div>\n      ) : (\n        <ResourcesTab externalServer={externalServer} instanceName={instanceName} mainToggle={mainToggle} />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport { KafkaRequest } from 'src/openapi';\n\nexport type DetailsTabProps = {\n  mainToggle?: boolean;\n  instanceDetail?: KafkaRequest;\n};\n\nexport const DetailsTab = ({ mainToggle, instanceDetail }: DetailsTabProps) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation();\n\n  const { id, owner, created_at, updated_at } = instanceDetail || {};\n\n  const renderTextListItem = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      <div className=\"mas--details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mas--details__drawer--grid\">\n            <GridItem span={6} className=\"mas--details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItem(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItem(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItem(t('id'), id)}\n            {renderTextListItem(t('owner'), owner)}\n            {renderTextListItem(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItem(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport { ConnectionTab } from './ConnectionTab';\nimport { DetailsTab, DetailsTabProps } from './DetailsTab';\nimport './InstanceDrawer.css';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  'drawerHeaderProps' | 'panelBodyContent' | '[data-ouia-app-id]'\n> &\n  DetailsTabProps & {\n    activeTab?: string;\n  };\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n  isExpanded,\n  isLoading,\n  children,\n  'data-ouia-app-id': dataOuiaAppId,\n}) => {\n  dayjs.extend(localizedFormat);\n\n  const { t } = useTranslation();\n  const { name } = instanceDetail || {};\n\n  const [activeTab1Key, setActiveTab1Key] = useState<string | number>(0);\n  const [activeTab2Key, setActiveTab2Key] = useState<string | number>(0);\n\n  useEffect(() => {\n    const selectedTab = activeTab?.toLowerCase() === 'details' ? 0 : 1;\n    setActiveTab1Key(selectedTab);\n    setActiveTab2Key(0);\n  }, [activeTab]);\n\n  const handleTab1Click = (_, eventKey: string | number) => {\n    setActiveTab1Key(eventKey);\n  };\n\n  const onSelectConnectionTab = (_, eventKey: string | number) => {\n    setActiveTab2Key(eventKey);\n  };\n\n  const getExternalServer = () => {\n    const { bootstrapServerHost } = instanceDetail || {};\n    return bootstrapServerHost?.endsWith(':443') ? bootstrapServerHost : `${bootstrapServerHost}:443`;\n  };\n\n  const panelBodyContent = () => {\n    return (\n      <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n        <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n          <DetailsTab mainToggle={mainToggle} instanceDetail={instanceDetail} />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>} data-testid=\"drawerStreams-tabConnect\">\n          <ConnectionTab\n            mainToggle={mainToggle}\n            activeKey={activeTab2Key}\n            instanceName={name}\n            externalServer={getExternalServer()}\n            onSelect={onSelectConnectionTab}\n          />\n        </Tab>\n      </Tabs>\n    );\n  };\n\n  return (\n    <MASDrawer\n      isExpanded={isExpanded}\n      isLoading={isLoading}\n      onClose={onClose}\n      panelBodyContent={panelBodyContent()}\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n    >\n      {children}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, Button, EmptyStateVariant, TitleSizes } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { MASEmptyState } from '@app/common';\n\nconst NotFound: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('take_me_home')}</Button>;\n  }\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <MASEmptyState\n        emptyStateProps={{ variant: EmptyStateVariant.full }}\n        emptyStateIconProps={{ icon: ExclamationTriangleIcon }}\n        titleProps={{ title: t('404_page_not_found'), headingLevel: 'h1', size: TitleSizes.lg }}\n        emptyStateBodyProps={{\n          body: t('we_did_not_find_a_page_that_matches_the_address_you_navigated_to'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { NotFound };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Level, LevelItem, Title, Dropdown, DropdownItem, DropdownPosition, KebabToggle } from '@patternfly/react-core';\n\nexport type ServiceRegistryHeaderProps = {\n  name: string;\n  onConnectToRegistry: (data: any) => void;\n  onDeleteRegistry: (name: string) => void;\n};\n\nexport const ServiceRegistryHeader: React.FC<ServiceRegistryHeaderProps> = ({\n  name,\n  onConnectToRegistry,\n  onDeleteRegistry,\n}: ServiceRegistryHeaderProps) => {\n  const { t } = useTranslation();\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key=\"connect-registry\" aria-label=\"connect to registry\" onClick={() => onConnectToRegistry(name)}>\n      Connect to Registry\n    </DropdownItem>,\n    <DropdownItem key=\"delete-registry\" aria-label=\"delete registry\" onClick={() => onDeleteRegistry(name)}>\n      Delete Registry\n    </DropdownItem>,\n  ];\n\n  return (\n    <Level>\n      <LevelItem>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {t('service_registry')}\n        </Title>\n      </LevelItem>\n      <LevelItem>\n        <Dropdown\n          onSelect={onSelect}\n          toggle={<KebabToggle onToggle={onToggle} id=\"toggle-service-registry\" />}\n          isOpen={isOpen}\n          isPlain\n          dropdownItems={dropdownItems}\n          position={DropdownPosition.right}\n        />\n      </LevelItem>\n    </Level>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = \"MGD-SERV-API-4\",\n  DUPLICATE_INSTANCE_NAME = \"MGD-SERV-API-36\"\n}\n\nexport {\n  ErrorCodes,\n  isServiceApiError\n}\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\nenum InstanceStatus {\n  READY = 'ready',\n  ACCEPTED = 'accepted',\n  PREPARING = 'preparing',\n  PROVISIONING = 'provisioning',\n  FAILED = 'failed',\n  DEPROVISION = 'deprovision',\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n];\n\nconst getCloudProviderDisplayName = (value: string) => {\n  return cloudProviderOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-1', label: 'EU, Ireland' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\nconst getCloudRegionDisplayName = (value: string) => {\n  return cloudRegionOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst capitalize = (s: string) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\n\nconst MIN_POLL_INTERVAL = 1000;\nconst MAX_POLL_INTERVAL = 5000;\nconst isValidToken = (accessToken: string | undefined) => {\n  if (accessToken !== undefined && accessToken !== '') {\n    return true;\n  }\n  return false;\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  getCloudRegionDisplayName,\n  capitalize,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  isValidToken,\n  MAX_FILTER_LIMIT,\n  MIN_POLL_INTERVAL,\n  MAX_POLL_INTERVAL,\n};\n","import { useEffect, useState } from 'react';\n\nexport function getBrowserVisibilityProp() {\n  const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp() {\n    const doc: any = document;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden() {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility() {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  });\n  return {isVisible,setIsVisible};\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { Level, LevelItem, PageSection, PageSectionVariants, Title, AlertVariant } from '@patternfly/react-core';\nimport {\n  StreamsTableView,\n  FilterType,\n  CreateInstanceModal,\n  AlertProvider,\n  useAlerts,\n  InstanceDrawer,\n  CreateInstanceModalProvider,\n} from '@app/components';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport './OpenshiftStreams.css';\nimport { MASLoading, MASEmptyState, MASFullPageError } from '@app/common';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { InstanceStatus, MIN_POLL_INTERVAL, MAX_POLL_INTERVAL } from '@app/utils';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance, getConnectToInstancePath }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { isVisible } = usePageVisibility();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [isOpenCreateInstanceModal, setIsOpenCreateInstanceModal] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n  // const [pollInterval, setPollInterval] = useState<number>(MAX_POLL_INTERVAL);\n\n  const drawerRef = React.createRef<any>();\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken) && isVisible) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n        }\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy, isVisible]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  // uncomment if changing the poll interval is required for incomplete kafkas\n  // useEffect(() => {\n  //   if (kafkaInstanceItems) {\n  //     let allAreReady = true;\n  //     const statuses: string[] = [\n  //       InstanceStatus.ACCEPTED,\n  //       InstanceStatus.PREPARING,\n  //       InstanceStatus.PROVISIONING,\n  //       InstanceStatus.DEPROVISION,\n  //     ];\n  //     for (let i = 0; i < kafkaInstanceItems.length; i++) {\n  //       const item = kafkaInstanceItems[i];\n  //       if (item.status && statuses.includes(item.status)) {\n  //         allAreReady = false;\n  //         break;\n  //       }\n  //     }\n\n  //     if (!allAreReady) {\n  //       // Decrease the poll interval if any instance is not in ready or failed state\n  //       setPollInterval(MIN_POLL_INTERVAL);\n  //     } else {\n  //       // Increase the poll interval if all instances are in ready or failed state\n  //       setPollInterval(MAX_POLL_INTERVAL);\n  //     }\n  //   }\n  // }, [kafkaInstanceItems]);\n\n  useTimeout(() => fetchKafkas(true), MAX_POLL_INTERVAL);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  /**\n   * Show Unathorize page in case user is not authorize\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('you_do_not_have_access_to_openshift_streams'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('contact_your_organization_administration_for_more_information'),\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <AlertProvider>\n        <CreateInstanceModalProvider\n          value={{\n            isModalOpen: isOpenCreateInstanceModal,\n            setIsModalOpen: setIsOpenCreateInstanceModal,\n            onCreate,\n            cloudProviders,\n            mainToggle,\n            refresh: refreshKafkas,\n          }}\n        >\n          <InstanceDrawer\n            mainToggle={mainToggle}\n            isExpanded={selectedInstance != null}\n            activeTab={activeTab}\n            isLoading={instanceDetail === undefined}\n            instanceDetail={instanceDetail}\n            onClose={onCloseDrawer}\n            data-ouia-app-id=\"controlPlane-streams\"\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <MASLoading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <MASEmptyState\n                  titleProps={{\n                    title: t('you_do_not_have_any_kafka_instances_yet'),\n                    headingLevel: 'h4',\n                  }}\n                  emptyStateBodyProps={{\n                    body: t('create_a_kafka_instance_to_get_started'),\n                  }}\n                  buttonProps={{\n                    title: t('create_a_kafka_instance'),\n                    onClick: () => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModal),\n                    ['data-testid']: 'emptyStateStreams-buttonCreateKafka',\n                  }}\n                />\n                <CreateInstanceModal />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  getConnectToInstancePath={getConnectToInstancePath}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                  isDrawerOpen={selectedInstance !== null}\n                />\n              </PageSection>\n            )}\n          </InstanceDrawer>\n        </CreateInstanceModalProvider>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { ServiceRegistryHeader } from '@app/components';\n\nexport type ServiceRegistryProps = {\n  getConnectToInstancePath?: (data: any) => string;\n};\n\nexport const ServiceRegistry = ({ getConnectToInstancePath }: ServiceRegistryProps) => {\n  const onConnectToRegistry = () => {};\n\n  const onDeleteRegistry = () => {};\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <ServiceRegistryHeader name={''} onConnectToRegistry={onConnectToRegistry} onDeleteRegistry={onDeleteRegistry} />\n    </PageSection>\n  );\n};\n","import * as React from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { accessibleRouteChangeHandler } from '@app/utils/utils';\nimport { NotFound } from '@app/components';\nimport { useDocumentTitle } from '@app/utils/useDocumentTitle';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { OpenshiftStreamsConnected } from '@app/OpenshiftStreams';\nimport { ServiceRegistryConnected } from '@app/ServiceRegistry';\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: OpenshiftStreamsConnected,\n    exact: true,\n    // t('openshift_streams')\n    label: 'OpenShift Streams',\n    path: '/',\n    title: 'OpenShift Streams',\n  },\n  {\n    component: ServiceRegistryConnected,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry',\n    title: 'Service Registry',\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return <Component {...rest} {...routeProps} />;\n  }\n\n  return <Route render={routeWithTitle} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFound} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => {\n  const { t } = useTranslation();\n  return (\n    <LastLocationProvider>\n      <Switch>\n        {flattenedRoutes.map(({ path, exact, component, title, isAsync }, idx) => (\n          <RouteWithTitleUpdates\n            path={path}\n            exact={exact}\n            component={component}\n            key={idx}\n            title={title}\n            isAsync={isAsync}\n          />\n        ))}\n        <PageNotFound title={t('404_page_not_found')} />\n      </Switch>\n    </LastLocationProvider>\n  );\n};\n\nexport { AppRoutes, routes };\n","import Keycloak, { KeycloakInstance, KeycloakTokenParsed } from 'keycloak-js';\n\nexport let keycloak: KeycloakInstance | undefined;\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async () => {\n  if (!keycloak) await init();\n  return keycloak;\n}\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async () => {\n  try {\n    keycloak = new (Keycloak as any)();\n    if (keycloak) {\n      await keycloak.init({\n        onLoad: 'login-required'\n      });\n    }\n  } catch {\n    keycloak = undefined;\n    console.warn('Auth: Unable to initialize keycloak. Client side will not be configured to use authentication');\n  }\n}\n\n\n/**\n * This function keeps getting called by wslink\n * connection param function, so carry out\n * an early return if keycloak is not initialized\n * otherwise get the auth token\n *\n * @return authorization header or empty string\n *\n */\nexport const getAuthHeader = async () => {\n  if (!keycloak) return '';\n  return {\n    'authorization': `Bearer ${await getKeyCloakToken()}`\n  };\n};\n\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getKeyCloakToken = async (): Promise<string> => {\n  await keycloak?.updateToken(50);\n  if (keycloak?.token) return keycloak.token;\n  console.error('No keycloak token available');\n  return 'foo';\n}\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getParsedKeyCloakToken = async (): Promise<KeycloakTokenParsed> => {\n  await keycloak?.updateToken(50);\n  if (keycloak?.tokenParsed) return keycloak.tokenParsed;\n  console.error('No keycloak token available');\n  return {} as KeycloakTokenParsed;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined) => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n}\n","import * as React from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { AppLayout } from '@app/AppLayout/AppLayout';\nimport { AppRoutes } from '@app/routes';\nimport '@app/app.css';\nimport { getKeycloakInstance } from './auth/keycloak/keycloakAuth';\nimport { MASLoading } from '@app/common';\nimport { KeycloakAuthProvider, KeycloakContext } from '@app/auth/keycloak/KeycloakContext';\nimport '../i18n/i18n';\nimport { ErrorBoundary } from '@app/components/ErrorBoundary';\n\nlet keycloak: Keycloak.KeycloakInstance | undefined;\n\nconst App: React.FunctionComponent = () => {\n  const [initialized, setInitialized] = React.useState(false);\n\n  // Initialize the client\n  React.useEffect(() => {\n    const init = async () => {\n      keycloak = await getKeycloakInstance();\n      setInitialized(true);\n    };\n    init();\n  }, []);\n\n  if (!initialized) return <MASLoading />;\n\n  // TODO - index doing router is not desired.\n  // Split to App.tsx etc.\n  return (\n    <KeycloakContext.Provider value={{ keycloak, profile: keycloak?.profile }}>\n      <KeycloakAuthProvider>\n        <Router>\n          <React.Suspense fallback={<MASLoading />}>\n            <ErrorBoundary>\n              <AppLayout>\n                <AppRoutes />\n              </AppLayout>\n            </ErrorBoundary>\n          </React.Suspense>\n        </Router>\n      </KeycloakAuthProvider>\n    </KeycloakContext.Provider>\n  );\n};\nexport { App };\n","import React from 'react';\nimport { KafkaRequest } from '../../openapi';\nimport { OpenshiftStreams } from '@app/OpenshiftStreams/OpenshiftStreams';\nimport { AlertProvider } from '@app/components/Alerts/Alerts';\nimport { ApiContext } from '@app/api/ApiContext';\n\ndeclare const __BASE_PATH__: string;\n\nexport const OpenshiftStreamsConnected = () => {\n  return (\n    <ApiContext.Provider value={\n      {\n        basePath: __BASE_PATH__\n      }\n    }>\n      <AlertProvider>\n        <OpenshiftStreams onConnectToInstance={() => {}} getConnectToInstancePath={() => \"\"} />\n      </AlertProvider>\n    </ApiContext.Provider>\n  );\n};\n","import React from 'react';\nimport { ServiceRegistry } from './ServiceRegistry';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AlertProvider } from '@app/components/Alerts/Alerts';\n\ndeclare const __BASE_PATH__: string;\n\nexport const ServiceRegistryConnected = () => {\n  return (\n    <ApiContext.Provider\n      value={{\n        basePath: __BASE_PATH__,\n      }}\n    >\n      <AlertProvider>\n        <ServiceRegistry />\n      </AlertProvider>\n    </ApiContext.Provider>\n  );\n};\n","import React from 'react';\nimport { KeycloakInstance, KeycloakProfile } from 'keycloak-js';\nimport { getKeyCloakToken, getParsedKeyCloakToken } from '@app/auth/keycloak/keycloakAuth';\nimport { AuthContext, IAuthContext } from '@app/auth/AuthContext';\n\n// This is a context which can manage the keycloak\nexport interface IKeycloakContext {\n  keycloak?: KeycloakInstance | undefined\n  profile?: KeycloakProfile | undefined\n}\n\nexport const KeycloakContext = React.createContext<IKeycloakContext>({ keycloak: undefined });\n\nexport const KeycloakAuthProvider = (props) => {\n\n  const getUsername = () => {\n    return getParsedKeyCloakToken().then(token => token['username']);\n  }\n\n  const authTokenContext = {\n    getToken: getKeyCloakToken,\n    getUsername: getUsername\n  } as IAuthContext;\n  return (\n    <AuthContext.Provider value={authTokenContext}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport { NavLink, useLocation, useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Nav,\n  NavList,\n  NavItem,\n  NavExpandable,\n  Page,\n  PageHeader,\n  PageSidebar,\n  SkipToContent,\n  PageHeaderTools,\n} from '@patternfly/react-core';\nimport { routes, IAppRoute, IAppRouteGroup } from '@app/routes';\nimport logo from '@app/bgimages/Patternfly-Logo.svg';\nimport { KeycloakContext } from '@app/auth/keycloak/KeycloakContext';\n\ninterface IAppLayout {\n  children: React.ReactNode;\n}\n\nconst AppLayout: React.FunctionComponent<IAppLayout> = ({ children }) => {\n  const [isNavOpen, setIsNavOpen] = React.useState(true);\n  const [isMobileView, setIsMobileView] = React.useState(true);\n  const [isNavOpenMobile, setIsNavOpenMobile] = React.useState(false);\n\n  const keycloakContext = React.useContext(KeycloakContext);\n\n  const location = useLocation();\n\n  const onNavToggleMobile = () => {\n    setIsNavOpenMobile(!isNavOpenMobile);\n  };\n  const onNavToggle = () => {\n    setIsNavOpen(!isNavOpen);\n  };\n  const onPageResize = (props: { mobileView: boolean; windowSize: number }) => {\n    setIsMobileView(props.mobileView);\n  };\n\n  const { t } = useTranslation();\n\n  function LogoImg() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return <img src={logo} onClick={handleClick} alt=\"PatternFly Logo\" />;\n  }\n\n  if (!keycloakContext.keycloak) {\n    return (\n      // TODO handle this error properly!\n      <div>403 Unauthorized</div>\n    );\n  }\n\n  if (!keycloakContext.keycloak.authenticated) {\n    // force the user to log in\n    return keycloakContext.keycloak?.login();\n  }\n\n  const email = keycloakContext.keycloak.tokenParsed && keycloakContext.keycloak.tokenParsed['email'];\n\n  const HeaderTools = <PageHeaderTools>{email}</PageHeaderTools>;\n\n  const Header = (\n    <PageHeader\n      logo={<LogoImg />}\n      showNavToggle\n      isNavOpen={isNavOpen}\n      headerTools={HeaderTools}\n      onNavToggle={isMobileView ? onNavToggleMobile : onNavToggle}\n      aria-label={t('global_navigation')}\n    />\n  );\n\n  const renderNavItem = (route: IAppRoute, index: number) => {\n    return (\n      <NavItem key={`${route.label}-${index}`} id={`${route.label}-${index}`}>\n        <NavLink exact to={route.path} activeClassName=\"pf-m-current\">\n          {route?.label && t(route.label)}\n        </NavLink>\n      </NavItem>\n    );\n  };\n\n  const renderNavGroup = (group: IAppRouteGroup, groupIndex: number) => (\n    <NavExpandable\n      key={`${group.label}-${groupIndex}`}\n      id={`${group.label}-${groupIndex}`}\n      title={group.label}\n      isActive={group.routes.some((route) => route.path === location.pathname)}\n      // aria-label={t()}\n    >\n      {group.routes.map((route, idx) => route.label && renderNavItem(route, idx))}\n    </NavExpandable>\n  );\n\n  const Navigation = (\n    <Nav id=\"nav-primary-simple\" role=\"navigation\" theme=\"dark\" aria-label={t('global')}>\n      <NavList id=\"nav-list-simple\">\n        {routes.map(\n          (route, idx) => route.label && (!route.routes ? renderNavItem(route, idx) : renderNavGroup(route, idx))\n        )}\n      </NavList>\n    </Nav>\n  );\n  const Sidebar = <PageSidebar theme=\"dark\" nav={Navigation} isNavOpen={isMobileView ? isNavOpenMobile : isNavOpen} />;\n  const PageSkipToContent = <SkipToContent href=\"#primary-app-container\">{t('skip_to_content')}</SkipToContent>;\n  return (\n    <Page\n      mainContainerId=\"primary-app-container\"\n      role=\"main\"\n      header={Header}\n      sidebar={Sidebar}\n      onPageResize={onPageResize}\n      skipToContent={PageSkipToContent}\n    >\n      {children}\n    </Page>\n  );\n};\n\nexport { AppLayout };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from '@app/index';\n\nif (process.env.NODE_ENV !== \"production\") {\n  const config = {\n    rules: [\n      {\n        id: 'color-contrast',\n        enabled: false\n      }\n    ]\n  };\n  // eslint-disable-next-line @typescript-eslint/no-var-requires, no-undef\n  const axe = require(\"react-axe\");\n  axe(React, ReactDOM, 1000, config);\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof Metric\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof Metric\n     */\n    values?: Array<Values>;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList extends MetricsListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByKafkaId.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByKafkaId(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList> {\n            return DefaultApiFp(configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"],"sourceRoot":""}