{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreamsFederated.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/Alerts.tsx","webpack://mk-ui-frontend/./src/app/utils/utils.ts"],"names":["token","onConnectToInstance","authContext","alertContext","addAlert","value","AlertContext","createContext","useAlerts","useContext","cloudProviderOptions","label","getCloudProviderDisplayName","find","option","cloudRegionOptions","getCloudRegionDisplayName","capitalize","s","charAt","toUpperCase","slice"],"mappings":"sMAmCA,QApBkC,SAAC,G,IAAEA,EAAK,QAAEC,EAAmB,sBAEvDC,EAAc,CAClBF,MAAK,GAGDG,EAAe,CACnBC,SAPqE,YAWvE,OACE,kBAAC,cAAqB,CAACC,MAAOF,GAC5B,kBAAC,aAAoB,CAACE,MAAOH,GAC3B,kBAAC,IAAgB,CAACD,oBAAqBA,Q,gFCfxC,IAAMK,GAAe,IAAAC,eAAiC,CAC3DH,SAAU,eAGCI,EAAY,WAAM,WAAAC,YAAWH,K,0HCJ1C,IAAMI,EAA0C,CAC9C,CAAEL,MAAO,MAAOM,MAAO,wBAUnBC,EAA8B,SAACP,G,MACnC,OAAoE,QAA7D,EAAAK,EAAqBG,MAAK,SAACC,GAAW,OAAAA,EAAOT,QAAUA,YAAM,eAAEM,QAASN,GAG3EU,EAAwC,CAC5C,CAAEV,MAAO,YAAaM,MAAO,yBAoBzBK,EAA4B,SAACX,G,MACjC,OAAkE,QAA3D,EAAAU,EAAmBF,MAAK,SAACC,GAAW,OAAAA,EAAOT,QAAUA,YAAM,eAAEM,QAASN,GAGzEY,EAAa,SAACC,GAClB,OAAOA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM","file":"34.f6cab9f983051a0f5900.js","sourcesContent":["import React from 'react';\nimport { OpenshiftStreams } from './OpenshiftStreams';\nimport { AuthContext, IAuthContext } from '@app/auth/AuthContext';\nimport { KafkaRequest } from '../../openapi';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { AlertContext, AlertContextProps } from '@app/components/Alerts/Alerts';\n\n// Version of OpenshiftStreams for federation\n\nexport type OpenshiftStreamsFederatedProps = {\n  token: string;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n};\n\nconst OpenshiftStreamsFederated = ({ token, onConnectToInstance, addAlert }: OpenshiftStreamsFederatedProps) => {\n\n  const authContext = {\n    token\n  } as IAuthContext;\n\n  const alertContext = {\n    addAlert\n  } as AlertContextProps;\n\n\n  return (\n    <AlertContext.Provider value={alertContext}>\n      <AuthContext.Provider value={authContext}>\n        <OpenshiftStreams onConnectToInstance={onConnectToInstance}></OpenshiftStreams>\n      </AuthContext.Provider>\n    </AlertContext.Provider>\n  )\n};\n\nexport default OpenshiftStreamsFederated;\n","import React, {\n  useState,\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n} from \"react\";\nimport { AlertType, AlertToastGroup } from \"./AlertToastGroup\";\nimport { AlertVariant } from \"@patternfly/react-core\";\n\nexport type AlertContextProps = {\n  addAlert: (message: string, variant?: AlertVariant) => void;\n};\n\nexport const AlertContext = createContext<AlertContextProps>({\n  addAlert: () => {},\n});\n\nexport const useAlerts = () => useContext(AlertContext);\n\ntype TimeOut = {\n  key: number;\n  timeOut: NodeJS.Timeout;\n};\n\nexport const AlertProvider = ({ children }: { children: ReactNode }) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const createId = () => new Date().getTime();\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <AlertToastGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\ntype KeyValueOptions = {\n  value: string;\n  label: string;\n};\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\nconst getCloudProviderDisplayName = (value: string) => {\n  return cloudProviderOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-1', label: 'EU, Ireland' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, SÃ£o Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\nconst getCloudRegionDisplayName = (value: string) => {\n  return cloudRegionOptions.find((option) => option.value === value)?.label || value;\n};\n\nconst capitalize = (s: string) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  getCloudRegionDisplayName,\n  capitalize,\n};\n"],"sourceRoot":""}