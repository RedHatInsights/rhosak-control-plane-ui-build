{"version":3,"file":"8364.dc2dee71.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/components/UserUnauthorized.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsEmpty.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableSection.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableConnected.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { MASEmptyState } from '@app/common';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\n\nexport const UserUnauthorized: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: 'noPadding' }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t(\n            'serviceAccount.unauthorized_access_to_service_accounts_title'\n          ),\n          headingLevel: 'h2',\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            'serviceAccount.unauthorized_access_to_service_accounts_info'\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { ModalType, useModal } from '@rhoas/app-services-ui-shared';\n\nexport type ServiceAccountsEmptyProps = {\n  fetchServiceAccounts: () => Promise<void>;\n};\nexport const ServiceAccountsEmpty: React.FunctionComponent<ServiceAccountsEmptyProps> =\n  ({ fetchServiceAccounts }) => {\n    const { showModal } = useModal<ModalType.KasCreateServiceAccount>();\n\n    const handleCreateModal = () => {\n      showModal(ModalType.KasCreateServiceAccount, {\n        onCreate: fetchServiceAccounts,\n      });\n    };\n\n    const { t } = useTranslation();\n    return (\n      <PageSection padding={{ default: 'noPadding' }} isFilled>\n        <MASEmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoItems,\n          }}\n          titleProps={{\n            title: t('serviceAccount.you_do_not_have_any_service_accounts_yet'),\n          }}\n          emptyStateBodyProps={{\n            body: t('serviceAccount.create_service_account_to_get_started'),\n          }}\n          buttonProps={{\n            title: t('serviceAccount.create_service_account'),\n            onClick: handleCreateModal,\n            ['data-testid']: 'emptyStateStreams-buttonCreateServiceAccount',\n          }}\n        />\n      </PageSection>\n    );\n  };\n","import React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  TextInput,\n  ToolbarChip,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { MASToolbar, ToolbarItemProps } from '@app/common';\n\nexport type ServiceAccountsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreateServiceAccount: () => void;\n  mainToggle?: boolean;\n};\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nconst ServiceAccountsToolbar: React.FC<ServiceAccountsToolbarProps> = ({\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  onCreateServiceAccount: onCreateServiceAccount,\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation();\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState<boolean>(false);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n  ];\n\n  const onClearAllFilters = () => {\n    setFilteredValue([]);\n  };\n\n  const onToggleFilter = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const updateFilter = (\n    key: string,\n    filter: FilterValue,\n    removeIfPresent: boolean\n  ) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        // index of current filter value in applied filter\n        const filterValueIndex = filterValue.filterValue.findIndex(\n          (f) => f.value === filter.value\n        );\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (\n      filterType === 'name' &&\n      nameInputValue &&\n      nameInputValue.trim() != ''\n    ) {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (\n      filterType === 'owner' &&\n      ownerInputValue &&\n      ownerInputValue.trim() != ''\n    ) {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter(\n          'owner',\n          { value: ownerInputValue, isExact: false },\n          false\n        );\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onInputPress = (event: any) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const onSelect = (_, selection: string | SelectOptionObject) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter(\n      (filter) => filter.filterKey === key\n    );\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (\n    category: string,\n    chip: string | ToolbarChip,\n    filterOptions?: Array<any>\n  ) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    const prevFilterValue: FilterValue[] = Object.assign(\n      [],\n      newFilteredValue[filterIndex]?.filterValue\n    );\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find(\n        (option) => option.label === chip.toString()\n      )?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex(\n      (val) => val.value === filterChip\n    );\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex(\n      (filter) => filter.filterKey === category\n    );\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant='filter-group'>\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label='Select filter'\n            onToggle={onToggleFilter}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption\n                isDisabled={option.disabled}\n                key={index}\n                value={option.value}\n              >\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className='mk--filter-instances__toolbar--text-input'>\n                <TextInput\n                  name='name'\n                  id='name-input'\n                  type='search'\n                  aria-label={t('filter_by_name_lower')}\n                  validated={\n                    !isNameValid || isMaxFilter\n                      ? ValidatedOptions.error\n                      : ValidatedOptions.default\n                  }\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label={t('filter_by_name_lower')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected?.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className='mk--filter-instances__toolbar--text-input'>\n                <TextInput\n                  name='owner'\n                  id='owner-input'\n                  type='search'\n                  aria-label={t('filter_by_owner')}\n                  placeholder={t('filter_by_owner')}\n                  validated={\n                    !isOwnerValid || isMaxFilter\n                      ? ValidatedOptions.error\n                      : ValidatedOptions.default\n                  }\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label={t('filter_by_owner')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant='primary'\n          onClick={onCreateServiceAccount}\n          data-testid={'tableServiceAccounts-buttonCreateServiceAccount'}\n        >\n          {t('serviceAccount.create_service_account')}\n        </Button>\n      ),\n    },\n  ];\n  /**\n   * Todo: uncomment code when API start support pagination\n   */\n  // if (total && total > 0 && toolbarItems.length === 1) {\n  //   toolbarItems.push({\n  //     item: (\n  //       <MASPagination\n  //         widgetId=\"pagination-options-menu-top\"\n  //         itemCount={total}\n  //         page={page}\n  //         perPage={perPage}\n  //         isCompact={true}\n  //         titles={{\n  //           paginationTitle: t('minimal_pagination'),\n  //           perPageSuffix: t('per_page_suffix'),\n  //           toFirstPage: t('to_first_page'),\n  //           toPreviousPage: t('to_previous_page'),\n  //           toLastPage: t('to_last_page'),\n  //           toNextPage: t('to_next_page'),\n  //           optionsToggle: t('options_toggle'),\n  //           currPage: t('curr_page'),\n  //         }}\n  //       />\n  //     ),\n  //     variant: 'pagination',\n  //     alignment: { default: 'alignRight' },\n  //   });\n  // }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClearAllFilters,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  cellWidth,\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { Skeleton } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant, MASTable } from '@app/common';\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n} from '@app/utils';\nimport { ServiceAccountListItem } from '@rhoas/kafka-management-sdk';\nimport {\n  ServiceAccountsToolbar,\n  ServiceAccountsToolbarProps,\n} from './ServiceAccountsToolbar';\nimport { useAuth } from '@rhoas/app-services-ui-shared';\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  onCreateServiceAccount: () => void;\n};\n\nconst ServiceAccountsTableView: React.FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  total,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n  onCreateServiceAccount,\n  mainToggle,\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  useEffect(() => {\n    auth?.isOrgAdmin().then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n  }, [auth]);\n\n  const tableColumns = [\n    { title: t('common.name') },\n    { title: t('common.clientID') },\n    { title: t('common.owner'), transforms: [cellWidth(20)] },\n    { title: t('time_created') },\n  ];\n\n  const resetCredentials = (event, originalData: ServiceAccountListItem) => {\n    onResetCredentials && onResetCredentials(originalData);\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const deleteAccount = (event, originalData: ServiceAccountListItem) => {\n    onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!serviceAccountsDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: tableColumns.length,\n      });\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, owner, client_id, created_at } = row;\n      tableRow.push({\n        cells: [\n          name,\n          client_id,\n          owner,\n          { title: getFormattedDate(created_at, t('ago')) },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const buildActionResolver = (rowData: IRowData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps: any;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('common.reset_credentials'),\n        id: 'reset-credentials',\n        ['data-testid']: 'tableServiceAccounts-actionResetCredentials',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && resetCredentials(event, originalData),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_reset_service_account'),\n        },\n      },\n      {\n        title: t('serviceAccount.delete_service_account'),\n        id: 'delete-account',\n        ['data-testid']: 'tableServiceAccounts-actionDeleteAccount',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && deleteAccount(event, originalData),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_delete_service_account'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'client_id';\n      case 2:\n        return 'owner';\n      case 3:\n        return 'description';\n      case 4:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'client_id':\n        return 1;\n      case 'owner':\n        return 2;\n      case 'description':\n        return 3;\n      case 'created_at':\n        return 4;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (\n    _event: any,\n    columnIndex: number,\n    sortByDirection: SortByDirection\n  ) => {\n    setOrderBy &&\n      setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreateServiceAccount={onCreateServiceAccount}\n        mainToggle={mainToggle}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('serviceAccount.service_account_list'),\n          actionResolver: (rowData) => buildActionResolver(rowData),\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems &&\n        serviceAccountItems?.length < 1 &&\n        serviceAccountsDataLoaded && (\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoResult,\n            }}\n            titleProps={{\n              title: t('no_results_found'),\n            }}\n            emptyStateBodyProps={{\n              body: t('adjust_your_filters_and_try_again'),\n            }}\n          />\n        )}\n      {/* {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n","import { ServiceAccountListItem } from '@rhoas/kafka-management-sdk';\nimport { usePagination } from '@app/common';\nimport React, { useState } from 'react';\nimport { Card, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { useLocation } from 'react-router-dom';\nimport { FilterType } from '@app/modules/OpenshiftStreams/components';\nimport { ServiceAccountsTableView } from '@app/modules/ServiceAccounts/components/ServiceAccountsTableView';\nimport { ModalType, useModal } from '@rhoas/app-services-ui-shared';\n\nexport type ServiceAccountTableSectionProps = {\n  fetchServiceAccounts: () => Promise<void>;\n  serviceAccountItems: ServiceAccountListItem[];\n};\n\nexport const ServiceAccountsTableSection: React.FunctionComponent<ServiceAccountTableSectionProps> =\n  ({ fetchServiceAccounts, serviceAccountItems }) => {\n    const { showModal: showResetCredentialsModal } =\n      useModal<ModalType.KasResetServiceAccountCredentials>();\n    const { showModal: showCreateServiceAccountModal } =\n      useModal<ModalType.KasCreateServiceAccount>();\n    const { showModal: showDeleteServiceAccountModal } =\n      useModal<ModalType.KasDeleteServiceAccount>();\n    const location = useLocation();\n\n    const [orderBy, setOrderBy] = useState<string>('name asc');\n    const [filterSelected, setFilterSelected] = useState('name');\n    const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n    const searchParams = new URLSearchParams(location.search);\n    const { page = 1, perPage = 10 } = usePagination() || {};\n    const mainToggle = searchParams.has('user-testing');\n\n    const onResetCredentials = (serviceAccount: ServiceAccountListItem) => {\n      showResetCredentialsModal(ModalType.KasResetServiceAccountCredentials, {\n        serviceAccount,\n      });\n    };\n\n    const onCreateServiceAccount = () => {\n      showCreateServiceAccountModal(ModalType.KasCreateServiceAccount, {\n        onCreate: fetchServiceAccounts,\n      });\n    };\n\n    const onDeleteServiceAccount = (serviceAccount: ServiceAccountListItem) => {\n      showDeleteServiceAccountModal(ModalType.KasDeleteServiceAccount, {\n        serviceAccount,\n        onDelete: fetchServiceAccounts,\n      });\n    };\n\n    return (\n      <PageSection\n        className='mk--main-page__page-section--table pf-m-padding-on-xl'\n        variant={PageSectionVariants.default}\n        padding={{ default: 'noPadding' }}\n      >\n        <Card>\n          <ServiceAccountsTableView\n            page={page}\n            perPage={perPage}\n            total={/*serviceAccountList?.total ||*/ 1}\n            expectedTotal={0}\n            serviceAccountsDataLoaded={true}\n            serviceAccountItems={serviceAccountItems}\n            orderBy={orderBy}\n            setOrderBy={setOrderBy}\n            filterSelected={filterSelected}\n            setFilterSelected={setFilterSelected}\n            filteredValue={filteredValue}\n            setFilteredValue={setFilteredValue}\n            onResetCredentials={onResetCredentials}\n            onDeleteServiceAccount={onDeleteServiceAccount}\n            onCreateServiceAccount={onCreateServiceAccount}\n            mainToggle={mainToggle}\n          />\n        </Card>\n      </PageSection>\n    );\n  };\n","import { useTranslation } from 'react-i18next';\nimport { useAlert, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport React, { useEffect, useState } from 'react';\nimport {\n  Configuration,\n  SecurityApi,\n  ServiceAccountList,\n  ServiceAccountListItem,\n} from '@rhoas/kafka-management-sdk';\nimport { ErrorCodes, isServiceApiError, sortValues } from '@app/utils';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { UserUnauthorized } from '@app/modules/ServiceAccounts/components/UserUnauthorized';\nimport { MASLoading } from '@app/common';\nimport { ServiceAccountsEmpty } from '@app/modules/ServiceAccounts/components/ServiceAccountsEmpty';\nimport { ServiceAccountsTableSection } from '@app/modules/ServiceAccounts/components/ServiceAccountsTableSection';\n\nexport const ServiceAccountsTableConnected: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlert() || {};\n  const auth = useAuth();\n  const config = useConfig();\n\n  const [serviceAccountItems, setServiceAccountItems] = useState<\n    ServiceAccountListItem[] | undefined\n  >();\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n\n  const handleServerError = (error: Error) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert &&\n        addAlert({\n          variant: AlertVariant.danger,\n          title: t('common.something_went_wrong'),\n          description: reason,\n        });\n    }\n  };\n\n  const fetchServiceAccounts = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && config) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath: config?.ams?.apiBasePath,\n          })\n        );\n        await apisService.getServiceAccounts().then((response) => {\n          const serviceAccounts: ServiceAccountList = response?.data;\n          const items = serviceAccounts?.items || [];\n          const sortedServiceAccounts: ServiceAccountListItem[] | undefined =\n            sortValues<ServiceAccountListItem>(items, 'name', 'asc');\n          setServiceAccountItems(sortedServiceAccounts);\n        });\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  if (isUserUnauthorized) {\n    return <UserUnauthorized />;\n  }\n\n  if (serviceAccountItems === undefined) {\n    return (\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        <MASLoading />\n      </PageSection>\n    );\n  }\n  if (serviceAccountItems.length < 1) {\n    return <ServiceAccountsEmpty fetchServiceAccounts={fetchServiceAccounts} />;\n  }\n  return (\n    <ServiceAccountsTableSection\n      fetchServiceAccounts={fetchServiceAccounts}\n      serviceAccountItems={serviceAccountItems}\n    />\n  );\n};\n"],"names":["UserUnauthorized","t","useTranslation","PageSection","variant","PageSectionVariants","padding","default","isFilled","titleProps","title","headingLevel","emptyStateIconProps","icon","emptyStateBodyProps","body","ServiceAccountsEmpty","fetchServiceAccounts","showModal","useModal","emptyStateProps","buttonProps","onClick","ModalType","onCreate","ServiceAccountsToolbar","filterSelected","setFilterSelected","filteredValue","setFilteredValue","onCreateServiceAccount","nameInputRef","useRef","ownerInputRef","useState","isFilterExpanded","setIsFilterExpanded","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","label","value","disabled","isInputValid","test","trim","updateFilter","key","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","push","onFilter","filterType","isExact","onInputPress","event","fieldName","target","name","tooltipContent","getSelectionForFilter","selectedFilters","map","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","toolbarItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","isOpen","onSelect","_","selection","index","SelectOption","isDisabled","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","toLowerCase","InputGroup","className","TextInput","id","type","validated","ValidatedOptions","placeholder","onChange","input","onKeyPress","ref","Button","ButtonVariant","Tooltip","isVisible","content","reference","item","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","ServiceAccountsTableView","page","perPage","expectedTotal","total","serviceAccountsDataLoaded","serviceAccountItems","onResetCredentials","onDeleteServiceAccount","orderBy","setOrderBy","mainToggle","auth","useAuth","undefined","loggedInUser","setLoggedInUser","isOrgAdmin","setIsOrgAdmin","useEffect","getUsername","then","username","tableRow","loadingCount","tableColumns","transforms","cellWidth","buildActionResolver","rowData","additionalProps","originalData","isUserSameAsLoggedIn","owner","tooltip","style","pointerEvents","cursor","resolver","parentElement","previousSibling","focus","resetCredentials","tooltipProps","position","deleteAccount","getindexForSortParameter","parameter","tableProps","cells","rows","forEach","row","client_id","created_at","skeleton","Skeleton","actionResolver","onSort","_event","columnIndex","sortByDirection","getParameterForSortIndex","sortBy","sort","split","direction","SortByDirection","ServiceAccountsTableSection","showResetCredentialsModal","showCreateServiceAccountModal","showDeleteServiceAccountModal","location","useLocation","searchParams","URLSearchParams","search","has","Card","serviceAccount","onDelete","ServiceAccountsTableConnected","addAlert","useAlert","config","useConfig","setServiceAccountItems","isUserUnauthorized","setIsUserUnauthorized","kas","getToken","accessToken","SecurityApi","Configuration","basePath","ams","apiBasePath","getServiceAccounts","response","serviceAccounts","data","items","sortedServiceAccounts","error","reason","errorCode","code","AlertVariant","description","handleServerError"],"sourceRoot":""}