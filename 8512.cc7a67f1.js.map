{"version":3,"file":"8512.cc7a67f1.js","mappings":"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","sources":["webpack://kas-ui/./src/app/contexts/federated.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/FilterOwners.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/OwnerSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership.tsx","webpack://kas-ui/./src/app/utils/error.ts"],"sourcesContent":["import { createContext, useContext } from \"react\";\nimport { Principal } from \"@rhoas/app-services-ui-shared\";\n\nexport type FederatedProps = {\n  preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n  shouldOpenCreateModal: () => Promise<boolean>;\n  getAllUserAccounts?: () => Principal[];\n};\n\nexport const FederatedContext = createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import { useFederated } from \"@app/contexts\";\nimport { Principal } from \"@rhoas/app-services-ui-shared\";\n\nexport const filterUsers = (value: string, options: JSX.Element[]) => {\n  if (!value) {\n    return options;\n  }\n  const input = new RegExp(value, \"i\");\n  return options?.filter(\n    (userAccount) =>\n      input.test(userAccount.props.value) ||\n      input.test(userAccount.props.description)\n  );\n};\n\nexport const useGetAllUsers = () => {\n  const { getAllUserAccounts } = useFederated() || {\n    getAllUserAccounts: () => [],\n  };\n  const userAccounts = getAllUserAccounts && getAllUserAccounts();\n  return userAccounts?.map((userAccount: Principal) => {\n    const { id, displayName } = userAccount;\n    return {\n      id: id,\n      displayName: displayName,\n    };\n  });\n};\n","import { FC, useState } from \"react\";\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectProps,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { filterUsers } from \"./FilterOwners\";\nexport type allUsersType =\n  | {\n      id: string;\n      displayName: string | undefined;\n    }[]\n  | undefined;\nexport type OwnerSelectProps = {\n  selection: string | undefined;\n  setSelection: (value: string | undefined) => void;\n  allUsers: allUsersType;\n};\n\nexport const OwnerSelect: FC<OwnerSelectProps> = ({\n  selection,\n  setSelection,\n  allUsers,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const options = (allUsers || []).map((userAccount) => {\n    const { id, displayName } = userAccount;\n    return (\n      <SelectOption key={id} value={id} description={displayName}>\n        {id}\n      </SelectOption>\n    );\n  });\n  const onToggle = (isExpanded: boolean) => {\n    setIsOpen(isExpanded);\n  };\n  const onSelect: SelectProps[\"onSelect\"] = (\n    _,\n    selection: string | SelectOptionObject,\n    isPlaceholder: boolean | undefined\n  ) => {\n    if (isPlaceholder) {\n      clearSelection();\n    }\n    setSelection(selection.toString());\n    setIsOpen(false);\n  };\n  const clearSelection = () => {\n    setSelection(undefined);\n    setIsOpen(false);\n  };\n  const customFilter: SelectProps[\"onFilter\"] = (_, value: string) => {\n    return filterUsers(value, options);\n  };\n  return (\n    <Select\n      id=\"manage-permissions-owner-select\"\n      variant={SelectVariant.typeahead}\n      onToggle={onToggle}\n      isOpen={isOpen}\n      placeholderText={t(\"select_user_account\")}\n      createText={t(\"common.use\")}\n      menuAppendTo=\"parent\"\n      maxHeight={400}\n      onSelect={onSelect}\n      selections={selection}\n      isCreatable\n      onFilter={customFilter}\n    >\n      {options}\n    </Select>\n  );\n};\n","import { FC, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { OwnerSelect } from \"./OwnerSelect\";\nimport { useGetAllUsers } from \"./FilterOwners\";\nimport {\n  Form,\n  FormGroup,\n  Button,\n  AlertVariant,\n  Alert,\n  Modal,\n} from \"@patternfly/react-core\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaUpdateRequest,\n} from \"@rhoas/kafka-management-sdk\";\nimport {\n  BaseModalProps,\n  useAlert,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { ErrorCodes, isServiceApiError } from \"@app/utils/error\";\n\nexport type TransferOwnershipProps = {\n  kafka: KafkaRequest;\n  refreshKafkas: () => void;\n  onClose?: () => void;\n  hideModal: () => void;\n};\n\nexport const TransferOwnership: FC<TransferOwnershipProps & BaseModalProps> = ({\n  kafka,\n  onClose,\n  hideModal,\n  refreshKafkas,\n  variant,\n  title,\n}) => {\n  const { t } = useTranslation([\"kasTemporaryFixMe\"]);\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert() || { addAlert: () => \"\" };\n\n  //states\n  const [selection, setSelection] = useState<string | undefined>();\n  const [loading, setLoading] = useState<boolean>();\n  const [errorCode, setErrorCode] = useState<string | undefined>();\n\n  const onCloseModal = () => {\n    hideModal();\n    onClose && onClose();\n  };\n\n  const onSubmitTransferOwnership = async () => {\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken && selection?.trim() && kafka?.id) {\n      setLoading(true);\n      const kafkaUpdateRequest: KafkaUpdateRequest = { owner: selection };\n\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n\n      try {\n        await apisService\n          .updateKafkaById(kafka.id, kafkaUpdateRequest)\n          .then(() => {\n            refreshKafkas && refreshKafkas();\n            addAlert({\n              title: t(\"owner_change_sucess_title\"),\n              variant: AlertVariant.success,\n              description: t(\"owner_change_sucess_message\", {\n                newOwner: selection,\n                name: kafka?.name,\n              }),\n            });\n            setLoading(false);\n            onCloseModal();\n          });\n      } catch (error) {\n        let code: string | undefined;\n        if (isServiceApiError(error)) {\n          code = error.response?.data.code;\n        }\n        setErrorCode(code);\n        setLoading(false);\n      }\n    }\n  };\n\n  const renderAlert = () => {\n    let title, description;\n    if (errorCode === ErrorCodes.OWNER_DOES_NOT_EXIST) {\n      title = t(\"new_owner_does_not_exist_title\");\n      description = t(\"new_owner_does_not_exist_message\", {\n        newOwner: selection,\n      });\n    } else if (errorCode) {\n      title = t(\"can_not_change_owner_title\");\n      description = t(\"onwer_transfer_failed_message\", { name: kafka?.name });\n    }\n\n    if (title && description) {\n      return (\n        <Alert\n          variant={AlertVariant.danger}\n          aria-live=\"polite\"\n          isInline\n          title={title}\n        >\n          {description}\n        </Alert>\n      );\n    }\n\n    return <></>;\n  };\n\n  return (\n    <Modal\n      id=\"manage-permissions-modal\"\n      title={title}\n      isOpen={true}\n      onClose={onCloseModal}\n      variant={variant}\n      position=\"top\"\n      actions={[\n        <Button\n          id=\"confirm__button\"\n          key=\"changeowner\"\n          variant=\"primary\"\n          onClick={onSubmitTransferOwnership}\n          isLoading={loading}\n          isDisabled={!selection?.trim() || loading}\n        >\n          {t(\"common.change_owner\")}\n        </Button>,\n        <Button\n          id=\"cancel__button\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCloseModal}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        {renderAlert()}\n        <FormGroup fieldId=\"Current-owner-name\" label={t(\"current_owner_name\")}>\n          {kafka?.owner}\n        </FormGroup>\n        <FormGroup fieldId=\"New-owner-name\" label={t(\"new_owner_name\")}>\n          <OwnerSelect\n            selection={selection}\n            setSelection={setSelection}\n            allUsers={useGetAllUsers()}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default TransferOwnership;\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from \"@rhoas/kafka-management-sdk\";\n\nconst ErrorCodes = {\n  /** Forbidden to perform this action*/\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  /** Kafka cluster name is already used*/\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  /** The maximum number of allowed kafka instances has been reached*/\n  INTERNAL_CAPACITY_ERROR: APIErrorCodes.ERROR_24,\n  /** Insufficient quota*/\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  /** Forbidden to create more instances than the maximum allowed*/\n  TRIAL_USED: APIErrorCodes.ERROR_5,\n  /** Failed to check quota*/\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  /** Bad request*/\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n"],"names":["FederatedContext","createContext","undefined","useFederated","useContext","useGetAllUsers","getAllUserAccounts","userAccounts","map","userAccount","id","displayName","OwnerSelect","selection","setSelection","allUsers","t","useTranslation","isOpen","setIsOpen","useState","options","SelectOption","value","description","clearSelection","Select","variant","SelectVariant","onToggle","isExpanded","placeholderText","createText","menuAppendTo","maxHeight","onSelect","_","isPlaceholder","toString","selections","isCreatable","onFilter","input","RegExp","filter","test","props","filterUsers","TransferOwnership","kafka","onClose","hideModal","refreshKafkas","title","auth","useAuth","kas","apiBasePath","basePath","useConfig","addAlert","useAlert","loading","setLoading","errorCode","setErrorCode","onCloseModal","Modal","position","actions","Button","onClick","accessToken","getToken","trim","kafkaUpdateRequest","owner","apisService","DefaultApi","Configuration","updateKafkaById","then","AlertVariant","newOwner","name","error","code","response","data","isLoading","isDisabled","Form","Alert","isInline","renderAlert","FormGroup","fieldId","label","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","INTERNAL_CAPACITY_ERROR","INSUFFICIENT_QUOTA","TRIAL_USED","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST"],"sourceRoot":""}