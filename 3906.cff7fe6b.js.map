{"version":3,"file":"3906.cff7fe6b.js","mappings":"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","sources":["webpack://kas-ui/./src/app/hooks/usePageVisibility.ts","webpack://kas-ui/./src/app/modals/KasModalLoader.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawerContent.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/InstanceDrawer.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/contexts/InstanceDrawerContext.tsx","webpack://kas-ui/./src/app/modules/InstanceDrawer/tabs.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/Pagination.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable.tsx","webpack://kas-ui/./src/app/hooks/useTimeout.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsTableConnected/StreamsTableConnected.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StatusColumn/StatusColumn.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/hooks.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/NameFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/RegionFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/FilterSelect.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StatusFilter.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/StreamsToolbar/StreamsToolbar.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/Unauthorized/Unauthorized.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KafkaEmptyState/KafkaEmptyState.tsx","webpack://kas-ui/./src/app/modules/OpenshiftStreams/components/KasLayout/KasLayout.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\ntype XDocument = Document & {\n  msHidden: string;\n  webkitHidden: string;\n};\n\nexport function getBrowserVisibilityProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    // Opera 12.10 and Firefox 18 and later support\n    return 'visibilitychange';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msvisibilitychange';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitvisibilitychange';\n  }\n  return '';\n}\nexport function getBrowserDocumentHiddenProp(): string {\n  const doc: XDocument = document as XDocument;\n  if (typeof doc.hidden !== 'undefined') {\n    return 'hidden';\n  } else if (typeof doc.msHidden !== 'undefined') {\n    return 'msHidden';\n  } else if (typeof doc.webkitHidden !== 'undefined') {\n    return 'webkitHidden';\n  }\n  return '';\n}\nexport function getIsDocumentHidden(): boolean {\n  return !document[getBrowserDocumentHiddenProp()];\n}\n\nexport function usePageVisibility(): {\n  isVisible: boolean;\n  setIsVisible: React.Dispatch<React.SetStateAction<boolean>>;\n} {\n  const [isVisible, setIsVisible] = useState(getIsDocumentHidden());\n  const onVisibilityChange = () => setIsVisible(getIsDocumentHidden());\n  useEffect(() => {\n    const visibilityChange = getBrowserVisibilityProp();\n    document.addEventListener(visibilityChange, onVisibilityChange, false);\n    return () => {\n      document.removeEventListener(visibilityChange, onVisibilityChange);\n    };\n  }, []);\n  return { isVisible, setIsVisible };\n}\n","// A map of modal components to their lazy loaded implementations\nimport React from 'react';\n\nimport { useTranslation } from 'react-i18next';\nimport {\n  CreateInstanceProps,\n  CreateServiceAccountProps,\n  DeleteInstanceProps,\n  DeleteServiceAccountProps,\n  ModalRegistry,\n  ModalType,\n  ResetServiceAccountCredentialsProps,\n  useModal,\n  TransferOwnershipProps,\n} from '@rhoas/app-services-ui-shared';\n\nexport const useKasModals = (): ModalRegistry => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  return {\n    [ModalType.KasCreateInstance]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<CreateInstanceProps>\n      >,\n      variant: 'medium',\n      title: t('create_a_kafka_instance'),\n    },\n    [ModalType.KasDeleteInstance]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/OpenshiftStreams/dialogs/DeleteInstance/DeleteInstanceConnected'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<DeleteInstanceProps>\n      >,\n      variant: 'small',\n    },\n    [ModalType.KasTransferOwnership]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/OpenshiftStreams/dialogs/TransferOwnership/TransferOwnership'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<TransferOwnershipProps>\n      >,\n      variant: 'medium',\n      title: t('change_owner'),\n    },\n    [ModalType.KasCreateServiceAccount]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ServiceAccounts/dialogs/CreateServiceAccount/CreateServiceAccountConnected'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<CreateServiceAccountProps>\n      >,\n      variant: 'medium',\n      title: t('serviceAccount.create_a_service_account'),\n    },\n    [ModalType.KasDeleteServiceAccount]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ServiceAccounts/dialogs/DeleteServiceAccount/DeleteServiceAccount'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<DeleteServiceAccountProps>\n      >,\n      title: t('serviceAccount.delete_service_account') + '?',\n      variant: 'small',\n    },\n    [ModalType.KasResetServiceAccountCredentials]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ServiceAccounts/dialogs/ResetServiceAccountCredentials/ResetServiceAccountCredentials'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<ResetServiceAccountCredentialsProps>\n      >,\n      title: `${t('serviceAccount.reset_service_account_credentials')}?`,\n      variant: 'medium',\n    },\n  };\n};\n\nexport const KasModalLoader: React.FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const modals = useKasModals();\n  registerModals(modals);\n  return <></>;\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/utils';\nimport { MASLoading } from '@app/common';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { ConnectionTabProps } from '@app/modules/InstanceDrawer/ConnectionTab';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\n\nexport const ResourcesTab = React.lazy(() => import('./ConnectionTab'));\nexport const DetailsTab = React.lazy(() => import('./DetailsTab'));\n\nexport type InstanceDrawerContentProps = Pick<\n  ConnectionTabProps,\n  'tokenEndPointUrl'\n>;\n\nexport const InstanceDrawerContent: React.FunctionComponent<InstanceDrawerContentProps> =\n  ({ tokenEndPointUrl }) => {\n    const { t } = useTranslation(['kasTemporaryFixMe']);\n\n    const { instanceDrawerTab, setInstanceDrawerTab, instanceDrawerInstance } =\n      useInstanceDrawer();\n\n    const selectTab = (tab: string | number) => {\n      if (tab === InstanceDrawerTab.CONNECTION) {\n        setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n      } else {\n        setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n      }\n    };\n\n    const getExternalServer = () => {\n      const { bootstrap_server_host } = instanceDrawerInstance || {};\n      return bootstrap_server_host?.endsWith(':443')\n        ? bootstrap_server_host\n        : `${bootstrap_server_host}:443`;\n    };\n\n    const isKafkaPending =\n      instanceDrawerInstance?.status === InstanceStatus.ACCEPTED ||\n      instanceDrawerInstance?.status === InstanceStatus.PREPARING;\n\n    return (\n      <React.Suspense fallback={<MASLoading />}>\n        <Tabs\n          activeKey={instanceDrawerTab.toString()}\n          onSelect={(_, tab) => selectTab(tab)}\n        >\n          <Tab\n            eventKey={InstanceDrawerTab.DETAILS.toString()}\n            title={<TabTitleText>{t('details')}</TabTitleText>}\n          >\n            <DetailsTab />\n          </Tab>\n          <Tab\n            eventKey={InstanceDrawerTab.CONNECTION.toString()}\n            title={<TabTitleText>{t('connection')}</TabTitleText>}\n            data-testid='drawerStreams-tabConnect'\n          >\n            <ResourcesTab\n              externalServer={getExternalServer()}\n              isKafkaPending={isKafkaPending}\n              tokenEndPointUrl={tokenEndPointUrl}\n              instanceId={instanceDrawerInstance?.id}\n            />\n          </Tab>\n        </Tabs>\n      </React.Suspense>\n    );\n  };\n","import React, { ReactElement, useMemo, VoidFunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport { MASDrawer, MASDrawerProps } from '@app/common';\nimport './InstanceDrawer.css';\nimport {\n  InstanceDrawerContent,\n  InstanceDrawerContentProps,\n} from '@app/modules/InstanceDrawer/InstanceDrawerContent';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type InstanceDrawerProps = Omit<\n  MASDrawerProps,\n  | 'drawerHeaderProps'\n  | 'panelBodyContent'\n  | '[data-ouia-app-id]'\n  | 'isExpanded'\n  | 'isLoading'\n  | 'onClose'\n  | 'notRequiredDrawerContentBackground'\n  | 'children'\n> &\n  InstanceDrawerContentProps & {\n    renderContent: (props: {\n      openDrawer: () => void;\n      closeDrawer: () => void;\n      setInstance: (instance: KafkaRequest) => void;\n    }) => ReactElement;\n  };\n\nconst InstanceDrawer: VoidFunctionComponent<InstanceDrawerProps> = ({\n  renderContent,\n  'data-ouia-app-id': dataOuiaAppId,\n  tokenEndPointUrl,\n}) => {\n  dayjs.extend(localizedFormat);\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const {\n    isInstanceDrawerOpen,\n    instanceDrawerInstance,\n    openInstanceDrawer,\n    closeInstanceDrawer,\n    setInstanceDrawerInstance,\n    noInstances,\n  } = useInstanceDrawer();\n\n  const content = useMemo(\n    () =>\n      renderContent({\n        closeDrawer: closeInstanceDrawer,\n        openDrawer: openInstanceDrawer,\n        setInstance: setInstanceDrawerInstance,\n      }),\n    []\n  );\n\n  return (\n    <MASDrawer\n      isExpanded={isInstanceDrawerOpen}\n      isLoading={instanceDrawerInstance === undefined}\n      onClose={closeInstanceDrawer}\n      panelBodyContent={\n        <InstanceDrawerContent tokenEndPointUrl={tokenEndPointUrl} />\n      }\n      drawerHeaderProps={{\n        text: { label: t('instance_name') },\n        title: { value: instanceDrawerInstance?.name, headingLevel: 'h1' },\n      }}\n      data-ouia-app-id={dataOuiaAppId}\n      notRequiredDrawerContentBackground={noInstances}\n    >\n      {content}\n    </MASDrawer>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useState } from 'react';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\nimport { KafkaInstance } from '@rhoas/app-services-ui-shared';\n\nexport type InstanceDrawerContextProps = {\n  isInstanceDrawerOpen: boolean;\n  instanceDrawerTab: InstanceDrawerTab;\n  setInstanceDrawerTab: (tab: InstanceDrawerTab) => void;\n  openInstanceDrawer: (tab?: InstanceDrawerTab) => void;\n  closeInstanceDrawer: () => void;\n  instanceDrawerInstance: KafkaInstance | undefined;\n  setInstanceDrawerInstance: (instance: KafkaInstance) => void;\n  setNoInstances: (noInstances: boolean) => void;\n  noInstances: boolean;\n};\n\nexport const InstanceDrawerContext = React.createContext<\n  InstanceDrawerContextProps | undefined\n>(undefined);\n\nexport const useInstanceDrawer = (): InstanceDrawerContextProps => {\n  const answer = useContext(InstanceDrawerContext);\n  if (answer === undefined) {\n    throw new Error('must be used inside a InstanceDrawerContext provider');\n  }\n  return answer;\n};\n\nexport type InstanceDrawerContextProviderProps = {\n  initialTab?: InstanceDrawerTab;\n  initialInstance?: KafkaInstance;\n  initialNoInstances?: boolean;\n};\n\nexport const InstanceDrawerContextProvider: React.FunctionComponent<InstanceDrawerContextProviderProps> =\n  ({ initialTab, initialInstance, initialNoInstances = false, children }) => {\n    const defaultTab = InstanceDrawerTab.DETAILS;\n    const [instanceDrawerTab, setInstanceDrawerTab] = useState<\n      InstanceDrawerTab | undefined\n    >(initialTab);\n    const [instanceDrawerInstance, setInstanceDrawerInstance] = useState<\n      KafkaInstance | undefined\n    >(initialInstance);\n    const [noInstances, setNoInstances] = useState<boolean>(initialNoInstances);\n    return (\n      <InstanceDrawerContext.Provider\n        value={{\n          isInstanceDrawerOpen: instanceDrawerTab !== undefined,\n          instanceDrawerTab:\n            instanceDrawerTab === undefined ? defaultTab : instanceDrawerTab,\n          setInstanceDrawerTab,\n          instanceDrawerInstance,\n          setInstanceDrawerInstance,\n          setNoInstances,\n          noInstances,\n          openInstanceDrawer: (tab) => {\n            if (tab) {\n              setInstanceDrawerTab(tab);\n            } else {\n              setInstanceDrawerTab(defaultTab);\n            }\n          },\n          closeInstanceDrawer: () => {\n            setInstanceDrawerTab(undefined);\n            setInstanceDrawerInstance(undefined);\n          },\n        }}\n      >\n        {children}\n      </InstanceDrawerContext.Provider>\n    );\n  };\n","export enum InstanceDrawerTab {\n  DETAILS = 'details',\n  CONNECTION = 'connection',\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MASPagination } from '@app/common';\nimport { PaginationVariant } from '@patternfly/react-core';\n\nexport type PaginationProps = {\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nexport const Pagination: React.FunctionComponent<PaginationProps> = ({\n  total,\n  page,\n  perPage,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  if (total > 0) {\n    return (\n      <MASPagination\n        widgetId='pagination-cloudProviderOptions-menu-bottom'\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        titles={{\n          paginationTitle: t('full_pagination'),\n          perPageSuffix: t('per_page_suffix'),\n          toFirstPage: t('to_first_page'),\n          toPreviousPage: t('to_previous_page'),\n          toLastPage: t('to_last_page'),\n          toNextPage: t('to_next_page'),\n          optionsToggle: t('options_toggle'),\n          currPage: t('curr_page'),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import React from 'react';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\nimport { useTranslation } from 'react-i18next';\n\nexport type NoResultsFoundProps = {\n  count: number;\n  dataLoaded: boolean;\n};\nexport const NoResultsFound: React.FunctionComponent<NoResultsFoundProps> = ({\n  count,\n  dataLoaded,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n\n  if (count < 1 && dataLoaded) {\n    return (\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t('no_results_found'),\n        }}\n        emptyStateBodyProps={{\n          body: t('adjust_your_filters_and_try_again'),\n        }}\n      />\n    );\n  }\n  return <></>;\n};\n","import React, { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IRowData,\n  ISeparator,\n  ISortBy,\n  OnSort,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport {\n  getFormattedDate,\n  getLoadingRowsCount,\n  getSkeletonForRows,\n  InstanceStatus,\n  InstanceType,\n} from '@app/utils';\nimport { Skeleton } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport {\n  StatusColumn,\n  StreamsToolbar,\n  StreamsToolbarProps,\n} from '@app/modules/OpenshiftStreams/components';\nimport { MASTable } from '@app/common';\nimport { Pagination } from '@app/modules/OpenshiftStreams/components/StreamsTable/Pagination';\nimport { NoResultsFound } from '@app/modules/OpenshiftStreams/components/StreamsTable/NoResultsFound';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\n\nexport type StreamsTableProps = Pick<\n  StreamsToolbarProps,\n  | 'page'\n  | 'perPage'\n  | 'total'\n  | 'filterSelected'\n  | 'setFilterSelected'\n  | 'filteredValue'\n  | 'setFilteredValue'\n  | 'onCreate'\n  | 'refresh'\n  | 'handleCreateInstanceModal'\n> & {\n  onDeleteInstance: (instance: KafkaRequest) => Promise<void>;\n  onChangeOwner: (instance: KafkaRequest) => Promise<void>;\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  loggedInUser: string | undefined;\n  expectedTotal: number;\n  kafkaDataLoaded: boolean;\n  kafkaInstanceItems?: KafkaRequest[];\n  isOrgAdmin?: boolean;\n  setOrderBy: (order: string) => void;\n  orderBy: string;\n};\nexport const StreamsTable: React.FunctionComponent<StreamsTableProps> = ({\n  onDeleteInstance,\n  onChangeOwner,\n  onViewInstance,\n  onViewConnection,\n  loggedInUser,\n  page,\n  perPage,\n  total,\n  expectedTotal,\n  kafkaDataLoaded,\n  kafkaInstanceItems,\n  isOrgAdmin,\n  setOrderBy,\n  orderBy,\n  filterSelected,\n  setFilterSelected,\n  filteredValue,\n  setFilteredValue,\n  onCreate,\n  refresh,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const { instanceDrawerInstance } = useInstanceDrawer();\n\n  const cells = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n\n  const sortBy = useMemo((): ISortBy | undefined => {\n    const getIndexForSortParameter = (parameter: string) => {\n      switch (parameter.toLowerCase()) {\n        case 'name':\n          return 0;\n        case 'cloud_provider':\n          return 1;\n        case 'region':\n          return 2;\n        case 'owner':\n          return 3;\n        case 'status':\n          return 4;\n        case 'created_at':\n          return 5;\n        default:\n          return undefined;\n      }\n    };\n\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getIndexForSortParameter(sort[0]),\n        direction:\n          sort[1] === SortByDirection.asc\n            ? SortByDirection.asc\n            : SortByDirection.desc,\n      };\n    }\n    return;\n  }, [orderBy]);\n\n  const rows = useMemo(() => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(\n      page,\n      perPage,\n      expectedTotal\n    );\n    if (!kafkaDataLoaded) {\n      return getSkeletonForRows({\n        loadingCount,\n        skeleton: <Skeleton />,\n        length: cells.length,\n      });\n    }\n    kafkaInstanceItems?.forEach((row: IRowData) => {\n      const {\n        name,\n        cloud_provider,\n        region,\n        created_at,\n        status,\n        owner,\n        instance_type,\n      } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title:\n              status === InstanceStatus.DEPROVISION ||\n              status !== InstanceStatus.READY ? (\n                name\n              ) : (\n                <Link to={`kafkas/${row?.id}/dashboard`}>{name}</Link>\n              ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: (\n              <>\n                {getFormattedDate(created_at, t('ago'))}\n                <br />\n                {instance_type === InstanceType?.eval && '48 hours duration'}\n              </>\n            ),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  }, [page, perPage, expectedTotal, kafkaDataLoaded, kafkaInstanceItems]);\n\n  const actionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    if (\n      originalData.status === InstanceStatus.DEPROVISION ||\n      originalData.status === InstanceStatus.DELETED\n    ) {\n      return [];\n    }\n    const isUserSameAsLoggedIn =\n      originalData.owner === loggedInUser || isOrgAdmin;\n    let additionalProps;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionDetails',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'view-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_view_kafka'),\n        },\n      },\n      {\n        title: t('view_connection_information'),\n        id: 'connect-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionConnection',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'connect-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_connect_kafka'),\n        },\n      },\n      {\n        title: t('change_owner'),\n        id: 'change-owner',\n        ['data-testid']: 'tableStreams-actionChangeOwner',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(event, originalData, 'change-owner'),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_change_owner'),\n        },\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instanceDrawerInstance',\n        ['data-testid']: 'tableStreams-actionDelete',\n        onClick: (event: React.ChangeEvent<HTMLSelectElement>) =>\n          isUserSameAsLoggedIn &&\n          onSelectKebabDropdownOption(\n            event,\n            originalData,\n            'delete-instanceDrawerInstance'\n          ),\n        ...additionalProps,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n      },\n    ];\n    return resolver;\n  };\n\n  const onSelectKebabDropdownOption = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    originalData: KafkaRequest,\n    selectedOption: string\n  ) => {\n    if (selectedOption === 'view-instanceDrawerInstance') {\n      onViewInstance(originalData);\n      //set selected row for view instanceDrawerInstance and connect instanceDrawerInstance\n    } else if (selectedOption === 'connect-instanceDrawerInstance') {\n      onViewConnection(originalData);\n    } else if (selectedOption === 'change-owner') {\n      onChangeOwner(originalData);\n    } else if (selectedOption === 'delete-instanceDrawerInstance') {\n      deleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    const previousNode =\n      event?.target?.parentElement?.parentElement?.previousSibling;\n    if (previousNode !== undefined && previousNode !== null) {\n      (previousNode as HTMLElement).focus();\n    }\n  };\n\n  const deleteInstance = async (kafka: KafkaRequest) => {\n    await onDeleteInstance(kafka);\n  };\n\n  const onSort: OnSort = (_event, index, direction, extraData) => {\n    const getParameterForSortIndex = (index: number) => {\n      switch (index) {\n        case 0:\n          return 'name';\n        case 1:\n          return 'cloud_provider';\n        case 2:\n          return 'region';\n        case 3:\n          return 'owner';\n        case 4:\n          return 'status';\n        case 5:\n          return 'created_at';\n        default:\n          return '';\n      }\n    };\n\n    let myDirection = direction;\n    if (sortBy?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = SortByDirection.desc;\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const onRowClick = (\n    event: React.MouseEvent<HTMLTableRowElement | HTMLButtonElement>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => {\n    if (event.target instanceof HTMLElement) {\n      const tagName = event.target.tagName.toLowerCase();\n      // Open instance drawer on row click except kebab button click or opening the kafka instance\n      if (tagName === 'button' || tagName === 'a') {\n        return;\n      }\n    }\n    onViewInstance(row?.originalData);\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        onCreate={onCreate}\n        refresh={refresh}\n        handleCreateInstanceModal={handleCreateInstanceModal}\n      />\n      <MASTable<HTMLTableRowElement | HTMLButtonElement>\n        tableProps={{\n          cells,\n          rows,\n          'aria-label': t('cluster_instance_list'),\n          actionResolver,\n          onSort,\n          sortBy,\n          hasDefaultCustomRowWrapper: true,\n        }}\n        activeRow={instanceDrawerInstance?.name}\n        onRowClick={onRowClick}\n        rowDataTestId='tableStreams-row'\n        loggedInUser={loggedInUser}\n      />\n      <NoResultsFound\n        count={kafkaInstanceItems?.length || 0}\n        dataLoaded={kafkaDataLoaded}\n      />\n      <Pagination total={total} page={page} perPage={perPage} />\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAlert, useAuth } from '@rhoas/app-services-ui-shared';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n} from '@rhoas/kafka-management-sdk';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport { InstanceStatus, MAX_POLL_INTERVAL } from '@app/utils';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { useTimeout } from '@app/hooks/useTimeout';\n\nexport const KafkaStatusAlerts: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const { addAlert } = useAlert() || {};\n  const auth = useAuth();\n\n  const [deletedKafkas, setDeletedKafkas] = useState<string[]>([]);\n  const [currentUserKafkas, setCurrentUserKafkas] = useState<\n    KafkaRequest[] | undefined\n  >();\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const { isVisible } = usePageVisibility();\n  const { apiBasePath: basePath } = kas || {};\n\n  useEffect(() => {\n    auth.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  const fetchCurrentUserKafkas = async () => {\n    const accessToken = await auth?.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    if (accessToken && isVisible) {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await apisService.getKafkas('', '', '', filter).then((res) => {\n        const kafkaInstances = res.data;\n        setCurrentUserKafkas(kafkaInstances.items);\n      });\n    }\n  };\n\n  useEffect(() => {\n    loggedInUser && fetchCurrentUserKafkas();\n  }, [loggedInUser]);\n\n  useTimeout(() => fetchCurrentUserKafkas(), MAX_POLL_INTERVAL);\n\n  const addAlertAfterSuccessDeletion = () => {\n    const removeKafkaFromDeleted = (name: string) => {\n      const index = deletedKafkas.findIndex((k) => k === name);\n      if (index > -1) {\n        const prev = Object.assign([], deletedKafkas);\n        prev.splice(index, 1);\n        setDeletedKafkas(prev);\n      }\n    };\n\n    if (currentUserKafkas) {\n      // filter all kafkas with status as deprovision\n      const deprovisonedKafkas: KafkaRequest[] = currentUserKafkas.filter(\n        (k) =>\n          k.status === InstanceStatus.DEPROVISION ||\n          k.status === InstanceStatus.DELETED\n      );\n\n      // filter all new kafka which is not in deleteKafka state\n      const notPresentKafkas = deprovisonedKafkas\n        .filter((k) => deletedKafkas.findIndex((dk) => dk === k.name) < 0)\n        .map((k) => k.name || '');\n      // create new array by merging old and new kafka with status as deprovion\n      const allDeletedKafkas: string[] = [\n        ...deletedKafkas,\n        ...notPresentKafkas,\n      ];\n      // update deleteKafka with new arraycurrentUserkafkaInstanceItems\n      setDeletedKafkas(allDeletedKafkas);\n\n      // add alert for deleted kafkas which are completely deleted from the response\n      allDeletedKafkas.forEach((k) => {\n        const kafkaIndex = currentUserKafkas?.findIndex(\n          (item) => item.name === k\n        );\n        if (kafkaIndex < 0) {\n          removeKafkaFromDeleted(k);\n          addAlert &&\n            addAlert({\n              title: t('kafka_successfully_deleted', { name: k }),\n              variant: AlertVariant.success,\n            });\n        }\n      });\n    }\n  };\n\n  const addAlertAfterSuccessCreation = () => {\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign(\n        [],\n        currentUserKafkas\n      ).filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.READY ||\n          item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_successfully_created'),\n                variant: AlertVariant.success,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_success_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-success',\n              });\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert &&\n              addAlert({\n                title: t('kafka_not_created'),\n                variant: AlertVariant.danger,\n                description: (\n                  <span\n                    dangerouslySetInnerHTML={{\n                      __html: t('kafka_failed_message', {\n                        name: instances[0]?.name,\n                      }),\n                    }}\n                  />\n                ),\n                dataTestId: 'toastCreateKafka-failed',\n              });\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      currentUserKafkas?.filter(\n        (item: KafkaRequest) =>\n          item.status === InstanceStatus.PROVISIONING ||\n          item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  };\n\n  // Redirect the user to a previous page if there are no kafka instances for a page number / size\n  useEffect(() => {\n    // handle success alert for deletion\n    addAlertAfterSuccessDeletion();\n    // handle success alert for creation\n    addAlertAfterSuccessCreation();\n  }, [currentUserKafkas]);\n\n  return <></>;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport dayjs from 'dayjs';\nimport {\n  AlertVariant,\n  Card,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { usePagination } from '@app/common';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport {\n  ErrorCodes,\n  InstanceStatus,\n  isServiceApiError,\n  MAX_POLL_INTERVAL,\n} from '@app/utils';\nimport { usePageVisibility } from '@app/hooks/usePageVisibility';\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  KafkaRequestList,\n} from '@rhoas/kafka-management-sdk';\nimport './StreamsTableConnected.css';\nimport {\n  ModalType,\n  useAlert,\n  useAuth,\n  useConfig,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\nimport { useFederated } from '@app/contexts';\nimport '@app/modules/styles.css';\nimport {\n  FilterType,\n  KafkaEmptyState,\n  Unauthorized,\n} from '@app/modules/OpenshiftStreams/components';\nimport { useInstanceDrawer } from '@app/modules/InstanceDrawer/contexts/InstanceDrawerContext';\nimport { InstanceDrawerTab } from '@app/modules/InstanceDrawer/tabs';\nimport { StreamsTable } from '@app/modules/OpenshiftStreams/components/StreamsTable/StreamsTable';\nimport { KafkaStatusAlerts } from '@app/modules/OpenshiftStreams/components/StreamsTableConnected/KafkaStatusAlerts';\n\nexport type StreamsTableProps = {\n  preCreateInstance: (open: boolean) => Promise<boolean>;\n};\n\nexport const StreamsTableConnected: React.FunctionComponent<StreamsTableProps> =\n  ({ preCreateInstance }: StreamsTableProps) => {\n    dayjs.extend(localizedFormat);\n    const { shouldOpenCreateModal } = useFederated() || {};\n\n    const auth = useAuth();\n    const { kas } = useConfig() || {};\n    const { apiBasePath: basePath } = kas || {};\n    const { isVisible } = usePageVisibility();\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    const { page = 1, perPage = 10 } = usePagination() || {};\n    const { t } = useTranslation(['kasTemporaryFixMe']);\n    const { addAlert } = useAlert() || {};\n    const { showModal: showCreateModal } =\n      useModal<ModalType.KasCreateInstance>();\n    const { showModal: showTransferOwnershipModal } =\n      useModal<ModalType.KasTransferOwnership>();\n    const { hideModal: hideDeleteModal, showModal: showDeleteModal } =\n      useModal<ModalType.KasDeleteInstance>();\n    const {\n      setInstanceDrawerTab,\n      setInstanceDrawerInstance,\n      instanceDrawerInstance,\n      setNoInstances,\n    } = useInstanceDrawer();\n    const history = useHistory();\n\n    // Kafka list state\n    const [kafkaInstancesList, setKafkaInstancesList] = useState<\n      KafkaRequestList | undefined\n    >();\n    const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n    const [expectedTotal, setExpectedTotal] = useState<number>(3);\n\n    // filter and sort state\n    const [orderBy, setOrderBy] = useState<string>('created_at desc');\n    const [filterSelected, setFilterSelected] = useState('name');\n    const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n    // user state\n    const [isUserUnauthorized, setIsUserUnauthorized] =\n      useState<boolean>(false);\n    const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n      undefined\n    );\n    const [isOrgAdmin, setIsOrgAdmin] = useState<boolean>();\n\n    // States to sort out\n    const [waitingForDelete, setWaitingForDelete] = useState<boolean>(false);\n\n    useEffect(() => {\n      const openModal = async () => {\n        const shouldOpen =\n          shouldOpenCreateModal && (await shouldOpenCreateModal());\n        if (shouldOpen) {\n          openCreateModal();\n        }\n      };\n      openModal();\n    }, [shouldOpenCreateModal]);\n\n    const openCreateModal = () => {\n      showCreateModal(ModalType.KasCreateInstance, {\n        onCreate: () => {\n          onCreate();\n          refreshKafkasAfterAction();\n        },\n      });\n    };\n\n    const handleCreateInstanceModal = async () => {\n      let open;\n      if (preCreateInstance) {\n        // Callback before opening create dialog\n        // The callback can override the new state of opening\n        open = await preCreateInstance(true);\n      }\n\n      if (open) {\n        openCreateModal();\n      }\n    };\n\n    const onViewInstance = (instance: KafkaRequest) => {\n      setInstanceDrawerInstance(instance);\n      setInstanceDrawerTab(InstanceDrawerTab.DETAILS);\n    };\n\n    const onViewConnection = (instance: KafkaRequest) => {\n      setInstanceDrawerInstance(instance);\n      setInstanceDrawerTab(InstanceDrawerTab.CONNECTION);\n    };\n\n    const getFilterQuery = () => {\n      const filters: string[] = [];\n      filteredValue.forEach((filter) => {\n        const { filterKey, filterValue } = filter;\n        if (filterValue && filterValue.length > 0) {\n          let filterQuery = '(';\n          filterQuery += filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === InstanceStatus.PROVISIONING) {\n                return `${filterKey} = ${InstanceStatus.PREPARING} or ${filterKey} = ${InstanceStatus.PROVISIONING}`;\n              }\n              if (value === InstanceStatus.DEPROVISION) {\n                return `${filterKey} = ${InstanceStatus.DEPROVISION} or ${filterKey} = ${InstanceStatus.DELETED}`;\n              }\n              return value !== ''\n                ? `${filterKey} ${\n                    val.isExact === true ? `= ${value}` : `like %${value}%`\n                  }`\n                : '';\n            })\n            .join(' or ');\n          filterQuery += ')';\n\n          filters.push(filterQuery);\n        }\n      });\n      return filters.join(' and ');\n    };\n\n    const handleServerError = (error: unknown) => {\n      let errorCode: string | undefined;\n      if (isServiceApiError(error)) {\n        errorCode = error.response?.data?.code;\n      }\n      //check unauthorize user\n      if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n        setIsUserUnauthorized(true);\n      }\n    };\n\n    // Functions\n    const fetchKafkas = async () => {\n      const filterQuery = getFilterQuery();\n      const accessToken = await auth?.kas.getToken();\n\n      if (accessToken && isVisible) {\n        try {\n          const apisService = new DefaultApi(\n            new Configuration({\n              accessToken,\n              basePath,\n            })\n          );\n\n          await apisService\n            .getKafkas(\n              page?.toString(),\n              perPage?.toString(),\n              orderBy,\n              filterQuery\n            )\n            .then((res) => {\n              const kafkaInstances = res.data;\n              const kafkaItems = kafkaInstances?.items || [];\n              setKafkaInstancesList(kafkaInstances);\n\n              if (\n                kafkaInstancesList?.total !== undefined &&\n                kafkaInstancesList.total > expectedTotal\n              ) {\n                setExpectedTotal(kafkaInstancesList.total);\n              }\n\n              if (\n                waitingForDelete &&\n                filteredValue.length < 1 &&\n                kafkaItems?.length == 0\n              ) {\n                setWaitingForDelete(false);\n              }\n\n              setKafkaDataLoaded(true);\n            });\n        } catch (error) {\n          handleServerError(error);\n        }\n      }\n    };\n\n    useEffect(() => {\n      setKafkaDataLoaded(false);\n      fetchKafkas();\n    }, [auth, page, perPage, filteredValue, orderBy]);\n\n    useEffect(() => {\n      if (kafkaInstancesList !== undefined && kafkaInstancesList?.size > 0) {\n        const selectedKafkaItem = kafkaInstancesList.items?.find(\n          (kafka) => kafka?.id === instanceDrawerInstance?.id\n        );\n        if (selectedKafkaItem !== undefined) {\n          setInstanceDrawerInstance(selectedKafkaItem);\n        }\n      }\n    }, [kafkaInstancesList?.items]);\n\n    useEffect(() => {\n      setNoInstances(kafkaInstancesList?.size === 0);\n    }, [kafkaInstancesList?.size]);\n\n    useEffect(() => {\n      auth.getUsername()?.then((username) => setLoggedInUser(username));\n      auth.isOrgAdmin()?.then((isOrgAdmin) => setIsOrgAdmin(isOrgAdmin));\n    }, [auth]);\n\n    useTimeout(() => fetchKafkas(), MAX_POLL_INTERVAL);\n\n    const refreshKafkasAfterAction = () => {\n      //set the page to laoding state\n      if (kafkaInstancesList?.size === 1) {\n        setKafkaDataLoaded(true);\n      } else {\n        setKafkaDataLoaded(false);\n      }\n      fetchKafkas();\n    };\n\n    // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (add 1)\n    const onCreate = () => {\n      setExpectedTotal(\n        (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) + 1\n      );\n    };\n\n    // Function to pre-empt the number of kafka instances for Skeleton Loading in the table (delete 1)\n    const onDelete = () => {\n      setKafkaDataLoaded(false);\n      setExpectedTotal(\n        (kafkaInstancesList === undefined ? 0 : kafkaInstancesList.total) - 1\n      );\n    };\n\n    const setSearchParam = useCallback(\n      (name: string, value: string) => {\n        searchParams.set(name, value.toString());\n      },\n      [searchParams]\n    );\n\n    // Redirect the user to a previous page if there are no kafka instances for a page number / size\n    useEffect(() => {\n      if (page > 1) {\n        if (\n          kafkaInstancesList?.items !== undefined &&\n          kafkaInstancesList.size === 0\n        ) {\n          setSearchParam('page', (page - 1).toString());\n          setSearchParam('perPage', perPage.toString());\n          history.push({\n            search: searchParams.toString(),\n          });\n        }\n      }\n    }, [page, perPage, kafkaInstancesList?.items]);\n\n    const onChangeOwner = async (instance: KafkaRequest) => {\n      showTransferOwnershipModal(ModalType.KasTransferOwnership, {\n        kafka: instance,\n        refreshKafkas: refreshKafkasAfterAction,\n      });\n    };\n\n    const onDeleteInstance = async (kafka: KafkaRequest) => {\n      const doDelete = async () => {\n        await deleteInstance(kafka);\n        onDelete();\n      };\n      if (kafka.status === InstanceStatus.FAILED) {\n        await doDelete();\n      } else {\n        showDeleteModal(ModalType.KasDeleteInstance, {\n          onDelete: doDelete,\n          kafka,\n        });\n      }\n    };\n\n    const deleteInstance = async (instance: KafkaRequest) => {\n      /**\n       * Throw an error if kafka id is not set\n       * and avoid delete instanceDrawerInstance api call\n       */\n      if (instance.id === undefined) {\n        throw new Error('kafka instanceDrawerInstance id is not set');\n      }\n      const accessToken = await auth?.kas.getToken();\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      onDelete();\n      hideDeleteModal();\n\n      try {\n        await apisService.deleteKafkaById(instance.id, true).then(() => {\n          setWaitingForDelete(true);\n          refreshKafkasAfterAction();\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert &&\n          addAlert({\n            title: t('common.something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    };\n\n    if (isUserUnauthorized) {\n      return <Unauthorized />;\n    }\n\n    const isDisplayKafkaEmptyState =\n      kafkaDataLoaded &&\n      filteredValue.length < 1 &&\n      kafkaInstancesList !== undefined &&\n      kafkaInstancesList?.total < 1;\n\n    if (isDisplayKafkaEmptyState) {\n      return (\n        <KafkaEmptyState\n          handleCreateInstanceModal={handleCreateInstanceModal}\n        />\n      );\n    } else if (isDisplayKafkaEmptyState !== undefined) {\n      return (\n        <PageSection\n          className='mk--main-page__page-section--table pf-m-padding-on-xl'\n          variant={PageSectionVariants.default}\n          padding={{ default: 'noPadding' }}\n        >\n          <Card ouiaId='card-controlplane'>\n            <StreamsTable\n              onDeleteInstance={onDeleteInstance}\n              onViewInstance={onViewInstance}\n              onViewConnection={onViewConnection}\n              onChangeOwner={onChangeOwner}\n              loggedInUser={loggedInUser}\n              page={page}\n              perPage={perPage}\n              total={expectedTotal}\n              isOrgAdmin={isOrgAdmin}\n              expectedTotal={expectedTotal}\n              kafkaDataLoaded={kafkaDataLoaded}\n              kafkaInstanceItems={kafkaInstancesList?.items}\n              setOrderBy={setOrderBy}\n              setFilterSelected={setFilterSelected}\n              setFilteredValue={setFilteredValue}\n              filteredValue={filteredValue}\n              handleCreateInstanceModal={handleCreateInstanceModal}\n              orderBy={orderBy}\n              filterSelected={filterSelected}\n              onCreate={onCreate}\n              refresh={refreshKafkasAfterAction}\n            />\n          </Card>\n          <KafkaStatusAlerts />\n        </PageSection>\n      );\n    }\n    return <></>;\n  };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { statusOptions } from '@app/utils/utils';\nimport './StatusColumn.css';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn: React.FunctionComponent<StatusColumnProps> = ({\n  status,\n  instanceName,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n\n  const Status: React.FunctionComponent = () => {\n    const filteredstatus = statusOptions.filter(\n      (st) => st.value === status?.toLowerCase()\n    );\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const StatusIcon: React.FunctionComponent = () => {\n    const statusIcon = getStatusIcon();\n    if (statusIcon) {\n      return <FlexItem spacer={{ default: 'spacerSm' }}>{statusIcon}</FlexItem>;\n    }\n    return <></>;\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return (\n          <CheckCircleIcon className='mk--instances__table--icon--completed' />\n        );\n      case statusOptions[1].value: // 'failed'\n        return (\n          <ExclamationCircleIcon className='mk--instances__table--icon--failed' />\n        );\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return (\n          <Spinner\n            size='md'\n            aria-label={instanceName}\n            aria-valuetext='Creation in progress'\n          />\n        );\n      case statusOptions[5].value: // 'deprovision'\n      case statusOptions[6].value: // 'deleting'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <StatusIcon />\n      <FlexItem>\n        <Status />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { useTranslation } from 'react-i18next';\nimport React from 'react';\n\nexport const useTooltipContent = (\n  isMaxFilter: boolean,\n  fieldName?: string\n): React.ReactElement => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  if (isMaxFilter) {\n    return <div>{t('max_filter_message')}</div>;\n  }\n  if (fieldName === 'owner') {\n    return <div>{t('owner_field_invalid_message', { name: fieldName })}</div>;\n  }\n  return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n};\n","import React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport { cloudProviderOptions, KeyValueOptions } from '@app/utils';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\n\nexport type CloudProviderFilterProps = FilterProps;\n\nexport const CloudProviderFilter: React.FunctionComponent<CloudProviderFilterProps> =\n  ({\n    getSelectionForFilter,\n    filterSelected,\n    onDeleteChipGroup,\n    onDeleteChip,\n    updateFilter,\n    isMaxFilter,\n    removeFilterValue,\n    isDisabledSelectOption,\n  }) => {\n    const { t } = useTranslation(['kasTemporaryFixMe']);\n\n    const options: KeyValueOptions[] = cloudProviderOptions.map(\n      (cloudProvider) => {\n        return {\n          label: t(cloudProvider.value),\n          value: cloudProvider.value,\n          disabled: false,\n        };\n      }\n    );\n\n    return (\n      <ToolbarFilter\n        chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n        deleteChip={(_category, chip) =>\n          onDeleteChip && onDeleteChip('cloud_provider', chip, options)\n        }\n        deleteChipGroup={() =>\n          onDeleteChipGroup && onDeleteChipGroup('cloud_provider')\n        }\n        categoryName={t('cloud_provider')}\n        showToolbarItem={filterSelected === 'cloud_provider'}\n      >\n        <CloudProviderSelect\n          updateFilter={updateFilter}\n          isMaxFilter={isMaxFilter}\n          removeFilterValue={removeFilterValue}\n          isDisabledSelectOption={isDisabledSelectOption}\n          options={options}\n          getSelectionForFilter={getSelectionForFilter}\n          filterSelected={filterSelected}\n        />\n      </ToolbarFilter>\n    );\n  };\n\ntype CloudProviderSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  options: KeyValueOptions[];\n};\n\nconst CloudProviderSelect: React.FunctionComponent<CloudProviderSelectProps> =\n  ({\n    updateFilter,\n    isMaxFilter,\n    removeFilterValue,\n    isDisabledSelectOption,\n    options,\n    getSelectionForFilter,\n    filterSelected,\n  }) => {\n    const { t } = useTranslation(['kasTemporaryFixMe']);\n    const selectRef = useRef<Select>(null);\n    const tooltipContent = useTooltipContent(isMaxFilter);\n\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (isMaxFilter) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter}\n            content={tooltipContent}\n            reference={selectRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    const [expanded, setExpanded] = useState(false);\n\n    const onToggle = () => {\n      setExpanded((prevState) => !prevState);\n    };\n\n    const onSelect = (\n      _event:\n        | React.MouseEvent<Element, MouseEvent>\n        | React.ChangeEvent<Element>,\n      selection: string | SelectOptionObject,\n      isPlaceholder?: boolean | undefined\n    ) => {\n      if (isPlaceholder) clear();\n      updateFilter(\n        'cloud_provider',\n        { value: selection.toString(), isExact: true },\n        true\n      );\n      options.length < 2 && setExpanded(false);\n    };\n\n    const clear = () => {\n      removeFilterValue && removeFilterValue('cloud_provider');\n      setExpanded(false);\n    };\n\n    if (filterSelected === 'cloud_provider') {\n      return (\n        <Select\n          id='cloud-provider-select'\n          variant={SelectVariant.checkbox}\n          aria-label='Select cloud provider'\n          onToggle={onToggle}\n          selections={getSelectionForFilter('cloud_provider')}\n          isOpen={expanded}\n          onSelect={onSelect}\n          placeholderText={t('filter_by_cloud_provider')}\n          className='select-custom-width'\n          ref={selectRef}\n        >\n          {options.map((option, index) => {\n            const isDisabled = () => {\n              if (option.disabled) {\n                return true;\n              }\n              return (\n                isMaxFilter &&\n                isDisabledSelectOption('cloud_provider', option.value)\n              );\n            };\n\n            return (\n              <SelectOption\n                isDisabled={isDisabled()}\n                key={index}\n                value={option.value}\n              >\n                <FilterTooltip />\n                {option.label}\n              </SelectOption>\n            );\n          })}\n        </Select>\n      );\n    }\n    return <></>;\n  };\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type NameFilterProps = FilterProps;\n\nexport const NameFilter: React.FunctionComponent<NameFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const [valid, setValid] = useState<boolean>(true);\n  const [value, setValue] = useState<string | undefined>();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'name');\n\n  const change = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const validate = (value?: string) => {\n    return value\n      ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim())\n      : true;\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('name', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const renderNameInput = () => {\n    const v = !valid || isMaxFilter;\n    const FilterTooltip: React.FunctionComponent = () => {\n      if (v) {\n        return (\n          <Tooltip\n            isVisible={isMaxFilter || !valid}\n            content={tooltipContent}\n            reference={inputRef}\n          />\n        );\n      }\n      return <></>;\n    };\n\n    if (filterSelected?.toLowerCase() === 'name') {\n      return (\n        <InputGroup>\n          <TextInput\n            name='name'\n            id='filterText'\n            type='search'\n            aria-label='Search filter input'\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            placeholder={t('filter_by_name_lower')}\n            onChange={change}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={!valid || isMaxFilter}\n            onClick={() => onFilter()}\n            aria-label='Search instances'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('name')}\n      deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('name')}\n      categoryName={t('name')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'name'}\n    >\n      {renderNameInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type OwnerFilterProps = FilterProps;\nexport const OwnerFilter: React.FunctionComponent<OwnerFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChipGroup,\n  onDeleteChip,\n  filterSelected,\n  isMaxFilter,\n  updateFilter,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter, 'owner');\n\n  const [value, setValue] = useState<string | undefined>();\n  const [valid, setValid] = useState<boolean>(true);\n\n  const validate = (value?: string) => {\n    return value ? !/[\"$^<>|+%/;:,\\s*=~#()]/.test(value.trim()) : true;\n  };\n\n  const onFilter = () => {\n    if (value && value.trim() != '') {\n      if (validate(value)) {\n        updateFilter('owner', { value: value, isExact: false }, false);\n        setValue('');\n      } else {\n        setValid(false);\n      }\n    }\n  };\n\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      onFilter();\n    }\n  };\n\n  const onChange = (input?: string) => {\n    setValue(input);\n    !valid && setValid(true);\n  };\n\n  const renderOwnerInput = () => {\n    if (filterSelected?.toLowerCase() === 'owner') {\n      const v = !valid || isMaxFilter;\n\n      const FilterTooltip: React.FunctionComponent = () => {\n        if (v) {\n          return (\n            <Tooltip\n              isVisible={isMaxFilter || !valid}\n              content={tooltipContent}\n              reference={inputRef}\n            />\n          );\n        }\n        return <></>;\n      };\n\n      return (\n        <InputGroup>\n          <TextInput\n            name='owner'\n            id='filterOwners'\n            type='search'\n            aria-label='Search filter input'\n            placeholder={t('filter_by_owner')}\n            validated={v ? ValidatedOptions.error : ValidatedOptions.default}\n            onChange={onChange}\n            onKeyPress={onKeyPress}\n            value={value}\n            ref={inputRef}\n          />\n          <Button\n            isDisabled={v}\n            variant={ButtonVariant.control}\n            onClick={onFilter}\n            aria-label='Search owners'\n          >\n            <SearchIcon />\n          </Button>\n          <FilterTooltip />\n        </InputGroup>\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('owner')}\n      deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n      deleteChipGroup={() => onDeleteChipGroup('owner')}\n      categoryName={t('owner')}\n      showToolbarItem={filterSelected?.toLowerCase() === 'owner'}\n    >\n      {renderOwnerInput()}\n    </ToolbarFilter>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { cloudRegionOptions, KeyValueOptions } from '@app/utils';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\n\nexport type RegionFilterProps = FilterProps;\n\nexport const RegionFilter: React.FunctionComponent<RegionFilterProps> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  removeFilterValue,\n  isDisabledSelectOption,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const options = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('region')?.map((val) => t(val))}\n      deleteChip={(_category, chip) => onDeleteChip('region', chip, options)}\n      deleteChipGroup={() => onDeleteChipGroup('region')}\n      categoryName={t('region')}\n      showToolbarItem={filterSelected === 'region'}\n    >\n      <RegionSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        options={options}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype RegionSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  options: KeyValueOptions[];\n};\n\nconst RegionSelect: React.FunctionComponent<RegionSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  options,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const selectRef = useRef<Select>(null);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      'region',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n    options.length < 2 && setExpanded(false);\n  };\n\n  const clear = () => {\n    removeFilterValue('region');\n    setExpanded(false);\n  };\n\n  if (filterSelected === 'region') {\n    return (\n      <Select\n        id='region-select'\n        variant={SelectVariant.checkbox}\n        aria-label='Select region'\n        onToggle={onToggle}\n        selections={getSelectionForFilter('region')}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t('filter_by_region')}\n        className='select-custom-width'\n        ref={selectRef}\n      >\n        {options.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption('region', option.value)\n            );\n          };\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarItem,\n} from '@patternfly/react-core';\n\nexport type FilterSelectProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const FilterSelect: React.FunctionComponent<FilterSelectProps> = ({\n  setFilterSelected,\n  filterSelected,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const onToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent | React.ChangeEvent,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const options = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  return (\n    <ToolbarItem>\n      <Select\n        variant={SelectVariant.single}\n        aria-label='Select filter'\n        onToggle={onToggle}\n        selections={filterSelected}\n        isOpen={isFilterExpanded}\n        onSelect={onSelect}\n      >\n        {options.map((option, index) => (\n          <SelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n          >\n            {option.label}\n          </SelectOption>\n        ))}\n      </Select>\n    </ToolbarItem>\n  );\n};\n","import { FilterProps } from '@app/modules/OpenshiftStreams/components/TableFilters/types';\nimport React, { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useTooltipContent } from '@app/modules/OpenshiftStreams/components/TableFilters/hooks';\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectVariant,\n  ToolbarFilter,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { InstanceStatus, statusOptions, KeyValueOptions } from '@app/utils';\n\nexport type StatusFilter = FilterProps;\n\nexport const StatusFilter: React.FunctionComponent<StatusFilter> = ({\n  getSelectionForFilter,\n  onDeleteChip,\n  onDeleteChipGroup,\n  isMaxFilter,\n  filterSelected,\n  updateFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n\n  const statusFilterOptions = statusOptions\n    .filter(\n      (s) =>\n        s.value !== InstanceStatus.PREPARING &&\n        s.value !== InstanceStatus.DELETED\n    )\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  return (\n    <ToolbarFilter\n      chips={getSelectionForFilter('status')?.map((val) => t(val))}\n      deleteChip={(_category, chip) =>\n        onDeleteChip('status', chip, statusFilterOptions)\n      }\n      deleteChipGroup={() => onDeleteChipGroup('status')}\n      categoryName={t('status')}\n      showToolbarItem={filterSelected === 'status'}\n    >\n      <StatusSelect\n        updateFilter={updateFilter}\n        isMaxFilter={isMaxFilter}\n        removeFilterValue={removeFilterValue}\n        isDisabledSelectOption={isDisabledSelectOption}\n        statusFilterOptions={statusFilterOptions}\n        getSelectionForFilter={getSelectionForFilter}\n        filterSelected={filterSelected}\n      />\n    </ToolbarFilter>\n  );\n};\n\ntype StatusSelectProps = Pick<\n  FilterProps,\n  | 'updateFilter'\n  | 'isMaxFilter'\n  | 'removeFilterValue'\n  | 'isDisabledSelectOption'\n  | 'getSelectionForFilter'\n  | 'filterSelected'\n> & {\n  statusFilterOptions: KeyValueOptions[];\n};\n\nconst StatusSelect: React.FunctionComponent<StatusSelectProps> = ({\n  updateFilter,\n  isMaxFilter,\n  removeFilterValue,\n  isDisabledSelectOption,\n  statusFilterOptions,\n  getSelectionForFilter,\n  filterSelected,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const tooltipContent = useTooltipContent(isMaxFilter);\n  const selectRef = useRef<Select>(null);\n\n  const [expanded, setExpanded] = useState(false);\n\n  const FilterTooltip: React.FunctionComponent = () => {\n    if (isMaxFilter) {\n      return (\n        <Tooltip\n          isVisible={isMaxFilter}\n          content={tooltipContent}\n          reference={selectRef}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  const onToggle = () => {\n    setExpanded(!expanded);\n  };\n\n  const onSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clear();\n    updateFilter(\n      'status',\n      { value: selection.toString(), isExact: true },\n      true\n    );\n  };\n\n  const clear = () => {\n    removeFilterValue('status');\n    setExpanded(false);\n  };\n  if (filterSelected === 'status') {\n    return (\n      <Select\n        id='status-select'\n        variant={SelectVariant.checkbox}\n        aria-label='Select status'\n        onToggle={onToggle}\n        selections={getSelectionForFilter('status')}\n        isOpen={expanded}\n        onSelect={onSelect}\n        placeholderText={t('filter_by_status')}\n        className='select-custom-width'\n        ref={selectRef}\n      >\n        {statusFilterOptions.map((option, index) => {\n          const isDisabled = () => {\n            if (option.disabled) {\n              return true;\n            }\n            return (\n              isMaxFilter && isDisabledSelectOption('status', option.value)\n            );\n          };\n\n          return (\n            <SelectOption\n              isDisabled={isDisabled()}\n              key={index}\n              value={option.value}\n            >\n              <FilterTooltip />\n              {option.label}\n            </SelectOption>\n          );\n        })}\n      </Select>\n    );\n  }\n  return <></>;\n};\n","import React from 'react';\nimport { ToolbarChip, ToolbarGroup } from '@patternfly/react-core';\nimport { CloudProviderFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/CloudProviderFilter';\nimport { NameFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/NameFilter';\nimport { OwnerFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/OwnerFilter';\nimport { RegionFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/RegionFilter';\nimport { FilterSelect } from '@app/modules/OpenshiftStreams/components/TableFilters/FilterSelect';\nimport { StatusFilter } from '@app/modules/OpenshiftStreams/components/TableFilters/StatusFilter';\nimport { KeyValueOptions } from '@app/utils';\nimport {\n  FilterType,\n  FilterValue,\n} from '@app/modules/OpenshiftStreams/components';\n\nexport type StreamsFilterGroupProps = {\n  isMaxFilter: boolean;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n};\n\nexport const StreamsFilterGroup: React.FunctionComponent<StreamsFilterGroupProps> =\n  ({\n    isMaxFilter,\n    filteredValue,\n    setFilteredValue,\n    filterSelected,\n    setFilterSelected,\n  }) => {\n    const isDisabledSelectOption = (key: string, optionValue: string) => {\n      let newFilterValue: FilterValue | undefined;\n      const newFilteredValue = filteredValue?.filter(\n        ({ filterKey }) => filterKey === key\n      );\n      if (newFilteredValue && newFilteredValue?.length > 0) {\n        const { filterValue } = newFilteredValue[0];\n        newFilterValue = filterValue?.find(\n          ({ value }) => value === optionValue\n        );\n      }\n      if (!newFilterValue) {\n        return true;\n      }\n      return false;\n    };\n\n    const updateFilter = (\n      key: string,\n      filter: FilterValue,\n      removeIfPresent: boolean\n    ) => {\n      const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n      const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n      if (filterIndex > -1) {\n        // if filter is present with the current key\n        const filterValue = newFilterValue[filterIndex];\n        if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n          // if some filters are already there in applied filter for same key\n          const filterValueIndex = filterValue.filterValue.findIndex(\n            (f) => f.value === filter.value\n          ); // index of current filter value in applied filter\n          if (filterValueIndex > -1) {\n            // filter value is already present\n            if (removeIfPresent) {\n              filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n            } else {\n              return; // skip the duplicate values\n            }\n          } else {\n            // add the filter value to the current applied filter\n            newFilterValue[filterIndex].filterValue.push(filter);\n          }\n        } else {\n          // add the filter value to current applied filter\n          newFilterValue[filterIndex].filterValue = [filter];\n        }\n      } else {\n        // add filter with key and value to the applied filter\n        newFilterValue.push({ filterKey: key, filterValue: [filter] });\n      }\n      setFilteredValue(newFilterValue);\n    };\n\n    const getSelectionForFilter = (key: string) => {\n      const selectedFilters = filteredValue.filter(\n        (filter) => filter.filterKey === key\n      );\n      if (selectedFilters.length > 0) {\n        return selectedFilters[0].filterValue.map((val) => val.value);\n      }\n      return;\n    };\n\n    const onDeleteChip = (\n      category: string,\n      chip: string | ToolbarChip,\n      filterOptions?: KeyValueOptions[]\n    ) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      const prevFilterValue: FilterValue[] = Object.assign(\n        [],\n        newFilteredValue[filterIndex]?.filterValue\n      );\n      let filterChip: string | undefined = chip.toString();\n      /**\n       * Filter chip from filter cloudProviderOptions\n       */\n      if (filterOptions && filterOptions?.length > 0) {\n        filterChip = filterOptions?.find(\n          (option) => option.label === chip.toString()\n        )?.value;\n      }\n      /**\n       * Delete selected chip from filter cloudProviderOptions\n       */\n      const chipIndex = prevFilterValue.findIndex(\n        (val) => val.value === filterChip\n      );\n      if (chipIndex >= 0) {\n        newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const onDeleteChipGroup = (category: string) => {\n      const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = newFilteredValue.findIndex(\n        (filter) => filter.filterKey === category\n      );\n      if (filterIndex >= 0) {\n        newFilteredValue.splice(filterIndex, 1);\n        setFilteredValue(newFilteredValue);\n      }\n    };\n\n    const removeFilteredValue = (value: string) => {\n      const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n      const filterIndex = copyFilteredValue.findIndex(\n        (filter) => filter.filterKey === value\n      );\n      if (filterIndex >= 0) {\n        copyFilteredValue.splice(filterIndex, 1);\n      }\n      setFilteredValue(copyFilteredValue);\n    };\n\n    return (\n      <>\n        <ToolbarGroup variant='filter-group'>\n          <FilterSelect\n            setFilterSelected={setFilterSelected}\n            filterSelected={filterSelected}\n          />\n          <NameFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <CloudProviderFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <RegionFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <OwnerFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n          <StatusFilter\n            isMaxFilter={isMaxFilter}\n            filterSelected={filterSelected}\n            getSelectionForFilter={getSelectionForFilter}\n            updateFilter={updateFilter}\n            onDeleteChip={onDeleteChip}\n            onDeleteChipGroup={onDeleteChipGroup}\n            removeFilterValue={removeFilteredValue}\n            isDisabledSelectOption={isDisabledSelectOption}\n          />\n        </ToolbarGroup>\n      </>\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { InstanceStatus, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { StreamsFilterGroup } from '@app/modules/OpenshiftStreams/components/TableFilters/StreamsFilterGroup';\nimport { FilterType } from '@app/modules/OpenshiftStreams/components';\n\nexport type StreamsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  onCreate?: () => void;\n  refresh?: () => void;\n  handleCreateInstanceModal?: () => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: FilterType) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.PROVISIONING\n            )\n          : [];\n      const deprovisionStatus =\n        filterKey === 'status'\n          ? filterValue?.filter(\n              ({ value }) => value === InstanceStatus.DEPROVISION\n            )\n          : [];\n\n      if (provisioningStatus?.length > 0 && deprovisionStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 2;\n      } else if (\n        provisioningStatus?.length > 0 ||\n        deprovisionStatus?.length > 0\n      ) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant='primary'\n          onClick={handleCreateInstanceModal}\n          data-testid='tableStreams-buttonCreateKafka'\n          ouiaId='button-create'\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='pagination-cloudProviderOptions-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instanceDrawerInstance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={\n        <StreamsFilterGroup\n          isMaxFilter={isMaxFilter}\n          filteredValue={filteredValue}\n          setFilteredValue={setFilteredValue}\n          setFilterSelected={setFilterSelected}\n          filterSelected={filterSelected}\n        />\n      }\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { MASEmptyState } from '@app/common';\nimport LockIcon from '@patternfly/react-icons/dist/js/icons/lock-icon';\n\nexport const Unauthorized: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  return (\n    <PageSection\n      variant={PageSectionVariants.default}\n      padding={{ default: 'noPadding' }}\n      isFilled\n    >\n      <MASEmptyState\n        titleProps={{\n          title: t('access_permissions_needed'),\n          headingLevel: 'h2',\n        }}\n        emptyStateIconProps={{\n          icon: LockIcon,\n        }}\n        emptyStateBodyProps={{\n          body: t(\n            'to_access_kafka_instances_contact_your_organization_administrators'\n          ),\n        }}\n      />\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\nimport { Button, ButtonVariant, PageSection } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/common';\n\nexport type KafkaEmptyStateProps = {\n  handleCreateInstanceModal: () => void;\n};\nexport const KafkaEmptyState: React.FunctionComponent<KafkaEmptyStateProps> = ({\n  handleCreateInstanceModal,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const qsContext: QuickStartContextValues =\n    React.useContext(QuickStartContext);\n  return (\n    <PageSection padding={{ default: 'noPadding' }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoItems,\n        }}\n        emptyStateBodyProps={{\n          body: (\n            <>\n              <Trans\n                i18nKey='create_a_kafka_instance_to_get_started'\n                ns={['kasTemporaryFixMe']}\n                components={[\n                  <Button\n                    variant={ButtonVariant.link}\n                    isSmall\n                    isInline\n                    key='btn-quick-start'\n                    onClick={() =>\n                      qsContext.setActiveQuickStart &&\n                      qsContext.setActiveQuickStart('getting-started')\n                    }\n                  />,\n                ]}\n              />\n            </>\n          ),\n        }}\n        titleProps={{ title: t('no_kafka_instances_yet') }}\n      >\n        <Button\n          data-testid='emptyStateStreams-buttonCreateKafka'\n          variant={ButtonVariant.primary}\n          onClick={() =>\n            handleCreateInstanceModal && handleCreateInstanceModal()\n          }\n          ouiaId='button-create'\n        >\n          {t('create_kafka_instance')}\n        </Button>\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n","import {\n  InstanceDrawer,\n  InstanceDrawerProps,\n} from '@app/modules/InstanceDrawer';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { isMobileTablet } from '@app/utils';\nimport {\n  Button,\n  Level,\n  LevelItem,\n  Modal,\n  ModalVariant,\n  PageSection,\n  PageSectionVariants,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\n\nexport type KasLayoutProps = Pick<InstanceDrawerProps, 'tokenEndPointUrl'>;\n\nexport const KasLayout: React.FunctionComponent<KasLayoutProps> = ({\n  children,\n  tokenEndPointUrl,\n}) => {\n  const { t } = useTranslation(['kasTemporaryFixMe']);\n  const [isMobileModalOpen, setIsMobileModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isMobileTablet()) {\n      const localStorage = window.localStorage;\n      if (localStorage) {\n        const count = parseInt(localStorage.getItem('openSessions') || '0');\n        const newCount = count + 1;\n        if (count < 1) {\n          localStorage.setItem('openSessions', `${newCount}`);\n          setIsMobileModalOpen(true);\n        }\n      }\n    }\n  }, []);\n\n  const handleMobileModal = () => {\n    setIsMobileModalOpen(!isMobileModalOpen);\n  };\n\n  return (\n    <>\n      <InstanceDrawer\n        tokenEndPointUrl={tokenEndPointUrl}\n        renderContent={() => (\n          <main className='pf-c-page__main'>\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <TextContent>\n                    <Text component='h1'>{t('kafka_instances')}</Text>\n                  </TextContent>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {children}\n          </main>\n        )}\n      />\n      <Modal\n        variant={ModalVariant.small}\n        title='Mobile experience'\n        isOpen={isMobileModalOpen}\n        onClose={() => handleMobileModal()}\n        actions={[\n          <Button\n            key='confirm'\n            variant='primary'\n            onClick={() => handleMobileModal()}\n          >\n            Ok\n          </Button>,\n        ]}\n      >\n        The mobile experience isn&apos;t fully optimized yet, so some items\n        might not appear correctly.\n      </Modal>\n    </>\n  );\n};\n"],"names":["getIsDocumentHidden","document","doc","hidden","msHidden","webkitHidden","usePageVisibility","useState","isVisible","setIsVisible","onVisibilityChange","useEffect","visibilityChange","addEventListener","removeEventListener","KasModalLoader","t","registerModals","useModal","useTranslation","ModalType","lazyComponent","variant","title","ResourcesTab","DetailsTab","InstanceDrawerContent","bootstrap_server_host","tokenEndPointUrl","instanceDrawerTab","setInstanceDrawerTab","instanceDrawerInstance","isKafkaPending","status","fallback","Tabs","activeKey","toString","onSelect","_","tab","selectTab","Tab","eventKey","TabTitleText","externalServer","endsWith","instanceId","id","InstanceDrawer","renderContent","dataOuiaAppId","isInstanceDrawerOpen","openInstanceDrawer","closeInstanceDrawer","setInstanceDrawerInstance","noInstances","content","useMemo","closeDrawer","openDrawer","setInstance","isExpanded","isLoading","undefined","onClose","panelBodyContent","drawerHeaderProps","text","label","value","name","headingLevel","notRequiredDrawerContentBackground","InstanceDrawerContext","useInstanceDrawer","answer","useContext","Error","InstanceDrawerContextProvider","initialTab","initialInstance","initialNoInstances","children","defaultTab","setNoInstances","Provider","InstanceDrawerTab","Pagination","total","page","perPage","widgetId","itemCount","PaginationVariant","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","NoResultsFound","count","dataLoaded","emptyStateProps","titleProps","emptyStateBodyProps","body","StreamsTable","onDeleteInstance","onChangeOwner","onViewInstance","onViewConnection","loggedInUser","expectedTotal","kafkaDataLoaded","kafkaInstanceItems","isOrgAdmin","setOrderBy","orderBy","filterSelected","setFilterSelected","filteredValue","setFilteredValue","onCreate","refresh","handleCreateInstanceModal","cells","transforms","sortable","sortBy","sort","split","length","index","parameter","toLowerCase","getIndexForSortParameter","direction","SortByDirection","rows","tableRow","loadingCount","forEach","row","cloud_provider","region","created_at","owner","instance_type","cloudProviderDisplayName","regionDisplayName","push","Link","to","instanceName","originalData","skeleton","Skeleton","onSelectKebabDropdownOption","event","selectedOption","deleteInstance","previousNode","target","parentElement","previousSibling","focus","kafka","tableProps","actionResolver","rowData","additionalProps","isUserSameAsLoggedIn","tooltip","isDisabled","style","pointerEvents","cursor","onClick","tooltipProps","position","onSort","_event","extraData","myDirection","property","getParameterForSortIndex","hasDefaultCustomRowWrapper","activeRow","onRowClick","rowIndex","HTMLElement","tagName","rowDataTestId","useTimeout","callback","delay","savedCallback","useRef","current","setTimeout","clearInterval","KafkaStatusAlerts","addAlert","useAlert","auth","useAuth","deletedKafkas","setDeletedKafkas","currentUserKafkas","setCurrentUserKafkas","items","setItems","setLoggedInUser","basePath","kas","getUsername","then","username","fetchCurrentUserKafkas","getToken","accessToken","filter","DefaultApi","Configuration","getKafkas","res","kafkaInstances","data","addAlertAfterSuccessDeletion","notPresentKafkas","k","findIndex","dk","map","allDeletedKafkas","item","prev","Object","assign","splice","removeKafkaFromDeleted","AlertVariant","lastItemsState","JSON","parse","stringify","instances","cfItem","description","dangerouslySetInnerHTML","__html","dataTestId","incompleteKafkas","addAlertAfterSuccessCreation","StreamsTableConnected","preCreateInstance","shouldOpenCreateModal","useConfig","location","useLocation","searchParams","URLSearchParams","search","showCreateModal","showTransferOwnershipModal","hideDeleteModal","showDeleteModal","history","useHistory","kafkaInstancesList","setKafkaInstancesList","setKafkaDataLoaded","setExpectedTotal","isUserUnauthorized","setIsUserUnauthorized","setIsOrgAdmin","waitingForDelete","setWaitingForDelete","openCreateModal","refreshKafkasAfterAction","open","fetchKafkas","filters","filterKey","filterValue","filterQuery","val","trim","isExact","join","kafkaItems","error","errorCode","response","code","handleServerError","size","selectedKafkaItem","find","onDelete","setSearchParam","useCallback","set","instance","apisService","deleteKafkaById","reason","isDisplayKafkaEmptyState","PageSection","className","PageSectionVariants","padding","default","Card","ouiaId","doDelete","refreshKafkas","StatusColumn","getStatusIcon","Spinner","Flex","statusIcon","FlexItem","spacer","filteredstatus","st","useTooltipContent","isMaxFilter","fieldName","CloudProviderFilter","getSelectionForFilter","onDeleteChipGroup","onDeleteChip","updateFilter","removeFilterValue","isDisabledSelectOption","options","cloudProvider","disabled","ToolbarFilter","chips","deleteChip","_category","chip","deleteChipGroup","categoryName","showToolbarItem","CloudProviderSelect","selectRef","tooltipContent","FilterTooltip","Tooltip","reference","expanded","setExpanded","clear","Select","SelectVariant","onToggle","prevState","selections","isOpen","selection","isPlaceholder","placeholderText","ref","option","SelectOption","key","NameFilter","v","valid","setValid","setValue","inputRef","change","input","onKeyPress","onFilter","test","validate","InputGroup","TextInput","type","validated","ValidatedOptions","placeholder","onChange","Button","ButtonVariant","OwnerFilter","renderOwnerInput","RegionFilter","RegionSelect","FilterSelect","isFilterExpanded","setIsFilterExpanded","ToolbarItem","StatusFilter","statusFilterOptions","s","StatusSelect","StreamsFilterGroup","optionValue","newFilterValue","newFilteredValue","removeIfPresent","filterIndex","f","filterValueIndex","selectedFilters","category","filterOptions","prevFilterValue","filterChip","chipIndex","removeFilteredValue","copyFilteredValue","ToolbarGroup","StreamsToolbar","setIsMaxFilter","handleMaxFilters","maxFilterCount","provisioningStatus","deprovisionStatus","toolbarItems","isCompact","alignment","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","toggleGroupItems","Unauthorized","isFilled","emptyStateIconProps","icon","KafkaEmptyState","qsContext","QuickStartContext","Trans","i18nKey","ns","components","isSmall","isInline","setActiveQuickStart","KasLayout","isMobileModalOpen","setIsMobileModalOpen","localStorage","window","parseInt","getItem","newCount","setItem","handleMobileModal","Level","LevelItem","TextContent","Text","component","Modal","ModalVariant","actions"],"sourceRoot":""}