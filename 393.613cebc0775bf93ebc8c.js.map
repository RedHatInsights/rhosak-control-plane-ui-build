{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/components/EmptyState/EmptyState.tsx","webpack://mk-ui-frontend/./src/openapi/base.ts","webpack://mk-ui-frontend/./src/openapi/api.ts","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/utils/error.ts","webpack://mk-ui-frontend/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/TablePagination.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsTableView.tsx","webpack://mk-ui-frontend/./src/app/models/models.ts","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/DrawerPanelContentInfo.tsx","webpack://mk-ui-frontend/./src/app/components/CreateInstanceModal/CreateInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/Drawer/GenerateCredential.tsx","webpack://mk-ui-frontend/./src/app/Drawer/InstanceDrawer.tsx","webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/hooks/useTimeout.ts","webpack://mk-ui-frontend/./src/app/api/ApiContext.tsx","webpack://mk-ui-frontend/./src/app/auth/AuthContext.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://mk-ui-frontend/./src/app/components/Loading/Loading.tsx","webpack://mk-ui-frontend/./src/i18n/i18n.ts"],"names":["EmptyState","createStreamsInstance","setCreateStreamsInstance","t","useTranslation","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","EmptyStateBody","Button","variant","onClick","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","name","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequestPayload","options","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","undefined","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","url","createServiceAccount","serviceAccountRequest","deleteKafkaById","id","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByKafkaId","duration","interval","filters","listCloudProviderRegions","page","listCloudProviders","listKafkas","orderBy","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI","StatusColumn","filteredstatus","status","instanceName","Flex","FlexItem","spacer","default","toLowerCase","CheckCircleIcon","className","ExclamationCircleIcon","PendingIcon","Spinner","IconSize","getStatusIcon","st","value","length","isServiceApiError","error","response","code","DeleteInstanceModal","confirmActionLabel","cancelActionLabel","title","onConfirm","isModalOpen","setIsModalOpen","description","ModalVariant","titleIconVariant","instanceStatus","selectedInstance","useState","instanceNameInput","setInstanceNameInput","selectedInstanceName","handleModalToggle","Modal","isOpen","showClose","onClose","actions","key","ButtonVariant","isDisabled","Text","dangerouslySetInnerHTML","__html","htmlFor","TextInput","type","onChange","autoFocus","TablePagination","perPage","itemCount","isCompact","paginationTitle","history","location","searchParams","URLSearchParams","setSearchParam","useCallback","set","toString","onSetPage","_","newPage","push","onPerPageSelect","newPerPage","Pagination","titles","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","StreamsToolbar","setFilterSelected","filterSelected","total","filteredValue","setFilteredValue","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","nameInputRef","useRef","ownerInputRef","mainFilterOptions","label","disabled","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","option","map","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","filterValueIndex","splice","isInputValid","test","trim","onFilter","filterType","isExact","clearSelection","copyFilteredValue","onInputPress","event","target","getSelectionForFilter","selectedFilters","val","onDeleteChip","category","chip","newFilteredValue","prevFilterValue","filterChip","find","chipIndex","onDeleteChipGroup","toggleGroupItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","onSelect","_event","selection","index","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","validated","ValidatedOptions","placeholder","input","onKeyPress","ref","SearchIcon","Tooltip","content","reference","isPlaceholder","placeholderText","Toolbar","clearAllFilters","inset","lg","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","alignment","widgetId","StreamsTableView","mainToggle","kafkaInstanceItems","onViewInstance","onViewConnection","onConnectToInstance","refresh","kafkaDataLoaded","onDelete","expectedTotal","setOrderBy","authContext","useContext","AuthContext","ApiContext","isDeleteModalOpen","setIsDeleteModalOpen","setSelectedInstance","tableColumns","transforms","sortable","items","setItems","loggedInUser","setLoggedInUser","addAlert","useEffect","getUsername","username","lastItemsState","parse","item","forEach","instances","cfItem","AlertVariant","incompleteKafkas","onSelectKebabDropdownOption","originalData","selectedOption","onSelectDeleteInstance","parentElement","previousSibling","focus","instance","onDeleteInstance","instanceId","getToken","apisService","DefaultApi","reason","config","getDeleteInstanceModalConfig","getindexForSortParameter","parameter","getSortBy","sort","split","direction","SortByDirection","Table","cells","rows","tableRow","loadingCount","loadingRowCount","totalPage","Math","floor","getLoadingRowsCount","i","Skeleton","row","date","cloud_provider","created_at","owner","cloudProviderDisplayName","regionDisplayName","Link","to","Date","formatDistance","preparedTableCells","actionResolver","rowData","_extraData","additionalProps","isUserSameAsLoggedIn","tooltip","tooltipProps","position","style","pointerEvents","cursor","getActionResolver","onSort","extraData","myDirection","property","getParameterForSortIndex","sortBy","TableHeader","TableBody","EmptyStateVariant","PaginationVariant","multi_az","DrawerPanelContentInfo","DrawerPanelContent","DrawerHead","TextContent","component","TextVariants","TextList","TextListVariants","TextListItem","TextListItemVariants","emptyProvider","kind","display_name","enabled","CreateInstanceModal","onCreate","cloudProviders","newKafka","NewKafka","kafkaFormData","setKafkaFormData","fieldState","nameValidated","setNameValidated","cloudRegionValidated","setCloudRegionValidated","cloudRegions","setCloudRegions","isFormValid","setIsFormValid","fetchCloudRegions","provider","res","providerRegions","providers","concat","enabledRegions","prevData","enableCloudProviders","handleInstanceNameChange","isValid","message","handleCloudRegionChange","validRegion","getTileIcon","AwsIcon","color","onChangeAvailabilty","zone","createInstanceForm","Form","FormAlert","Alert","isInline","FormGroup","helperText","helperTextInvalid","helperTextInvalidIcon","isRequired","fieldId","Tile","isSelected","FormSelect","FormSelectOption","ToggleGroup","Drawer","isStatic","DrawerContent","panelContent","DrawerContentBody","GenerateCredential","steps","isCreated","setIsCreated","setIsOpen","stepNo","setStepNo","credentialNameInput","setCredentialNameInput","radio1Step1","setRadio1Step1","radio2Step1","setRadio2Step1","radio3Step1","setRadio3Step1","radio4Step1","setRadio4Step1","isTopicSwitchChecked","setIsTopicSwitchChecked","selectTopicAccess","setSelectTopicAccess","topicAccessInput","setTopicAccessInput","isConsumerSwitchChecked","setIsConsumerSwitchChecked","selectConsumerAccess","setSelectConsumerAccess","consumerAccessInput","setConsumerAccessInput","radio1Step4","setRadio1Step4","radio2Step4","setRadio2Step4","radio3Step4","setRadio3Step4","selectTransactionAccess","setSelectTransactionAccess","transactionAccessInput","setTransactionAccessInput","confirmationCheckbox","setConfirmationCheckbox","credential","setCredential","isLoading","setIsLoading","setError","onMove","curr","_prev","handleChangeStep1","_checked","checked","handleChangeStep4","step1","Radio","isChecked","step2","Switch","labelOff","Split","hasGutter","SplitItem","isFilled","Popover","bodyContent","step3","step4","clientID","KeyIcon","InputGroupText","ClipboardCopy","isReadOnly","clientSecret","Bullseye","Checkbox","spinnerAriaValueText","Wizard","isFinishedStep","unshift","nextButtonText","onNext","onBack","hideClose","InstanceDrawer","activeTab","instanceDetail","updated_at","activeTab1Key","setActiveTab1Key","activeTab2Key","setActiveTab2Key","handleTab2Click","tabIndex","externalServer","bootstrapServerHost","endsWith","resourcesTab","sampleCodeTab","CopyIcon","renderTextListItemDetail","detailsTab","Grid","GridItem","span","Card","isFlat","CardBody","format","widths","hidden","Loading","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Tabs","activeKey","Tab","eventKey","TabTitleText","isSecondary","OpenshiftStreams","callback","delay","savedCallback","parseInt","get","has","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","setCloudProviders","setKafkaDataLoaded","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","drawerRef","fetchKafkas","justPoll","isValidToken","join","kafkaInstances","current","setTimeout","clearInterval","refreshKafkas","isExpanded","onExpand","PageSection","PageSectionVariants","Level","LevelItem","padding","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","body","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","pseudolocalizationEnabled","window","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","lng","Intl","NumberFormat","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","windowError","console"],"mappings":"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","file":"393.613cebc0775bf93ebc8c.js","sourcesContent":["import React from 'react';\nimport { Title, Button, EmptyState as PFEmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\n\ntype EmptyStateProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n};\n\nconst EmptyState: React.FC<EmptyStateProps> = ({ createStreamsInstance, setCreateStreamsInstance }) => {\n  const { t } = useTranslation();\n  const onCreate = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n  return (\n    <>\n      <PFEmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('you_do_not_have_any_kafka_instances_yet')}\n        </Title>\n        <EmptyStateBody>{t('create_a_kafka_instance_to_get_started')}</EmptyStateBody>\n        <Button variant=\"primary\" onClick={onCreate}>\n          {t('create_a_kafka_instance')}\n        </Button>\n      </PFEmptyState>\n    </>\n  );\n};\n\nexport { EmptyState };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof Metric\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof Metric\n     */\n    values?: Array<Values>;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList extends MetricsListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByKafkaId.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByKafkaId(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList> {\n            return DefaultApiFp(configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size={IconSize.md} aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem spacer={{ default: 'spacerSm' }}>{getStatusIcon()}</FlexItem>\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nexport const isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n","import React, { FunctionComponent, useState } from 'react';\nimport { Modal, Button, ButtonVariant, ModalVariant, ModalProps, TextInput, Text } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { InstanceStatus } from '@app/utils';\nimport './DeleteInstanceModal.css';\nimport { KafkaRequest } from 'src/openapi';\n\nexport interface DeleteInstanceModalProps extends Omit<ModalProps, 'children'> {\n  confirmActionLabel?: string;\n  cancelActionLabel?: string;\n  description?: string;\n  selectedInstance: KafkaRequest;\n  isModalOpen: boolean;\n  instanceStatus: string | undefined;\n  setIsModalOpen: (isModalOpen: boolean) => void;\n  onConfirm: (instance: KafkaRequest) => Promise<void>;\n}\n\nconst DeleteInstanceModal: FunctionComponent<DeleteInstanceModalProps> = ({\n  confirmActionLabel,\n  cancelActionLabel,\n  title,\n  onConfirm,\n  isModalOpen,\n  setIsModalOpen,\n  description,\n  variant = ModalVariant.small,\n  titleIconVariant = 'warning',\n  instanceStatus,\n  selectedInstance,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const selectedInstanceName: string = selectedInstance?.name || '';\n\n  const handleModalToggle = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onConfirmDelete = () => {\n    onConfirm(selectedInstance);\n  };\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={t('delete_instance_modal')}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          key=\"confirm-button\"\n          id=\"mk--confirm__button\"\n          variant={ButtonVariant.danger}\n          onClick={onConfirmDelete}\n          isDisabled={isConfirmButtonDisabled()}\n        >\n          {confirmActionLabel || t('delete_instance')}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" id=\"mk--cancel__button\" onClick={handleModalToggle}>\n          {cancelActionLabel || t('cancel')}\n        </Button>,\n      ]}\n    >\n      <Text className=\"mk--delete-instance__modal--text\" dangerouslySetInnerHTML={{ __html: description || '' }} />\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport { DeleteInstanceModal };\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { Pagination, PaginationProps, PaginationTitles } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\ninterface TablePagination extends PaginationProps, Pick<PaginationTitles, 'paginationTitle'> {}\n\nexport const TablePagination: FunctionComponent<TablePagination> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant,\n  isCompact,\n  paginationTitle\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const { t } = useTranslation();\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  if (itemCount && itemCount > 0) {\n    return (\n      <Pagination\n        itemCount={itemCount}\n        perPage={perPage}\n        page={page}\n        onSetPage={onSetPage}\n        variant={variant || 'top'}\n        onPerPageSelect={onPerPageSelect}\n        isCompact={isCompact}\n        titles={{\n          paginationTitle,\n          perPageSuffix: t('per_page_suffix'),\n          toFirstPage: t('to_first_page'),\n          toPreviousPage: t('to_previous_page'),\n          toLastPage: t('to_last_page'),\n          toNextPage: t('to_next_page'),\n          optionsToggle: t('options_toggle'),\n          currPage: t('curr_page'),\n        }}\n      />\n    );\n  }\n  return null;\n};\n","import React, { useState, useRef } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarToggleGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { TablePagination } from './TablePagination';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions } from '@app/utils/utils';\nimport './StreamsToolbar.css';\n\ntype StreamsToolbarProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n}) => {\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n  const { t } = useTranslation();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter') {\n      if (event?.target?.name === 'filter names') {\n        onFilter('name');\n      } else if (event.target?.name === 'filter owners') {\n        onFilter('owner');\n      }\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      switch (key) {\n        case 'name':\n        case 'owner':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        case 'region':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        case 'cloud_provider':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        case 'status':\n          return selectedFilters[0].filterValue.map((val) => val.value);\n        default:\n          return [];\n      }\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    if (category === 'status') {\n      filterChip = statusFilterOptions.find((option) => option.label === chip.toString())?.value;\n    } else if (category === 'region') {\n      filterChip = regionFilterOptions.find((option) => option.label === chip.toString())?.value;\n    } else if (category === 'cloud_provider') {\n      filterChip = regionFilterOptions.find((option) => option.label === chip.toString())?.value;\n    }\n    const chipIndex = filterIndex >= 0 ? prevFilterValue.findIndex((val) => val.value === filterChip) : -1;\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n    }\n    setFilteredValue(newFilteredValue);\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected && filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onChangeSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"filter names\"\n                  id=\"filterText\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  validated={!isNameValid ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid}\n                  onClick={() => onFilter('name')}\n                  aria-label=\"Search instances\"\n                >\n                  <SearchIcon />\n                </Button>\n                {!isNameValid && (\n                  <Tooltip\n                    content={\n                      <div>\n                        Valid characters for name are lowercase letters from a to z, numbers from 0 to 9, underscore\n                        (_) hyphens (-) and percentage (%)\n                      </div>\n                    }\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <ToolbarItem>\n              <Select\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select cloud provider\"\n                onToggle={onCloudProviderFilterToggle}\n                selections={getSelectionForFilter('cloud_provider')}\n                isOpen={isCloudProviderFilterExpanded}\n                onSelect={onCloudProviderFilterSelect}\n                placeholderText={t('filter_by_cloud_provider')}\n              >\n                {cloudProviderFilterOptions.map((option, index) => (\n                  <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n        >\n          {filterSelected === 'region' && (\n            <ToolbarItem>\n              <Select\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select region\"\n                onToggle={onRegionFilterToggle}\n                selections={getSelectionForFilter('region')}\n                isOpen={isRegionFilterExpanded}\n                onSelect={onRegionFilterSelect}\n                placeholderText={t('filter_by_region')}\n              >\n                {regionFilterOptions.map((option, index) => (\n                  <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"filter owners\"\n                  id=\"filterOwners\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label=\"Search owners\"\n                >\n                  <SearchIcon />\n                </Button>\n                {!isOwnerValid && (\n                  <Tooltip\n                    content={\n                      <div>\n                        Valid characters for owner are lowercase letters from a to z, numbers from 0 to 9, underscore\n                        (_) hyphens (-) and percentage (%)\n                      </div>\n                    }\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n        >\n          {filterSelected === 'status' && (\n            <ToolbarItem>\n              <Select\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select status\"\n                onToggle={onStatusFilterToggle}\n                selections={getSelectionForFilter('status')}\n                isOpen={isStatusFilterExpanded}\n                onSelect={onStatusFilterSelect}\n                placeholderText={t('filter_by_status')}\n              >\n                {statusFilterOptions.map((option, index) => (\n                  <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                    {option.label}\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  return (\n    <Toolbar\n      id=\"instance-toolbar\"\n      clearAllFilters={onClear}\n      inset={{ lg: 'insetLg' }}\n      collapseListedFiltersBreakpoint=\"md\"\n    >\n      <ToolbarContent>\n        <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n          {toggleGroupItems}\n        </ToolbarToggleGroup>\n        <ToolbarItem>\n          <Button variant=\"primary\" onClick={() => setCreateStreamsInstance(!createStreamsInstance)}>\n            {t('create_kafka_instance')}\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem variant=\"pagination\" alignment={{ default: 'alignRight' }}>\n          <TablePagination\n            widgetId=\"pagination-options-menu-top\"\n            itemCount={total}\n            page={page}\n            perPage={perPage}\n            isCompact={true}\n            paginationTitle={t('minimal_pagination')}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nexport { StreamsToolbar };\n","import React, { useContext, useEffect, useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { TFunction } from 'i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  Table,\n  TableBody,\n  TableHeader,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport {\n  AlertVariant,\n  PaginationVariant,\n  Skeleton,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n  EmptyStateIcon,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { DefaultApi, KafkaRequest } from '../../../openapi/api';\nimport { StatusColumn } from './StatusColumn';\nimport { DeleteInstanceModal } from '@app/components/DeleteInstanceModal';\nimport { TablePagination } from './TablePagination';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { StreamsToolbar } from './StreamsToolbar';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport './StatusColumn.css';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { InstanceStatus, isServiceApiError } from '@app/utils';\nimport { useHistory } from 'react-router-dom';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { formatDistance } from 'date-fns';\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nexport type TableProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  kafkaInstanceItems: KafkaRequest[];\n  onViewInstance: (instance: KafkaRequest) => void;\n  onViewConnection: (instance: KafkaRequest) => void;\n  onConnectToInstance: (data: KafkaRequest) => void;\n  mainToggle: boolean;\n  refresh: () => void;\n  page: number;\n  perPage: number;\n  total: number;\n  kafkaDataLoaded: boolean;\n  onDelete:()=>void;\n  expectedTotal: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  filterSelected: string;\n  setFilterSelected: (filterSelected: string) => void;\n  orderBy: string;\n  setOrderBy: (order: string) => void;\n};\n\ntype ConfigDetail = {\n  title: string;\n  confirmActionLabel: string;\n  description: string;\n};\n\nexport const getDeleteInstanceModalConfig = (\n  t: TFunction,\n  status: string | undefined,\n  instanceName: string | undefined\n): ConfigDetail => {\n  const config: ConfigDetail = {\n    title: '',\n    confirmActionLabel: '',\n    description: '',\n  };\n  if (status === InstanceStatus.READY) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_complete', { instanceName });\n  } else if (status === InstanceStatus.ACCEPTED || status === InstanceStatus.PROVISIONING) {\n    config.title = `${t('delete_instance')}?`;\n    config.confirmActionLabel = t('delete_instance');\n    config.description = t('delete_instance_status_accepted_or_provisioning', { instanceName });\n  }\n  return config;\n};\n\nconst StreamsTableView = ({\n  mainToggle,\n  kafkaInstanceItems,\n  onViewInstance,\n  onViewConnection,\n  onConnectToInstance,\n  refresh,\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  page,\n  perPage,\n  total,\n  kafkaDataLoaded,\n  onDelete,\n  expectedTotal,\n  filteredValue,\n  setFilteredValue,\n  setFilterSelected,\n  filterSelected,\n  orderBy,\n  setOrderBy,\n}: TableProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n  const { t } = useTranslation();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [selectedInstance, setSelectedInstance] = useState<KafkaRequest>({});\n  const tableColumns = [\n    { title: t('name'), transforms: [sortable] },\n    { title: t('cloud_provider'), transforms: [sortable] },\n    { title: t('region'), transforms: [sortable] },\n    { title: t('owner'), transforms: [sortable] },\n    { title: t('status'), transforms: [sortable] },\n    { title: t('time_created'), transforms: [sortable] },\n  ];\n  const [items, setItems] = useState<Array<KafkaRequest>>([]);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const searchParams = new URLSearchParams(location.search);\n  const history = useHistory();\n\n  const { addAlert } = useAlerts();\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    authContext?.getUsername().then((username) => setLoggedInUser(username));\n  }, []);\n\n  // function to get exact number of skeleton count required for the current page\n  const getLoadingRowsCount = () => {\n    // initiaise loadingRowCount by perPage\n    let loadingRowCount = perPage;\n    /*\n      if number of expected count is greater than 0\n        calculate the loadingRowCount\n      else\n        leave the loadingRowCount to perPage\n     */\n    if (expectedTotal && expectedTotal > 0) {\n      // get total number of pages\n      const totalPage =\n        expectedTotal % perPage !== 0 ? Math.floor(expectedTotal / perPage) + 1 : Math.floor(expectedTotal / perPage);\n      // check whether the current page is the last page\n      if (page === totalPage) {\n        // check whether to total expected count is greater than perPage count\n        if (expectedTotal > perPage) {\n          // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n          loadingRowCount = expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n        } else {\n          loadingRowCount = expectedTotal;\n        }\n      }\n    }\n    // return the exact number of skeleton expected at the time of loading\n    return loadingRowCount !== 0 ? loadingRowCount : perPage;\n  };\n\n  useEffect(() => {\n    /*\n      the logic is to redirect the user to previous page\n      if there are no content for the particular page number and page size\n    */\n    if (page > 1) {\n      if (kafkaInstanceItems.length === 0) {\n        setSearchParam('page', (page - 1).toString());\n        setSearchParam('perPage', perPage.toString());\n        history.push({\n          search: searchParams.toString(),\n        });\n      }\n    }\n\n    const lastItemsState: KafkaRequest[] = JSON.parse(JSON.stringify(items));\n    if (items && items.length > 0) {\n      const completedOrFailedItems = Object.assign([], kafkaInstanceItems).filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.READY || item.status === InstanceStatus.FAILED\n      );\n      lastItemsState.forEach((item: KafkaRequest) => {\n        const instances: KafkaRequest[] = completedOrFailedItems.filter(\n          (cfItem: KafkaRequest) => item.id === cfItem.id\n        );\n        if (instances && instances.length > 0) {\n          if (instances[0].status === InstanceStatus.READY) {\n            addAlert(\n              t('kafka_successfully_created'),\n              AlertVariant.success,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_success_message', { name: instances[0]?.name }) }} />\n            );\n          } else if (instances[0].status === InstanceStatus.FAILED) {\n            addAlert(\n              t('kafka_not_created'),\n              AlertVariant.danger,\n              <span dangerouslySetInnerHTML={{ __html: t('kafka_failed_message', { name: instances[0]?.name }) }} />\n            );\n          }\n        }\n      });\n    }\n    const incompleteKafkas = Object.assign(\n      [],\n      kafkaInstanceItems?.filter(\n        (item: KafkaRequest) => item.status === InstanceStatus.PROVISIONING || item.status === InstanceStatus.ACCEPTED\n      )\n    );\n    setItems(incompleteKafkas);\n  }, [page, perPage, kafkaInstanceItems]);\n\n  const onSelectKebabDropdownOption = (event: any, originalData: KafkaRequest, selectedOption: string) => {\n    if (selectedOption === 'view-instance') {\n      onViewInstance(originalData);\n    } else if (selectedOption === 'connect-instance') {\n      onViewConnection(originalData);\n    } else if (selectedOption === 'delete-instance') {\n      onSelectDeleteInstance(originalData);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const getActionResolver = (rowData: IRowData) => {\n    if (!kafkaDataLoaded) {\n      return [];\n    }\n    const originalData: KafkaRequest = rowData.originalData;\n    const isUserSameAsLoggedIn = originalData.owner === loggedInUser;\n    let additionalProps: any;\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('no_permission_to_delete_kafka'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('view_details'),\n        id: 'view-instance',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'view-instance'),\n      },\n      {\n        title: t('connect_to_instance'),\n        id: 'connect-instance',\n        onClick: () => onViewConnection(originalData),\n      },\n      {\n        title: t('delete_instance'),\n        id: 'delete-instance',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-instance'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount();\n    if (!kafkaDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    const formatDate = (date) => {\n      date = typeof date === 'string' ? new Date(date) : date;\n      return (\n        <>\n          {formatDistance(date, new Date())} {t('ago')}\n        </>\n      );\n    };\n\n    kafkaInstanceItems.forEach((row: IRowData) => {\n      const { name, cloud_provider, region, created_at, status, owner } = row;\n      const cloudProviderDisplayName = t(cloud_provider);\n      const regionDisplayName = t(region);\n      tableRow.push({\n        cells: [\n          {\n            title: (\n              <Link to=\"\" onClick={() => onConnectToInstance(row as KafkaRequest)}>\n                {name}\n              </Link>\n            ),\n          },\n          cloudProviderDisplayName,\n          regionDisplayName,\n          owner,\n          {\n            title: <StatusColumn status={status} instanceName={name} />,\n          },\n          {\n            title: formatDate(created_at),\n          },\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData);\n  };\n\n  const onSelectDeleteInstance = (instance: KafkaRequest) => {\n    const { status } = instance;\n    setSelectedInstance(instance);\n    /**\n     * Hide confirm modal for status 'failed' and call delete api\n     * Show confirm modal for all status except 'failed' and call delete api\n     */\n    if (status === InstanceStatus.FAILED) {\n      onDeleteInstance(instance);\n    } else {\n      setIsDeleteModalOpen(!isDeleteModalOpen);\n    }\n  };\n\n  const onDeleteInstance = async (instance: KafkaRequest) => {\n    const instanceId = selectedInstance?.id || instance?.id;\n    /**\n     * Throw an error if kafka id is not set\n     * and avoid delete instance api call\n     */\n    if (instanceId === undefined) {\n      throw new Error('kafka instance id is not set');\n    }\n\n    const accessToken = await authContext?.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n    onDelete();\n    setIsDeleteModalOpen(false);\n    try {\n      await apisService.deleteKafkaById(instanceId,true).then(() => {\n        addAlert(t('kafka_successfully_deleted', { name: instance?.name }), AlertVariant.success);\n        refresh();\n      });\n    } catch (error) {\n      let reason: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n      }\n      /**\n       * Todo: show user friendly message according to server code\n       * and translation for specific language\n       *\n       */\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  const { title, confirmActionLabel, description } = getDeleteInstanceModalConfig(\n    t,\n    selectedInstance?.status,\n    selectedInstance?.name\n  );\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'cloud_provider';\n      case 2:\n        return 'region';\n      case 3:\n        return 'owner';\n      case 4:\n        return 'status';\n      case 5:\n        return 'created_at';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'cloud_provider':\n        return 1;\n      case 'region':\n        return 2;\n      case 'owner':\n        return 3;\n      case 'status':\n        return 4;\n      case 'created_at':\n        return 5;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, index: number, direction: string, extraData: IExtraColumnData) => {\n    let myDirection = direction;\n    if (getSortBy()?.index !== index && extraData.property === 'time-created') {\n      // trick table to sort descending first for date column\n      // https://github.com/patternfly/patternfly-react/issues/5329\n      myDirection = 'desc';\n    }\n    setOrderBy(`${getParameterForSortIndex(index)} ${myDirection}`);\n  };\n\n  const getSortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <StreamsToolbar\n        mainToggle={mainToggle}\n        createStreamsInstance={createStreamsInstance}\n        setCreateStreamsInstance={setCreateStreamsInstance}\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n      />\n      <Table\n        cells={tableColumns}\n        rows={preparedTableCells()}\n        aria-label={t('cluster_instance_list')}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={getSortBy()}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n      {kafkaInstanceItems.length < 1 && kafkaDataLoaded && (\n        <EmptyState variant={EmptyStateVariant.small}>\n          <EmptyStateIcon icon={SearchIcon} />\n          <Title headingLevel=\"h2\" size=\"lg\">\n            {t('no_results_found')}\n          </Title>\n          <EmptyStateBody>{t('no_results_match_the_filter_criteria')}</EmptyStateBody>\n        </EmptyState>\n      )}\n      <TablePagination\n        widgetId=\"pagination-options-menu-bottom\"\n        itemCount={total}\n        variant={PaginationVariant.bottom}\n        page={page}\n        perPage={perPage}\n        paginationTitle={t('full_pagination')}\n      />\n      <DeleteInstanceModal\n        title={title}\n        selectedInstance={selectedInstance}\n        isModalOpen={isDeleteModalOpen}\n        instanceStatus={selectedInstance?.status}\n        setIsModalOpen={setIsDeleteModalOpen}\n        onConfirm={onDeleteInstance}\n        description={description}\n        confirmActionLabel={confirmActionLabel}\n      />\n    </>\n  );\n};\n\nexport { StreamsTableView };\n","export class NewKafka {\n  cloud_provider: string;\n  multi_az: boolean;\n  region: string;\n  name: string;\n\n  constructor() {\n    this.cloud_provider = '';\n    this.multi_az = false;\n    this.region = '';\n    this.name = '';\n  }\n}\n\nexport type FormDataValidationState = {\n  fieldState?: 'success' | 'warning' | 'error' | 'default';\n  message?: string;\n};\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\n\nconst DrawerPanelContentInfo = () => (\n  <DrawerPanelContent>\n    <DrawerHead>\n      <TextContent>\n        <Text component={TextVariants.h2}>Cluster information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 4 MBps</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100 GB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Partitions</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 100</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Client connections</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 500</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Message size</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>up to 1 MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Availability</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>Multizone highly available</TextListItem>\n        </TextList>\n        <Text component={TextVariants.h2}>Cost information</Text>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Base Cluster</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$1.50/hr</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Ingress/Egress</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.02/MB</TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>Storage</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>$0.0002/GB/hr</TextListItem>\n        </TextList>\n      </TextContent>\n    </DrawerHead>\n  </DrawerPanelContent>\n);\n\nexport { DrawerPanelContentInfo };\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormAlert,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  Modal,\n  ModalVariant,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { FormDataValidationState, NewKafka } from '../../models/models';\nimport { AwsIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './CreateInstanceModal.css';\nimport { useAlerts } from '../Alerts/Alerts';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { DefaultApi, CloudProvider, CloudRegion } from '../../../openapi';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DrawerPanelContentInfo } from './DrawerPanelContentInfo';\n\nexport type CreateInstanceModalProps = {\n  createStreamsInstance: boolean;\n  setCreateStreamsInstance: (createStreamsInstance: boolean) => void;\n  onCreate:()=>void;\n  mainToggle: boolean;\n  refresh: () => void;\n  cloudProviders: Array<CloudProvider>;\n};\n\nconst emptyProvider: CloudProvider = {\n  kind: 'Empty provider',\n  id: 'please_select',\n  display_name: 'Please Select',\n  enabled: true,\n};\n\nconst CreateInstanceModal: React.FunctionComponent<CreateInstanceModalProps> = ({\n  createStreamsInstance,\n  setCreateStreamsInstance,\n  onCreate,\n  cloudProviders,\n  refresh,\n  mainToggle,\n}: CreateInstanceModalProps) => {\n  const { t } = useTranslation();\n  const newKafka: NewKafka = new NewKafka();\n  newKafka.name = '';\n  newKafka.cloud_provider = '';\n  newKafka.region = '';\n  newKafka.multi_az = true;\n  const [kafkaFormData, setKafkaFormData] = useState<NewKafka>(newKafka);\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegionValidated, setCloudRegionValidated] = useState<FormDataValidationState>({ fieldState: 'default' });\n  const [cloudRegions, setCloudRegions] = useState<CloudRegion[]>([]);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const { addAlert } = useAlerts();\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchCloudRegions = async (provider: CloudProvider) => {\n    const accessToken = await authContext?.getToken();\n    const id = provider.id;\n\n    if (accessToken !== undefined && accessToken !== '' && id) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviderRegions(id).then((res) => {\n          const providerRegions = res.data;\n          const providers: CloudProvider[] = [emptyProvider].concat(providerRegions.items);\n          setCloudRegions(providerRegions.items != null ? providers : []);\n          const enabledRegions = providerRegions.items.filter((provider: CloudProvider) => provider.enabled);\n          if (enabledRegions.length === 1 && enabledRegions[0].id && provider.name) {\n            const region: string = enabledRegions[0].id;\n            setKafkaFormData((prevData) => ({ ...prevData, region }));\n          }\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const enableCloudProviders: CloudProvider[] = cloudProviders.filter((provider: CloudProvider) => provider.enabled);\n    if (enableCloudProviders.length > 0 && enableCloudProviders[0].name) {\n      setKafkaFormData({ ...kafkaFormData, cloud_provider: enableCloudProviders[0].name });\n      fetchCloudRegions(enableCloudProviders[0]);\n    }\n  }, [cloudProviders]);\n\n  const onCloudProviderSelect = (cloudProvider: CloudProvider) => {\n    cloudProvider.name && setKafkaFormData({ ...kafkaFormData, cloud_provider: cloudProvider.name });\n    fetchCloudRegions(cloudProvider);\n  };\n\n  const onCreateInstance = async () => {\n    let isValid = true;\n\n    if (kafkaFormData.name === undefined || kafkaFormData.name.trim() === '') {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(kafkaFormData.name.trim())) {\n      isValid = false;\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n\n    if (kafkaFormData.region === undefined || kafkaFormData.region.trim() === '') {\n      isValid = false;\n      setCloudRegionValidated({ fieldState: 'error', message: t('this_is_a_required_field') });\n    }\n\n    const accessToken = await authContext?.getToken();\n\n    if (isValid) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        onCreate();\n        setCreateStreamsInstance(false);\n        await apisService.createKafka(true, kafkaFormData).then((res) => {\n          // addAlert(t('kafka_creation_accepted'), AlertVariant.info);\n          refresh();\n        });\n      } catch (error) {\n        let reason:string|undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    } else {\n      setIsFormValid(false);\n    }\n  };\n\n  const handleModalToggle = () => {\n    setCreateStreamsInstance(!createStreamsInstance);\n  };\n\n  const handleInstanceNameChange = (name?: string) => {\n    let isValid = true;\n    if (name === undefined || name.trim() === '') {\n      isValid = true;\n    } else if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n    setKafkaFormData({ ...kafkaFormData, name: name || '' });\n    if (isValid) {\n      if (nameValidated.fieldState === 'error' && cloudRegionValidated.fieldState !== 'error') setIsFormValid(true);\n      if (nameValidated.fieldState === 'error') {\n        setNameValidated({ fieldState: 'default', message: '' });\n      }\n    } else {\n      setNameValidated({ fieldState: 'error', message: t('create_instance_name_invalid_helper_text') });\n    }\n  };\n\n  const handleCloudRegionChange = (region: string) => {\n    let validRegion: string = region;\n    if (region === 'please_select') {\n      validRegion = '';\n    }\n    if (cloudRegionValidated.fieldState === 'error' && nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n    if (cloudRegionValidated.fieldState === 'error') {\n      setCloudRegionValidated({ fieldState: 'default', message: '' });\n    }\n    setKafkaFormData({ ...kafkaFormData, region: validRegion });\n  };\n\n  const getTileIcon = (provider?: string) => {\n    switch (provider?.toLowerCase()) {\n      case 'aws':\n        return <AwsIcon size=\"lg\" color=\"black\" className=\"mk--create-instance__tile--icon\" />;\n      default:\n        return;\n    }\n  };\n  const onChangeAvailabilty = (zone: string) => {\n    setKafkaFormData({ ...kafkaFormData, multi_az: zone === 'multi' });\n  };\n\n  const createInstanceForm = () => {\n    const { message, fieldState } = nameValidated;\n    return (\n      <Form>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert variant=\"danger\" title={t('create_instance_invalid_alert')} aria-live=\"polite\" isInline />\n          </FormAlert>\n        )}\n        <FormGroup\n          label={t('instance_name')}\n          helperText={t('create_instance_name_helper_text')}\n          helperTextInvalid={message}\n          helperTextInvalidIcon={message != '' && <ExclamationCircleIcon />}\n          isRequired\n          validated={fieldState}\n          fieldId=\"form-instance-name\"\n        >\n          <TextInput\n            isRequired\n            validated={fieldState}\n            type=\"text\"\n            id=\"form-instance-name\"\n            name=\"instance-name\"\n            value={kafkaFormData?.name}\n            onChange={handleInstanceNameChange}\n            autoFocus={true}\n          />\n        </FormGroup>\n        <FormGroup label={t('cloud_provider')} fieldId=\"form-cloud-provider-name\">\n          {cloudProviders.map(\n            (provider: CloudProvider) =>\n              provider.enabled && (\n                <Tile\n                  key={`tile-${provider.name}`}\n                  title={provider.display_name ? t(provider.display_name) : ''}\n                  icon={getTileIcon(provider?.name)}\n                  isSelected={kafkaFormData.cloud_provider === provider.name}\n                  onClick={() => onCloudProviderSelect(provider)}\n                />\n              )\n          )}\n        </FormGroup>\n        <FormGroup\n          label={t('cloud_region')}\n          helperTextInvalid={cloudRegionValidated.message}\n          helperTextInvalidIcon={<ExclamationCircleIcon />}\n          validated={cloudRegionValidated.fieldState}\n          fieldId=\"form-cloud-region-option\"\n        >\n          <FormSelect\n            validated={cloudRegionValidated.fieldState}\n            value={kafkaFormData.region}\n            onChange={handleCloudRegionChange}\n            id=\"cloud-region-select\"\n            name=\"cloud-region\"\n            aria-label={t('cloud_region')}\n          >\n            {cloudRegions.map(\n              (option: CloudRegion, index) =>\n                option.enabled && (\n                  <FormSelectOption\n                    key={index}\n                    value={option.id}\n                    label={option.id ? t(option.id) : option.display_name || ''}\n                  />\n                )\n            )}\n          </FormSelect>\n        </FormGroup>\n        <FormGroup label={t('availabilty_zones')} fieldId=\"availability-zones\">\n          <ToggleGroup aria-label={t('availability_zone_selection')}>\n            {/*\n                  TODO: Currently using HTML version\n                  Issue: https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/24\n              */}\n            <div className=\"pf-c-toggle-group__item\">\n              <button\n                className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === false && 'pf-m-selected'}`}\n                type=\"button\"\n                id=\"single\"\n                disabled\n                onClick={() => {\n                  onChangeAvailabilty('single');\n                }}\n              >\n                <span className=\"pf-c-toggle-group__text\"> {t('single')}</span>\n              </button>\n            </div>\n            <div className=\"pf-c-toggle-group__item\">\n              <button\n                className={`pf-c-toggle-group__button ${kafkaFormData.multi_az === true && 'pf-m-selected'}`}\n                type=\"button\"\n                onClick={() => {\n                  onChangeAvailabilty('multi');\n                }}\n                id=\"multi\"\n              >\n                <span className=\"pf-c-toggle-group__text\"> {t('multi')}</span>\n              </button>\n            </div>\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <>\n      <Modal\n        variant={ModalVariant.medium}\n        title={t('create_a_kafka_instance')}\n        isOpen={createStreamsInstance}\n        onClose={handleModalToggle}\n        actions={[\n          <Button key=\"create\" variant=\"primary\" onClick={onCreateInstance} isDisabled={!isFormValid}>\n            {t('create_instance')}\n          </Button>,\n          <Button key=\"cancel\" variant=\"link\" onClick={handleModalToggle}>\n            {t('cancel')}\n          </Button>,\n        ]}\n      >\n        {mainToggle === true ? (\n          <Drawer isStatic className=\"mk--create-instance-modal__drawer--content\">\n            <DrawerContent panelContent={<DrawerPanelContentInfo />}>\n              <DrawerContentBody>{createInstanceForm()}</DrawerContentBody>\n            </DrawerContent>\n          </Drawer>\n        ) : (\n          createInstanceForm()\n        )}\n        <br />\n        <br />\n      </Modal>\n    </>\n  );\n};\n\nexport { CreateInstanceModal };\n","import React, { useState, FunctionComponent, useContext } from 'react';\nimport {\n  Alert,\n  Bullseye,\n  Button,\n  ClipboardCopy,\n  Checkbox,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateVariant,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSelect,\n  FormSelectOption,\n  InputGroup,\n  InputGroupText,\n  TextInput,\n  Popover,\n  Radio,\n  Split,\n  SplitItem,\n  Switch,\n  Title,\n  TextContent,\n  Text,\n  TextVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon, KeyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Flex/flex.css';\nimport '@patternfly/react-styles/css/utilities/Sizing/sizing.css';\nimport './GenerateCredential.css';\nimport { useTranslation } from 'react-i18next';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { isServiceApiError } from '@app/utils/error';\nimport { DefaultApi, ServiceAccountRequest } from '../../openapi/api';\n\ntype GenerateCredential = {\n  instanceName?: string;\n  mainToggle?: boolean;\n};\n\nconst GenerateCredential: FunctionComponent<GenerateCredential> = ({\n  instanceName = '',\n  mainToggle,\n}: GenerateCredential) => {\n  const { t } = useTranslation();\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const [isCreated, setIsCreated] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [stepNo, setStepNo] = useState(1);\n  const [credentialNameInput, setCredentialNameInput] = useState();\n  const [radio1Step1, setRadio1Step1] = useState(false);\n  const [radio2Step1, setRadio2Step1] = useState(false);\n  const [radio3Step1, setRadio3Step1] = useState(false);\n  const [radio4Step1, setRadio4Step1] = useState(false);\n  const [isTopicSwitchChecked, setIsTopicSwitchChecked] = useState(false);\n  const [selectTopicAccess, setSelectTopicAccess] = useState('name');\n  const [topicAccessInput, setTopicAccessInput] = useState();\n  const [isConsumerSwitchChecked, setIsConsumerSwitchChecked] = useState(false);\n  const [selectConsumerAccess, setSelectConsumerAccess] = useState('name');\n  const [consumerAccessInput, setConsumerAccessInput] = useState();\n  const [radio1Step4, setRadio1Step4] = useState(false);\n  const [radio2Step4, setRadio2Step4] = useState(false);\n  const [radio3Step4, setRadio3Step4] = useState(false);\n  const [selectTransactionAccess, setSelectTransactionAccess] = useState('name');\n  const [transactionAccessInput, setTransactionAccessInput] = useState();\n  const [confirmationCheckbox, setConfirmationCheckbox] = useState(false);\n  const [credential, setCredential] = useState<any | undefined>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState('');\n\n  const generateCredential = async () => {\n    const accessToken = await authContext?.getToken();\n    const serviceAccountRequest: ServiceAccountRequest = {\n      name: instanceName,\n    };\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath,\n    });\n\n    try {\n      await apisService.createServiceAccount(serviceAccountRequest).then((res) => {\n        setCredential(res?.data);\n        setIsLoading(false);\n        setIsOpen(true);\n      });\n    } catch (err) {\n      setIsLoading(false);\n      let reason;\n      if (isServiceApiError(err)) {\n        reason = err.response?.data.reason;\n      }\n      setError(reason);\n    }\n  };\n\n  const handleModalToggle = () => {\n    if (mainToggle) {\n      setIsOpen(true);\n      setIsLoading(false);\n    } else {\n      setIsLoading(true);\n      setError('');\n      setCredential(undefined);\n      generateCredential();\n    }\n  };\n\n  // useEffect(() => {\n  //   if (stepNo === 5) {\n  //     generateCredential();\n  //   }\n  // }, [stepNo]);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setIsCreated(!isCreated);\n    setCredential(undefined);\n    setConfirmationCheckbox(false);\n    setStepNo(1);\n  };\n\n  const onMove = (curr, _prev) => {\n    setStepNo(curr.id);\n  };\n\n  const handleTextInputChange1 = (credentialNameInput) => {\n    setCredentialNameInput(credentialNameInput);\n  };\n\n  const handleChangeStep1 = (_checked, event) => {\n    setRadio1Step1(false);\n    setRadio2Step1(false);\n    setRadio3Step1(false);\n    setRadio4Step1(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-1') {\n      setRadio1Step1(value);\n    } else if (name === 'radio2-1') {\n      setRadio2Step1(value);\n    } else if (name === 'radio3-1') {\n      setRadio3Step1(value);\n    } else if (name === 'radio4-1') {\n      setRadio4Step1(value);\n    }\n  };\n\n  const handleTopicSwitchChange = (isTopicSwitchChecked) => {\n    setIsTopicSwitchChecked(isTopicSwitchChecked);\n  };\n\n  const handleSelectChange2 = (event) => {\n    setSelectTopicAccess(event);\n  };\n\n  const handleTextInputChange2 = (topicAccessInput) => {\n    setTopicAccessInput(topicAccessInput);\n  };\n\n  const handleConsumerSwitchChange = (isConsumerSwitchChecked) => {\n    setIsConsumerSwitchChecked(isConsumerSwitchChecked);\n  };\n\n  const handleSelectChange3 = (event) => {\n    setSelectConsumerAccess(event);\n  };\n\n  const handleTextInputChange3 = (consumerAccessInput) => {\n    setConsumerAccessInput(consumerAccessInput);\n  };\n\n  const handleChangeStep4 = (_checked, event) => {\n    setRadio1Step4(false);\n    setRadio2Step4(false);\n    setRadio3Step4(false);\n\n    const target = event.target;\n    const value = target.type === 'radio' ? target.checked : target.value;\n    const name = target.name;\n\n    if (name === 'radio1-4') {\n      setRadio1Step4(value);\n    } else if (name === 'radio2-4') {\n      setRadio2Step4(value);\n    } else if (name === 'radio3-4') {\n      setRadio3Step4(value);\n    }\n  };\n\n  const handleSelectChange4 = (event) => {\n    setSelectTransactionAccess(event);\n  };\n\n  const handleTextInputChange4 = (transactionAccessInput) => {\n    setTransactionAccessInput(transactionAccessInput);\n  };\n\n  const handleChangeCheckbox = (confirmationCheckbox) => {\n    setConfirmationCheckbox(confirmationCheckbox);\n  };\n\n  const step1 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('basic_info')}</Text>\n        <Text component={TextVariants.small}>{t('generate_credential_step1_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <FormGroup label={t('credential_name_form_label')} fieldId=\"simple-form-name\" isRequired>\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"simple-form-name\"\n            name=\"simple-form-name\"\n            aria-describedby=\"simple-form-name-helper\"\n            value={credentialNameInput}\n            onChange={handleTextInputChange1}\n            placeholder={t('credential_name_form_input_placeholder')}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t('credential_aplication_reason_form_label')}\n          className=\"form-group-radio\"\n          fieldId=\"radio-access-type\"\n          isRequired\n        >\n          <Radio\n            isChecked={radio1Step1}\n            name=\"radio1-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_only')}\n            id=\"radio-controlled-1\"\n            value=\"produce\"\n          />\n          <Radio\n            isChecked={radio2Step1}\n            name=\"radio2-1\"\n            onChange={handleChangeStep1}\n            label={t('consume_only')}\n            id=\"radio-controlled-2\"\n            value=\"consume\"\n          />\n          <Radio\n            isChecked={radio3Step1}\n            name=\"radio3-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_and_consume')}\n            id=\"radio-controlled-3\"\n            value=\"produceconsume\"\n          />\n          <Radio\n            isChecked={radio4Step1}\n            name=\"radio4-1\"\n            onChange={handleChangeStep1}\n            label={t('produce_consume_and_create_topics')}\n            id=\"radio-controlled-4\"\n            value=\"produceconsumecreate\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n\n  const step2 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step2_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_topics')}\n          labelOff={t('all_topics')}\n          isChecked={isTopicSwitchChecked}\n          onChange={handleTopicSwitchChange}\n        />\n        {isTopicSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup\n            label={t('specific_topics')}\n            fieldId=\"input-access-topics\"\n            isRequired\n            // helperText=\"Please enter your topic name\"\n          >\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('topics_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-topics\" value={selectTopicAccess} onChange={handleSelectChange2}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-topics\"\n                  name=\"input-access-topics\"\n                  aria-describedby=\"simple-form-name-helper\"\n                  value={topicAccessInput}\n                  onChange={handleTextInputChange2}\n                  placeholder={`${t('enter_your_topic')} ${selectTopicAccess}`}\n                />\n              </SplitItem>\n            </Split>\n            <Popover position=\"bottom\" bodyContent={<div>{t('credential_rule_popover_data')}</div>}>\n              <Button variant=\"link\" icon={<PlusCircleIcon />} isInline className=\"pf-u-mt-md\">\n                Add another rule\n              </Button>\n            </Popover>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step3 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2}>{t('generate_credential_step3_title_description')}</Text>\n      </TextContent>\n      <Form>\n        <Switch\n          id=\"simple-switch\"\n          label={t('all_consumer_groups')}\n          labelOff={t('all_consumer_groups')}\n          isChecked={isConsumerSwitchChecked}\n          onChange={handleConsumerSwitchChange}\n        />\n        {isConsumerSwitchChecked ? (\n          <></>\n        ) : (\n          <FormGroup label={t('specific_consumer_groups')} fieldId=\"input-access-consumers\" isRequired>\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>{t('groups_with_the')}</SplitItem>\n              <SplitItem>\n                <FormSelect id=\"select-access-consumers\" value={selectConsumerAccess} onChange={handleSelectChange3}>\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-consumers\"\n                  name=\"input-access-consumers\"\n                  value={consumerAccessInput}\n                  onChange={handleTextInputChange3}\n                  placeholder={`${t('enter_your_consumer_group')} ${selectConsumerAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </FormGroup>\n        )}\n      </Form>\n    </div>\n  );\n\n  const step4 = (\n    <div className=\"mk--generate-credential__wizard--text-content\">\n      <TextContent className=\"pf-u-mb-lg\">\n        <Text component={TextVariants.h2} id=\"step4-title\">\n          {t('generate_credential_step4_title_description')}\n        </Text>\n      </TextContent>\n      <Form>\n        <section aria-labelledby=\"step4-title\" className=\"form-group-radio\">\n          <div className=\"pf-c-form__group-control\">\n            <Radio\n              isChecked={radio1Step4}\n              name=\"radio1-4\"\n              onChange={handleChangeStep4}\n              label={t('no_transaction_ids')}\n              id=\"radio-controlled-1-4\"\n              value=\"no\"\n            />\n            <Radio\n              isChecked={radio2Step4}\n              name=\"radio2-4\"\n              onChange={handleChangeStep4}\n              label={t('all_transaction_ids')}\n              id=\"radio-controlled-2-4\"\n              value=\"all\"\n              className=\"pf-u-mb-sm\"\n            />\n            <Split hasGutter className=\"pf-u-align-items-center\">\n              <SplitItem>\n                <Radio\n                  isChecked={radio3Step4}\n                  name=\"radio3-4\"\n                  onChange={handleChangeStep4}\n                  label={t('transaction_ids_with_the')}\n                  id=\"radio-controlled-3-4\"\n                  value=\"filter\"\n                />\n              </SplitItem>\n              <SplitItem>\n                <FormSelect\n                  id=\"select-access-transactions\"\n                  value={selectTransactionAccess}\n                  onChange={handleSelectChange4}\n                >\n                  <FormSelectOption value=\"name\" label={t('lower_name')} />\n                  <FormSelectOption value=\"prefix\" label={t('lower_prefix')} />\n                </FormSelect>\n              </SplitItem>\n              <SplitItem isFilled>\n                <TextInput\n                  isRequired\n                  type=\"text\"\n                  id=\"input-access-transactions\"\n                  name=\"input-access-transactions\"\n                  value={transactionAccessInput}\n                  onChange={handleTextInputChange4}\n                  placeholder={`${t('enter_your_transaction_id')} ${selectTransactionAccess}`}\n                />\n              </SplitItem>\n            </Split>\n          </div>\n        </section>\n      </Form>\n    </div>\n  );\n\n  const clientID = (\n    <>\n      {mainToggle && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title=\"These credentials were not actually generated from this flow as it is part of the mock UI. For now, please turn off the mock UI to generate credentials.\"\n        />\n      )}\n      <EmptyState variant={EmptyStateVariant.large}>\n        <EmptyStateIcon icon={KeyIcon} />\n        <Title headingLevel=\"h4\" size=\"lg\">\n          {t('credential_successfully_generated')}\n        </Title>\n        <EmptyStateBody>{t('clientid_empty_state_body')}</EmptyStateBody>\n        <InputGroup className=\"pf-u-mt-lg\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">{t('client_id')}</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            { mainToggle ? 'srvc-acct-962bc96e-4339-4aee-9505-040d5069c6a5' : credential?.clientID }\n          </ClipboardCopy>\n        </InputGroup>\n        <InputGroup className=\"pf-u-mt-md\">\n          <InputGroupText className=\"mk--generate-credential__empty-state--input-group\">Client secret</InputGroupText>\n          <ClipboardCopy isReadOnly className=\"pf-u-w-100\">\n            { mainToggle ? '441cdf77-083c-41d1-9050-c27a3b4247ac' : credential?.clientSecret }\n          </ClipboardCopy>\n        </InputGroup>\n        <Bullseye className=\"pf-u-mt-lg\">\n          <Checkbox\n            label={t('client_id_confirmation_checkbox_label')}\n            isChecked={confirmationCheckbox}\n            onChange={handleChangeCheckbox}\n            id=\"check-1\"\n            name=\"check1\"\n          />\n        </Bullseye>\n        <Button variant=\"primary\" isDisabled={!confirmationCheckbox} onClick={handleClose}>\n          {t('close')}\n        </Button>\n      </EmptyState>\n    </>\n  );\n\n  const getSteps = () => {\n    const steps: WizardStep[] = [{ id: 5, name: t('finish'), component: clientID, isFinishedStep: true }];\n    if (mainToggle) {\n      steps.unshift(\n        { id: 1, name: t('basic_info'), component: step1, nextButtonText: t('next') },\n        { id: 2, name: t('topics_access'), component: step2, nextButtonText: t('next') },\n        { id: 3, name: t('consumer_groups_access'), component: step3, nextButtonText: t('next') },\n        { id: 4, name: t('transaction_ids_access'), component: step4, nextButtonText: t('finish') }\n      );\n    }\n    return steps;\n  };\n\n  const title = t('generate_credential');\n\n  return (\n    <>\n      <FlexItem className=\"pf-m-align-right\">\n        <Button\n          variant=\"secondary\"\n          onClick={handleModalToggle}\n          className=\"pf-u-ml-md\"\n          spinnerAriaValueText={isLoading ? 'Loading' : undefined}\n          isLoading={isLoading}\n        >\n          {t('generate_credential')}\n        </Button>\n      </FlexItem>\n      <Wizard\n        title={title}\n        description={t('create_credential_wizard_description')}\n        steps={getSteps()}\n        onNext={onMove}\n        onBack={onMove}\n        onClose={() => {\n          setIsOpen(false);\n        }}\n        isOpen={isOpen}\n        hideClose={stepNo === 5}\n      />\n      {error && (\n        <FlexItem className=\"pf-m-grow\">\n          <Alert variant=\"danger\" isInline title={error} />\n        </FlexItem>\n      )}\n    </>\n  );\n};\n\nexport { GenerateCredential };\n","import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Tabs,\n  Tab,\n  TabTitleText,\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListItem,\n  TextListVariants,\n  TextListItemVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nimport '@patternfly/react-styles/css/utilities/Spacing/spacing.css';\nimport '@patternfly/react-styles/css/utilities/Alignment/alignment.css';\nimport './InstanceDrawer.css';\nimport { GenerateCredential } from './GenerateCredential';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { KafkaRequest } from 'src/openapi';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { useTranslation } from 'react-i18next';\n\nexport type InstanceDrawerProps = {\n  mainToggle: boolean;\n  onClose: () => void;\n  isExpanded: boolean;\n  instanceDetail?: KafkaRequest;\n  activeTab?: 'Details' | 'Connection';\n};\nconst InstanceDrawer: React.FunctionComponent<InstanceDrawerProps> = ({\n  mainToggle,\n  onClose,\n  activeTab,\n  instanceDetail,\n}) => {\n  const { t } = useTranslation();\n  const { id, created_at, updated_at, owner } = instanceDetail || {};\n  dayjs.extend(localizedFormat);\n\n  const [activeTab1Key, setActiveTab1Key] = useState(0);\n  const [activeTab2Key, setActiveTab2Key] = useState(0);\n\n  useEffect(() => {\n    setActiveTab1Key(activeTab === 'Details' ? 0 : 1);\n  }, [activeTab]);\n\n  const handleTab1Click = (_event, tabIndex) => {\n    setActiveTab1Key(tabIndex);\n  };\n\n  const handleTab2Click = (_event, tabIndex) => {\n    setActiveTab2Key(tabIndex);\n  };\n\n  const externalServer = instanceDetail?.bootstrapServerHost?.endsWith(':443')\n    ? instanceDetail?.bootstrapServerHost\n    : `${instanceDetail?.bootstrapServerHost}:443`;\n\n  const resourcesTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_1')}</Text>\n          <Text component={TextVariants.h5}>{t('kafka_listener_and_credentials')}</Text>\n          <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_2')}</Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('external_server')}\n          </Text>\n        </TextContent>\n        <Flex>\n          <FlexItem className=\"pf-m-grow pf-m-spacer-none pf-u-mb-xs\">\n            <ClipboardCopy>{externalServer}</ClipboardCopy>\n          </FlexItem>\n          <GenerateCredential instanceName={instanceDetail?.name} mainToggle={mainToggle} />\n        </Flex>\n        {mainToggle && (\n          <>\n            <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n              <Text component={TextVariants.h5}>Producer endpoint and credentials</Text>\n              <Text component={TextVariants.small}>{t('drawer_resource_tab_body_description_3')}</Text>\n            </TextContent>\n            <ClipboardCopy>https://:30123</ClipboardCopy>\n          </>\n        )}\n      </div>\n    </>\n  );\n\n  const sampleCodeTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        <TextContent className=\"pf-u-pb-sm\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n            <div className=\"pf-c-code-editor__tab\">\n              <span className=\"pf-c-code-editor__tab-text\">Java</span>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">import java.util.Properties;</pre>\n            </div>\n          </div>\n        </div>\n\n        <TextContent className=\"pf-u-pb-sm pf-u-pt-lg\">\n          <Text component={TextVariants.h5}>{t('sample_connection_code')}</Text>\n          <Text component={TextVariants.small}>\n            {t('drawer_code_section_tab_body_description_1')}\n            &lt;{t('brackets')}&gt;.\n          </Text>\n        </TextContent>\n        <div className=\"pf-c-code-editor pf-m-read-only\">\n          <div className=\"pf-c-code-editor__header\">\n            <div className=\"pf-c-code-editor__controls\">\n              <Button variant=\"control\" aria-label=\"Action\">\n                <CopyIcon />\n              </Button>\n            </div>\n          </div>\n          <div className=\"pf-c-code-editor__main\">\n            <div className=\"pf-c-code-editor__code\">\n              <pre className=\"pf-c-code-editor__code-pre\">\n                bootstrap.servers=es-1-4-0-ibm-es-proxy-route-bootstrap-es.apps.2019-4-1-demo-icp-mst.fyre.ibm.com:44\n                sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=“token\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n  const renderTextListItemDetail = (title: string, value?: string) => (\n    <>\n      {value && (\n        <>\n          <TextListItem component={TextListItemVariants.dt}>{title}</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>{value}</TextListItem>\n        </>\n      )}\n    </>\n  );\n\n  const detailsTab = (\n    <>\n      <div className=\"mk--instance-details__drawer--tab-content\">\n        {mainToggle && (\n          <Grid className=\"mk--instance-details__drawer--grid\">\n            <GridItem span={6} className=\"mk--instance-details__drawer--grid--column-one\">\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('topics')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      10\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem span={6}>\n              <Card isFlat>\n                <CardBody>\n                  <TextContent>\n                    <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                      {t('consumer_groups')}\n                    </Text>\n                    <Text component={TextVariants.h3} className=\"pf-u-mt-0\">\n                      8\n                    </Text>\n                  </TextContent>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        )}\n        <TextContent>\n          <TextList component={TextListVariants.dl}>\n            {renderTextListItemDetail(t('cloud_provider'), t('amazon_web_services'))}\n            {renderTextListItemDetail(t('region'), t('us_east_north_virginia'))}\n            {renderTextListItemDetail(t('id'), id)}\n            {renderTextListItemDetail(t('owner'), owner)}\n            {renderTextListItemDetail(t('created'), dayjs(created_at).format('LLLL'))}\n            {renderTextListItemDetail(t('updated'), dayjs(updated_at).format('LLLL'))}\n          </TextList>\n        </TextContent>\n      </div>\n    </>\n  );\n\n  const renderConnectionTab = () => {\n    if (mainToggle) {\n      return (\n        <div className=\"mk--instance-details__drawer--tab-content pf-m-secondary\">\n          <Tabs\n            activeKey={activeTab2Key}\n            isSecondary\n            onSelect={handleTab2Click}\n          >\n            <Tab\n              eventKey={0}\n              title={<TabTitleText>{t('resources')}</TabTitleText>}\n            >\n              {resourcesTab}\n            </Tab>\n            <Tab\n              eventKey={1}\n              title={<TabTitleText>{t('sample_code')}</TabTitleText>}\n            >\n              {sampleCodeTab}\n            </Tab>\n          </Tabs>\n        </div>\n      );\n    }\n    return <>{resourcesTab}</>;\n  };\n\n  return (\n    <DrawerPanelContent\n      data-testid=\"mk--instance__drawer\"\n      className=\"instance-drawer\"\n      widths={{ default: 'width_50' }}\n      hidden={false}\n    >\n      {instanceDetail === undefined ? (\n        <Loading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              <Text component={TextVariants.small} className=\"pf-u-mb-0\">\n                {t('instance_name')}\n              </Text>\n              <Title headingLevel=\"h1\" size={TitleSizes['xl']} className=\"pf-u-mt-0 \">\n                {instanceDetail?.name}\n              </Title>\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            <Tabs activeKey={activeTab1Key} onSelect={handleTab1Click}>\n              <Tab eventKey={0} title={<TabTitleText>{t('details')}</TabTitleText>}>\n                {detailsTab}\n              </Tab>\n              <Tab eventKey={1} title={<TabTitleText>{t('connection')}</TabTitleText>}>\n                {renderConnectionTab()}\n              </Tab>\n            </Tabs>\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n};\n\nexport { InstanceDrawer };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Drawer,\n  DrawerContent,\n  Level,\n  LevelItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { EmptyState } from '../components/EmptyState/EmptyState';\nimport { StreamsTableView, FilterType } from '../components/StreamsTableView/StreamsTableView';\nimport { CreateInstanceModal } from '../components/CreateInstanceModal/CreateInstanceModal';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../openapi/api';\nimport { AlertProvider } from '../components/Alerts/Alerts';\nimport { InstanceDrawer } from '../Drawer/InstanceDrawer';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useAlerts } from '@app/components/Alerts/Alerts';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError } from '@app/utils/error';\nimport './OpenshiftStreams.css';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [createStreamsInstance, setCreateStreamsInstance] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n\n  const drawerRef = React.createRef<any>();\n\n  const onExpand = () => {\n    drawerRef.current && drawerRef.current.focus();\n  };\n\n  const onCloseClick = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken)) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService\n          .listKafkas(page?.toString(), perPage?.toString(), orderBy && orderBy, getFilterString())\n          .then((res) => {\n            const kafkaInstances = res.data;\n            setKafkaInstancesList(kafkaInstances);\n            setKafkaInstanceItems(kafkaInstances.items);\n            kafkaInstancesList?.total !== undefined &&\n              kafkaInstancesList.total > expectedTotal &&\n              setExpectedTotal(kafkaInstancesList.total);\n            setKafkaDataLoaded(true);\n          });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n        }\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  // Functions\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  useTimeout(() => fetchKafkas(true), 5000);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n  const onCreate = () => {\n    setKafkaDataLoaded(false);\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n  return (\n    <>\n      <AlertProvider>\n        <Drawer isExpanded={selectedInstance != null} onExpand={onExpand}>\n          <DrawerContent\n            panelContent={\n              <InstanceDrawer\n                mainToggle={mainToggle}\n                onClose={onCloseClick}\n                isExpanded={selectedInstance != null}\n                activeTab={selectedInstance?.activeTab}\n                instanceDetail={selectedInstance?.instanceDetail}\n              />\n            }\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <Loading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <EmptyState\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  mainToggle={mainToggle}\n                />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  createStreamsInstance={createStreamsInstance}\n                  setCreateStreamsInstance={setCreateStreamsInstance}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  // listOfOwners={listOfOwners}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                />\n              </PageSection>\n            )}\n            <CreateInstanceModal\n              createStreamsInstance={createStreamsInstance}\n              setCreateStreamsInstance={setCreateStreamsInstance}\n              onCreate={onCreate}\n              cloudProviders={cloudProviders}\n              mainToggle={mainToggle}\n              refresh={refreshKafkas}\n            />\n          </DrawerContent>\n        </Drawer>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\n\nexport interface IApiContext {\n  basePath: string | undefined;\n}\n\nexport const ApiContext = React.createContext<IApiContext>({\n  basePath: undefined\n});\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n  getUsername: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext | undefined>(undefined);\n","import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type AlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string|React.ReactElement;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport { PageSection, Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const __PUBLIC_PATH__: string;\ndeclare const window: Window & {\n  windowError: string;\n};\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__PUBLIC_PATH__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: '~',\n      keySeparator: false,\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\ni18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n"],"sourceRoot":""}