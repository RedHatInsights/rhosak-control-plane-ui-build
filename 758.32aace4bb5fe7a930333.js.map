{"version":3,"sources":["webpack://mk-ui-frontend/./src/app/OpenshiftStreams/OpenshiftStreams.tsx","webpack://mk-ui-frontend/./src/app/hooks/useTimeout.ts","webpack://mk-ui-frontend/./src/app/common/MASDeleteModal/MASDeleteModal.tsx","webpack://mk-ui-frontend/./src/app/common/MASLoading/MASLoading.tsx","webpack://mk-ui-frontend/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://mk-ui-frontend/./src/app/common/MASPagination/MASPagination.tsx","webpack://mk-ui-frontend/./src/app/common/MASTable/MASTable.tsx","webpack://mk-ui-frontend/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://mk-ui-frontend/./src/app/components/Alerts/AlertToastGroup.tsx","webpack://mk-ui-frontend/./src/app/components/DeleteInstanceModal/DeleteInstanceModal.tsx","webpack://mk-ui-frontend/./src/app/components/ErrorBoundary/UnexpectedError.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StatusColumn.tsx","webpack://mk-ui-frontend/./src/app/components/StreamsTableView/StreamsToolbar.tsx","webpack://mk-ui-frontend/./src/i18n/i18n.ts","webpack://mk-ui-frontend/./src/openapi/base.ts"],"names":["OpenshiftStreams","callback","delay","savedCallback","onConnectToInstance","getConnectToInstancePath","authContext","useContext","AuthContext","basePath","ApiContext","location","searchParams","URLSearchParams","search","page","parseInt","get","perPage","mainToggle","has","t","useTranslation","addAlert","useState","isOpenCreateInstanceModal","setIsOpenCreateInstanceModal","kafkaInstanceItems","setKafkaInstanceItems","kafkaInstancesList","setKafkaInstancesList","cloudProviders","setCloudProviders","kafkaDataLoaded","setKafkaDataLoaded","orderBy","setOrderBy","selectedInstance","setSelectedInstance","expectedTotal","setExpectedTotal","rawKafkaDataLength","setRawKafkaDataLength","filterSelected","setFilterSelected","filteredValue","setFilteredValue","isUserUnauthorized","setIsUserUnauthorized","activeTab","instanceDetail","fetchKafkas","justPoll","getToken","accessToken","undefined","isValidToken","apisService","listKafkas","toString","filters","forEach","filter","filterKey","filterValue","length","push","map","val","value","trim","isExact","join","then","res","kafkaInstances","data","items","total","error","reason","errorCode","response","code","AlertVariant","handleServerError","useEffect","listCloudProviders","providers","useRef","current","setTimeout","clearInterval","refreshKafkas","titleProps","title","headingLevel","emptyStateBodyProps","body","isModalOpen","setIsModalOpen","onCreate","refresh","isExpanded","isLoading","onClose","PageSection","variant","PageSectionVariants","Level","LevelItem","Title","size","padding","default","buttonProps","onClick","className","onViewConnection","instance","onViewInstance","onDelete","MASDeleteModal","modalProps","confirmButtonProps","cancelButtonProps","handleModalToggle","textProps","children","selectedItemData","ModalVariant","titleIconVariant","ariaLabel","showClose","restModalProps","id","key","buttonConfirmVariant","ButtonVariant","onClickConfirmButton","isDisabledConfirmButton","label","confirmActionLabel","restConfirmButtonProps","cancelButtonId","cancelButtonKey","cancelButtonVariant","cancelActionLabel","restCancelButtonProps","description","restTextProps","Modal","isOpen","actions","Button","isDisabled","Text","dangerouslySetInnerHTML","__html","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","MASDrawer","drawerPanelContentProps","drawerHeaderProps","panelBodyContent","onExpand","hidden","widths","restDrawerPanelContentProps","text","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextContent","component","TextVariants","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","MASPagination","itemCount","PaginationVariant","isCompact","titles","restProps","history","setSearchParam","useCallback","name","set","onSetPage","_","newPage","onPerPageSelect","newPerPage","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","rowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","toggleIcon","breakpoint","toolbarToggleGroupProps","ToolbarContent","ToolbarToggleGroup","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","AlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","Alert","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","DeleteInstanceModal","instanceStatus","selectedInstanceName","instanceNameInput","setInstanceNameInput","toLowerCase","htmlFor","TextInput","type","onChange","autoFocus","UnexpectedError","updateState","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","ExclamationCircleIcon","StatusColumn","filteredstatus","status","instanceName","CheckCircleIcon","PendingIcon","IconSize","getStatusIcon","Flex","FlexItem","spacer","st","StreamsToolbar","isFilterExpanded","setIsFilterExpanded","isCloudProviderFilterExpanded","setIsCloudProviderFilterExpanded","isRegionFilterExpanded","setIsRegionFilterExpanded","isStatusFilterExpanded","setIsStatusFilterExpanded","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","setIsMaxFilter","nameInputRef","ownerInputRef","mainFilterOptions","disabled","handleMaxFilters","cloudProviderFilterOptions","cloudProvider","regionFilterOptions","region","statusFilterOptions","option","updateFilter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterValueIndex","splice","isInputValid","test","onFilter","filterType","clearSelection","copyFilteredValue","onInputPress","event","fieldName","target","getSelectionForFilter","selectedFilters","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","find","chipIndex","onDeleteChipGroup","maxFilterCount","provisioningStatus","isDisabledSelectOption","optionValue","tooltipContent","ToolbarGroup","Select","SelectVariant","onToggle","selections","onSelect","_event","selection","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","InputGroup","validated","ValidatedOptions","placeholder","input","onKeyPress","ref","SearchIcon","Tooltip","isVisible","content","reference","isPlaceholder","placeholderText","document","getElementById","tabIndex","widgetId","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","lg","FilterIcon","pseudolocalizationEnabled","window","enabled","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","format","lng","options","Intl","NumberFormat","Date","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","BASE_PATH","replace","configuration","axios","this","field","msg","Error"],"mappings":"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","file":"758.32aace4bb5fe7a930333.js","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { Level, LevelItem, PageSection, PageSectionVariants, Title, AlertVariant } from '@patternfly/react-core';\nimport {\n  StreamsTableView,\n  FilterType,\n  CreateInstanceModal,\n  AlertProvider,\n  useAlerts,\n  InstanceDrawer,\n  CreateInstanceModalProvider,\n} from '@app/components';\nimport { DefaultApi, KafkaRequest, KafkaRequestList, CloudProvider } from '../../openapi/api';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { useTimeout } from '@app/hooks/useTimeout';\nimport { isServiceApiError, ErrorCodes } from '@app/utils';\nimport './OpenshiftStreams.css';\nimport { MASLoading, MASEmptyState, MASFullPageError } from '@app/common';\n\nexport type OpenShiftStreamsProps = {\n  onConnectToInstance: (data: KafkaRequest) => void;\n  getConnectToInstancePath: (data: KafkaRequest) => string;\n};\n\ntype SelectedInstance = {\n  instanceDetail: KafkaRequest;\n  activeTab: 'Details' | 'Connection';\n};\n\nconst OpenshiftStreams = ({ onConnectToInstance, getConnectToInstancePath }: OpenShiftStreamsProps) => {\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n  const mainToggle = searchParams.has('user-testing');\n\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  // States\n  const [isOpenCreateInstanceModal, setIsOpenCreateInstanceModal] = useState(false);\n  const [kafkaInstanceItems, setKafkaInstanceItems] = useState<KafkaRequest[] | undefined>();\n  const [kafkaInstancesList, setKafkaInstancesList] = useState<KafkaRequestList>({} as KafkaRequestList);\n  const [cloudProviders, setCloudProviders] = useState<CloudProvider[]>([]);\n  const [kafkaDataLoaded, setKafkaDataLoaded] = useState(false);\n  const [orderBy, setOrderBy] = useState<string>('created_at desc');\n  const [selectedInstance, setSelectedInstance] = useState<SelectedInstance | null>();\n  const [expectedTotal, setExpectedTotal] = useState<number>(0); // state to store the expected total kafka instances based on the operation\n  const [rawKafkaDataLength, setRawKafkaDataLength] = useState<number>(0);\n  const [filterSelected, setFilterSelected] = useState('name');\n  const [filteredValue, setFilteredValue] = useState<FilterType[]>([]);\n  const [isUserUnauthorized, setIsUserUnauthorized] = useState<boolean>(false);\n\n  const { activeTab, instanceDetail } = selectedInstance || {};\n\n  const onCloseDrawer = () => {\n    setSelectedInstance(null);\n  };\n\n  const onViewInstance = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Details' });\n  };\n\n  const onViewConnection = (instance: KafkaRequest) => {\n    setSelectedInstance({ instanceDetail: instance, activeTab: 'Connection' });\n  };\n\n  const isValidToken = (accessToken: string | undefined) => {\n    if (accessToken !== undefined && accessToken !== '') {\n      return true;\n    }\n    return false;\n  };\n\n  const getFilterString = () => {\n    const filters: string[] = [];\n    filteredValue.forEach((filter) => {\n      const { filterKey, filterValue } = filter;\n      if (filterValue && filterValue.length > 0) {\n        filters.push(\n          filterValue\n            .map((val) => {\n              const value = val.value.trim();\n              if (value === 'provisioning') {\n                return `${filterKey} = preparing or ${filterKey} = provisioning`;\n              }\n              return value !== '' ? `${filterKey} ${val.isExact === true ? `= ${value}` : `like %${value}%`}` : '';\n            })\n            .join(' or ')\n        );\n      }\n    });\n    return filters.join(' or ');\n  };\n\n  const handleServerError = (error: any) => {\n    let reason: string | undefined;\n    let errorCode: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n      errorCode = error.response?.data?.code;\n    }\n    //check unauthorize user\n    if (errorCode === ErrorCodes.UNAUTHORIZED_USER) {\n      setIsUserUnauthorized(true);\n    } else {\n      addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n    }\n  };\n\n  // Functions\n  const fetchKafkas = async (justPoll: boolean) => {\n    const accessToken = await authContext?.getToken();\n\n    if (isValidToken(accessToken)) {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listKafkas(page?.toString(), perPage?.toString(), orderBy, getFilterString()).then((res) => {\n          const kafkaInstances = res.data;\n          setKafkaInstancesList(kafkaInstances);\n          setKafkaInstanceItems(kafkaInstances.items);\n          kafkaInstancesList?.total !== undefined &&\n            kafkaInstancesList.total > expectedTotal &&\n            setExpectedTotal(kafkaInstancesList.total);\n          setKafkaDataLoaded(true);\n        });\n        // only if we are not just polling the kafka\n        if (!justPoll) {\n          // Check to see if at least 1 kafka is present\n          await apisService.listKafkas('1', '1').then((res) => {\n            setRawKafkaDataLength(res.data.items.length);\n          });\n        }\n      } catch (error) {\n        handleServerError(error);\n      }\n    }\n  };\n\n  const fetchCloudProviders = async () => {\n    const accessToken = await authContext?.getToken();\n    if (accessToken !== undefined && accessToken !== '') {\n      try {\n        const apisService = new DefaultApi({\n          accessToken,\n          basePath,\n        });\n        await apisService.listCloudProviders().then((res) => {\n          const providers = res.data;\n          setCloudProviders(providers.items);\n        });\n      } catch (error) {\n        let reason: string | undefined;\n        if (isServiceApiError(error)) {\n          reason = error.response?.data.reason;\n        }\n        /**\n         * Todo: show user friendly message according to server code\n         * and translation for specific language\n         *\n         */\n        addAlert(t('something_went_wrong'), AlertVariant.danger, reason);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setKafkaDataLoaded(false);\n    fetchKafkas(true);\n  }, [authContext, page, perPage, filteredValue, orderBy]);\n\n  useEffect(() => {\n    fetchCloudProviders();\n    fetchKafkas(false);\n  }, []);\n\n  useTimeout(() => fetchKafkas(true), 5000);\n\n  const refreshKafkas = () => {\n    //set the page to laoding state\n    setKafkaDataLoaded(false);\n    fetchKafkas(false);\n  };\n\n  const onCreate = () => {\n    /*\n        increase the expected total by 1\n        as create operation will lead to adding a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total + 1);\n  };\n\n  const onDelete = () => {\n    setKafkaDataLoaded(false);\n    /*\n        decrease the expected total by 1\n        as create operation will lead to removing a kafka in the list of response\n      */\n    setExpectedTotal(kafkaInstancesList.total - 1);\n  };\n\n  /**\n   * Show Unathorize page in case user is not authorize\n   */\n  if (isUserUnauthorized) {\n    return (\n      <MASFullPageError\n        titleProps={{\n          title: t('you_do_not_have_access_to_openshift_streams'),\n          headingLevel: 'h2',\n        }}\n        emptyStateBodyProps={{\n          body: t('contact_your_organization_administration_for_more_information'),\n        }}\n      />\n    );\n  }\n\n  return (\n    <>\n      <AlertProvider>\n        <CreateInstanceModalProvider\n          value={{\n            isModalOpen: isOpenCreateInstanceModal,\n            setIsModalOpen: setIsOpenCreateInstanceModal,\n            onCreate,\n            cloudProviders,\n            mainToggle,\n            refresh: refreshKafkas,\n          }}\n        >\n          <InstanceDrawer\n            mainToggle={mainToggle}\n            isExpanded={selectedInstance != null}\n            activeTab={activeTab}\n            isLoading={instanceDetail === undefined}\n            instanceDetail={instanceDetail}\n            onClose={onCloseDrawer}\n          >\n            <PageSection variant={PageSectionVariants.light}>\n              <Level>\n                <LevelItem>\n                  <Title headingLevel=\"h1\" size=\"lg\">\n                    {t('openshift_streams')}\n                  </Title>\n                </LevelItem>\n              </Level>\n            </PageSection>\n            {kafkaInstanceItems === undefined ? (\n              <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n                <MASLoading />\n              </PageSection>\n            ) : rawKafkaDataLength && rawKafkaDataLength < 1 ? (\n              <PageSection>\n                <MASEmptyState\n                  titleProps={{\n                    title: t('you_do_not_have_any_kafka_instances_yet'),\n                    headingLevel: 'h4',\n                  }}\n                  emptyStateBodyProps={{\n                    body: t('create_a_kafka_instance_to_get_started'),\n                  }}\n                  buttonProps={{\n                    title: t('create_a_kafka_instance'),\n                    onClick: () => setIsOpenCreateInstanceModal(!isOpenCreateInstanceModal),\n                  }}\n                />\n                <CreateInstanceModal />\n              </PageSection>\n            ) : (\n              <PageSection\n                className=\"mk--main-page__page-section--table\"\n                variant={PageSectionVariants.light}\n                padding={{ default: 'noPadding' }}\n              >\n                <StreamsTableView\n                  kafkaInstanceItems={kafkaInstanceItems}\n                  mainToggle={mainToggle}\n                  onViewConnection={onViewConnection}\n                  onViewInstance={onViewInstance}\n                  onConnectToInstance={onConnectToInstance}\n                  getConnectToInstancePath={getConnectToInstancePath}\n                  refresh={refreshKafkas}\n                  kafkaDataLoaded={kafkaDataLoaded}\n                  onDelete={onDelete}\n                  page={page}\n                  perPage={perPage}\n                  total={kafkaInstancesList?.total}\n                  expectedTotal={expectedTotal}\n                  filteredValue={filteredValue}\n                  setFilteredValue={setFilteredValue}\n                  setFilterSelected={setFilterSelected}\n                  filterSelected={filterSelected}\n                  orderBy={orderBy}\n                  setOrderBy={setOrderBy}\n                />\n              </PageSection>\n            )}\n          </InstanceDrawer>\n        </CreateInstanceModalProvider>\n      </AlertProvider>\n    </>\n  );\n};\n\nexport { OpenshiftStreams };\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout(callback: any, delay: number) {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  Text,\n  ButtonProps,\n  TextProps,\n} from '@patternfly/react-core';\nimport './MASDeleteModal.css';\n\nexport type MASDeleteModalProps = {\n  isModalOpen: boolean;\n  modalProps: Omit<ModalProps, 'children' | 'ref'>;\n  handleModalToggle: () => void;\n  children?: React.ReactNode;\n  selectedItemData?: any;\n  confirmButtonProps?: Omit<ButtonProps, 'children' | 'onClick'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n    onClick?: (data?: any) => Promise<void> | void;\n  };\n  cancelButtonProps?: Omit<ButtonProps, 'children'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n  };\n  textProps?: Omit<TextProps, 'children'> & {\n    description?: string;\n  };\n};\n\nexport const MASDeleteModal: React.FC<MASDeleteModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  children,\n  selectedItemData = '',\n}: MASDeleteModalProps) => {\n  const {\n    variant = ModalVariant.small,\n    titleIconVariant = 'warning',\n    ['aria-label']: ariaLabel,\n    title,\n    showClose = true,\n    ...restModalProps\n  } = modalProps || {};\n\n  const {\n    id = 'mas--confirm__button',\n    key = 'confirm-button',\n    variant: buttonConfirmVariant = ButtonVariant.danger,\n    onClick: onClickConfirmButton,\n    isDisabled: isDisabledConfirmButton,\n    label: confirmActionLabel = 'Delete',\n    ...restConfirmButtonProps\n  } = confirmButtonProps || {};\n\n  const {\n    id: cancelButtonId = 'mas--cancel__button',\n    key: cancelButtonKey = '\"cancel-button',\n    variant: cancelButtonVariant = ButtonVariant.link,\n    onClick: onClickCancelButton,\n    isDisabled: isDisabledCancelButton,\n    label: cancelActionLabel = 'Cancel',\n    ...restCancelButtonProps\n  } = cancelButtonProps || {};\n\n  const { className = 'mas--delete-item__modal--text', description, ...restTextProps } = textProps || {};\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={ariaLabel}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={showClose}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          id={id}\n          key={key}\n          variant={buttonConfirmVariant}\n          onClick={() => onClickConfirmButton && onClickConfirmButton(selectedItemData)}\n          isDisabled={isDisabledConfirmButton}\n          {...restConfirmButtonProps}\n        >\n          {confirmActionLabel}\n        </Button>,\n        <Button\n          id={cancelButtonId}\n          key={cancelButtonKey}\n          variant={cancelButtonVariant}\n          onClick={handleModalToggle}\n          {...restCancelButtonProps}\n        >\n          {cancelActionLabel}\n        </Button>,\n      ]}\n      {...restModalProps}\n    >\n      {description && (\n        <Text className={className} dangerouslySetInnerHTML={{ __html: description || '' }} {...restTextProps} />\n      )}\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/common';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps: {\n    text: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n}: MASDrawerProps) => {\n  const { hidden = false, widths, ...restDrawerPanelContentProps } = drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = () => {\n    return (\n      <DrawerPanelContent widths={widths || { default: 'width_50' }} hidden={hidden} {...restDrawerPanelContentProps}>\n        {isLoading ? (\n          <MASLoading />\n        ) : (\n          <>\n            <DrawerHead>\n              <TextContent>\n                <Text component={text?.component || TextVariants.small} className={text?.className || 'pf-u-mb-0'}>\n                  {text?.label}\n                </Text>\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'pf-u-mt-0'}\n                >\n                  {title?.value}\n                </Title>\n              </TextContent>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <DrawerPanelBody>{panelBodyContent}</DrawerPanelBody>\n          </>\n        )}\n      </DrawerPanelContent>\n    );\n  };\n\n  return (\n    <Drawer isExpanded={isExpanded} onExpand={onExpand}>\n      <DrawerContent panelContent={panelContent()}>{children}</DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport interface PaginationProps extends Omit<PFPaginationProps, 'children' | 'ref'> {}\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\n\nexport interface MASTableProps {\n  tableProps: Omit<PFTableProps, 'children'>;\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n}\n\nconst MASTable: FunctionComponent<MASTableProps> = ({ tableProps, tableHeaderProps, tableBodyProps, children }) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    rowWrapper,\n    ...restProps\n  } = tableProps;\n\n  return (\n    <PFTable\n      className={className}\n      rowWrapper={rowWrapper}\n      cells={cells}\n      variant={variant}\n      rows={rows}\n      aria-label={ariaLabel}\n      actionResolver={actionResolver}\n      onSort={onSort}\n      sortBy={sortBy}\n      {...restProps}\n    >\n      <TableHeader {...tableHeaderProps} />\n      <TableBody {...tableBodyProps} />\n      {children}\n    </PFTable>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar as PFToolbar,\n  ToolbarProps as PFToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport interface ToolbarItemProps extends Omit<PFToolbarItemProps, 'children'> {\n  item: JSX.Element;\n}\ninterface ToolbarProps {\n  toolbarProps: Omit<PFToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems: JSX.Element;\n  toolbarItems: ToolbarItemProps[];\n}\n\nconst MASToolbar: React.FunctionComponent<ToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n  const { toggleIcon, breakpoint = 'md', ...toolbarToggleGroupProps } = toggleGroupProps;\n  return (\n    <>\n      <PFToolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={toggleIcon} breakpoint={breakpoint} {...toolbarToggleGroupProps}>\n            {toggleGroupItems}\n          </ToolbarToggleGroup>\n          {toolbarItems.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </PFToolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type AlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string|React.ReactElement;\n};\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function AlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextInput } from '@patternfly/react-core';\nimport { MASDeleteModal, MASDeleteModalProps } from '@app/common';\nimport { InstanceStatus } from '@app/utils';\n\nexport type DeleteInstanceModalProps = MASDeleteModalProps & {\n  instanceStatus?: string;\n};\n\nexport const DeleteInstanceModal: React.FC<DeleteInstanceModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  instanceStatus,\n  selectedItemData,\n}: DeleteInstanceModalProps) => {\n  const { t } = useTranslation();\n  const selectedInstanceName = selectedItemData?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (instanceStatus === InstanceStatus.READY) {\n      if (instanceNameInput?.toLowerCase() === selectedInstanceName?.toLowerCase()) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  return (\n    <MASDeleteModal\n      isModalOpen={isModalOpen}\n      modalProps={modalProps}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        ...confirmButtonProps,\n      }}\n      cancelButtonProps={cancelButtonProps}\n      handleModalToggle={handleModalToggle}\n      textProps={textProps}\n    >\n      {instanceStatus === InstanceStatus.READY && (\n        <>\n          <label\n            htmlFor=\"instance-name-input\"\n            dangerouslySetInnerHTML={{ __html: t('instance_name_label', { name: selectedInstanceName }) }}\n          />\n          <TextInput\n            id=\"mk--instance-name__input\"\n            name=\"instance-name-input\"\n            type=\"text\"\n            value={instanceNameInput}\n            onChange={handleInstanceName}\n            autoFocus={true}\n          />\n        </>\n      )}\n    </MASDeleteModal>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, TitleSizes, Button, EmptyStateVariant } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport './UnexpectedError.css';\nimport { MASEmptyState } from '@app/common';\n\ntype UnexpectedError = {\n  updateState: (hasError: boolean) => void;\n};\n\nconst UnexpectedError = ({ updateState }: UnexpectedError) => {\n  const { t } = useTranslation();\n\n  const GoHomeBtn = () => {\n    const history = useHistory();\n    function handleClick() {\n      updateState(false);\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('go_to_openshift_streams')}</Button>;\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.full,\n        }}\n        emptyStateIconProps={{\n          icon: ExclamationCircleIcon,\n          className: 'icon-color',\n        }}\n        titleProps={{\n          title: t('something_went_wrong'),\n          headingLevel: 'h1',\n          size: TitleSizes.lg,\n        }}\n        emptyStateBodyProps={{\n          body: t('unexpected_error'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { UnexpectedError };\n","import React from 'react';\nimport { CheckCircleIcon, PendingIcon, ExclamationCircleIcon, IconSize } from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\nimport './StatusColumn.css';\nimport { useTranslation } from 'react-i18next';\nimport { statusOptions } from '@app/utils/utils';\n\ntype StatusColumnProps = {\n  status: string;\n  instanceName: string;\n};\n\nconst StatusColumn = ({ status, instanceName }: StatusColumnProps) => {\n  const { t } = useTranslation();\n  const getStatus = () => {\n    const filteredstatus = statusOptions.filter((st) => st.value === status?.toLowerCase());\n    if (filteredstatus.length === 1) {\n      return t(filteredstatus[0].value);\n    } else {\n      return t('creation_pending');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status?.toLowerCase()) {\n      case statusOptions[0].value: // 'ready'\n        return <CheckCircleIcon className=\"mk--instances__table--icon--completed\" />;\n      case statusOptions[1].value: // 'failed'\n        return <ExclamationCircleIcon className=\"mk--instances__table--icon--failed\" />;\n      case statusOptions[2].value: // 'accepted'\n        return <PendingIcon />;\n      case statusOptions[3].value: // 'provisioning'\n      case statusOptions[4].value: // 'preparing'\n        return <Spinner size={IconSize.md} aria-label={instanceName} aria-valuetext=\"Creation in progress\" />;\n      case statusOptions[5].value: // 'deprovision'\n        return;\n      default:\n        return <PendingIcon />;\n    }\n  };\n\n  const icon = getStatusIcon();\n  return (\n    <Flex>\n      {icon && <FlexItem spacer={{ default: 'spacerSm' }}>{icon}</FlexItem>}\n      <FlexItem>{getStatus()}</FlexItem>\n    </Flex>\n  );\n};\n\nexport { StatusColumn };\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n  ButtonVariant,\n  Select,\n  SelectVariant,\n  SelectOption,\n  ToolbarGroup,\n  SelectOptionObject,\n  ToolbarChip,\n  ValidatedOptions,\n  Tooltip,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport { SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\nimport { useTranslation } from 'react-i18next';\nimport { FilterType, FilterValue } from './StreamsTableView';\nimport { cloudProviderOptions, cloudRegionOptions, statusOptions, MAX_FILTER_LIMIT } from '@app/utils';\nimport './StreamsToolbar.css';\nimport { useCreateInstanceModal } from '@app/components';\n\ntype StreamsToolbarProps = {\n  mainToggle: boolean;\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n};\n\nconst StreamsToolbar: React.FunctionComponent<StreamsToolbarProps> = ({\n  setFilterSelected,\n  filterSelected = 'name',\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n}) => {\n  const { isModalOpen, setIsModalOpen } = useCreateInstanceModal();\n  const { t } = useTranslation();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [isCloudProviderFilterExpanded, setIsCloudProviderFilterExpanded] = useState(false);\n  const [isRegionFilterExpanded, setIsRegionFilterExpanded] = useState(false);\n  const [isStatusFilterExpanded, setIsStatusFilterExpanded] = useState(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  // Options for server-side filtering\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('cloud_provider'), value: 'cloud_provider', disabled: false },\n    { label: t('region'), value: 'region', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n    { label: t('status'), value: 'status', disabled: false },\n  ];\n\n  useEffect(() => {\n    handleMaxFilters();\n  }, [filteredValue]);\n\n  const cloudProviderFilterOptions = cloudProviderOptions.map((cloudProvider) => {\n    return { label: t(cloudProvider.value), value: cloudProvider.value, disabled: false };\n  });\n\n  const regionFilterOptions = cloudRegionOptions.map((region) => {\n    return { label: t(region.value), value: region.value, disabled: false };\n  });\n\n  const statusFilterOptions = statusOptions\n    .filter((option) => option.value !== 'preparing')\n    .map((status) => {\n      return { label: t(status.value), value: status.value, disabled: false };\n    });\n\n  const onFilterToggle = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onCloudProviderFilterToggle = () => {\n    setIsCloudProviderFilterExpanded(!isCloudProviderFilterExpanded);\n  };\n\n  const onRegionFilterToggle = () => {\n    setIsRegionFilterExpanded(!isRegionFilterExpanded);\n  };\n\n  const onStatusFilterToggle = () => {\n    setIsStatusFilterExpanded(!isStatusFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const onClear = () => {\n    setFilteredValue([]);\n    setIsMaxFilter(false);\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value); // index of current filter value in applied filter\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onChangeSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const onCloudProviderFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('cloud_provider');\n    updateFilter('cloud_provider', { value: selection.toString(), isExact: true }, true);\n    cloudProviderOptions.length < 2 && setIsCloudProviderFilterExpanded(false);\n  };\n\n  const onRegionFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('region');\n    updateFilter('region', { value: selection.toString(), isExact: true }, true);\n    regionFilterOptions.length < 2 && setIsRegionFilterExpanded(false);\n  };\n\n  const onStatusFilterSelect = (\n    _event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder?: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelection('status');\n    updateFilter('status', { value: selection.toString(), isExact: true }, true);\n  };\n\n  const clearSelection = (value: string) => {\n    const copyFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = copyFilteredValue.findIndex((filter) => filter.filterKey === value);\n    if (filterIndex >= 0) {\n      copyFilteredValue.splice(filterIndex, 1);\n    }\n    setFilteredValue(copyFilteredValue);\n    if (value === 'name') {\n      setNameInputValue('');\n    }\n    if (value === 'owner') {\n      setOwnerInputValue('');\n    }\n    if (value === 'cloud_provider') {\n      setIsStatusFilterExpanded(false);\n    }\n    if (value === 'region') {\n      setIsRegionFilterExpanded(false);\n    }\n    if (value === 'status') {\n      setIsStatusFilterExpanded(false);\n    }\n  };\n\n  const onInputPress = (event) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const handleMaxFilters = () => {\n    let maxFilterCount = 0;\n    filteredValue?.forEach((filter: any) => {\n      const { filterValue, filterKey } = filter;\n      const provisioningStatus = filterKey === 'status' && filterValue?.filter(({ value }) => value === 'provisioning');\n      if (provisioningStatus?.length > 0) {\n        maxFilterCount += filterValue?.length + 1;\n      } else {\n        maxFilterCount += filterValue?.length;\n      }\n    });\n\n    if (maxFilterCount >= MAX_FILTER_LIMIT) {\n      setIsMaxFilter(true);\n    } else {\n      setIsMaxFilter(false);\n    }\n  };\n\n  const isDisabledSelectOption = (key: string, optionValue: string) => {\n    let newFilterValue: FilterValue | undefined;\n    const newFilteredValue = filteredValue?.filter(({ filterKey }) => filterKey === key);\n    if (newFilteredValue && newFilteredValue?.length > 0) {\n      const { filterValue } = newFilteredValue[0];\n      newFilterValue = filterValue?.find(({ value }) => value === optionValue);\n    }\n    if (!newFilterValue) {\n      return true;\n    }\n    return false;\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onFilterToggle}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onChangeSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"filterText\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label=\"Search instances\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('cloud_provider')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('cloud_provider', chip, cloudProviderFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('cloud_provider')}\n          categoryName={t('cloud_provider')}\n        >\n          {filterSelected === 'cloud_provider' && (\n            <ToolbarItem>\n              <Select\n                id=\"cloud-provider-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select cloud provider\"\n                onToggle={onCloudProviderFilterToggle}\n                selections={getSelectionForFilter('cloud_provider')}\n                isOpen={isCloudProviderFilterExpanded}\n                onSelect={onCloudProviderFilterSelect}\n                placeholderText={t('filter_by_cloud_provider')}\n              >\n                {cloudProviderFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={\n                      option.disabled || (isMaxFilter && isDisabledSelectOption('cloud_provider', option.value))\n                    }\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('cloud-provider-select')}\n                      />\n                    )}\n                    {/* Todo: remove span tag and tabIndex when issue fixed in PF select*/}\n                    <span tabIndex={0}>{option.label}</span>\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('region')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('region', chip, regionFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('region')}\n          categoryName={t('region')}\n        >\n          {filterSelected === 'region' && (\n            <ToolbarItem>\n              <Select\n                id=\"region-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select region\"\n                onToggle={onRegionFilterToggle}\n                selections={getSelectionForFilter('region')}\n                isOpen={isRegionFilterExpanded}\n                onSelect={onRegionFilterSelect}\n                placeholderText={t('filter_by_region')}\n              >\n                {regionFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('region', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('region-select')}\n                      />\n                    )}\n                    {/* Todo: remove span tag and tabIndex when issue fixed in PF select*/}\n                    <span tabIndex={0}>{option.label}</span>\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"filterOwners\"\n                  type=\"search\"\n                  aria-label=\"Search filter input\"\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label=\"Search owners\"\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('status')?.map((val) => t(val))}\n          deleteChip={(_category, chip) => onDeleteChip('status', chip, statusFilterOptions)}\n          deleteChipGroup={() => onDeleteChipGroup('status')}\n          categoryName={t('status')}\n        >\n          {filterSelected === 'status' && (\n            <ToolbarItem>\n              <Select\n                id=\"status-select\"\n                variant={SelectVariant.checkbox}\n                aria-label=\"Select status\"\n                onToggle={onStatusFilterToggle}\n                selections={getSelectionForFilter('status')}\n                isOpen={isStatusFilterExpanded}\n                onSelect={onStatusFilterSelect}\n                placeholderText={t('filter_by_status')}\n              >\n                {statusFilterOptions.map((option, index) => (\n                  <SelectOption\n                    isDisabled={option.disabled || (isMaxFilter && isDisabledSelectOption('status', option.value))}\n                    key={index}\n                    value={option.value}\n                  >\n                    {isMaxFilter && (\n                      <Tooltip\n                        isVisible={isMaxFilter}\n                        content={tooltipContent()}\n                        reference={() => document.getElementById('status-select')}\n                      />\n                    )}\n                    {/* Todo: remove span tag and tabIndex when issue fixed in PF select*/}\n                    <span tabIndex={0}>{option.label}</span>\n                  </SelectOption>\n                ))}\n              </Select>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button variant=\"primary\" onClick={() => setIsModalOpen(!isModalOpen)}>\n          {t('create_kafka_instance')}\n        </Button>\n      ),\n    },\n  ];\n  \n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: FilterIcon, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { StreamsToolbar };\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const __PUBLIC_PATH__: string;\ndeclare const window: Window & {\n  windowError: string;\n};\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__PUBLIC_PATH__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: '~',\n      keySeparator: false,\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        // window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        // console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\ni18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n"],"sourceRoot":""}