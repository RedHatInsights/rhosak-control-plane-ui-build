{"version":3,"sources":["webpack://kas-ui/./src/app/common/MASAlerts/MASAlertToastGroup.tsx","webpack://kas-ui/./src/app/common/MASDeleteModal/MASDeleteModal.tsx","webpack://kas-ui/./src/app/common/MASDrawer/MASDrawer.tsx","webpack://kas-ui/./src/app/common/MASErrorBoundary/UnexpectedError.tsx","webpack://kas-ui/./src/app/common/MASLoading/MASLoading.tsx","webpack://kas-ui/./src/app/common/MASPagination/MASPagination.tsx","webpack://kas-ui/./src/app/common/MASTable/CustomRowWrapper.tsx","webpack://kas-ui/./src/app/common/MASTable/MASTable.tsx","webpack://kas-ui/./src/app/common/MASToolbar/MASToolbar.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/i18n/i18n.ts","webpack://kas-ui/./src/openapi/base.ts","webpack://kas-ui/./src/openapi/api.ts"],"names":["MASAlertToastGroup","alerts","onCloseAlert","AlertGroup","isToast","map","key","variant","title","body","dataTestId","Alert","isLiveRegion","AlertVariant","variantLabel","actionClose","AlertActionCloseButton","onClose","MASDeleteModal","isModalOpen","modalProps","confirmButtonProps","cancelButtonProps","handleModalToggle","textProps","children","selectedItemData","ModalVariant","titleIconVariant","ariaLabel","showClose","restModalProps","id","buttonConfirmVariant","ButtonVariant","onClickConfirmButton","isDisabledConfirmButton","label","confirmActionLabel","restConfirmButtonProps","cancelButtonId","cancelButtonKey","cancelButtonVariant","cancelActionLabel","restCancelButtonProps","className","description","restTextProps","Modal","isOpen","actions","Button","onClick","isDisabled","Text","dangerouslySetInnerHTML","__html","MASDrawer","isLoading","drawerPanelContentProps","drawerHeaderProps","isExpanded","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","widths","restDrawerPanelContentProps","text","panelContent","DrawerPanelContent","default","DrawerHead","TextContent","component","TextVariants","value","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","UnexpectedError","updateState","t","useTranslation","PageSection","padding","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","titleProps","emptyStateBodyProps","history","push","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","MASPagination","page","perPage","itemCount","PaginationVariant","isCompact","titles","restProps","location","searchParams","URLSearchParams","search","setSearchParam","useCallback","name","set","toString","onSetPage","_","newPage","onPerPageSelect","newPerPage","CustomRowWrapperContext","createContext","activeRow","onRowClick","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","trRef","rowProps","row","props","rowIndex","originalData","isRowDeleted","status","tabIndex","ref","css","hidden","undefined","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","rowWrapper","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","toggleIcon","breakpoint","toolbarToggleGroupProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","ErrorCodes","isServiceApiError","error","response","data","code","pseudolocalizationEnabled","window","get","enabled","wrapped","use","initReactI18next","init","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","format","lng","options","Intl","NumberFormat","Date","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","Error","DefaultApiAxiosParamCreator","createKafka","async","kafkaRequestPayload","Promise","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","query","headersFromBaseOptions","headers","needsSerialization","JSON","stringify","url","createServiceAccount","serviceAccountRequest","deleteKafkaById","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByInstantQuery","filters","getMetricsByRangeQuery","duration","interval","getServiceAccountById","listCloudProviderRegions","listCloudProviders","listKafkas","orderBy","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","then","BaseAPI"],"mappings":"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","file":"31.6cc5ddcc.js","sourcesContent":["import React from 'react';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\nexport type MASAlertType = {\n  key: number;\n  title: string;\n  variant: AlertVariant;\n  body?: string | React.ReactElement;\n  dataTestId?: string;\n};\n\ntype AlertToastGroupProps = {\n  alerts: MASAlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport function MASAlertToastGroup({ alerts, onCloseAlert }: AlertToastGroupProps) {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, title, body, dataTestId }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(key)} />}\n          data-testid={dataTestId}\n        >\n          {body}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n}\n","import React from 'react';\nimport {\n  Modal,\n  Button,\n  ButtonVariant,\n  ModalVariant,\n  ModalProps,\n  Text,\n  ButtonProps,\n  TextProps,\n} from '@patternfly/react-core';\nimport './MASDeleteModal.css';\n\nexport type MASDeleteModalProps = {\n  isModalOpen: boolean;\n  modalProps: Omit<ModalProps, 'children' | 'ref'>;\n  handleModalToggle: () => void;\n  children?: React.ReactNode;\n  selectedItemData?: any;\n  confirmButtonProps?: Omit<ButtonProps, 'children' | 'onClick'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n    onClick?: (data?: any) => Promise<void> | void;\n  };\n  cancelButtonProps?: Omit<ButtonProps, 'children'> & {\n    id?: string;\n    key?: string;\n    label?: string;\n  };\n  textProps?: Omit<TextProps, 'children'> & {\n    description?: string;\n  };\n};\n\nexport const MASDeleteModal: React.FC<MASDeleteModalProps> = ({\n  isModalOpen,\n  modalProps,\n  confirmButtonProps,\n  cancelButtonProps,\n  handleModalToggle,\n  textProps,\n  children,\n  selectedItemData = '',\n}: MASDeleteModalProps) => {\n  const {\n    variant = ModalVariant.small,\n    titleIconVariant = 'warning',\n    ['aria-label']: ariaLabel,\n    title,\n    showClose = true,\n    ...restModalProps\n  } = modalProps || {};\n\n  const {\n    id = 'mas--confirm__button',\n    key = 'confirm-button',\n    variant: buttonConfirmVariant = ButtonVariant.danger,\n    onClick: onClickConfirmButton,\n    isDisabled: isDisabledConfirmButton,\n    label: confirmActionLabel = 'Delete',\n    ...restConfirmButtonProps\n  } = confirmButtonProps || {};\n\n  const {\n    id: cancelButtonId = 'mas--cancel__button',\n    key: cancelButtonKey = '\"cancel-button',\n    variant: cancelButtonVariant = ButtonVariant.link,\n    onClick: onClickCancelButton,\n    isDisabled: isDisabledCancelButton,\n    label: cancelActionLabel = 'Cancel',\n    ...restCancelButtonProps\n  } = cancelButtonProps || {};\n\n  const { className = 'mas--delete-item__modal--text', description, ...restTextProps } = textProps || {};\n\n  return (\n    <Modal\n      variant={variant}\n      isOpen={isModalOpen}\n      aria-label={ariaLabel}\n      title={title}\n      titleIconVariant={titleIconVariant}\n      showClose={showClose}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          id={id}\n          key={key}\n          variant={buttonConfirmVariant}\n          onClick={() => onClickConfirmButton && onClickConfirmButton(selectedItemData)}\n          isDisabled={isDisabledConfirmButton}\n          {...restConfirmButtonProps}\n        >\n          {confirmActionLabel}\n        </Button>,\n        <Button\n          id={cancelButtonId}\n          key={cancelButtonKey}\n          variant={cancelButtonVariant}\n          onClick={handleModalToggle}\n          {...restCancelButtonProps}\n        >\n          {cancelActionLabel}\n        </Button>,\n      ]}\n      {...restModalProps}\n    >\n      {description && (\n        <Text className={className} dangerouslySetInnerHTML={{ __html: description || '' }} {...restTextProps} />\n      )}\n      {children}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/common';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = true,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } = drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent widths={widths || { default: 'width_50' }} {...restDrawerPanelContentProps}>\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text component={text?.component || TextVariants.small} className={text?.className || 'pf-u-mb-0'}>\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'pf-u-mt-0'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>{panelBodyContent}</DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer isExpanded={isExpanded} onExpand={onExpand} data-ouia-app-id={dataOuiaAppId}>\n      <DrawerContent\n        panelContent={panelContent}\n        className={notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''}\n      >\n        <DrawerContentBody> {children}</DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, TitleSizes, Button, EmptyStateVariant } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport './UnexpectedError.css';\nimport { MASEmptyState } from '@app/common';\n\ntype UnexpectedError = {\n  updateState: (hasError: boolean) => void;\n};\n\nconst UnexpectedError = ({ updateState }: UnexpectedError) => {\n  const { t } = useTranslation();\n\n  const GoHomeBtn = () => {\n    const history = useHistory();\n    function handleClick() {\n      updateState(false);\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('go_to_openshift_streams')}</Button>;\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <MASEmptyState\n        emptyStateProps={{\n          variant: EmptyStateVariant.full,\n        }}\n        emptyStateIconProps={{\n          icon: ExclamationCircleIcon,\n          className: 'icon-color',\n        }}\n        titleProps={{\n          title: t('something_went_wrong'),\n          headingLevel: 'h1',\n          size: TitleSizes.lg,\n        }}\n        emptyStateBodyProps={{\n          body: t('unexpected_error'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { UnexpectedError };\n","import React from 'react';\nimport { Bullseye, BullseyeProps, Spinner, SpinnerProps } from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport type PaginationProps = Omit<PFPaginationProps, 'children' | 'ref'>;\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  page,\n  perPage = 10,\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const setSearchParam = useCallback(\n    (name: string, value: string) => {\n      searchParams.set(name, value.toString());\n    },\n    [searchParams]\n  );\n\n  const onSetPage = useCallback(\n    (_: any, newPage: number) => {\n      setSearchParam('page', newPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  const onPerPageSelect = useCallback(\n    (_: any, newPerPage: number) => {\n      setSearchParam('page', '1');\n      setSearchParam('perPage', newPerPage.toString());\n      history.push({\n        search: searchParams.toString(),\n      });\n    },\n    [setSearchParam, history, searchParams]\n  );\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { createContext, useContext } from 'react';\nimport { InstanceStatus } from '@app/utils';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (event: any, rowIndex: number, row: any) => void;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => {},\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps) => {\n  const { activeRow, onRowClick } = useContext(CustomRowWrapperContext);\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n  const isRowDeleted = originalData?.status === InstanceStatus.DEPROVISION;\n\n  return (\n    <tr\n      tabIndex={0}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        isRowDeleted ? 'pf-m-disabled' : 'pf-m-selectable',\n        activeRow && activeRow === originalData?.name && 'pf-m-selected'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: any) => !isRowDeleted && onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { CustomRowWrapper, CustomRowWrapperProvider, CustomRowWrapperContextProps } from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'>;\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    rowWrapper,\n    ...restProps\n  } = tableProps;\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n      }}\n    >\n      <PFTable\n        className={css('mas--streams-table-view__table', className)}\n        rowWrapper={rowWrapper || CustomRowWrapper}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: JSX.Element;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: any;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const { id, clearAllFilters, collapseListedFiltersBreakpoint = 'md', inset, ...restToolbarProps } = toolbarProps;\n  const { toggleIcon, breakpoint = 'md', ...toolbarToggleGroupProps } = toggleGroupProps;\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          <ToolbarToggleGroup toggleIcon={toggleIcon} breakpoint={breakpoint} {...toolbarToggleGroupProps}>\n            {toggleGroupItems}\n          </ToolbarToggleGroup>\n          {toolbarItems?.map((toolbarItem, index) => {\n            const { key = 'mas', variant, className, id, alignment, item, ...restItemProps } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string\n  id: number\n  kind: string\n  reason: string\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n}\n\nenum ErrorCodes {\n  UNAUTHORIZED_USER = \"MGD-SERV-API-4\",\n  DUPLICATE_INSTANCE_NAME = \"MGD-SERV-API-36\"\n}\n\nexport {\n  ErrorCodes,\n  isServiceApiError\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\nimport * as relativeTime from 'dayjs/plugin/relativeTime';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const window: Window & {\n  windowError: string;\n};\n\ni18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: ':',\n      keySeparator: '.',\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        // window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        // console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\ni18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default i18n;\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface InstantQuery\n */\nexport interface InstantQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof InstantQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryList\n */\nexport interface MetricsInstantQueryList extends MetricsInstantQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryListAllOf\n */\nexport interface MetricsInstantQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryList\n */\nexport interface MetricsRangeQueryList extends MetricsRangeQueryListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryListAllOf\n */\nexport interface MetricsRangeQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface RangeQuery\n */\nexport interface RangeQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof RangeQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof RangeQuery\n     */\n    values?: Array<Values>;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByInstantQuery.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByRangeQuery.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getServiceAccountById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByInstantQuery(id, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getServiceAccountById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {\n            return DefaultApiFp(configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {\n            return DefaultApiFp(configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getServiceAccountById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n"],"sourceRoot":""}