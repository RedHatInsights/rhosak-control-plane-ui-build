{"version":3,"file":"6437.cca37a82.js","mappings":"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","sources":["webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/api.ts","webpack://kas-ui/./src/app/models/kafka.ts","webpack://kas-ui/./src/app/modules/OpenshiftStreams/dialogs/CreateInstance/CreateInstance.tsx","webpack://kas-ui/./src/app/utils/error.ts","webpack://kas-ui/./src/app/utils/useDocumentTitle.ts","webpack://kas-ui/./src/app/utils/utils.ts"],"sourcesContent":["import {\n  asKafkaRequestPayload,\n  createEmptyNewKafkaRequestPayload,\n} from '@app/models/kafka';\nimport {\n  CreateKafkaInitializationData,\n  InstanceAvailability,\n  OnCreateKafka,\n  Provider,\n  ProviderInfo,\n  Providers,\n  RegionInfo,\n  Regions,\n} from '@rhoas/app-services-ui-components';\nimport {\n  Quota,\n  QuotaType,\n  QuotaValue,\n  useAuth,\n  useConfig,\n  useQuota,\n} from '@rhoas/app-services-ui-shared';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { isServiceApiError } from '@app/utils/error';\nimport { ErrorCodes, InstanceType } from '@app/utils';\n\nexport const useAvailableProvidersAndDefault = () => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n  const { getQuota } = useQuota();\n\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken: auth.kas.getToken(),\n      basePath,\n    })\n  );\n\n  const fetchQuota = async (): Promise<Quota['data']> => {\n    return new Promise((resolve, reject) => {\n      async function getQuotaData() {\n        const quota = await getQuota();\n        if (quota.isServiceDown) {\n          reject();\n        } else if (quota.loading) {\n          setTimeout(getQuota, 1000);\n        } else {\n          resolve(quota.data);\n        }\n      }\n      getQuotaData();\n    });\n  };\n\n  // Function to fetch cloud Regions based on selected filter\n  const fetchRegions = async (\n    id: string,\n    ia: InstanceAvailability\n  ): Promise<Regions> => {\n    const instance_type =\n      ia === 'quota' ? InstanceType.standard : InstanceType.eval;\n    const res = await apisService.getCloudProviderRegions(\n      id,\n      undefined,\n      undefined,\n      InstanceType.eval\n    );\n    return (res.data.items || [])\n      .filter(\n        (p) =>\n          p.enabled &&\n          p.capacity.some(\n            (c) =>\n              c.instance_type === instance_type &&\n              c.max_capacity_reached === false\n          )\n      )\n      .map((r): RegionInfo => {\n        return {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          id: r.id!,\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          displayName: r.display_name!,\n        };\n      });\n  };\n\n  const fetchProviders = async (\n    ia: InstanceAvailability\n  ): Promise<Providers> => {\n    const res = await apisService.getCloudProviders();\n    const allProviders = res?.data?.items || [];\n    return await Promise.all(\n      allProviders\n        .filter((p) => p.enabled)\n        .map(async (provider): Promise<ProviderInfo> => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const regions = await fetchRegions(provider.id!, ia);\n          return {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            id: provider.id!,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            displayName: provider.display_name!,\n            regions,\n            AZ: {\n              single: false,\n              multi: true,\n            },\n          };\n        })\n    );\n  };\n\n  const fetchUserHasTrialInstance = async (): Promise<boolean> => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const loggedInUser = await auth.getUsername()!;\n    const accessToken = await auth.kas.getToken();\n    const filter = `owner = ${loggedInUser}`;\n    try {\n      const apisService = new DefaultApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      const res = await apisService.getKafkas('', '', '', filter);\n      if (res.data.items) {\n        return res.data.items.some(\n          (k) => k?.instance_type === InstanceType?.eval\n        );\n      }\n    } catch {\n      // noop\n    }\n    return false;\n  };\n\n  return async function (): Promise<CreateKafkaInitializationData> {\n    const quota = await fetchQuota();\n    const hasTrialRunning = await fetchUserHasTrialInstance();\n\n    const kasQuota: QuotaValue | undefined = quota?.get(QuotaType?.kas);\n\n    const instanceAvailability = ((): InstanceAvailability => {\n      switch (true) {\n        case kasQuota !== undefined && kasQuota.remaining > 0:\n          return 'quota';\n        case hasTrialRunning:\n          return 'trial-used';\n        // TODO check if trial instances are available for creation using the info returned by the region endpoint\n        // TODO also check if there is any capacity for standar instances, as for the trial ones\n        default:\n          return 'trial';\n      }\n    })();\n\n    const availableProviders = await fetchProviders(instanceAvailability);\n    const defaultProvider: Provider | undefined =\n      availableProviders.length === 1 ? availableProviders[0].id : undefined;\n\n    return {\n      defaultProvider,\n      defaultAZ: 'multi',\n      availableProviders,\n      instanceAvailability,\n    };\n  };\n};\n\nexport const useCreateInstance = (): OnCreateKafka => {\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken: auth?.kas.getToken(),\n      basePath,\n    })\n  );\n\n  return async (data, onSuccess, onError) => {\n    try {\n      const kafkaRequest = asKafkaRequestPayload(\n        createEmptyNewKafkaRequestPayload()\n      );\n      kafkaRequest.name = data.name;\n      kafkaRequest.cloud_provider = data.provider;\n      kafkaRequest.region = data.region;\n      kafkaRequest.multi_az = data.az === 'multi';\n      await apisService.createKafka(true, kafkaRequest);\n      onSuccess();\n    } catch (error) {\n      if (isServiceApiError(error)) {\n        const { code } = error?.response?.data || {};\n\n        switch (code) {\n          case ErrorCodes.DUPLICATE_INSTANCE_NAME:\n            onError('name-taken');\n            break;\n          case ErrorCodes.INSUFFICIENT_QUOTA:\n            onError('over-quota');\n            break;\n          default:\n            onError('unknown');\n        }\n      }\n    }\n  };\n};\n","import { KafkaRequestPayload } from '@rhoas/kafka-management-sdk';\nimport { Validated } from '@app/models/validated';\n\nexport type NewKafkaRequestPayload = {\n  cloud_provider: Validated<string | undefined>;\n  multi_az: Validated<boolean | undefined>;\n  region: Validated<string | undefined>;\n  name: Validated<string | undefined>;\n};\n\nexport const asKafkaRequestPayload = (\n  kafkaRequest: NewKafkaRequestPayload\n): KafkaRequestPayload => {\n  if (kafkaRequest.name.value === undefined) {\n    throw new Error('kafkaRequest.name must not be undefined');\n  }\n  if (kafkaRequest.region.value === undefined) {\n    throw new Error('kafkaRequest.region must not be undefined');\n  }\n  if (kafkaRequest.multi_az.value === undefined) {\n    throw new Error('kafkaRequest.multi_az must not be undefined');\n  }\n  if (kafkaRequest.cloud_provider.value === undefined) {\n    throw new Error('kafkaRequest.cloud_provider must not be undefined');\n  }\n  return {\n    name: kafkaRequest.name.value,\n    region: kafkaRequest.region.value,\n    multi_az: kafkaRequest.multi_az.value,\n    cloud_provider: kafkaRequest.cloud_provider.value,\n  };\n};\n\nexport const isKafkaRequestInvalid = (\n  value: NewKafkaRequestPayload\n): boolean => {\n  return (\n    value.name.validated === 'error' ||\n    value.region.validated === 'error' ||\n    value.cloud_provider.validated === 'error' ||\n    value.multi_az.validated === 'error'\n  );\n};\n\nexport const createEmptyNewKafkaRequestPayload = (): NewKafkaRequestPayload => {\n  return {\n    cloud_provider: {\n      value: '',\n    },\n    multi_az: {\n      value: true,\n    },\n    region: {\n      value: '',\n    },\n    name: {\n      value: '',\n    },\n  };\n};\n","import {\n  CreateKafkaInstance,\n  CreateKafkaInitializationData,\n  OnCreateKafka,\n} from '@rhoas/app-services-ui-components';\nimport {\n  BaseModalProps,\n  CreateInstanceProps,\n} from '@rhoas/app-services-ui-shared';\nimport { QuickStartContext } from '@patternfly/quickstarts';\nimport React, { useCallback, useContext } from 'react';\nimport { getModalAppendTo } from '@app/utils';\nimport { useAvailableProvidersAndDefault, useCreateInstance } from './api';\n\nconst CreateInstance: React.FunctionComponent<\n  CreateInstanceProps & BaseModalProps\n> = ({ hideModal, onCreate }) => {\n  const fetchAvailableProvidersAndDefault = useAvailableProvidersAndDefault();\n  const createInstance = useCreateInstance();\n  const qsContext = useContext(QuickStartContext);\n\n  const onClickQuickStart = useCallback(() => {\n    qsContext.setActiveQuickStart &&\n      qsContext.setActiveQuickStart('getting-started');\n  }, []);\n\n  const handleCreate = useCallback<OnCreateKafka>(\n    function (data, onSuccess, onError) {\n      const handleOnSuccess = () => {\n        onSuccess();\n        onCreate && onCreate();\n        hideModal();\n      };\n      createInstance(data, handleOnSuccess, onError);\n    },\n    [hideModal, onCreate, createInstance]\n  );\n\n  const getAvailableProvidersAndDefaults =\n    useCallback(async (): Promise<CreateKafkaInitializationData> => {\n      return fetchAvailableProvidersAndDefault();\n    }, []);\n\n  return (\n    <CreateKafkaInstance\n      isModalOpen={true}\n      onClickQuickStart={onClickQuickStart}\n      onCancel={hideModal}\n      getAvailableProvidersAndDefaults={getAvailableProvidersAndDefaults}\n      onCreate={handleCreate}\n      appendTo={getModalAppendTo}\n    />\n  );\n};\n\nexport { CreateInstance };\nexport default CreateInstance;\n","import {\n  APIErrorCodes,\n  isServiceApiError,\n  getErrorCode,\n} from '@rhoas/kafka-management-sdk';\n\nconst ErrorCodes = {\n  UNAUTHORIZED_USER: APIErrorCodes.ERROR_4,\n  DUPLICATE_INSTANCE_NAME: APIErrorCodes.ERROR_36,\n  PREVIEW_KAFKA_INSTANCE_EXIST: APIErrorCodes.ERROR_24,\n  INSUFFICIENT_QUOTA: APIErrorCodes.ERROR_120,\n  FAILED_TO_CHECK_QUOTA: APIErrorCodes.ERROR_121,\n  OWNER_DOES_NOT_EXIST: APIErrorCodes.ERROR_21,\n};\n\nexport { ErrorCodes, isServiceApiError, getErrorCode };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string): void {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { IRowCell, IRowData } from '@patternfly/react-table';\nimport { formatDistance } from 'date-fns';\n\nfunction accessibleRouteChangeHandler(): number {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport type KeyValueOptions = {\n  value: string;\n  label: string;\n  disabled?: boolean;\n};\n\nenum InstanceStatus {\n  READY = 'ready',\n  ACCEPTED = 'accepted',\n  PREPARING = 'preparing',\n  PROVISIONING = 'provisioning',\n  FAILED = 'failed',\n  DEPROVISION = 'deprovision',\n  DELETED = 'deleting',\n}\n\nenum InstanceType {\n  eval = 'eval',\n  standard = 'standard',\n}\n\nconst cloudProviderOptions: KeyValueOptions[] = [\n  { value: 'aws', label: 'Amazon Web Services' },\n  // Only aws is supported for now\n  // { value: 'azure', label: 'Microsoft Azure' },\n  // { value: 'baremetal', label: 'Bare Metal' },\n  // { value: 'gcp', label: 'Google Cloud Platform' },\n  // { value: 'libvirt', label: 'Libvirt' },\n  // { value: 'openstack', label: 'OpenStack' },\n  // { value: 'vsphere', label: 'VSphere' },\n];\n\nconst statusOptions: KeyValueOptions[] = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n  { value: 'deleting', label: 'Deletion in progress' },\n];\n\nconst getCloudProviderDisplayName = (value: string): string => {\n  return (\n    cloudProviderOptions.find((option) => option.value === value)?.label ||\n    value\n  );\n};\n\nconst cloudRegionOptions: KeyValueOptions[] = [\n  { value: 'us-east-1', label: 'US East, N. Virginia' },\n  { value: 'eu-west-1', label: 'EU, Ireland' },\n\n  // Only us-east is supported for now\n  // { value: 'ap-northeast-1', label: 'Asia Pacific, Tokyo' },\n  // { value: 'ap-northeast-2', label: 'Asia Pacific, Seoul' },\n  // { value: 'ap-south-1', label: 'Asia Pacific, Mumbai' },\n  // { value: 'ap-southeast-1', label: 'Asia Pacific, Singapore' },\n  // { value: 'ap-southeast-2', label: 'Asia Pacific, Sydney' },\n  // { value: 'ca-central-1', label: 'Canada, Central' },\n  // { value: 'eu-central-1', label: 'EU, Frankfurt' },\n  // { value: 'eu-north-1', label: 'EU, Stockholm' },\n  // { value: 'eu-west-2', label: 'EU, London' },\n  // { value: 'eu-west-3', label: 'EU, Paris' },\n  // { value: 'me-south-1', label: 'Middle East, Bahrain' },\n  // { value: 'sa-east-1', label: 'South America, São Paulo' },\n  // { value: 'us-east-2', label: 'US East, Ohio' },\n  // { value: 'us-west-1', label: 'US West, N. California' },\n  // { value: 'us-west-2', label: 'US West, Oregon' },\n];\n\nconst MAX_INSTANCE_NAME_LENGTH = 32;\nconst MAX_FILTER_LIMIT = 10;\nconst MAX_SERVICE_ACCOUNT_NAME_LENGTH = 50;\n\nconst MAX_POLL_INTERVAL = 5000;\n\n// function to get exact number of skeleton count required for the current page\nconst getLoadingRowsCount = (\n  page: number,\n  perPage: number,\n  expectedTotal: number\n): number => {\n  // initiaise loadingRowCount by perPage\n  let loadingRowCount = perPage;\n  /*\n    if number of expected count is greater than 0\n      calculate the loadingRowCount\n    else\n      leave the loadingRowCount to perPage\n   */\n  if (expectedTotal && expectedTotal > 0) {\n    // get total number of pages\n    const totalPage =\n      expectedTotal % perPage !== 0\n        ? Math.floor(expectedTotal / perPage) + 1\n        : Math.floor(expectedTotal / perPage);\n    // check whether the current page is the last page\n    if (page === totalPage) {\n      // check whether to total expected count is greater than perPage count\n      if (expectedTotal > perPage) {\n        // assign the calculated skelton rows count to display the exact number of expected loading skelton rows\n        loadingRowCount =\n          expectedTotal % perPage === 0 ? perPage : expectedTotal % perPage;\n      } else {\n        loadingRowCount = expectedTotal;\n      }\n    }\n  }\n  // return the exact number of skeleton expected at the time of loading\n  return loadingRowCount !== 0 ? loadingRowCount : perPage;\n};\n\nconst sortValues = <T>(\n  items: T[] | undefined,\n  key: string,\n  order = 'asc'\n): T[] | undefined => {\n  const compareValue = (a: T, b: T) => {\n    if (\n      !Object.prototype.hasOwnProperty.call(a, key) ||\n      Object.prototype.hasOwnProperty.call(b, key)\n    ) {\n      // property doesn't exist on either object\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order === 'desc' ? comparison * -1 : comparison;\n  };\n  return items?.sort(compareValue);\n};\n\nconst getFormattedDate = (\n  date: string | Date,\n  translatePostfix: string\n): string => {\n  date = typeof date === 'string' ? new Date(date) : date;\n  return formatDistance(date, new Date()) + ' ' + translatePostfix;\n};\n\nconst getModalAppendTo = (): HTMLElement =>\n  (document.getElementById('chrome-app-render-root') as HTMLElement) ||\n  document.body;\n\nconst isMobileTablet = (): boolean => {\n  let check = false;\n  (function (a) {\n    /* eslint-disable */\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || window['opera']);\n  return check;\n};\n\nconst getSkeletonForRows = ({\n  loadingCount,\n  skeleton,\n  length,\n}: {\n  loadingCount: number;\n  skeleton: React.ReactNode;\n  length: number;\n}) => {\n  const rows: (IRowData | string[])[] | undefined = [];\n  const cells: (React.ReactNode | IRowCell)[] = [];\n  //get exact number of skeletonCompoenet cells based on total columns\n  for (let i = 0; i < length; i++) {\n    cells.push({ title: skeleton });\n  }\n  // get exact of skeleton rows based on expected total count of instances\n  for (let i = 0; i < loadingCount; i++) {\n    rows.push({\n      cells: cells,\n    });\n  }\n  return rows;\n};\n\nexport {\n  accessibleRouteChangeHandler,\n  cloudProviderOptions,\n  cloudRegionOptions,\n  getCloudProviderDisplayName,\n  statusOptions,\n  InstanceStatus,\n  MAX_INSTANCE_NAME_LENGTH,\n  MAX_FILTER_LIMIT,\n  MAX_POLL_INTERVAL,\n  getLoadingRowsCount,\n  MAX_SERVICE_ACCOUNT_NAME_LENGTH,\n  sortValues,\n  getFormattedDate,\n  getModalAppendTo,\n  isMobileTablet,\n  getSkeletonForRows,\n  InstanceType,\n};\n"],"names":["useCreateInstance","auth","useAuth","basePath","useConfig","apisService","DefaultApi","Configuration","accessToken","kas","getToken","data","onSuccess","onError","kafkaRequest","undefined","name","value","Error","region","multi_az","cloud_provider","asKafkaRequestPayload","provider","az","createKafka","response","CreateInstance","getQuota","fetchRegions","hideModal","onCreate","fetchAvailableProvidersAndDefault","useQuota","id","ia","Promise","instance_type","getCloudProviderRegions","items","filter","p","enabled","capacity","some","c","max_capacity_reached","map","r","displayName","display_name","resolve","reject","quota","isServiceDown","loading","setTimeout","getQuotaData","getUsername","loggedInUser","getKafkas","res","k","hasTrialRunning","kasQuota","get","QuotaType","instanceAvailability","remaining","getCloudProviders","allProviders","all","regions","AZ","single","multi","defaultProvider","availableProviders","length","defaultAZ","createInstance","qsContext","useContext","QuickStartContext","onClickQuickStart","useCallback","setActiveQuickStart","handleCreate","getAvailableProvidersAndDefaults","CreateKafkaInstance","isModalOpen","onCancel","appendTo","ErrorCodes","UNAUTHORIZED_USER","APIErrorCodes","DUPLICATE_INSTANCE_NAME","PREVIEW_KAFKA_INSTANCE_EXIST","INSUFFICIENT_QUOTA","FAILED_TO_CHECK_QUOTA","OWNER_DOES_NOT_EXIST","useDocumentTitle","title","originalTitle","document","InstanceStatus","InstanceType","cloudProviderOptions","label","statusOptions","cloudRegionOptions","MAX_INSTANCE_NAME_LENGTH","MAX_FILTER_LIMIT","MAX_SERVICE_ACCOUNT_NAME_LENGTH","MAX_POLL_INTERVAL","getLoadingRowsCount","page","perPage","expectedTotal","loadingRowCount","Math","floor","getFormattedDate","date","translatePostfix","Date","formatDistance","getModalAppendTo","getElementById","body","isMobileTablet","a","check","navigator","userAgent","vendor","window","test","substr","getSkeletonForRows","loadingCount","skeleton","rows","cells","i","push"],"sourceRoot":""}