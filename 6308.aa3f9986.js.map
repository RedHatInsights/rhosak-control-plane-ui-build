{"version":3,"file":"6308.aa3f9986.js","mappings":"yQAcMA,EAA+C,WAC3C,IAAAC,GAAM,IAAAC,kBAAgB,EACxBC,GAAO,IAAAC,WAESC,IAClB,IAAAC,cAAe,CAAEC,IAAK,KAAI,gBACtBC,IAAa,IAAAC,aAAc,IAAE,SAC/B,GAAkC,UAAhCC,EAAK,QAAEC,EAAS,YAAEC,EAAS,YAC3BC,IAA0BH,MAAAA,OAAK,EAALA,EAAOI,aAAc,IAAE,sBAEnD,GAAsC,IAAAC,WAAS,GAA9CC,EAAc,KAAEC,EAAiB,KAelCC,EAAsB,SAAOC,GAAc,uD,2EAE3B,OADdC,EAAmBD,MAAAA,OAAc,EAAdA,EAAgBE,GACrB,GAAMlB,MAAAA,OAAI,EAAJA,EAAMI,IAAIe,Y,YAA9BC,EAAc,UAChB,Y,iBASA,O,sBAPMC,EAAc,IAAI,EAAAC,YACtB,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXlB,SAAQ,KAGZY,GAAkB,GAClB,GAAMO,EACHG,yBAAyBP,GACzBQ,MAAK,SAACC,GACL,IAAMV,EAAiBU,MAAAA,OAAQ,EAARA,EAAUC,KACjClB,IACAK,GAAkB,GAClBN,EAAU,iBAA+B,CACvCQ,eAAc,EACdY,MAAO9B,EAAE,0D,cARf,S,oBAzBoB,SAAC+B,G,MACrBC,GACA,QAAkBD,KACpBC,EAAuB,QAAd,EAAAD,EAAMH,gBAAQ,eAAEC,KAAKG,QAEhCzB,GACEA,EAAS,CACPuB,MAAO9B,EAAE,wBACTiC,QAAS,EAAAC,aAAA,OACTC,YAAaH,IA4BbI,C,UACApB,GAAkB,G,+BAKlBqB,EAAoB,WACxB1B,KAGIQ,EAAmBP,MAAAA,OAAqB,EAArBA,EAAuB0B,KAC1CC,EAAY3B,MAAAA,OAAqB,EAArBA,EAAuB2B,UAEzC,OACE,kBAAC,EAAAC,MAAK,CACJpB,GAAG,8BACHa,QAAS,EAAAQ,aAAA,OACTX,MAAU9B,EAAE,oDAAmD,IAC/D0C,QAAQ,EACRC,QAASN,EACTO,SAAU,KACVC,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLC,IAAI,SACJd,QAAQ,UACRe,KAAK,SACLC,QAAS,WAAM,OAAAhC,EAAoBL,IACnCsC,qBAAsBlD,EAAE,6BACxBmD,UAAWpC,GAEVf,EAAE,yBAEL,kBAAC,EAAA8C,OAAM,CAACC,IAAI,SAASd,QAAQ,OAAOgB,QAASZ,GAC1CrC,EAAE,oBAIP,0BACEoD,wBAAyB,CACvBC,OAAQrD,EAAE,6CAA8C,CACtDmB,iBAAgB,EAChBoB,UAAS,SASrB","sources":["webpack://kas-ui/./src/app/modules/ServiceAccounts/dialogs/ResetServiceAccount/ResetServiceAccount.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { useRootModalContext, KAFKA_MODAL_TYPES } from '@app/common';\nimport { isServiceApiError } from '@app/utils';\nimport { getModalAppendTo } from '@app/utils/utils';\nimport { Configuration, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport { useAlert, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\n\nconst ResetServiceAccount: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig() || { kas: {} };\n  const { addAlert } = useAlert() || {};\n  const { store, showModal, hideModal } = useRootModalContext();\n  const { serviceAccountToReset } = store?.modalProps || {};\n\n  const [isModalLoading, setIsModalLoading] = useState(false);\n\n  const handleServerError = (error: unknown) => {\n    let reason: string | undefined;\n    if (isServiceApiError(error)) {\n      reason = error.response?.data.reason;\n    }\n    addAlert &&\n      addAlert({\n        title: t('something_went_wrong'),\n        variant: AlertVariant.danger,\n        description: reason,\n      });\n  };\n\n  const resetServiceAccount = async (serviceAccount) => {\n    const serviceAccountId = serviceAccount?.id;\n    const accessToken = await auth?.kas.getToken();\n    if (accessToken) {\n      try {\n        const apisService = new SecurityApi(\n          new Configuration({\n            accessToken,\n            basePath,\n          })\n        );\n        setIsModalLoading(true);\n        await apisService\n          .resetServiceAccountCreds(serviceAccountId)\n          .then((response) => {\n            const serviceAccount = response?.data;\n            hideModal(); // Close first modal\n            setIsModalLoading(false);\n            showModal(KAFKA_MODAL_TYPES.CREDENTIALS, {\n              serviceAccount,\n              title: t('serviceAccount.reset_service_account_credentials'),\n            });\n          });\n      } catch (error) {\n        handleServerError(error);\n        setIsModalLoading(false);\n      }\n    }\n  };\n\n  const handleModalToggle = () => {\n    hideModal();\n  };\n\n  const serviceAccountId = serviceAccountToReset?.name;\n  const client_id = serviceAccountToReset?.client_id;\n\n  return (\n    <Modal\n      id='reset-service-account-modal'\n      variant={ModalVariant.medium}\n      title={`${t('serviceAccount.reset_service_account_credentials')}?`}\n      isOpen={true}\n      onClose={handleModalToggle}\n      appendTo={getModalAppendTo}\n      actions={[\n        <Button\n          key='create'\n          variant='primary'\n          type='submit'\n          onClick={() => resetServiceAccount(serviceAccountToReset)}\n          spinnerAriaValueText={t('common.submitting_request')}\n          isLoading={isModalLoading}\n        >\n          {t('serviceAccount.reset')}\n        </Button>,\n        <Button key='cancel' variant='link' onClick={handleModalToggle}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <span\n        dangerouslySetInnerHTML={{\n          __html: t('serviceAccount.client_secret_will_be_reset', {\n            serviceAccountId,\n            client_id,\n          }),\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport { ResetServiceAccount };\nexport default ResetServiceAccount;\n"],"names":["ResetServiceAccount","t","useTranslation","auth","useAuth","basePath","useConfig","kas","addAlert","useAlert","store","showModal","hideModal","serviceAccountToReset","modalProps","useState","isModalLoading","setIsModalLoading","resetServiceAccount","serviceAccount","serviceAccountId","id","getToken","accessToken","apisService","SecurityApi","Configuration","resetServiceAccountCreds","then","response","data","title","error","reason","variant","AlertVariant","description","handleServerError","handleModalToggle","name","client_id","Modal","ModalVariant","isOpen","onClose","appendTo","actions","Button","key","type","onClick","spinnerAriaValueText","isLoading","dangerouslySetInnerHTML","__html"],"sourceRoot":""}