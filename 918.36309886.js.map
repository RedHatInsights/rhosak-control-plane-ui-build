{"version":3,"sources":["webpack://kas-ui/./src/app/models/ServiceAccountsModel.ts","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/CreateServiceAccountModal.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsToolbar.tsx","webpack://kas-ui/./src/app/modules/ServiceAccounts/components/ServiceAccountsTableView/ServiceAccountsTableView.tsx"],"names":["this","name","description","CreateServiceAccountModal","isOpen","setIsOpen","newServiceAccount","NewServiceAccount","useState","textInputNameValue","setTextInputNameValue","textInputDescriptionValue","setTextInputDescriptionValue","serviceAccountFormData","setServiceAccountFormData","isFormValid","setIsFormValid","authContext","useContext","AuthContext","basePath","ApiContext","resetForm","handleTextInputName","value","handleTextInputDescription","createServiceAccount","isValid","trim","validateCreateForm","getToken","accessToken","then","response","status","console","log","handleCreateModal","Modal","id","variant","ModalVariant","title","onClose","actions","Button","key","type","onClick","isDisabled","spinnerAriaValueText","isLoading","Form","FormGroup","label","isRequired","fieldId","TextInput","onChange","ServiceAccountsToolbar","filterSelected","setFilterSelected","total","page","perPage","filteredValue","setFilteredValue","t","useTranslation","nameInputRef","useRef","ownerInputRef","isFilterExpanded","setIsFilterExpanded","isNameValid","setIsNameValid","isOwnerValid","setIsOwnerValid","isMaxFilter","nameInputValue","setNameInputValue","ownerInputValue","setOwnerInputValue","mainFilterOptions","disabled","isInputValid","test","updateFilter","filter","removeIfPresent","newFilterValue","Object","assign","filterIndex","findIndex","f","filterKey","filterValue","length","filterValueIndex","splice","push","onFilter","filterType","isExact","onInputPress","event","fieldName","target","tooltipContent","getSelectionForFilter","selectedFilters","map","val","onDeleteChip","category","chip","filterOptions","newFilteredValue","prevFilterValue","filterChip","toString","find","option","chipIndex","onDeleteChipGroup","toggleGroupItems","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","onSelect","_","selection","index","SelectOption","ToolbarFilter","chips","deleteChip","_category","deleteChipGroup","categoryName","toLowerCase","InputGroup","className","validated","ValidatedOptions","placeholder","input","onKeyPress","ref","ButtonVariant","Tooltip","isVisible","content","reference","toolbarItems","item","widgetId","itemCount","isCompact","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","default","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","lg","toggleGroupProps","toggleIcon","breakpoint","ServiceAccountsTableView","expectedTotal","serviceAccountsDataLoaded","serviceAccountItems","onResetCredentials","onDeleteServiceAccount","orderBy","setOrderBy","undefined","tableColumns","transforms","sortable","onSelectKebabDropdownOption","originalData","selectedOption","parentElement","previousSibling","focus","getindexForSortParameter","parameter","tableProps","cells","rows","tableRow","loadingCount","i","Skeleton","forEach","row","preparedTableCells","actionResolver","rowData","_extraData","extraData","additionalProps","getActionResolver","onSort","_event","columnIndex","sortByDirection","getParameterForSortIndex","sortBy","sort","split","direction","SortByDirection","emptyStateProps","EmptyStateVariant","emptyStateIconProps","icon","titleProps","headingLevel","size","TitleSizes","emptyStateBodyProps","body","PaginationVariant"],"mappings":"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","file":"918.36309886.js","sourcesContent":["export class NewServiceAccount {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name;\n    this.description;\n  }\n}\n","import React, {useState, useContext} from 'react';\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Form,\n  FormGroup,\n  TextInput\n} from '@patternfly/react-core';\nimport { AuthContext } from '@app/auth/AuthContext';\nimport { ApiContext } from '@app/api/ApiContext';\nimport { DefaultApi, ServiceAccount } from './../../../../openapi/api';\nimport { NewServiceAccount } from './../../../models/ServiceAccountsModel';\nimport { isValidToken } from '@app/utils';\n\nexport type CreateInstanceModalProps = {\n  isOpen: boolean,\n  setIsOpen: (isOpen: boolean) => void;\n}\n\nconst CreateServiceAccountModal: React.FunctionComponent<CreateInstanceModalProps> = ({isOpen, setIsOpen}: CreateInstanceModalProps) => {\n\n  const newServiceAccount: NewServiceAccount = new NewServiceAccount();\n  newServiceAccount.name = '';\n  newServiceAccount.description = '';\n\n  const [textInputNameValue, setTextInputNameValue] = useState('');\n  const [textInputDescriptionValue, setTextInputDescriptionValue] = useState('');\n  const [serviceAccountFormData, setServiceAccountFormData] = useState<NewServiceAccount>(newServiceAccount);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n\n  const authContext = useContext(AuthContext);\n  const { basePath } = useContext(ApiContext);\n\n  const resetForm = () => {\n    setServiceAccountFormData({ ...serviceAccountFormData, name: '', description: '' });\n    setIsFormValid(true);\n  }\n\n  const handleTextInputName = value => {\n    setIsFormValid(true);\n    setTextInputNameValue(value);\n    setServiceAccountFormData({ ...serviceAccountFormData, name: value });\n  };\n\n  const handleTextInputDescription = value => {\n    setIsFormValid(true);\n    setTextInputDescriptionValue(value);\n    setServiceAccountFormData({ ...serviceAccountFormData, description: value });\n  };\n\n  const validateCreateForm = () => {\n    let isValid = true;\n    const { name, description } = serviceAccountFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n    }\n    if (!description || description.trim() === '') {\n      isValid = false;\n    }\n    return isValid;\n  }\n\n  const createServiceAccount = async () => {\n    let isValid = validateCreateForm();\n    const accessToken = await authContext?.getToken();\n\n    if(!isValid) {\n      setIsFormValid(false);\n    }\n    else {\n      if (isValidToken(accessToken)) {\n        try {\n          const apisService = new DefaultApi({\n            accessToken,\n            basePath,\n        });\n        await apisService.createServiceAccount(serviceAccountFormData).then((response) => {\n          if(response.status >= 200 ) {\n            resetForm();\n            setIsOpen(false);\n          }\n        });\n        } catch (error) {\n          // handleServerError(error);\n          console.log(error);\n        }\n      }\n    }\n  }\n\n  const handleCreateModal = () => {\n    resetForm();\n    setIsOpen(!isOpen);\n  }\n\n  const createForm = () => {\n    return (\n      <Form>\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"form-group-name\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-name\"\n            name=\"text-input-name\"\n            aria-label=\"Input name\"\n            value={textInputNameValue}\n            onChange={handleTextInputName}\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Description\"\n          fieldId=\"form-group-name\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"text-input-description\"\n            name=\"text-input-description\"\n            aria-label=\"Input description\"\n            value={textInputDescriptionValue}\n            onChange={handleTextInputDescription}\n          />\n        </FormGroup>\n      </Form>\n    )\n  }\n  \n  return (\n    <Modal\n      id=\"create-service-account-modal\"\n      variant={ModalVariant.medium}\n      title=\"Create a service account\"\n      description=\"Enter a name and description for your service account\"\n      isOpen={isOpen}\n      onClose={() => handleCreateModal()}\n      actions={[\n        <Button\n          key=\"create\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={() => createServiceAccount()}\n          isDisabled={isFormValid ? false : true}\n          spinnerAriaValueText='submitting_request'\n          isLoading={false}\n        >\n          Create\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={() => handleCreateModal()}>\n          Cancel\n        </Button>\n      ]}\n    >\n      {createForm()}\n    </Modal>\n  )\n}\n\nexport { CreateServiceAccountModal };\n","import React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport FilterIcon from '@patternfly/react-icons/dist/js/icons/filter-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport {\n  ToolbarGroup,\n  ToolbarItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  SelectOptionObject,\n  ToolbarFilter,\n  InputGroup,\n  TextInput,\n  Button,\n  Tooltip,\n  ToolbarChip,\n  ButtonVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/common';\n\nexport type ServiceAccountsToolbarProps = {\n  filterSelected?: string;\n  setFilterSelected: (value: string) => void;\n  total: number;\n  page: number;\n  perPage: number;\n  filteredValue: Array<FilterType>;\n  setFilteredValue: (filteredValue: Array<FilterType>) => void;\n  handleCreateModal: () => void\n};\n\nexport type FilterValue = {\n  value: string;\n  isExact: boolean;\n};\n\nexport type FilterType = {\n  filterKey: string;\n  filterValue: FilterValue[];\n};\n\nconst ServiceAccountsToolbar: React.FC<ServiceAccountsToolbarProps> = ({\n  filterSelected,\n  setFilterSelected,\n  total,\n  page,\n  perPage,\n  filteredValue,\n  setFilteredValue,\n  handleCreateModal\n}: ServiceAccountsToolbarProps) => {\n  const { t } = useTranslation();\n\n  const nameInputRef = useRef<HTMLInputElement>();\n  const ownerInputRef = useRef<HTMLInputElement>();\n\n  const [isFilterExpanded, setIsFilterExpanded] = useState<boolean>(false);\n  const [isNameValid, setIsNameValid] = useState<boolean>(true);\n  const [isOwnerValid, setIsOwnerValid] = useState<boolean>(true);\n  const [isMaxFilter, setIsMaxFilter] = useState<boolean>(false);\n  const [nameInputValue, setNameInputValue] = useState<string | undefined>();\n  const [ownerInputValue, setOwnerInputValue] = useState<string | undefined>();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\n  const mainFilterOptions = [\n    { label: t('name'), value: 'name', disabled: false },\n    { label: t('owner'), value: 'owner', disabled: false },\n  ];\n\n  const onClearAllFilters = () => {\n    setFilteredValue([]);\n  };\n\n  const onToggleFilter = () => {\n    setIsFilterExpanded(!isFilterExpanded);\n  };\n\n  const onNameInputChange = (input?: string) => {\n    setNameInputValue(input);\n    !isNameValid && setIsNameValid(true);\n  };\n\n  const onOwnerInputChange = (input?: string) => {\n    setOwnerInputValue(input);\n    !isOwnerValid && setIsOwnerValid(true);\n  };\n\n  const isInputValid = (value?: string) => {\n    return value ? /^([a-zA-Z0-9-_%]*[a-zA-Z0-9-_%])?$/.test(value.trim()) : true;\n  };\n\n  const updateFilter = (key: string, filter: FilterValue, removeIfPresent: boolean) => {\n    const newFilterValue: FilterType[] = Object.assign([], filteredValue); // a copy for applied filter\n    const filterIndex = newFilterValue.findIndex((f) => f.filterKey === key); // index of current key in applied filter\n    if (filterIndex > -1) {\n      // if filter is present with the current key\n      const filterValue = newFilterValue[filterIndex];\n      if (filterValue.filterValue && filterValue.filterValue.length > 0) {\n        // if some filters are already there in applied filter for same key\n        // index of current filter value in applied filter\n        const filterValueIndex = filterValue.filterValue.findIndex((f) => f.value === filter.value);\n        if (filterValueIndex > -1) {\n          // filter value is already present\n          if (removeIfPresent) {\n            filterValue.filterValue.splice(filterValueIndex, 1); // remove the value\n          } else {\n            return; // skip the duplicate values\n          }\n        } else {\n          // add the filter value to the current applied filter\n          newFilterValue[filterIndex].filterValue.push(filter);\n        }\n      } else {\n        // add the filter value to current applied filter\n        newFilterValue[filterIndex].filterValue = [filter];\n      }\n    } else {\n      // add filter with key and value to the applied filter\n      newFilterValue.push({ filterKey: key, filterValue: [filter] });\n    }\n    setFilteredValue(newFilterValue);\n  };\n\n  const onFilter = (filterType: string) => {\n    if (filterType === 'name' && nameInputValue && nameInputValue.trim() != '') {\n      if (isInputValid(nameInputValue)) {\n        updateFilter('name', { value: nameInputValue, isExact: false }, false);\n        setNameInputValue('');\n      } else {\n        setIsNameValid(false);\n      }\n    } else if (filterType === 'owner' && ownerInputValue && ownerInputValue.trim() != '') {\n      if (isInputValid(ownerInputValue)) {\n        updateFilter('owner', { value: ownerInputValue, isExact: false }, false);\n        setOwnerInputValue('');\n      } else {\n        setIsOwnerValid(false);\n      }\n    }\n  };\n\n  const onInputPress = (event: any) => {\n    if (event.key === 'Enter' && !isMaxFilter) {\n      const fieldName = event?.target?.name;\n      onFilter(fieldName);\n    }\n  };\n\n  const tooltipContent = (fieldName?: string) => {\n    if (isMaxFilter) {\n      return <div>{t('max_filter_message')}</div>;\n    }\n    return <div>{t('input_field_invalid_message', { name: fieldName })}</div>;\n  };\n\n  const onSelect = (_, selection: string | SelectOptionObject) => {\n    setIsFilterExpanded(!isFilterExpanded);\n    setFilterSelected(selection?.toString());\n  };\n\n  const getSelectionForFilter = (key: string) => {\n    const selectedFilters = filteredValue.filter((filter) => filter.filterKey === key);\n    if (selectedFilters.length > 0) {\n      return selectedFilters[0].filterValue.map((val) => val.value);\n    }\n    return [];\n  };\n\n  const onDeleteChip = (category: string, chip: string | ToolbarChip, filterOptions?: Array<any>) => {\n    let newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    const prevFilterValue: FilterValue[] = Object.assign([], newFilteredValue[filterIndex]?.filterValue);\n    let filterChip: string | undefined = chip.toString();\n    /**\n     * Filter chip from filter options\n     */\n    if (filterOptions && filterOptions?.length > 0) {\n      filterChip = filterOptions?.find((option) => option.label === chip.toString())?.value;\n    }\n    /**\n     * Delete selected chip from filter options\n     */\n    const chipIndex = prevFilterValue.findIndex((val) => val.value === filterChip);\n    if (chipIndex >= 0) {\n      newFilteredValue[filterIndex].filterValue.splice(chipIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const onDeleteChipGroup = (category: string) => {\n    const newFilteredValue: FilterType[] = Object.assign([], filteredValue);\n    const filterIndex = newFilteredValue.findIndex((filter) => filter.filterKey === category);\n    if (filterIndex >= 0) {\n      newFilteredValue.splice(filterIndex, 1);\n      setFilteredValue(newFilteredValue);\n    }\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label=\"Select filter\"\n            onToggle={onToggleFilter}\n            selections={filterSelected}\n            isOpen={isFilterExpanded}\n            onSelect={onSelect}\n          >\n            {mainFilterOptions.map((option, index) => (\n              <SelectOption isDisabled={option.disabled} key={index} value={option.value}>\n                {option.label}\n              </SelectOption>\n            ))}\n          </Select>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={getSelectionForFilter('name')}\n          deleteChip={(_category, chip) => onDeleteChip('name', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('name')}\n          categoryName={t('name')}\n        >\n          {filterSelected?.toLowerCase() === 'name' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"name\"\n                  id=\"name-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_name_lower')}\n                  validated={!isNameValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  placeholder={t('filter_by_name_lower')}\n                  onChange={onNameInputChange}\n                  onKeyPress={onInputPress}\n                  value={nameInputValue}\n                  ref={nameInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  isDisabled={!isNameValid || isMaxFilter}\n                  onClick={() => onFilter('name')}\n                  aria-label={t('filter_by_name_lower')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isNameValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isNameValid}\n                    content={tooltipContent('name')}\n                    reference={nameInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={getSelectionForFilter('owner')}\n          deleteChip={(_category, chip) => onDeleteChip('owner', chip)}\n          deleteChipGroup={() => onDeleteChipGroup('owner')}\n          categoryName={t('owner')}\n        >\n          {filterSelected?.toLowerCase() === 'owner' && (\n            <ToolbarItem>\n              <InputGroup className=\"mk--filter-instances__toolbar--text-input\">\n                <TextInput\n                  name=\"owner\"\n                  id=\"owner-input\"\n                  type=\"search\"\n                  aria-label={t('filter_by_owner')}\n                  placeholder={t('filter_by_owner')}\n                  validated={!isOwnerValid || isMaxFilter ? ValidatedOptions.error : ValidatedOptions.default}\n                  onChange={onOwnerInputChange}\n                  onKeyPress={onInputPress}\n                  value={ownerInputValue}\n                  ref={ownerInputRef as React.RefObject<HTMLInputElement>}\n                />\n                <Button\n                  isDisabled={!isOwnerValid || isMaxFilter}\n                  variant={ButtonVariant.control}\n                  onClick={() => onFilter('owner')}\n                  aria-label={t('filter_by_owner')}\n                >\n                  <SearchIcon />\n                </Button>\n                {(!isOwnerValid || isMaxFilter) && (\n                  <Tooltip\n                    isVisible={isMaxFilter || !isOwnerValid}\n                    content={tooltipContent('owner')}\n                    reference={ownerInputRef}\n                  />\n                )}\n              </InputGroup>\n            </ToolbarItem>\n          )}\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </>\n  );\n\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          variant=\"primary\"\n          onClick={handleCreateModal}\n          data-testid={'tableServiceAccounts-buttonCreateServiceAccount'}\n        >\n          {t('serviceAccount.create_service_account')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total && total > 0 && toolbarItems.length === 1) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId=\"pagination-options-menu-top\"\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          isCompact={true}\n          titles={{\n            paginationTitle: t('minimal_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClearAllFilters,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { lg: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: <FilterIcon />, breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ServiceAccountsToolbar };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  IAction,\n  IExtraData,\n  IRowData,\n  ISeparator,\n  IRowCell,\n  sortable,\n  ISortBy,\n  SortByDirection,\n  IExtraColumnData,\n} from '@patternfly/react-table';\nimport { Skeleton, EmptyStateVariant, PaginationVariant, TitleSizes } from '@patternfly/react-core';\nimport { MASPagination, MASTable, MASEmptyState } from '@app/common';\nimport { getLoadingRowsCount } from '@app/utils';\nimport { DefaultApi, ServiceAccountRequest, ServiceAccountListItem } from '../../../../../openapi/api';\nimport { ServiceAccountsToolbar, ServiceAccountsToolbarProps } from './ServiceAccountsToolbar';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport type ServiceAccountsTableViewProps = ServiceAccountsToolbarProps & {\n  expectedTotal: number;\n  serviceAccountsDataLoaded?: boolean;\n  serviceAccountItems?: ServiceAccountListItem[];\n  orderBy?: string;\n  setOrderBy?: (order: string) => void;\n  onResetCredentials?: (serviceAccount: ServiceAccountListItem) => void;\n  onDeleteServiceAccount?: (serviceAccount: ServiceAccountListItem) => void;\n  handleCreateModal: () => void\n};\n\nconst ServiceAccountsTableView: React.FC<ServiceAccountsTableViewProps> = ({\n  page,\n  perPage,\n  expectedTotal,\n  total,\n  serviceAccountsDataLoaded,\n  serviceAccountItems,\n  onResetCredentials,\n  onDeleteServiceAccount,\n  orderBy,\n  setOrderBy,\n  filteredValue,\n  setFilteredValue,\n  filterSelected,\n  setFilterSelected,\n  handleCreateModal\n}: ServiceAccountsTableViewProps) => {\n  const { t } = useTranslation();\n\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n\n  const tableColumns = [\n    { title: t('common.name'), transforms: [sortable] },\n    { title: t('common.owner'), transforms: [sortable] },\n    { title: t('common.description') },\n  ];\n\n  const onSelectKebabDropdownOption = (event: any, originalData: ServiceAccountListItem, selectedOption: string) => {\n    if (selectedOption === 'reset-credentials') {\n      onResetCredentials && onResetCredentials(originalData);\n    } else if (selectedOption === 'delete-account') {\n      onDeleteServiceAccount && onDeleteServiceAccount(originalData);\n    }\n\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    const loadingCount: number = getLoadingRowsCount(page, perPage, expectedTotal);\n    if (!serviceAccountsDataLoaded) {\n      // for loading state\n      const cells: (React.ReactNode | IRowCell)[] = [];\n      //get exact number of skeleton cells based on total columns\n      for (let i = 0; i < tableColumns.length; i++) {\n        cells.push({ title: <Skeleton /> });\n      }\n      // get exact of skeleton rows based on expected total count of instances\n      for (let i = 0; i < loadingCount; i++) {\n        tableRow.push({\n          cells: cells,\n        });\n      }\n      return tableRow;\n    }\n\n    serviceAccountItems?.forEach((row: IRowData) => {\n      const { name, owner, description } = row;\n      tableRow.push({\n        cells: [name, 'owner-test', description],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const getActionResolver = (rowData: IRowData, extraData: IExtraData) => {\n    if (!serviceAccountsDataLoaded) {\n      return [];\n    }\n\n    const originalData: ServiceAccountListItem = rowData.originalData;\n    const isUserSameAsLoggedIn = true; //originalData.owner === loggedInUser;\n    let additionalProps: any;\n\n    if (!isUserSameAsLoggedIn) {\n      additionalProps = {\n        tooltip: true,\n        tooltipProps: {\n          position: 'left',\n          content: t('serviceAccount.no_permission_to_delete_service_account'),\n        },\n        isDisabled: true,\n        style: {\n          pointerEvents: 'auto',\n          cursor: 'default',\n        },\n      };\n    }\n\n    const resolver: (IAction | ISeparator)[] = [\n      {\n        title: t('common.reset_credentials'),\n        id: 'reset-credentials',\n        ['data-testid']: 'tableServiceAccounts-actionResetCredentials',\n        onClick: (event: any) => onSelectKebabDropdownOption(event, originalData, 'reset-credentials'),\n      },\n      {\n        title: t('serviceAccount.delete_service_account'),\n        id: 'delete-account',\n        ['data-testid']: 'tableServiceAccounts-actionDeleteAccount',\n        onClick: (event: any) =>\n          isUserSameAsLoggedIn && onSelectKebabDropdownOption(event, originalData, 'delete-account'),\n        ...additionalProps,\n      },\n    ];\n    return resolver;\n  };\n\n  const actionResolver = (rowData: IRowData, _extraData: IExtraData) => {\n    return getActionResolver(rowData, _extraData);\n  };\n\n  const getParameterForSortIndex = (index: number) => {\n    switch (index) {\n      case 0:\n        return 'name';\n      case 1:\n        return 'owner';\n      case 2:\n        return 'description';\n      default:\n        return '';\n    }\n  };\n\n  const getindexForSortParameter = (parameter: string) => {\n    switch (parameter.toLowerCase()) {\n      case 'name':\n        return 0;\n      case 'owner':\n        return 1;\n      case 'description':\n        return 2;\n      default:\n        return undefined;\n    }\n  };\n\n  const onSort = (_event: any, columnIndex: number, sortByDirection: SortByDirection, extraData: IExtraColumnData) => {\n    setOrderBy && setOrderBy(`${getParameterForSortIndex(columnIndex)} ${sortByDirection}`);\n  };\n\n  const sortBy = (): ISortBy | undefined => {\n    const sort: string[] = orderBy?.split(' ') || [];\n    if (sort.length > 1) {\n      return {\n        index: getindexForSortParameter(sort[0]),\n        direction: sort[1] === SortByDirection.asc ? SortByDirection.asc : SortByDirection.desc,\n      };\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ServiceAccountsToolbar\n        filterSelected={filterSelected}\n        setFilterSelected={setFilterSelected}\n        total={total}\n        page={page}\n        perPage={perPage}\n        filteredValue={filteredValue}\n        setFilteredValue={setFilteredValue}\n        handleCreateModal={handleCreateModal}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('serviceAccount.service_account_list'),\n          actionResolver: actionResolver,\n          onSort: onSort,\n          sortBy: sortBy(),\n        }}\n      />\n      {serviceAccountItems && serviceAccountItems?.length < 1 && serviceAccountsDataLoaded && (\n        <MASEmptyState\n          emptyStateProps={{\n            variant: EmptyStateVariant.full,\n          }}\n          emptyStateIconProps={{\n            icon: SearchIcon,\n          }}\n          titleProps={{\n            title: t('no_results_found'),\n            headingLevel: 'h2',\n            size: TitleSizes.lg,\n          }}\n          emptyStateBodyProps={{\n            body: t('no_results_match_the_filter_criteria'),\n          }}\n        />\n      )}\n      {total && total > 0 && (\n        <MASPagination\n          widgetId=\"pagination-options-menu-bottom\"\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('full_pagination'),\n            perPageSuffix: t('per_page_suffix'),\n            toFirstPage: t('to_first_page'),\n            toPreviousPage: t('to_previous_page'),\n            toLastPage: t('to_last_page'),\n            toNextPage: t('to_next_page'),\n            optionsToggle: t('options_toggle'),\n            currPage: t('curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { ServiceAccountsTableView };\n"],"sourceRoot":""}